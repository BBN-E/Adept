<?xml version="1.0" encoding="UTF-8"?>


<!--Designed and generated by Altova StyleVision Basic Edition 2014 rel. 2 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link map math sps xbrldi xbrli xlink xs xsi">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Basic Edition 2014 rel. 2 sp1 (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=9"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<script type="text/javascript">
					<xsl:comment>
var Altova = {};
Altova.ADD_ROW_EXPAND_COLLAPSE_BUTTONS_CLASS = &quot;altova-add-row-expand-collapse-buttons&quot;;
Altova.ADD_COLUMN_CLOSE_BUTTONS_CLASS = &quot;altova-add-column-close-buttons&quot;;
Altova.EXPAND_COLLAPSE_LEVEL_CLASS = &quot;altova-expand-collapse-level-&quot;;
Altova.COLLAPSED_ATTR = &quot;altova_collapsed&quot;;
Altova.HIDDEN_ATTR = &quot;altova_hidden&quot;;
Altova.init = function() {
    var tables = document.getElementsByTagName( &quot;table&quot; );
	if ( tables.length == 0 )
	    tables = document.getElementsByTagName( &quot;TABLE&quot; );
	for (var i = tables.length - 1; i &gt;= 0; i = i - 1)
	{
		var table = tables[ i ];
		Altova.Button.initRowExpandCollapseButtons( table );
		Altova.Button.initColumnCloseButtons( table );
	}
};
Altova.canAddRowExpandCollapseButtons = function(node) {
    try {
        var classNames = node.className.split(&apos; &apos;);
        for (var i = 0; i &lt; classNames.length; ++i) {
            if (classNames[i] == Altova.ADD_ROW_EXPAND_COLLAPSE_BUTTONS_CLASS)
                return true;
        }
        return false;
    }
    catch (e) {
        return false;
    }
};
Altova.canAddColumnCloseButtons = function( node ) {
	try {
	    var classNames = node.className.split(&apos; &apos;);
	    for (var i = 0; i &lt; classNames.length; ++i) {
	        if (classNames[i] == Altova.ADD_COLUMN_CLOSE_BUTTONS_CLASS)
	            return true;
	    }
	    return false;
	}
	catch ( e )
	{
		return false;
	}
};
Altova.getExpandCollapseLevel = function( node ) {
	try {
	    var classNames = node.className.split(&apos; &apos;);
	    for (var i = 0; i &lt; classNames.length; ++i) {
	        if (classNames[i].indexOf( Altova.EXPAND_COLLAPSE_LEVEL_CLASS ) == 0 )
	            return classNames[i].substr( Altova.EXPAND_COLLAPSE_LEVEL_CLASS.length ) * 1;
	    }
	    return 0;
	}
	catch ( e )
	{
		return 0;
	}
};
Altova.isCollapsed = function( node ) {
	try
	{
		if ( node.getAttribute( Altova.COLLAPSED_ATTR ) != null &amp;&amp; node.getAttribute( Altova.COLLAPSED_ATTR ) != &quot;&quot; )
			return node.getAttribute( Altova.COLLAPSED_ATTR ) == &quot;true&quot;;
		else
			return false;
	}
	catch ( e )
	{
		return false;
	}
};
Altova.setIsCollapsed = function( node, isCollapsed ) {
	node.setAttribute( Altova.COLLAPSED_ATTR, isCollapsed ? &quot;true&quot; : &quot;false&quot; );
};
Altova.isHidden = function( node ) {
	try
	{
		if ( node.getAttribute( Altova.HIDDEN_ATTR ) != null &amp;&amp; node.getAttribute( Altova.HIDDEN_ATTR ) != &quot;&quot; )
			return node.getAttribute( Altova.HIDDEN_ATTR ) == &quot;true&quot;;
		else
			return false;
	}
	catch ( e )
	{
		return false;
	}
};
Altova.setIsHidden = function( node, isHidden ) {
	node.setAttribute( Altova.HIDDEN_ATTR, isHidden ? &quot;true&quot; : &quot;false&quot; );
};
Altova.Button = {};
Altova.Button.BUTTON_EXPAND = 0;
Altova.Button.BUTTON_COLLAPSE = 1;
Altova.Button.BUTTON_CLOSE = 2;
Altova.Button.BUTTON_ADD = 3;
Altova.Button.BUTTON_TYPE_ATTR = &quot;altova_button-type&quot;;
Altova.Button.createNewButton = function( type, containerType ) {
	var button = document.createElement( containerType );
	Altova.Button.changeButtonTo( button, type );
	return button;
};
Altova.Button.changeButtonTo = function( button, type ) {
	button.setAttribute( Altova.Button.BUTTON_TYPE_ATTR, type );
	if ( type == Altova.Button.BUTTON_EXPAND )
	{
		button.innerHTML =
			&quot;&lt;table style=\&quot;display: inline;\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\&quot;font-size: 0pt; width: 9px; height: 9px\&quot;&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 9px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 5px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +	
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +	
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 9px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
			&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot;;
	}
	else if ( type == Altova.Button.BUTTON_COLLAPSE )
	{
		button.innerHTML =
			&quot;&lt;table style=\&quot;display: inline;\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\&quot;font-size: 0pt; width: 9px; height: 9px\&quot;&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 9px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 5px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +	
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +	
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;9\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 9px; height: 1px; background-color: rgb(204, 204, 204);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
			&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot;;
	}
	else if ( type == Altova.Button.BUTTON_CLOSE )
	{
		button.innerHTML =
			&quot;&lt;table style=\&quot;display: inline;\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\&quot;font-size: 0pt; width: 7px; height: 7px\&quot;&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 5px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 5px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 1px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;7\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
			&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot;;
	}
	else if ( type == Altova.Button.BUTTON_ADD )
	{
		button.innerHTML =
			&quot;&lt;table style=\&quot;display: inline;\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\&quot;font-size: 0pt; width: 8px; height: 8px\&quot;&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 8px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 8px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
				&quot;&lt;table cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;8\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 2px; height: 1px; background-color: rgb(153, 153, 153);\&quot;/&gt;&quot; +
					&quot;&lt;td style=\&quot;font-size: 0pt; width: 3px; height: 1px;\&quot;/&gt;&quot; +
				&quot;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot; +
			&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot;;
	}
};
Altova.Button.containsButton = function( node, type ) {
	for ( var i = 0; i &lt; node.childNodes.length; ++i )
	{
		var child = node.childNodes[ i ];
		try
		{
			if ( child.getAttribute( Altova.Button.BUTTON_TYPE_ATTR ) != null &amp;&amp; child.getAttribute( Altova.Button.BUTTON_TYPE_ATTR ) != &quot;&quot; )
					if ( child.getAttribute( Altova.Button.BUTTON_TYPE_ATTR ) == type )
						return true;
		}
		catch ( e )
		{
		}
	}
	return false;
};
Altova.Button.makeButtonHot = function( button, hot ) {
	var maincell = button.firstChild.rows[ 0 ].cells[ 0 ];
	for ( var i = 0; i &lt; maincell.childNodes.length; ++i )
	{
		var cells = maincell.childNodes[ i ].rows[ 0 ].cells;
		for ( var j = 0; j &lt; cells.length; ++j )
		{
			var cell = cells[ j ];
			if ( cell.style.backgroundColor != &quot;&quot; )
			{
				if ( hot )
					cell.style.backgroundColor = &quot;#E71818&quot;;
				else
					cell.style.backgroundColor = &quot;#999999&quot;;
			}
		}
	}
};
Altova.Button.isButtonOfType = function( button, type ) {
	return button.getAttribute( Altova.Button.BUTTON_TYPE_ATTR ) == type;
};
Altova.Button.generateOnClickExpandOrCollapseButton = function( row, button ) {
	return function() { Altova.Button.onRowExpandOrCollapse( row, button ); }
};
Altova.Button.generateOnClickCloseButton = function( table, index, button ) {
	return function() { Altova.Button.onColumnHide( table, index, button ); }
};
Altova.Button.generateOnClickAddButton = function( table ) {
	return function() { Altova.Button.onColumnAddAll( table ); }
};
Altova.Button.generateOnMouseOverButton = function( button ) {
	return function() { Altova.Button.makeButtonHot( button, true ); }
};
Altova.Button.generateOnMouseOutButton = function( button ) {
	return function() { Altova.Button.makeButtonHot( button, false ); }
};
Altova.Button.onRowExpandOrCollapse = function( row, button ) {
	var bCollapse = Altova.Button.isButtonOfType( button, Altova.Button.BUTTON_COLLAPSE );
	if ( bCollapse )
		Altova.Button.changeButtonTo( button, Altova.Button.BUTTON_EXPAND );
	else
		Altova.Button.changeButtonTo( button, Altova.Button.BUTTON_COLLAPSE );

	Altova.setIsCollapsed( row, bCollapse );

	var nLevel = Altova.getExpandCollapseLevel( row );

	var nStopAtLevel = -1;
	var nextRow = row;
	while ( true )
	{
		nextRow = nextRow.nextSibling;
		while ( nextRow &amp;&amp; nextRow.nodeName != &quot;tr&quot; &amp;&amp; nextRow.nodeName != &quot;TR&quot; )
			nextRow = nextRow.nextSibling;
		if ( !nextRow )
			break;
		
		var nOtherLevel = Altova.getExpandCollapseLevel( nextRow );

		if ( nOtherLevel &lt;= nLevel  )
			break;

		if ( !Altova.isHidden( nextRow ) )
		{
			if ( nStopAtLevel == -1 || nOtherLevel &lt; nStopAtLevel )
			{
				if ( bCollapse )
					nextRow.style.display = &quot;none&quot;;
				else
					nextRow.style.display = &quot;&quot;;

				if ( Altova.isCollapsed( nextRow ) )
					nStopAtLevel = nOtherLevel + 1;
				else
					nStopAtLevel = -1;
			}
		}
	}
};
Altova.Button.onColumnHide = function( table, index, button ) {
	table.rows[ 0 ].cells[ 0 ].firstChild.style.display = &quot;&quot;;

	var rows = table.rows;
	for ( var i = 0; i &lt; rows.length; ++i )
	{
		var cell = rows[ i ].cells[ index ];
		Altova.setIsHidden( cell, true );
		cell.style.display = &quot;none&quot;;
	}

	var lastVisibleCell = null;
	for ( var i = 1; i &lt; table.rows[ 0 ].cells.length; ++i )
	{
		var cell = table.rows[ 0 ].cells[ i ];
		if ( !Altova.isHidden( cell ) )
		{
			if ( lastVisibleCell == null )
				lastVisibleCell = cell;
			else
			{
				lastVisibleCell = null;
				break;
			}
		}
	}	
	if ( lastVisibleCell != null )
		lastVisibleCell.firstChild.style.display = &quot;none&quot;;
};
Altova.Button.onColumnAddAll = function( table ) {
	table.rows[ 0 ].cells[ 0 ].firstChild.style.display = &quot;none&quot;;

	var rows = table.rows;
	for ( var i = 0; i &lt; rows.length; ++i )
	{
		var row = rows[ i ];
		for ( var j = 1; j &lt; row.cells.length; ++j )
		{
			var cell = row.cells[ j ];
	
			Altova.setIsHidden( cell, false );
			cell.style.display = &quot;&quot;;
			
			if ( i == 0 )
				cell.firstChild.style.display = &quot;&quot;;
		}
	}
};
Altova.Button.initRowExpandCollapseButtons = function( table ) {
	if ( Altova.canAddRowExpandCollapseButtons( table ) )
	{
		var rows = table.tBodies[ 0 ].rows;
		for ( var i = 0; i &lt; rows.length; ++i )
		{
			var cell = rows[ i ].cells[ 0 ];
			var button = null;
	
			if ( i + 1 &lt; rows.length )
			{
				var nLevel = Altova.getExpandCollapseLevel( rows[ i ] );
				var nNextLevel = Altova.getExpandCollapseLevel( rows[ i + 1 ] );
	
				if ( nNextLevel &gt; nLevel )
				{
					button = Altova.Button.createNewButton( Altova.Button.BUTTON_COLLAPSE, &quot;span&quot; );
					button.style.marginRight = &quot;3px&quot;;
					button.onclick = Altova.Button.generateOnClickExpandOrCollapseButton( rows[ i ], button );
					cell.insertBefore( button, cell.firstChild );
				}
			}
	
			if ( button == null )
			{
				button = document.createElement( &quot;span&quot; );
				button.innerHTML = &quot;&lt;table style=\&quot;display: inline;\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot; width=\&quot;12\&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\&quot;font-size: 0pt; width: 12px; height: 1px\&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&quot;;
				cell.insertBefore( button, cell.firstChild );
			}
		}
	}
};
Altova.Button.initColumnCloseButtons = function( table ) {
	if ( Altova.canAddColumnCloseButtons( table ) )
	{
		if ( table.rows[ 0 ].cells.length &gt; 2 )
		{				
			var cells = table.rows[ 0 ].cells;
			for ( var i = 0; i &lt; cells.length; ++i )
			{
				var cell = cells[ i ];
				var button = null;
				
				cell.vAlign = &quot;top&quot;;
				
				if ( i == 0 )
				{
					button = Altova.Button.createNewButton( Altova.Button.BUTTON_ADD, &quot;div&quot; );
					button.onclick = Altova.Button.generateOnClickAddButton( table );
					button.onmouseover = Altova.Button.generateOnMouseOverButton( button );
					button.onmouseout = Altova.Button.generateOnMouseOutButton( button );
					button.style.display = &quot;none&quot;;
					button.style.textAlign = &quot;right&quot;;
					button.title = &quot;Show all columns&quot;;
					table.rows[ 0 ].cells[ 0 ].insertBefore( button, table.rows[ 0 ].cells[ 0 ].firstChild );
				}
				else
				{
					button = Altova.Button.createNewButton( Altova.Button.BUTTON_CLOSE, &quot;div&quot; );
					button.onclick = Altova.Button.generateOnClickCloseButton( table, i, button );
					button.onmouseover = Altova.Button.generateOnMouseOverButton( button );
					button.onmouseout = Altova.Button.generateOnMouseOutButton( button );
					button.style.textAlign = &quot;right&quot;;
					button.title = &quot;Hide column&quot;;
				}

				if ( cell.firstChild )
					cell.insertBefore( button, cell.firstChild );
				else
					cell.appendChild( button );
			}
		}
	}
};
//</xsl:comment>
				</script>
				<script type="text/javascript">
					<xsl:comment>
function highlightSource(row) {
	var content = document.getElementById(&quot;documentContent&quot;);
	var regex = /(&lt;([^&gt;]+)&gt;)/ig;
	var cleanedContent = content.innerHTML.replace(regex, &quot;&quot;);
	
	var startIndex = row.children[1].innerHTML;
	startIndex = parseInt(startIndex);
	var endIndex = row.children[2].innerHTML;
	endIndex = parseInt(endIndex);

	var contentArray = cleanedContent.split(/\s+/);
	
	var highlightedContent = &quot;&quot;;
	for(var i = 0; i &lt; contentArray.length; i++) {
		if(i == startIndex) {
			highlightedContent += &quot;&lt;span style=\&quot;background-color: yellow\&quot;&gt;&quot;;
		} 
		if (i  == (1 + endIndex) ) {
			highlightedContent += &quot;&lt;/span&gt;&quot;;
		}
		highlightedContent += (&quot; &quot; + contentArray[i]);
	}

	content.innerHTML = highlightedContent;
	
}
//</xsl:comment>
				</script>
				<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body style="color:#222222; " onload="Altova.init();">
				<xsl:for-each select="$XML">
					<xsl:for-each select="adept.common.HltContentContainer">
						<br/>
						<a>
							<xsl:attribute name="name">
								<xsl:value-of select="&apos;Table of Contents&apos;"/>
							</xsl:attribute>
						</a>
						<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
							<xsl:text>Table of Contents</xsl:text>
						</span>
						<ul>
							<li>
								<xsl:choose>
									<xsl:when test="count(//tokenStream/adept.common.TokenStream/default/document) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Document Value&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Document Value&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Document Value&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Document Value&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Document Value&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Document</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Document</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(coreferences/adept.common.Coreference/resolvedEntityMentions/adept.common.EntityMention) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Entity Mentions&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Entity Mentions&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Entity Mentions&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Entity Mentions&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Entity Mentions&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Entity Mentions and Coreferences</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Entity Mentions and Coreferences</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(relations) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Relations&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Relations&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Relations&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Relations&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Relations&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Relations</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Relations</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(sarcasms) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Sarcasms&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Sarcasms&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Sarcasms&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Sarcasms&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Sarcasms&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Sarcasms</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Sarcasms</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(opinions) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Opinions&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Opinions&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Opinions&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Opinions&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Opinions&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Opinions</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Opinions</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(committedBeliefs) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Committed Beliefs&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Committed Beliefs&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Committed Beliefs&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Committed Beliefs&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Committed Beliefs&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Committed Beliefs</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Committed Beliefs</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(syntacticChunks) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Syntactic Chunks&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Syntactic Chunks&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Syntactic Chunks&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Syntactic Chunks&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Syntactic Chunks&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Syntactic Chunks</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Syntactic Chunks</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(paraphrases) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Paraphrases&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Paraphrases&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Paraphrases&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Paraphrases&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Paraphrases&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Paraphrases</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Paraphrases</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(triples) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Triples&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Triples&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Triples&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Triples&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Triples&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Triples</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Triples</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
							</li>
							<li>
								<xsl:choose>
									<xsl:when test="count(/descendant::tokenStream[1]) &gt; 0">
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Tokens&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Tokens&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Tokens&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Tokens&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Tokens&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>Tokens</xsl:text>
											</span>
										</a>
									</xsl:when>
									<xsl:otherwise>
										<span>
											<xsl:text>Tokens</xsl:text>
										</span>
									</xsl:otherwise>
								</xsl:choose>
							</li>
						</ul>
						<xsl:for-each select="//tokenStream">
							<xsl:for-each select="adept.common.TokenStream">
								<xsl:for-each select="default">
									<xsl:for-each select="document">
										<center style="background:#323d40; color:white; ">
											<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
												<xsl:text>Document</xsl:text>
											</span>
											<span>
												<xsl:text>&#160;&#160; </xsl:text>
											</span>
											<a>
												<xsl:choose>
													<xsl:when test="not(string(&apos;help.htm#Document&apos;))">
														<xsl:attribute name="href">
															<xsl:text>#</xsl:text>
														</xsl:attribute>
													</xsl:when>
													<xsl:when test="substring(string(&apos;help.htm#Document&apos;), 1, 1) = '#'">
														<xsl:attribute name="href">
															<xsl:value-of select="&apos;help.htm#Document&apos;"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:otherwise>
														<xsl:attribute name="href">
															<xsl:if test="substring(string(&apos;help.htm#Document&apos;), 2, 1) = ':'">
																<xsl:text>file:///</xsl:text>
															</xsl:if>
															<xsl:value-of select="translate(string(&apos;help.htm#Document&apos;), '&#x5c;', '/')"/>
														</xsl:attribute>
													</xsl:otherwise>
												</xsl:choose>
												<img align="bottom">
													<xsl:attribute name="src">
														<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
													<xsl:attribute name="alt"/>
												</img>
											</a>
										</center>
										<a>
											<xsl:attribute name="name">
												<xsl:value-of select="&apos;Document Value&apos;"/>
											</xsl:attribute>
										</a>
										<br/>
										<span>
											<xsl:text>Type: </xsl:text>
										</span>
										<xsl:for-each select="docType">
											<xsl:apply-templates/>
										</xsl:for-each>
										<br/>
										<span>
											<xsl:text>URI: </xsl:text>
										</span>
										<xsl:for-each select="uri">
											<xsl:apply-templates/>
										</xsl:for-each>
										<br/>
										<span>
											<xsl:text>Language: </xsl:text>
										</span>
										<xsl:for-each select="language">
											<xsl:apply-templates/>
										</xsl:for-each>
										<br/>
										<span>
											<xsl:text>Headline: </xsl:text>
										</span>
										<xsl:for-each select="headline">
											<xsl:apply-templates/>
										</xsl:for-each>
										<br/>
										<br/>
										<xsl:for-each select="value">
											<span id="documentContent">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
										<br/>
										<br/>
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#Table of Contents&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<center>
												<span>
													<xsl:text>Go to Top of Page</xsl:text>
												</span>
											</center>
										</a>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="coreferences">
							<xsl:for-each select="adept.common.Coreference">
								<xsl:for-each select="resolvedEntityMentions">
									<a>
										<xsl:attribute name="name">
											<xsl:value-of select="&apos;Entity Mentions&apos;"/>
										</xsl:attribute>
									</a>
									<br/>
									<center style="background:#323d40; color:white; ">
										<span style="font-family:Arial; font-size:14pt; font-weight:bolder; ">
											<xsl:text>Entity Mentions and Coreferences</xsl:text>
										</span>
										<span>
											<xsl:text>&#160;&#160; </xsl:text>
										</span>
										<a>
											<xsl:choose>
												<xsl:when test="not(string(&apos;help.htm#Entity_Mentions&apos;))">
													<xsl:attribute name="href">
														<xsl:text>#</xsl:text>
													</xsl:attribute>
												</xsl:when>
												<xsl:when test="substring(string(&apos;help.htm#Entity_Mentions&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;help.htm#Entity_Mentions&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;help.htm#Entity_Mentions&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;help.htm#Entity_Mentions&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<img align="bottom">
												<xsl:attribute name="src">
													<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
														<xsl:text>file:///</xsl:text>
													</xsl:if>
													<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
												</xsl:attribute>
												<xsl:attribute name="alt"/>
											</img>
										</a>
									</center>
									<center>
										<table style="border-collapse:collapse; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
											<xsl:variable name="altova:CurrContextGrid_0" select="."/>
											<thead style="margin:2px; " align="left">
												<tr align="left" bgcolor="#697376">
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; ">
														<span style="color:white; ">
															<xsl:text>ResolvedEntityId</xsl:text>
														</span>
													</th>
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; ">
														<span style="color:white; ">
															<xsl:text>SequenceId</xsl:text>
														</span>
													</th>
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; text-align:left; " width="384">
														<span style="color:white; ">
															<xsl:text>Entity Mention Value</xsl:text>
														</span>
													</th>
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; ">
														<span style="color:white; ">
															<xsl:text>Begin</xsl:text>
														</span>
													</th>
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; ">
														<span style="color:white; ">
															<xsl:text>End</xsl:text>
														</span>
													</th>
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; ">
														<span style="color:white; ">
															<xsl:text>MentionType</xsl:text>
														</span>
													</th>
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; ">
														<span style="color:white; ">
															<xsl:text>EntityType</xsl:text>
														</span>
													</th>
													<th style="border-bottom:solid gray thin; border-bottom-width:thin; border-left:solid gray thin; border-top:solid gray thin; " width="384">
														<span style="color:white; ">
															<xsl:text>Context</xsl:text>
														</span>
													</th>
													<xsl:variable name="bColumnCondition_0x95D61D0">
														<xsl:for-each select="$altova:CurrContextGrid_0">
															<xsl:value-of select="/adept.common.HltContentContainer/coreferences/adept.common.Coreference/resolvedEntityMentions/adept.common.EntityMention[1]/attributes/entry[2]/string[2]!=0"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:if test="$bColumnCondition_0x95D61D0 = 'true'">
														<th style="border-bottom:solid gray thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; " width="384">
															<span style="color:white; ">
																<xsl:text>Wikipedia URL</xsl:text>
															</span>
														</th>
													</xsl:if>
												</tr>
											</thead>
											<tbody>
												<xsl:for-each select="adept.common.EntityMention[following::adept.common.EntityMention]">
													<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
													<xsl:variable name="wikiEntity" select="attributes/entry/string[2][contains( . ,  &quot;http://&quot; )]"/>
													<xsl:variable name="wikiEntityName" select="translate(substring(attributes/entry[2]/string[2],30),&quot;_&quot;,&quot; &quot;)"/>
													<tr bgcolor="{$color}" onclick="highlightSource(this)" class="altova-expand-collapse-level-1">
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; " align="center">
															<xsl:for-each select="entityIdDistribution">
																<xsl:for-each select="entry">
																	<xsl:for-each select="long">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</td>
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; " align="center">
															<xsl:for-each select="sequenceId">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; margin-right:5px; text-align:left; " width="384">
															<xsl:for-each select="value">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; " align="center">
															<xsl:for-each select="tokenOffset">
																<xsl:for-each select="begin">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:for-each>
														</td>
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; " align="center">
															<xsl:for-each select="tokenOffset">
																<xsl:for-each select="end">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:for-each>
														</td>
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; " align="center">
															<xsl:for-each select="mentionType">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; ">
															<xsl:for-each select="entityType">
																<xsl:apply-templates/>
															</xsl:for-each>
														</td>
														<td style="border-bottom:solid gray thin; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; text-align:left; " width="384">
															<xsl:for-each select="context">
																<xsl:for-each select="value">
																	<xsl:apply-templates/>
																</xsl:for-each>
															</xsl:for-each>
														</td>
														<xsl:variable name="bColumnCondition_0x95D61D0">
															<xsl:for-each select="$altova:CurrContextGrid_0">
																<xsl:value-of select="/adept.common.HltContentContainer/coreferences/adept.common.Coreference/resolvedEntityMentions/adept.common.EntityMention[1]/attributes/entry[2]/string[2]!=0"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:if test="$bColumnCondition_0x95D61D0 = 'true'">
															<td style="border-bottom:solid gray thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; " width="384">
																<a>
																	<xsl:choose>
																		<xsl:when test="not(string(attributes/entry/string[starts-with(.,&quot;http://&quot;)]))">
																			<xsl:attribute name="href">
																				<xsl:text>#</xsl:text>
																			</xsl:attribute>
																		</xsl:when>
																		<xsl:when test="substring(string(attributes/entry/string[starts-with(.,&quot;http://&quot;)]), 1, 1) = '#'">
																			<xsl:attribute name="href">
																				<xsl:value-of select="attributes/entry/string[starts-with(.,&quot;http://&quot;)]"/>
																			</xsl:attribute>
																		</xsl:when>
																		<xsl:otherwise>
																			<xsl:attribute name="href">
																				<xsl:if test="substring(string(attributes/entry/string[starts-with(.,&quot;http://&quot;)]), 2, 1) = ':'">
																					<xsl:text>file:///</xsl:text>
																				</xsl:if>
																				<xsl:value-of select="translate(string(attributes/entry/string[starts-with(.,&quot;http://&quot;)]), '&#x5c;', '/')"/>
																			</xsl:attribute>
																		</xsl:otherwise>
																	</xsl:choose>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																	<span>
																		<xsl:value-of select="$wikiEntityName"/>
																	</span>
																</a>
															</td>
														</xsl:if>
													</tr>
												</xsl:for-each>
											</tbody>
										</table>
									</center>
									<a>
										<xsl:choose>
											<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
												<xsl:attribute name="href">
													<xsl:text>#</xsl:text>
												</xsl:attribute>
											</xsl:when>
											<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
												<xsl:attribute name="href">
													<xsl:value-of select="&apos;#Table of Contents&apos;"/>
												</xsl:attribute>
											</xsl:when>
											<xsl:otherwise>
												<xsl:attribute name="href">
													<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
														<xsl:text>file:///</xsl:text>
													</xsl:if>
													<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
												</xsl:attribute>
											</xsl:otherwise>
										</xsl:choose>
										<center>
											<span>
												<xsl:text>Go to Top of&#160; Page</xsl:text>
											</span>
										</center>
									</a>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="relations">
							<a>
								<xsl:attribute name="name">
									<xsl:value-of select="&apos;Relations&apos;"/>
								</xsl:attribute>
							</a>
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
									<xsl:text>Relations</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Relations&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Relations&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Relations&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Relations&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Relations&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-collapse:collapse; border-left:solid gray thin; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
									<xsl:variable name="altova:CurrContextGrid_1" select="."/>
									<thead style="border-collapse:collapse; " align="left">
										<tr align="left" bgcolor="#697376">
											<th>
												<span style="color:white; ">
													<xsl:text>RelationId</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Relation Type</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Begin</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>End</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Argument Value</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Argument Type</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Confidence</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Context</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="adept.common.Relation">
											<xsl:variable name="ttext" select="translate(tupleType,&quot;-&quot;,&quot; &quot;)"/>
											<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
											<tr style="height:2.38in; " bgcolor="{$color}" class="altova-expand-collapse-level-1">
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; border-right:solid gray thin; " align="center">
													<xsl:for-each select="relationId">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; border-right:solid gray thin; text-align:left; " align="center">
													<xsl:for-each select="tupleType">
														<xsl:variable name="text" select="translate(tupleType  ,  &quot;-&quot; ,  &quot; &quot; )"/>
														<span>
															<xsl:text>
</xsl:text>
														</span>
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; border-right:solid gray thin; " align="center">
													<table>
														<xsl:variable name="altova:CurrContextGrid_2" select="."/>
														<tbody>
															<xsl:for-each select="arguments">
																<xsl:for-each select="adept.common.Argument">
																	<xsl:for-each select="argumentDistribution">
																		<xsl:for-each select="list">
																			<xsl:for-each select="adept.common.Pair">
																				<xsl:for-each select="l">
																					<xsl:for-each select="tokenOffset">
																						<xsl:for-each select="begin">
																							<tr bgcolor="{$color}">
																								<td style="border-bottom-color:gray; border-bottom-width:thin; ">
																									<xsl:apply-templates/>
																								</td>
																							</tr>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</tbody>
													</table>
												</td>
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; " align="center">
													<table style="border-right:solid gray thin; ">
														<xsl:variable name="altova:CurrContextGrid_3" select="."/>
														<tbody>
															<xsl:for-each select="arguments">
																<xsl:for-each select="adept.common.Argument">
																	<xsl:for-each select="argumentDistribution">
																		<xsl:for-each select="list">
																			<xsl:for-each select="adept.common.Pair">
																				<xsl:for-each select="l">
																					<xsl:for-each select="tokenOffset">
																						<xsl:for-each select="end">
																							<tr bgcolor="{$color}">
																								<td style="border-bottom-color:gray; border-bottom-width:thin; ">
																									<xsl:apply-templates/>
																								</td>
																							</tr>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</tbody>
													</table>
												</td>
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; border-right:solid gray thin; text-align:left; " align="center">
													<xsl:for-each select="arguments">
														<xsl:for-each select="adept.common.Argument">
															<xsl:for-each select="argumentDistribution">
																<xsl:for-each select="list">
																	<xsl:for-each select="adept.common.Pair">
																		<xsl:for-each select="l">
																			<xsl:for-each select="value">
																				<table>
																					<xsl:variable name="altova:CurrContextGrid_4" select="."/>
																					<tbody>
																						<tr bgcolor="{$color}">
																							<td style="border-bottom-color:gray; border-bottom-width:thin; text-align:left; ">
																								<xsl:apply-templates/>
																							</td>
																						</tr>
																					</tbody>
																				</table>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; " align="center">
													<table>
														<xsl:variable name="altova:CurrContextGrid_5" select="."/>
														<tbody>
															<xsl:for-each select="arguments">
																<xsl:for-each select="adept.common.Argument">
																	<xsl:for-each select="argumentType">
																		<tr bgcolor="{$color}">
																			<td style="border-bottom-color:gray; border-bottom-width:thin; ">
																				<xsl:for-each select="type">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</td>
																		</tr>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</tbody>
													</table>
												</td>
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; border-left:solid gray thin; border-right:solid gray thin; " align="center">
													<xsl:for-each select="confidence">
														<span>
															<xsl:variable name="altova:seqContentStrings_6">
																<xsl:value-of select="format-number(number(string(.)), '########.##')"/>
															</xsl:variable>
															<xsl:variable name="altova:sContent_6" select="string($altova:seqContentStrings_6)"/>
															<xsl:value-of select="$altova:sContent_6"/>
														</span>
													</xsl:for-each>
												</td>
												<td style="border-bottom-color:gray; border-bottom-style:solid; border-bottom-width:thin; border-right:solid gray thin; text-align:left; " align="center">
													<xsl:for-each select="context">
														<xsl:for-each select="value">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<xsl:for-each select="sarcasms">
							<a>
								<xsl:attribute name="name">
									<xsl:value-of select="&apos;Sarcasms&apos;"/>
								</xsl:attribute>
							</a>
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
									<xsl:text>Sarcasms</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Sarcasms&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Sarcasms&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Sarcasms&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Sarcasms&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Sarcasms&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-bottom:solid gray thin; border-collapse:collapse; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
									<xsl:variable name="altova:CurrContextGrid_7" select="."/>
									<thead align="left">
										<tr align="left" bgcolor="#697376">
											<th>
												<span style="color:white; ">
													<xsl:text>SarcasmId</xsl:text>
												</span>
											</th>
											<th style="text-align:left; " width="384">
												<span style="color:white; ">
													<xsl:text>Sarcasm value</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Begin</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>End</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Judgment</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Confidence</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="adept.common.Sarcasm">
											<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
											<tr bgcolor="{$color}" class="altova-expand-collapse-level-1">
												<td align="center">
													<xsl:for-each select="sarcasmId">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td style="text-align:left; " width="384">
													<xsl:for-each select="value">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="begin">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="end">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="judgment">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="confidence">
														<span>
															<xsl:variable name="altova:seqContentStrings_8">
																<xsl:value-of select="format-number(number(string(.)), '########.##')"/>
															</xsl:variable>
															<xsl:variable name="altova:sContent_8" select="string($altova:seqContentStrings_8)"/>
															<xsl:value-of select="$altova:sContent_8"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<xsl:for-each select="opinions">
							<a>
								<xsl:attribute name="name">
									<xsl:value-of select="&apos;Opinions&apos;"/>
								</xsl:attribute>
							</a>
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:Arial; font-size:14pt; font-weight:bold; ">
									<xsl:text>Opinions</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Opinions&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Opinions&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Opinions&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Opinions&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Opinions&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-bottom:solid gray thin; border-collapse:collapse; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
									<xsl:variable name="altova:CurrContextGrid_9" select="."/>
									<thead align="left">
										<tr align="left" bgcolor="#697376">
											<th>
												<span style="color:white; ">
													<xsl:text>OpinionId</xsl:text>
												</span>
											</th>
											<th style="text-align:left; " width="384">
												<span style="color:white; ">
													<xsl:text>Opinion value</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Begin</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>End</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Subjectivity</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Polarity</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="adept.common.Opinion">
											<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
											<tr bgcolor="{$color}" class="altova-expand-collapse-level-1">
												<td align="center">
													<xsl:for-each select="opinionId">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td style="text-align:left; " width="384">
													<xsl:for-each select="value">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="begin">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="end">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="subjectivity">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="polarity">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<xsl:for-each select="committedBeliefs">
							<a>
								<xsl:attribute name="name">
									<xsl:value-of select="&apos;Committed Beliefs&apos;"/>
								</xsl:attribute>
							</a>
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
									<xsl:text>Committed Beliefs</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Committed_Beliefs&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Committed_Beliefs&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Committed_Beliefs&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Committed_Beliefs&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Committed_Beliefs&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-bottom:solid gray thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
									<xsl:variable name="altova:CurrContextGrid_10" select="."/>
									<thead align="left">
										<tr align="left" bgcolor="#697376">
											<th>
												<span style="color:white; ">
													<xsl:text>SequenceId</xsl:text>
												</span>
											</th>
											<th style="text-align:left; " width="384">
												<span style="color:white; ">
													<xsl:text>Committed Belief Value</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Begin</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>End</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Modality</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="adept.common.CommittedBelief">
											<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
											<tr bgcolor="{$color}" class="altova-expand-collapse-level-1">
												<td>
													<xsl:for-each select="sequenceId">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td style="text-align:left; " width="384">
													<xsl:for-each select="value">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="begin">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="end">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="modality">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<xsl:for-each select="syntacticChunks">
							<a>
								<xsl:attribute name="name">
									<xsl:value-of select="&apos;Syntactic Chunks&apos;"/>
								</xsl:attribute>
							</a>
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
									<xsl:text>Syntactic Chunks</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Syntactic_Chunks&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Syntactic_Chunks&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Syntactic_Chunks&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Syntactic_Chunks&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Syntactic_Chunks&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-bottom:solid gray thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
									<xsl:variable name="altova:CurrContextGrid_11" select="."/>
									<thead align="left">
										<tr align="left" bgcolor="#697376">
											<th>
												<span style="color:white; ">
													<xsl:text>SequenceId</xsl:text>
												</span>
											</th>
											<th style="text-align:left; " width="384">
												<span style="color:white; ">
													<xsl:text>Syntactic Chunk Value</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Begin</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>End</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Type</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="adept.common.SyntacticChunk">
											<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
											<tr bgcolor="{$color}" class="altova-expand-collapse-level-1">
												<td>
													<xsl:for-each select="sequenceId">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td style="text-align:left; " width="384">
													<xsl:for-each select="value">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="begin">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="tokenOffset">
														<xsl:for-each select="end">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="scType">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<xsl:for-each select="paraphrases">
							<a>
								<xsl:attribute name="name">
									<xsl:value-of select="&apos;Paraphrases&apos;"/>
								</xsl:attribute>
							</a>
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
									<xsl:text>Paraphrases</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Paraphrases&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Paraphrases&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Paraphrases&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Paraphrases&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Paraphrases&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-bottom:solid gray thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
									<xsl:variable name="altova:CurrContextGrid_12" select="."/>
									<thead align="left">
										<tr align="left" bgcolor="#697376">
											<th style="text-align:left; " width="384">
												<span style="color:white; ">
													<xsl:text>Paraphrase Value</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>POS Tag</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Confidence</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="adept.common.Paraphrase">
											<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
											<tr bgcolor="{$color}" class="altova-expand-collapse-level-1">
												<td style="text-align:left; " width="384">
													<xsl:for-each select="value">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="posTag">
														<xsl:apply-templates/>
													</xsl:for-each>
												</td>
												<td>
													<xsl:for-each select="confidence">
														<span>
															<xsl:variable name="altova:seqContentStrings_13">
																<xsl:value-of select="format-number(number(string(.)), '########.##')"/>
															</xsl:variable>
															<xsl:variable name="altova:sContent_13" select="string($altova:seqContentStrings_13)"/>
															<xsl:value-of select="$altova:sContent_13"/>
														</span>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<xsl:for-each select="triples">
							<a>
								<xsl:attribute name="name">
									<xsl:value-of select="&apos;Triples&apos;"/>
								</xsl:attribute>
							</a>
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
									<xsl:text>Triples</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Triples&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Triples&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Triples&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Triples&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Triples&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-bottom:solid gray thin; border-left:solid gray thin; border-right:solid gray thin; border-top:solid gray thin; margin-top:10px; " class="altova-add-row-expand-collapse-buttons">
									<xsl:variable name="altova:CurrContextGrid_14" select="."/>
									<thead align="left">
										<tr align="left" bgcolor="#697376">
											<th style="text-align:left; " width="384">
												<span style="color:white; ">
													<xsl:text>Entity</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Slot</xsl:text>
												</span>
											</th>
											<th>
												<span style="color:white; ">
													<xsl:text>Value</xsl:text>
												</span>
											</th>
										</tr>
									</thead>
									<tbody>
										<xsl:for-each select="adept.common.Triple">
											<xsl:variable name="color" select="concat(substring(&quot;white&quot;, 1 div ( position() mod 2 = 0 )), substring(&quot;lightgray&quot;, 1 div not(( position() mod 2 = 0 ))))"/>
											<tr bgcolor="{$color}" class="altova-expand-collapse-level-1">
												<td width="384">
													<xsl:for-each select="entity">
														<xsl:for-each select="name">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td align="center">
													<xsl:for-each select="slot">
														<xsl:for-each select="name">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
												<td style="text-align:left; ">
													<xsl:for-each select="tvalue">
														<xsl:for-each select="name">
															<xsl:apply-templates/>
														</xsl:for-each>
													</xsl:for-each>
												</td>
											</tr>
										</xsl:for-each>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<span>
							<xsl:text>&#160;</xsl:text>
						</span>
						<a>
							<xsl:attribute name="name">
								<xsl:value-of select="&apos;Tokens&apos;"/>
							</xsl:attribute>
						</a>
						<xsl:for-each select="/descendant::tokenStream[1]">
							<br/>
							<center style="background:#323d40; color:white; ">
								<span style="font-family:arial; font-size:14pt; font-weight:bolder; ">
									<xsl:text>Tokens</xsl:text>
								</span>
								<span>
									<xsl:text>&#160;&#160; </xsl:text>
								</span>
								<a>
									<xsl:choose>
										<xsl:when test="not(string(&apos;help.htm#Tokens&apos;))">
											<xsl:attribute name="href">
												<xsl:text>#</xsl:text>
											</xsl:attribute>
										</xsl:when>
										<xsl:when test="substring(string(&apos;help.htm#Tokens&apos;), 1, 1) = '#'">
											<xsl:attribute name="href">
												<xsl:value-of select="&apos;help.htm#Tokens&apos;"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<xsl:attribute name="href">
												<xsl:if test="substring(string(&apos;help.htm#Tokens&apos;), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(&apos;help.htm#Tokens&apos;), '&#x5c;', '/')"/>
											</xsl:attribute>
										</xsl:otherwise>
									</xsl:choose>
									<img align="bottom">
										<xsl:attribute name="src">
											<xsl:if test="substring(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;C:\Users\jwatson\Documents\information_icon_small.svg.png&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
										<xsl:attribute name="alt"/>
									</img>
								</a>
							</center>
							<center>
								<table style="border-color:transparent; border-left-color:transparent; border-right-color:transparent; border-top-color:transparent; vertical-align:top; " border="0" width="auto">
									<xsl:variable name="altova:CurrContextGrid_15" select="."/>
									<tbody>
										<tr style="text-align:center; vertical-align:top; ">
											<td style="border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; ">
												<table style="border-bottom-color:transparent; border-color:transparent; border-left-color:transparent; border-left-style:solid; border-left-width:thin; border-right-color:transparent; border-right-style:solid; border-right-width:thin; border-top-color:transparent; display:inline; margin-top:10px; " border="0" width="auto">
													<xsl:variable name="altova:CurrContextGrid_16" select="."/>
													<thead style="border-top-color:black; border-top-style:solid; ">
														<tr style="text-align:center; vertical-align:top; " bgcolor="#697376">
															<th>
																<span style="color:white; ">
																	<xsl:text>SequenceId</xsl:text>
																</span>
															</th>
															<th>
																<span style="color:white; ">
																	<xsl:text>Value</xsl:text>
																</span>
															</th>
															<th>
																<span style="color:white; ">
																	<xsl:text>CharOffset</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="list">
															<xsl:for-each select="adept.common.Token">
																<xsl:choose>
																	<xsl:when test="(position() &lt;=  ceiling(//tokenStream/adept.common.TokenStream/default/document/tokenStreamList/adept.common.TokenStream/list/default/size) div 3)
or
(position() &lt;=  ceiling(//tokenStream//list/default/size) div 3)">
																		<tr style="text-align:center; vertical-align:top; ">
																			<td>
																				<xsl:for-each select="sequenceId">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</td>
																			<td style="text-align:left; ">
																				<xsl:for-each select="value">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</td>
																			<td>
																				<xsl:for-each select="charOffset">
																					<table style="border-color:transparent; display:inline; margin-top:10px; " border="0" width="auto">
																						<xsl:variable name="altova:CurrContextGrid_17" select="."/>
																						<tbody>
																							<tr style="text-align:center; vertical-align:top; ">
																								<td>
																									<xsl:for-each select="begin">
																										<xsl:apply-templates/>
																									</xsl:for-each>
																								</td>
																								<td>
																									<xsl:for-each select="end">
																										<xsl:apply-templates/>
																									</xsl:for-each>
																								</td>
																							</tr>
																						</tbody>
																					</table>
																				</xsl:for-each>
																			</td>
																		</tr>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</td>
											<td style="border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; ">
												<table style="border-left-color:transparent; border-left-style:solid; border-left-width:thin; border-right-color:transparent; border-right-style:solid; border-right-width:thin; display:inline; margin-top:10px; " border="0" width="auto">
													<xsl:variable name="altova:CurrContextGrid_18" select="."/>
													<thead style="border-top-color:black; ">
														<tr style="text-align:center; vertical-align:top; " bgcolor="#697376">
															<th>
																<span style="color:white; ">
																	<xsl:text>SequenceId</xsl:text>
																</span>
															</th>
															<th>
																<span style="color:white; ">
																	<xsl:text>Value</xsl:text>
																</span>
															</th>
															<th>
																<span style="color:white; ">
																	<xsl:text>CharOffset</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="list">
															<xsl:for-each select="adept.common.Token">
																<xsl:choose>
																	<xsl:when test="(	
	position() &gt; ceiling ((//tokenStream/adept.common.TokenStream/default/document/tokenStreamList/adept.common.TokenStream/list/default/size) div 3)
	and
	position() &lt; ceiling ((//tokenStream/adept.common.TokenStream/default/document/tokenStreamList/adept.common.TokenStream/list/default/size) div 3) * 2
)
or
(
		position() &gt;  ceiling((//tokenStream//list/default/size)  div 3)
		and
		position() &lt;  ceiling((//tokenStream//list/default/size)  div 3) * 2
)">
																		<tr style="text-align:center; vertical-align:top; ">
																			<td>
																				<xsl:for-each select="sequenceId">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</td>
																			<td style="text-align:left; ">
																				<xsl:for-each select="value">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</td>
																			<td>
																				<xsl:for-each select="charOffset">
																					<table style="display:inline; margin-top:10px; " border="0" width="auto">
																						<xsl:variable name="altova:CurrContextGrid_19" select="."/>
																						<tbody>
																							<tr style="text-align:center; vertical-align:top; ">
																								<td>
																									<xsl:for-each select="begin">
																										<xsl:apply-templates/>
																									</xsl:for-each>
																								</td>
																								<td>
																									<xsl:for-each select="end">
																										<xsl:apply-templates/>
																									</xsl:for-each>
																								</td>
																							</tr>
																						</tbody>
																					</table>
																				</xsl:for-each>
																			</td>
																		</tr>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</td>
											<td style="border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; ">
												<table style="border-left-color:transparent; border-left-style:solid; border-left-width:thin; border-right-color:transparent; border-right-style:solid; border-right-width:thin; display:inline; margin-top:10px; " border="0" width="auto">
													<xsl:variable name="altova:CurrContextGrid_20" select="."/>
													<thead style="border-top-color:black; ">
														<tr style="text-align:center; vertical-align:top; " bgcolor="#697376">
															<th>
																<span style="color:white; ">
																	<xsl:text>SequenceId</xsl:text>
																</span>
															</th>
															<th>
																<span style="color:white; ">
																	<xsl:text>Value</xsl:text>
																</span>
															</th>
															<th>
																<span style="color:white; ">
																	<xsl:text>CharOffset</xsl:text>
																</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<xsl:for-each select="list">
															<xsl:for-each select="adept.common.Token">
																<xsl:choose>
																	<xsl:when test="(
	position() &gt;= ceiling ((//tokenStream/adept.common.TokenStream/default/document/tokenStreamList/adept.common.TokenStream/list/default/size) div 3) * 2
)
or
(
	position() &gt;= ceiling ((//tokenStream//list/default/size) div 3) * 2
)">
																		<tr style="text-align:center; vertical-align:top; ">
																			<td>
																				<xsl:for-each select="sequenceId">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</td>
																			<td style="text-align:left; ">
																				<xsl:for-each select="value">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</td>
																			<td>
																				<xsl:for-each select="charOffset">
																					<table style="display:inline; margin-top:10px; " border="0" width="auto">
																						<xsl:variable name="altova:CurrContextGrid_21" select="."/>
																						<tbody>
																							<tr style="text-align:center; vertical-align:top; ">
																								<td>
																									<xsl:for-each select="begin">
																										<xsl:apply-templates/>
																									</xsl:for-each>
																								</td>
																								<td>
																									<xsl:for-each select="end">
																										<xsl:apply-templates/>
																									</xsl:for-each>
																								</td>
																							</tr>
																						</tbody>
																					</table>
																				</xsl:for-each>
																			</td>
																		</tr>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:for-each>
														</xsl:for-each>
													</tbody>
												</table>
											</td>
										</tr>
									</tbody>
								</table>
							</center>
							<a>
								<xsl:choose>
									<xsl:when test="not(string(&apos;#Table of Contents&apos;))">
										<xsl:attribute name="href">
											<xsl:text>#</xsl:text>
										</xsl:attribute>
									</xsl:when>
									<xsl:when test="substring(string(&apos;#Table of Contents&apos;), 1, 1) = '#'">
										<xsl:attribute name="href">
											<xsl:value-of select="&apos;#Table of Contents&apos;"/>
										</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
											<xsl:if test="substring(string(&apos;#Table of Contents&apos;), 2, 1) = ':'">
												<xsl:text>file:///</xsl:text>
											</xsl:if>
											<xsl:value-of select="translate(string(&apos;#Table of Contents&apos;), '&#x5c;', '/')"/>
										</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								<center>
									<span>
										<xsl:text>Go to Top of Page</xsl:text>
									</span>
								</center>
							</a>
						</xsl:for-each>
						<br/>
					</xsl:for-each>
				</xsl:for-each>
			</body>
		</html>
	</xsl:template>
</xsl:stylesheet>