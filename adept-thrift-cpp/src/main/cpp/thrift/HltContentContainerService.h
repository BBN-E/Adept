/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HltContentContainerService_H
#define HltContentContainerService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class HltContentContainerServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~HltContentContainerServiceIf() {}
  virtual void getCommittedBeliefs(std::vector<CommittedBelief> & _return) = 0;
  virtual void getCoreferences(std::vector<Coreference> & _return) = 0;
  virtual void getDependencies(std::vector<Dependency> & _return) = 0;
  virtual void getEntityMentions(std::vector<EntityMention> & _return) = 0;
  virtual void getJointRelationCoreferences(std::vector<JointRelationCoreference> & _return) = 0;
  virtual void getMentions(std::vector<EntityMention> & _return) = 0;
  virtual void getNamedEntities(std::vector<EntityMention> & _return) = 0;
  virtual void getOpinions(std::vector<Opinion> & _return) = 0;
  virtual void getPartOfSpeechs(std::vector<PartOfSpeech> & _return) = 0;
  virtual void getPassages(std::vector<Passage> & _return) = 0;
  virtual void getProsodicPhrases(std::vector<ProsodicPhrase> & _return) = 0;
  virtual void getRelations(std::vector<Relation> & _return) = 0;
  virtual void getSarcasms(std::vector<Sarcasm> & _return) = 0;
  virtual void getSentences(std::vector<Sentence> & _return) = 0;
  virtual void getSyntacticChunks(std::vector<SyntacticChunk> & _return) = 0;
  virtual void setCommittedBeliefs(const std::vector<CommittedBelief> & committedBeliefs) = 0;
  virtual void setCoreferences(const std::vector<Coreference> & coreferences) = 0;
  virtual void setDependencies(const std::vector<Dependency> & dependencies) = 0;
  virtual void setEntityMentions(const std::vector<EntityMention> & entityMentions) = 0;
  virtual void setJointRelationCoreferences(const std::vector<JointRelationCoreference> & jointRelationCoreferences) = 0;
  virtual void setMentions(const std::vector<EntityMention> & entityMentions) = 0;
  virtual void setNamedEntities(const std::vector<EntityMention> & namedEntities) = 0;
  virtual void setOpinions(const std::vector<Opinion> & opinions) = 0;
  virtual void setPartOfSpeechs(const std::vector<PartOfSpeech> & partOfSpeechs) = 0;
  virtual void setPassages(const std::vector<Passage> & passages) = 0;
  virtual void setProsodicPhrases(const std::vector<ProsodicPhrase> & prosodicPhrases) = 0;
  virtual void setRelations(const std::vector<Relation> & relations) = 0;
  virtual void setSarcasms(const std::vector<Sarcasm> & sarcasms) = 0;
  virtual void setSentences(const std::vector<Sentence> & sentences) = 0;
  virtual void setSyntacticChunks(const std::vector<SyntacticChunk> & syntactiChunks) = 0;
};

class HltContentContainerServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef HltContentContainerServiceIf Handler;

  virtual ~HltContentContainerServiceIfFactory() {}

  virtual HltContentContainerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class HltContentContainerServiceIfSingletonFactory : virtual public HltContentContainerServiceIfFactory {
 public:
  HltContentContainerServiceIfSingletonFactory(const boost::shared_ptr<HltContentContainerServiceIf>& iface) : iface_(iface) {}
  virtual ~HltContentContainerServiceIfSingletonFactory() {}

  virtual HltContentContainerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HltContentContainerServiceIf> iface_;
};

class HltContentContainerServiceNull : virtual public HltContentContainerServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~HltContentContainerServiceNull() {}
  void getCommittedBeliefs(std::vector<CommittedBelief> & /* _return */) {
    return;
  }
  void getCoreferences(std::vector<Coreference> & /* _return */) {
    return;
  }
  void getDependencies(std::vector<Dependency> & /* _return */) {
    return;
  }
  void getEntityMentions(std::vector<EntityMention> & /* _return */) {
    return;
  }
  void getJointRelationCoreferences(std::vector<JointRelationCoreference> & /* _return */) {
    return;
  }
  void getMentions(std::vector<EntityMention> & /* _return */) {
    return;
  }
  void getNamedEntities(std::vector<EntityMention> & /* _return */) {
    return;
  }
  void getOpinions(std::vector<Opinion> & /* _return */) {
    return;
  }
  void getPartOfSpeechs(std::vector<PartOfSpeech> & /* _return */) {
    return;
  }
  void getPassages(std::vector<Passage> & /* _return */) {
    return;
  }
  void getProsodicPhrases(std::vector<ProsodicPhrase> & /* _return */) {
    return;
  }
  void getRelations(std::vector<Relation> & /* _return */) {
    return;
  }
  void getSarcasms(std::vector<Sarcasm> & /* _return */) {
    return;
  }
  void getSentences(std::vector<Sentence> & /* _return */) {
    return;
  }
  void getSyntacticChunks(std::vector<SyntacticChunk> & /* _return */) {
    return;
  }
  void setCommittedBeliefs(const std::vector<CommittedBelief> & /* committedBeliefs */) {
    return;
  }
  void setCoreferences(const std::vector<Coreference> & /* coreferences */) {
    return;
  }
  void setDependencies(const std::vector<Dependency> & /* dependencies */) {
    return;
  }
  void setEntityMentions(const std::vector<EntityMention> & /* entityMentions */) {
    return;
  }
  void setJointRelationCoreferences(const std::vector<JointRelationCoreference> & /* jointRelationCoreferences */) {
    return;
  }
  void setMentions(const std::vector<EntityMention> & /* entityMentions */) {
    return;
  }
  void setNamedEntities(const std::vector<EntityMention> & /* namedEntities */) {
    return;
  }
  void setOpinions(const std::vector<Opinion> & /* opinions */) {
    return;
  }
  void setPartOfSpeechs(const std::vector<PartOfSpeech> & /* partOfSpeechs */) {
    return;
  }
  void setPassages(const std::vector<Passage> & /* passages */) {
    return;
  }
  void setProsodicPhrases(const std::vector<ProsodicPhrase> & /* prosodicPhrases */) {
    return;
  }
  void setRelations(const std::vector<Relation> & /* relations */) {
    return;
  }
  void setSarcasms(const std::vector<Sarcasm> & /* sarcasms */) {
    return;
  }
  void setSentences(const std::vector<Sentence> & /* sentences */) {
    return;
  }
  void setSyntacticChunks(const std::vector<SyntacticChunk> & /* syntactiChunks */) {
    return;
  }
};


class HltContentContainerService_getCommittedBeliefs_args {
 public:

  HltContentContainerService_getCommittedBeliefs_args() {
  }

  virtual ~HltContentContainerService_getCommittedBeliefs_args() throw() {}


  bool operator == (const HltContentContainerService_getCommittedBeliefs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getCommittedBeliefs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getCommittedBeliefs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getCommittedBeliefs_pargs {
 public:


  virtual ~HltContentContainerService_getCommittedBeliefs_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getCommittedBeliefs_result__isset {
  _HltContentContainerService_getCommittedBeliefs_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getCommittedBeliefs_result__isset;

class HltContentContainerService_getCommittedBeliefs_result {
 public:

  HltContentContainerService_getCommittedBeliefs_result() {
  }

  virtual ~HltContentContainerService_getCommittedBeliefs_result() throw() {}

  std::vector<CommittedBelief>  success;

  _HltContentContainerService_getCommittedBeliefs_result__isset __isset;

  void __set_success(const std::vector<CommittedBelief> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getCommittedBeliefs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getCommittedBeliefs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getCommittedBeliefs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getCommittedBeliefs_presult__isset {
  _HltContentContainerService_getCommittedBeliefs_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getCommittedBeliefs_presult__isset;

class HltContentContainerService_getCommittedBeliefs_presult {
 public:


  virtual ~HltContentContainerService_getCommittedBeliefs_presult() throw() {}

  std::vector<CommittedBelief> * success;

  _HltContentContainerService_getCommittedBeliefs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getCoreferences_args {
 public:

  HltContentContainerService_getCoreferences_args() {
  }

  virtual ~HltContentContainerService_getCoreferences_args() throw() {}


  bool operator == (const HltContentContainerService_getCoreferences_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getCoreferences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getCoreferences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getCoreferences_pargs {
 public:


  virtual ~HltContentContainerService_getCoreferences_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getCoreferences_result__isset {
  _HltContentContainerService_getCoreferences_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getCoreferences_result__isset;

class HltContentContainerService_getCoreferences_result {
 public:

  HltContentContainerService_getCoreferences_result() {
  }

  virtual ~HltContentContainerService_getCoreferences_result() throw() {}

  std::vector<Coreference>  success;

  _HltContentContainerService_getCoreferences_result__isset __isset;

  void __set_success(const std::vector<Coreference> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getCoreferences_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getCoreferences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getCoreferences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getCoreferences_presult__isset {
  _HltContentContainerService_getCoreferences_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getCoreferences_presult__isset;

class HltContentContainerService_getCoreferences_presult {
 public:


  virtual ~HltContentContainerService_getCoreferences_presult() throw() {}

  std::vector<Coreference> * success;

  _HltContentContainerService_getCoreferences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getDependencies_args {
 public:

  HltContentContainerService_getDependencies_args() {
  }

  virtual ~HltContentContainerService_getDependencies_args() throw() {}


  bool operator == (const HltContentContainerService_getDependencies_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getDependencies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getDependencies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getDependencies_pargs {
 public:


  virtual ~HltContentContainerService_getDependencies_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getDependencies_result__isset {
  _HltContentContainerService_getDependencies_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getDependencies_result__isset;

class HltContentContainerService_getDependencies_result {
 public:

  HltContentContainerService_getDependencies_result() {
  }

  virtual ~HltContentContainerService_getDependencies_result() throw() {}

  std::vector<Dependency>  success;

  _HltContentContainerService_getDependencies_result__isset __isset;

  void __set_success(const std::vector<Dependency> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getDependencies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getDependencies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getDependencies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getDependencies_presult__isset {
  _HltContentContainerService_getDependencies_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getDependencies_presult__isset;

class HltContentContainerService_getDependencies_presult {
 public:


  virtual ~HltContentContainerService_getDependencies_presult() throw() {}

  std::vector<Dependency> * success;

  _HltContentContainerService_getDependencies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getEntityMentions_args {
 public:

  HltContentContainerService_getEntityMentions_args() {
  }

  virtual ~HltContentContainerService_getEntityMentions_args() throw() {}


  bool operator == (const HltContentContainerService_getEntityMentions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getEntityMentions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getEntityMentions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getEntityMentions_pargs {
 public:


  virtual ~HltContentContainerService_getEntityMentions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getEntityMentions_result__isset {
  _HltContentContainerService_getEntityMentions_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getEntityMentions_result__isset;

class HltContentContainerService_getEntityMentions_result {
 public:

  HltContentContainerService_getEntityMentions_result() {
  }

  virtual ~HltContentContainerService_getEntityMentions_result() throw() {}

  std::vector<EntityMention>  success;

  _HltContentContainerService_getEntityMentions_result__isset __isset;

  void __set_success(const std::vector<EntityMention> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getEntityMentions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getEntityMentions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getEntityMentions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getEntityMentions_presult__isset {
  _HltContentContainerService_getEntityMentions_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getEntityMentions_presult__isset;

class HltContentContainerService_getEntityMentions_presult {
 public:


  virtual ~HltContentContainerService_getEntityMentions_presult() throw() {}

  std::vector<EntityMention> * success;

  _HltContentContainerService_getEntityMentions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getJointRelationCoreferences_args {
 public:

  HltContentContainerService_getJointRelationCoreferences_args() {
  }

  virtual ~HltContentContainerService_getJointRelationCoreferences_args() throw() {}


  bool operator == (const HltContentContainerService_getJointRelationCoreferences_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getJointRelationCoreferences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getJointRelationCoreferences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getJointRelationCoreferences_pargs {
 public:


  virtual ~HltContentContainerService_getJointRelationCoreferences_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getJointRelationCoreferences_result__isset {
  _HltContentContainerService_getJointRelationCoreferences_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getJointRelationCoreferences_result__isset;

class HltContentContainerService_getJointRelationCoreferences_result {
 public:

  HltContentContainerService_getJointRelationCoreferences_result() {
  }

  virtual ~HltContentContainerService_getJointRelationCoreferences_result() throw() {}

  std::vector<JointRelationCoreference>  success;

  _HltContentContainerService_getJointRelationCoreferences_result__isset __isset;

  void __set_success(const std::vector<JointRelationCoreference> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getJointRelationCoreferences_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getJointRelationCoreferences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getJointRelationCoreferences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getJointRelationCoreferences_presult__isset {
  _HltContentContainerService_getJointRelationCoreferences_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getJointRelationCoreferences_presult__isset;

class HltContentContainerService_getJointRelationCoreferences_presult {
 public:


  virtual ~HltContentContainerService_getJointRelationCoreferences_presult() throw() {}

  std::vector<JointRelationCoreference> * success;

  _HltContentContainerService_getJointRelationCoreferences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getMentions_args {
 public:

  HltContentContainerService_getMentions_args() {
  }

  virtual ~HltContentContainerService_getMentions_args() throw() {}


  bool operator == (const HltContentContainerService_getMentions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getMentions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getMentions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getMentions_pargs {
 public:


  virtual ~HltContentContainerService_getMentions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getMentions_result__isset {
  _HltContentContainerService_getMentions_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getMentions_result__isset;

class HltContentContainerService_getMentions_result {
 public:

  HltContentContainerService_getMentions_result() {
  }

  virtual ~HltContentContainerService_getMentions_result() throw() {}

  std::vector<EntityMention>  success;

  _HltContentContainerService_getMentions_result__isset __isset;

  void __set_success(const std::vector<EntityMention> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getMentions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getMentions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getMentions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getMentions_presult__isset {
  _HltContentContainerService_getMentions_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getMentions_presult__isset;

class HltContentContainerService_getMentions_presult {
 public:


  virtual ~HltContentContainerService_getMentions_presult() throw() {}

  std::vector<EntityMention> * success;

  _HltContentContainerService_getMentions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getNamedEntities_args {
 public:

  HltContentContainerService_getNamedEntities_args() {
  }

  virtual ~HltContentContainerService_getNamedEntities_args() throw() {}


  bool operator == (const HltContentContainerService_getNamedEntities_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getNamedEntities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getNamedEntities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getNamedEntities_pargs {
 public:


  virtual ~HltContentContainerService_getNamedEntities_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getNamedEntities_result__isset {
  _HltContentContainerService_getNamedEntities_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getNamedEntities_result__isset;

class HltContentContainerService_getNamedEntities_result {
 public:

  HltContentContainerService_getNamedEntities_result() {
  }

  virtual ~HltContentContainerService_getNamedEntities_result() throw() {}

  std::vector<EntityMention>  success;

  _HltContentContainerService_getNamedEntities_result__isset __isset;

  void __set_success(const std::vector<EntityMention> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getNamedEntities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getNamedEntities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getNamedEntities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getNamedEntities_presult__isset {
  _HltContentContainerService_getNamedEntities_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getNamedEntities_presult__isset;

class HltContentContainerService_getNamedEntities_presult {
 public:


  virtual ~HltContentContainerService_getNamedEntities_presult() throw() {}

  std::vector<EntityMention> * success;

  _HltContentContainerService_getNamedEntities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getOpinions_args {
 public:

  HltContentContainerService_getOpinions_args() {
  }

  virtual ~HltContentContainerService_getOpinions_args() throw() {}


  bool operator == (const HltContentContainerService_getOpinions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getOpinions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getOpinions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getOpinions_pargs {
 public:


  virtual ~HltContentContainerService_getOpinions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getOpinions_result__isset {
  _HltContentContainerService_getOpinions_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getOpinions_result__isset;

class HltContentContainerService_getOpinions_result {
 public:

  HltContentContainerService_getOpinions_result() {
  }

  virtual ~HltContentContainerService_getOpinions_result() throw() {}

  std::vector<Opinion>  success;

  _HltContentContainerService_getOpinions_result__isset __isset;

  void __set_success(const std::vector<Opinion> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getOpinions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getOpinions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getOpinions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getOpinions_presult__isset {
  _HltContentContainerService_getOpinions_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getOpinions_presult__isset;

class HltContentContainerService_getOpinions_presult {
 public:


  virtual ~HltContentContainerService_getOpinions_presult() throw() {}

  std::vector<Opinion> * success;

  _HltContentContainerService_getOpinions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getPartOfSpeechs_args {
 public:

  HltContentContainerService_getPartOfSpeechs_args() {
  }

  virtual ~HltContentContainerService_getPartOfSpeechs_args() throw() {}


  bool operator == (const HltContentContainerService_getPartOfSpeechs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getPartOfSpeechs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getPartOfSpeechs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getPartOfSpeechs_pargs {
 public:


  virtual ~HltContentContainerService_getPartOfSpeechs_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getPartOfSpeechs_result__isset {
  _HltContentContainerService_getPartOfSpeechs_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getPartOfSpeechs_result__isset;

class HltContentContainerService_getPartOfSpeechs_result {
 public:

  HltContentContainerService_getPartOfSpeechs_result() {
  }

  virtual ~HltContentContainerService_getPartOfSpeechs_result() throw() {}

  std::vector<PartOfSpeech>  success;

  _HltContentContainerService_getPartOfSpeechs_result__isset __isset;

  void __set_success(const std::vector<PartOfSpeech> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getPartOfSpeechs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getPartOfSpeechs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getPartOfSpeechs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getPartOfSpeechs_presult__isset {
  _HltContentContainerService_getPartOfSpeechs_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getPartOfSpeechs_presult__isset;

class HltContentContainerService_getPartOfSpeechs_presult {
 public:


  virtual ~HltContentContainerService_getPartOfSpeechs_presult() throw() {}

  std::vector<PartOfSpeech> * success;

  _HltContentContainerService_getPartOfSpeechs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getPassages_args {
 public:

  HltContentContainerService_getPassages_args() {
  }

  virtual ~HltContentContainerService_getPassages_args() throw() {}


  bool operator == (const HltContentContainerService_getPassages_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getPassages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getPassages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getPassages_pargs {
 public:


  virtual ~HltContentContainerService_getPassages_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getPassages_result__isset {
  _HltContentContainerService_getPassages_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getPassages_result__isset;

class HltContentContainerService_getPassages_result {
 public:

  HltContentContainerService_getPassages_result() {
  }

  virtual ~HltContentContainerService_getPassages_result() throw() {}

  std::vector<Passage>  success;

  _HltContentContainerService_getPassages_result__isset __isset;

  void __set_success(const std::vector<Passage> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getPassages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getPassages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getPassages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getPassages_presult__isset {
  _HltContentContainerService_getPassages_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getPassages_presult__isset;

class HltContentContainerService_getPassages_presult {
 public:


  virtual ~HltContentContainerService_getPassages_presult() throw() {}

  std::vector<Passage> * success;

  _HltContentContainerService_getPassages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getProsodicPhrases_args {
 public:

  HltContentContainerService_getProsodicPhrases_args() {
  }

  virtual ~HltContentContainerService_getProsodicPhrases_args() throw() {}


  bool operator == (const HltContentContainerService_getProsodicPhrases_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getProsodicPhrases_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getProsodicPhrases_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getProsodicPhrases_pargs {
 public:


  virtual ~HltContentContainerService_getProsodicPhrases_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getProsodicPhrases_result__isset {
  _HltContentContainerService_getProsodicPhrases_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getProsodicPhrases_result__isset;

class HltContentContainerService_getProsodicPhrases_result {
 public:

  HltContentContainerService_getProsodicPhrases_result() {
  }

  virtual ~HltContentContainerService_getProsodicPhrases_result() throw() {}

  std::vector<ProsodicPhrase>  success;

  _HltContentContainerService_getProsodicPhrases_result__isset __isset;

  void __set_success(const std::vector<ProsodicPhrase> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getProsodicPhrases_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getProsodicPhrases_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getProsodicPhrases_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getProsodicPhrases_presult__isset {
  _HltContentContainerService_getProsodicPhrases_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getProsodicPhrases_presult__isset;

class HltContentContainerService_getProsodicPhrases_presult {
 public:


  virtual ~HltContentContainerService_getProsodicPhrases_presult() throw() {}

  std::vector<ProsodicPhrase> * success;

  _HltContentContainerService_getProsodicPhrases_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getRelations_args {
 public:

  HltContentContainerService_getRelations_args() {
  }

  virtual ~HltContentContainerService_getRelations_args() throw() {}


  bool operator == (const HltContentContainerService_getRelations_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getRelations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getRelations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getRelations_pargs {
 public:


  virtual ~HltContentContainerService_getRelations_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getRelations_result__isset {
  _HltContentContainerService_getRelations_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getRelations_result__isset;

class HltContentContainerService_getRelations_result {
 public:

  HltContentContainerService_getRelations_result() {
  }

  virtual ~HltContentContainerService_getRelations_result() throw() {}

  std::vector<Relation>  success;

  _HltContentContainerService_getRelations_result__isset __isset;

  void __set_success(const std::vector<Relation> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getRelations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getRelations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getRelations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getRelations_presult__isset {
  _HltContentContainerService_getRelations_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getRelations_presult__isset;

class HltContentContainerService_getRelations_presult {
 public:


  virtual ~HltContentContainerService_getRelations_presult() throw() {}

  std::vector<Relation> * success;

  _HltContentContainerService_getRelations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getSarcasms_args {
 public:

  HltContentContainerService_getSarcasms_args() {
  }

  virtual ~HltContentContainerService_getSarcasms_args() throw() {}


  bool operator == (const HltContentContainerService_getSarcasms_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getSarcasms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getSarcasms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getSarcasms_pargs {
 public:


  virtual ~HltContentContainerService_getSarcasms_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getSarcasms_result__isset {
  _HltContentContainerService_getSarcasms_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getSarcasms_result__isset;

class HltContentContainerService_getSarcasms_result {
 public:

  HltContentContainerService_getSarcasms_result() {
  }

  virtual ~HltContentContainerService_getSarcasms_result() throw() {}

  std::vector<Sarcasm>  success;

  _HltContentContainerService_getSarcasms_result__isset __isset;

  void __set_success(const std::vector<Sarcasm> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getSarcasms_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getSarcasms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getSarcasms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getSarcasms_presult__isset {
  _HltContentContainerService_getSarcasms_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getSarcasms_presult__isset;

class HltContentContainerService_getSarcasms_presult {
 public:


  virtual ~HltContentContainerService_getSarcasms_presult() throw() {}

  std::vector<Sarcasm> * success;

  _HltContentContainerService_getSarcasms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getSentences_args {
 public:

  HltContentContainerService_getSentences_args() {
  }

  virtual ~HltContentContainerService_getSentences_args() throw() {}


  bool operator == (const HltContentContainerService_getSentences_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getSentences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getSentences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getSentences_pargs {
 public:


  virtual ~HltContentContainerService_getSentences_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getSentences_result__isset {
  _HltContentContainerService_getSentences_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getSentences_result__isset;

class HltContentContainerService_getSentences_result {
 public:

  HltContentContainerService_getSentences_result() {
  }

  virtual ~HltContentContainerService_getSentences_result() throw() {}

  std::vector<Sentence>  success;

  _HltContentContainerService_getSentences_result__isset __isset;

  void __set_success(const std::vector<Sentence> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getSentences_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getSentences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getSentences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getSentences_presult__isset {
  _HltContentContainerService_getSentences_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getSentences_presult__isset;

class HltContentContainerService_getSentences_presult {
 public:


  virtual ~HltContentContainerService_getSentences_presult() throw() {}

  std::vector<Sentence> * success;

  _HltContentContainerService_getSentences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HltContentContainerService_getSyntacticChunks_args {
 public:

  HltContentContainerService_getSyntacticChunks_args() {
  }

  virtual ~HltContentContainerService_getSyntacticChunks_args() throw() {}


  bool operator == (const HltContentContainerService_getSyntacticChunks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_getSyntacticChunks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getSyntacticChunks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_getSyntacticChunks_pargs {
 public:


  virtual ~HltContentContainerService_getSyntacticChunks_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getSyntacticChunks_result__isset {
  _HltContentContainerService_getSyntacticChunks_result__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getSyntacticChunks_result__isset;

class HltContentContainerService_getSyntacticChunks_result {
 public:

  HltContentContainerService_getSyntacticChunks_result() {
  }

  virtual ~HltContentContainerService_getSyntacticChunks_result() throw() {}

  std::vector<SyntacticChunk>  success;

  _HltContentContainerService_getSyntacticChunks_result__isset __isset;

  void __set_success(const std::vector<SyntacticChunk> & val) {
    success = val;
  }

  bool operator == (const HltContentContainerService_getSyntacticChunks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_getSyntacticChunks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_getSyntacticChunks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HltContentContainerService_getSyntacticChunks_presult__isset {
  _HltContentContainerService_getSyntacticChunks_presult__isset() : success(false) {}
  bool success;
} _HltContentContainerService_getSyntacticChunks_presult__isset;

class HltContentContainerService_getSyntacticChunks_presult {
 public:


  virtual ~HltContentContainerService_getSyntacticChunks_presult() throw() {}

  std::vector<SyntacticChunk> * success;

  _HltContentContainerService_getSyntacticChunks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setCommittedBeliefs_args__isset {
  _HltContentContainerService_setCommittedBeliefs_args__isset() : committedBeliefs(false) {}
  bool committedBeliefs;
} _HltContentContainerService_setCommittedBeliefs_args__isset;

class HltContentContainerService_setCommittedBeliefs_args {
 public:

  HltContentContainerService_setCommittedBeliefs_args() {
  }

  virtual ~HltContentContainerService_setCommittedBeliefs_args() throw() {}

  std::vector<CommittedBelief>  committedBeliefs;

  _HltContentContainerService_setCommittedBeliefs_args__isset __isset;

  void __set_committedBeliefs(const std::vector<CommittedBelief> & val) {
    committedBeliefs = val;
  }

  bool operator == (const HltContentContainerService_setCommittedBeliefs_args & rhs) const
  {
    if (!(committedBeliefs == rhs.committedBeliefs))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setCommittedBeliefs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setCommittedBeliefs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setCommittedBeliefs_pargs {
 public:


  virtual ~HltContentContainerService_setCommittedBeliefs_pargs() throw() {}

  const std::vector<CommittedBelief> * committedBeliefs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setCommittedBeliefs_result {
 public:

  HltContentContainerService_setCommittedBeliefs_result() {
  }

  virtual ~HltContentContainerService_setCommittedBeliefs_result() throw() {}


  bool operator == (const HltContentContainerService_setCommittedBeliefs_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setCommittedBeliefs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setCommittedBeliefs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setCommittedBeliefs_presult {
 public:


  virtual ~HltContentContainerService_setCommittedBeliefs_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setCoreferences_args__isset {
  _HltContentContainerService_setCoreferences_args__isset() : coreferences(false) {}
  bool coreferences;
} _HltContentContainerService_setCoreferences_args__isset;

class HltContentContainerService_setCoreferences_args {
 public:

  HltContentContainerService_setCoreferences_args() {
  }

  virtual ~HltContentContainerService_setCoreferences_args() throw() {}

  std::vector<Coreference>  coreferences;

  _HltContentContainerService_setCoreferences_args__isset __isset;

  void __set_coreferences(const std::vector<Coreference> & val) {
    coreferences = val;
  }

  bool operator == (const HltContentContainerService_setCoreferences_args & rhs) const
  {
    if (!(coreferences == rhs.coreferences))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setCoreferences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setCoreferences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setCoreferences_pargs {
 public:


  virtual ~HltContentContainerService_setCoreferences_pargs() throw() {}

  const std::vector<Coreference> * coreferences;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setCoreferences_result {
 public:

  HltContentContainerService_setCoreferences_result() {
  }

  virtual ~HltContentContainerService_setCoreferences_result() throw() {}


  bool operator == (const HltContentContainerService_setCoreferences_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setCoreferences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setCoreferences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setCoreferences_presult {
 public:


  virtual ~HltContentContainerService_setCoreferences_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setDependencies_args__isset {
  _HltContentContainerService_setDependencies_args__isset() : dependencies(false) {}
  bool dependencies;
} _HltContentContainerService_setDependencies_args__isset;

class HltContentContainerService_setDependencies_args {
 public:

  HltContentContainerService_setDependencies_args() {
  }

  virtual ~HltContentContainerService_setDependencies_args() throw() {}

  std::vector<Dependency>  dependencies;

  _HltContentContainerService_setDependencies_args__isset __isset;

  void __set_dependencies(const std::vector<Dependency> & val) {
    dependencies = val;
  }

  bool operator == (const HltContentContainerService_setDependencies_args & rhs) const
  {
    if (!(dependencies == rhs.dependencies))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setDependencies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setDependencies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setDependencies_pargs {
 public:


  virtual ~HltContentContainerService_setDependencies_pargs() throw() {}

  const std::vector<Dependency> * dependencies;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setDependencies_result {
 public:

  HltContentContainerService_setDependencies_result() {
  }

  virtual ~HltContentContainerService_setDependencies_result() throw() {}


  bool operator == (const HltContentContainerService_setDependencies_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setDependencies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setDependencies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setDependencies_presult {
 public:


  virtual ~HltContentContainerService_setDependencies_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setEntityMentions_args__isset {
  _HltContentContainerService_setEntityMentions_args__isset() : entityMentions(false) {}
  bool entityMentions;
} _HltContentContainerService_setEntityMentions_args__isset;

class HltContentContainerService_setEntityMentions_args {
 public:

  HltContentContainerService_setEntityMentions_args() {
  }

  virtual ~HltContentContainerService_setEntityMentions_args() throw() {}

  std::vector<EntityMention>  entityMentions;

  _HltContentContainerService_setEntityMentions_args__isset __isset;

  void __set_entityMentions(const std::vector<EntityMention> & val) {
    entityMentions = val;
  }

  bool operator == (const HltContentContainerService_setEntityMentions_args & rhs) const
  {
    if (!(entityMentions == rhs.entityMentions))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setEntityMentions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setEntityMentions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setEntityMentions_pargs {
 public:


  virtual ~HltContentContainerService_setEntityMentions_pargs() throw() {}

  const std::vector<EntityMention> * entityMentions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setEntityMentions_result {
 public:

  HltContentContainerService_setEntityMentions_result() {
  }

  virtual ~HltContentContainerService_setEntityMentions_result() throw() {}


  bool operator == (const HltContentContainerService_setEntityMentions_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setEntityMentions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setEntityMentions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setEntityMentions_presult {
 public:


  virtual ~HltContentContainerService_setEntityMentions_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setJointRelationCoreferences_args__isset {
  _HltContentContainerService_setJointRelationCoreferences_args__isset() : jointRelationCoreferences(false) {}
  bool jointRelationCoreferences;
} _HltContentContainerService_setJointRelationCoreferences_args__isset;

class HltContentContainerService_setJointRelationCoreferences_args {
 public:

  HltContentContainerService_setJointRelationCoreferences_args() {
  }

  virtual ~HltContentContainerService_setJointRelationCoreferences_args() throw() {}

  std::vector<JointRelationCoreference>  jointRelationCoreferences;

  _HltContentContainerService_setJointRelationCoreferences_args__isset __isset;

  void __set_jointRelationCoreferences(const std::vector<JointRelationCoreference> & val) {
    jointRelationCoreferences = val;
  }

  bool operator == (const HltContentContainerService_setJointRelationCoreferences_args & rhs) const
  {
    if (!(jointRelationCoreferences == rhs.jointRelationCoreferences))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setJointRelationCoreferences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setJointRelationCoreferences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setJointRelationCoreferences_pargs {
 public:


  virtual ~HltContentContainerService_setJointRelationCoreferences_pargs() throw() {}

  const std::vector<JointRelationCoreference> * jointRelationCoreferences;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setJointRelationCoreferences_result {
 public:

  HltContentContainerService_setJointRelationCoreferences_result() {
  }

  virtual ~HltContentContainerService_setJointRelationCoreferences_result() throw() {}


  bool operator == (const HltContentContainerService_setJointRelationCoreferences_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setJointRelationCoreferences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setJointRelationCoreferences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setJointRelationCoreferences_presult {
 public:


  virtual ~HltContentContainerService_setJointRelationCoreferences_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setMentions_args__isset {
  _HltContentContainerService_setMentions_args__isset() : entityMentions(false) {}
  bool entityMentions;
} _HltContentContainerService_setMentions_args__isset;

class HltContentContainerService_setMentions_args {
 public:

  HltContentContainerService_setMentions_args() {
  }

  virtual ~HltContentContainerService_setMentions_args() throw() {}

  std::vector<EntityMention>  entityMentions;

  _HltContentContainerService_setMentions_args__isset __isset;

  void __set_entityMentions(const std::vector<EntityMention> & val) {
    entityMentions = val;
  }

  bool operator == (const HltContentContainerService_setMentions_args & rhs) const
  {
    if (!(entityMentions == rhs.entityMentions))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setMentions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setMentions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setMentions_pargs {
 public:


  virtual ~HltContentContainerService_setMentions_pargs() throw() {}

  const std::vector<EntityMention> * entityMentions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setMentions_result {
 public:

  HltContentContainerService_setMentions_result() {
  }

  virtual ~HltContentContainerService_setMentions_result() throw() {}


  bool operator == (const HltContentContainerService_setMentions_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setMentions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setMentions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setMentions_presult {
 public:


  virtual ~HltContentContainerService_setMentions_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setNamedEntities_args__isset {
  _HltContentContainerService_setNamedEntities_args__isset() : namedEntities(false) {}
  bool namedEntities;
} _HltContentContainerService_setNamedEntities_args__isset;

class HltContentContainerService_setNamedEntities_args {
 public:

  HltContentContainerService_setNamedEntities_args() {
  }

  virtual ~HltContentContainerService_setNamedEntities_args() throw() {}

  std::vector<EntityMention>  namedEntities;

  _HltContentContainerService_setNamedEntities_args__isset __isset;

  void __set_namedEntities(const std::vector<EntityMention> & val) {
    namedEntities = val;
  }

  bool operator == (const HltContentContainerService_setNamedEntities_args & rhs) const
  {
    if (!(namedEntities == rhs.namedEntities))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setNamedEntities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setNamedEntities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setNamedEntities_pargs {
 public:


  virtual ~HltContentContainerService_setNamedEntities_pargs() throw() {}

  const std::vector<EntityMention> * namedEntities;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setNamedEntities_result {
 public:

  HltContentContainerService_setNamedEntities_result() {
  }

  virtual ~HltContentContainerService_setNamedEntities_result() throw() {}


  bool operator == (const HltContentContainerService_setNamedEntities_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setNamedEntities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setNamedEntities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setNamedEntities_presult {
 public:


  virtual ~HltContentContainerService_setNamedEntities_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setOpinions_args__isset {
  _HltContentContainerService_setOpinions_args__isset() : opinions(false) {}
  bool opinions;
} _HltContentContainerService_setOpinions_args__isset;

class HltContentContainerService_setOpinions_args {
 public:

  HltContentContainerService_setOpinions_args() {
  }

  virtual ~HltContentContainerService_setOpinions_args() throw() {}

  std::vector<Opinion>  opinions;

  _HltContentContainerService_setOpinions_args__isset __isset;

  void __set_opinions(const std::vector<Opinion> & val) {
    opinions = val;
  }

  bool operator == (const HltContentContainerService_setOpinions_args & rhs) const
  {
    if (!(opinions == rhs.opinions))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setOpinions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setOpinions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setOpinions_pargs {
 public:


  virtual ~HltContentContainerService_setOpinions_pargs() throw() {}

  const std::vector<Opinion> * opinions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setOpinions_result {
 public:

  HltContentContainerService_setOpinions_result() {
  }

  virtual ~HltContentContainerService_setOpinions_result() throw() {}


  bool operator == (const HltContentContainerService_setOpinions_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setOpinions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setOpinions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setOpinions_presult {
 public:


  virtual ~HltContentContainerService_setOpinions_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setPartOfSpeechs_args__isset {
  _HltContentContainerService_setPartOfSpeechs_args__isset() : partOfSpeechs(false) {}
  bool partOfSpeechs;
} _HltContentContainerService_setPartOfSpeechs_args__isset;

class HltContentContainerService_setPartOfSpeechs_args {
 public:

  HltContentContainerService_setPartOfSpeechs_args() {
  }

  virtual ~HltContentContainerService_setPartOfSpeechs_args() throw() {}

  std::vector<PartOfSpeech>  partOfSpeechs;

  _HltContentContainerService_setPartOfSpeechs_args__isset __isset;

  void __set_partOfSpeechs(const std::vector<PartOfSpeech> & val) {
    partOfSpeechs = val;
  }

  bool operator == (const HltContentContainerService_setPartOfSpeechs_args & rhs) const
  {
    if (!(partOfSpeechs == rhs.partOfSpeechs))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setPartOfSpeechs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setPartOfSpeechs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setPartOfSpeechs_pargs {
 public:


  virtual ~HltContentContainerService_setPartOfSpeechs_pargs() throw() {}

  const std::vector<PartOfSpeech> * partOfSpeechs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setPartOfSpeechs_result {
 public:

  HltContentContainerService_setPartOfSpeechs_result() {
  }

  virtual ~HltContentContainerService_setPartOfSpeechs_result() throw() {}


  bool operator == (const HltContentContainerService_setPartOfSpeechs_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setPartOfSpeechs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setPartOfSpeechs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setPartOfSpeechs_presult {
 public:


  virtual ~HltContentContainerService_setPartOfSpeechs_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setPassages_args__isset {
  _HltContentContainerService_setPassages_args__isset() : passages(false) {}
  bool passages;
} _HltContentContainerService_setPassages_args__isset;

class HltContentContainerService_setPassages_args {
 public:

  HltContentContainerService_setPassages_args() {
  }

  virtual ~HltContentContainerService_setPassages_args() throw() {}

  std::vector<Passage>  passages;

  _HltContentContainerService_setPassages_args__isset __isset;

  void __set_passages(const std::vector<Passage> & val) {
    passages = val;
  }

  bool operator == (const HltContentContainerService_setPassages_args & rhs) const
  {
    if (!(passages == rhs.passages))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setPassages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setPassages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setPassages_pargs {
 public:


  virtual ~HltContentContainerService_setPassages_pargs() throw() {}

  const std::vector<Passage> * passages;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setPassages_result {
 public:

  HltContentContainerService_setPassages_result() {
  }

  virtual ~HltContentContainerService_setPassages_result() throw() {}


  bool operator == (const HltContentContainerService_setPassages_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setPassages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setPassages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setPassages_presult {
 public:


  virtual ~HltContentContainerService_setPassages_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setProsodicPhrases_args__isset {
  _HltContentContainerService_setProsodicPhrases_args__isset() : prosodicPhrases(false) {}
  bool prosodicPhrases;
} _HltContentContainerService_setProsodicPhrases_args__isset;

class HltContentContainerService_setProsodicPhrases_args {
 public:

  HltContentContainerService_setProsodicPhrases_args() {
  }

  virtual ~HltContentContainerService_setProsodicPhrases_args() throw() {}

  std::vector<ProsodicPhrase>  prosodicPhrases;

  _HltContentContainerService_setProsodicPhrases_args__isset __isset;

  void __set_prosodicPhrases(const std::vector<ProsodicPhrase> & val) {
    prosodicPhrases = val;
  }

  bool operator == (const HltContentContainerService_setProsodicPhrases_args & rhs) const
  {
    if (!(prosodicPhrases == rhs.prosodicPhrases))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setProsodicPhrases_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setProsodicPhrases_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setProsodicPhrases_pargs {
 public:


  virtual ~HltContentContainerService_setProsodicPhrases_pargs() throw() {}

  const std::vector<ProsodicPhrase> * prosodicPhrases;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setProsodicPhrases_result {
 public:

  HltContentContainerService_setProsodicPhrases_result() {
  }

  virtual ~HltContentContainerService_setProsodicPhrases_result() throw() {}


  bool operator == (const HltContentContainerService_setProsodicPhrases_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setProsodicPhrases_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setProsodicPhrases_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setProsodicPhrases_presult {
 public:


  virtual ~HltContentContainerService_setProsodicPhrases_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setRelations_args__isset {
  _HltContentContainerService_setRelations_args__isset() : relations(false) {}
  bool relations;
} _HltContentContainerService_setRelations_args__isset;

class HltContentContainerService_setRelations_args {
 public:

  HltContentContainerService_setRelations_args() {
  }

  virtual ~HltContentContainerService_setRelations_args() throw() {}

  std::vector<Relation>  relations;

  _HltContentContainerService_setRelations_args__isset __isset;

  void __set_relations(const std::vector<Relation> & val) {
    relations = val;
  }

  bool operator == (const HltContentContainerService_setRelations_args & rhs) const
  {
    if (!(relations == rhs.relations))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setRelations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setRelations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setRelations_pargs {
 public:


  virtual ~HltContentContainerService_setRelations_pargs() throw() {}

  const std::vector<Relation> * relations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setRelations_result {
 public:

  HltContentContainerService_setRelations_result() {
  }

  virtual ~HltContentContainerService_setRelations_result() throw() {}


  bool operator == (const HltContentContainerService_setRelations_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setRelations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setRelations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setRelations_presult {
 public:


  virtual ~HltContentContainerService_setRelations_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setSarcasms_args__isset {
  _HltContentContainerService_setSarcasms_args__isset() : sarcasms(false) {}
  bool sarcasms;
} _HltContentContainerService_setSarcasms_args__isset;

class HltContentContainerService_setSarcasms_args {
 public:

  HltContentContainerService_setSarcasms_args() {
  }

  virtual ~HltContentContainerService_setSarcasms_args() throw() {}

  std::vector<Sarcasm>  sarcasms;

  _HltContentContainerService_setSarcasms_args__isset __isset;

  void __set_sarcasms(const std::vector<Sarcasm> & val) {
    sarcasms = val;
  }

  bool operator == (const HltContentContainerService_setSarcasms_args & rhs) const
  {
    if (!(sarcasms == rhs.sarcasms))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setSarcasms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setSarcasms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSarcasms_pargs {
 public:


  virtual ~HltContentContainerService_setSarcasms_pargs() throw() {}

  const std::vector<Sarcasm> * sarcasms;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSarcasms_result {
 public:

  HltContentContainerService_setSarcasms_result() {
  }

  virtual ~HltContentContainerService_setSarcasms_result() throw() {}


  bool operator == (const HltContentContainerService_setSarcasms_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setSarcasms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setSarcasms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSarcasms_presult {
 public:


  virtual ~HltContentContainerService_setSarcasms_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setSentences_args__isset {
  _HltContentContainerService_setSentences_args__isset() : sentences(false) {}
  bool sentences;
} _HltContentContainerService_setSentences_args__isset;

class HltContentContainerService_setSentences_args {
 public:

  HltContentContainerService_setSentences_args() {
  }

  virtual ~HltContentContainerService_setSentences_args() throw() {}

  std::vector<Sentence>  sentences;

  _HltContentContainerService_setSentences_args__isset __isset;

  void __set_sentences(const std::vector<Sentence> & val) {
    sentences = val;
  }

  bool operator == (const HltContentContainerService_setSentences_args & rhs) const
  {
    if (!(sentences == rhs.sentences))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setSentences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setSentences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSentences_pargs {
 public:


  virtual ~HltContentContainerService_setSentences_pargs() throw() {}

  const std::vector<Sentence> * sentences;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSentences_result {
 public:

  HltContentContainerService_setSentences_result() {
  }

  virtual ~HltContentContainerService_setSentences_result() throw() {}


  bool operator == (const HltContentContainerService_setSentences_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setSentences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setSentences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSentences_presult {
 public:


  virtual ~HltContentContainerService_setSentences_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HltContentContainerService_setSyntacticChunks_args__isset {
  _HltContentContainerService_setSyntacticChunks_args__isset() : syntactiChunks(false) {}
  bool syntactiChunks;
} _HltContentContainerService_setSyntacticChunks_args__isset;

class HltContentContainerService_setSyntacticChunks_args {
 public:

  HltContentContainerService_setSyntacticChunks_args() {
  }

  virtual ~HltContentContainerService_setSyntacticChunks_args() throw() {}

  std::vector<SyntacticChunk>  syntactiChunks;

  _HltContentContainerService_setSyntacticChunks_args__isset __isset;

  void __set_syntactiChunks(const std::vector<SyntacticChunk> & val) {
    syntactiChunks = val;
  }

  bool operator == (const HltContentContainerService_setSyntacticChunks_args & rhs) const
  {
    if (!(syntactiChunks == rhs.syntactiChunks))
      return false;
    return true;
  }
  bool operator != (const HltContentContainerService_setSyntacticChunks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setSyntacticChunks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSyntacticChunks_pargs {
 public:


  virtual ~HltContentContainerService_setSyntacticChunks_pargs() throw() {}

  const std::vector<SyntacticChunk> * syntactiChunks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSyntacticChunks_result {
 public:

  HltContentContainerService_setSyntacticChunks_result() {
  }

  virtual ~HltContentContainerService_setSyntacticChunks_result() throw() {}


  bool operator == (const HltContentContainerService_setSyntacticChunks_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HltContentContainerService_setSyntacticChunks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HltContentContainerService_setSyntacticChunks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HltContentContainerService_setSyntacticChunks_presult {
 public:


  virtual ~HltContentContainerService_setSyntacticChunks_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HltContentContainerServiceClient : virtual public HltContentContainerServiceIf, public ItemServiceClient {
 public:
  HltContentContainerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  HltContentContainerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCommittedBeliefs(std::vector<CommittedBelief> & _return);
  void send_getCommittedBeliefs();
  void recv_getCommittedBeliefs(std::vector<CommittedBelief> & _return);
  void getCoreferences(std::vector<Coreference> & _return);
  void send_getCoreferences();
  void recv_getCoreferences(std::vector<Coreference> & _return);
  void getDependencies(std::vector<Dependency> & _return);
  void send_getDependencies();
  void recv_getDependencies(std::vector<Dependency> & _return);
  void getEntityMentions(std::vector<EntityMention> & _return);
  void send_getEntityMentions();
  void recv_getEntityMentions(std::vector<EntityMention> & _return);
  void getJointRelationCoreferences(std::vector<JointRelationCoreference> & _return);
  void send_getJointRelationCoreferences();
  void recv_getJointRelationCoreferences(std::vector<JointRelationCoreference> & _return);
  void getMentions(std::vector<EntityMention> & _return);
  void send_getMentions();
  void recv_getMentions(std::vector<EntityMention> & _return);
  void getNamedEntities(std::vector<EntityMention> & _return);
  void send_getNamedEntities();
  void recv_getNamedEntities(std::vector<EntityMention> & _return);
  void getOpinions(std::vector<Opinion> & _return);
  void send_getOpinions();
  void recv_getOpinions(std::vector<Opinion> & _return);
  void getPartOfSpeechs(std::vector<PartOfSpeech> & _return);
  void send_getPartOfSpeechs();
  void recv_getPartOfSpeechs(std::vector<PartOfSpeech> & _return);
  void getPassages(std::vector<Passage> & _return);
  void send_getPassages();
  void recv_getPassages(std::vector<Passage> & _return);
  void getProsodicPhrases(std::vector<ProsodicPhrase> & _return);
  void send_getProsodicPhrases();
  void recv_getProsodicPhrases(std::vector<ProsodicPhrase> & _return);
  void getRelations(std::vector<Relation> & _return);
  void send_getRelations();
  void recv_getRelations(std::vector<Relation> & _return);
  void getSarcasms(std::vector<Sarcasm> & _return);
  void send_getSarcasms();
  void recv_getSarcasms(std::vector<Sarcasm> & _return);
  void getSentences(std::vector<Sentence> & _return);
  void send_getSentences();
  void recv_getSentences(std::vector<Sentence> & _return);
  void getSyntacticChunks(std::vector<SyntacticChunk> & _return);
  void send_getSyntacticChunks();
  void recv_getSyntacticChunks(std::vector<SyntacticChunk> & _return);
  void setCommittedBeliefs(const std::vector<CommittedBelief> & committedBeliefs);
  void send_setCommittedBeliefs(const std::vector<CommittedBelief> & committedBeliefs);
  void recv_setCommittedBeliefs();
  void setCoreferences(const std::vector<Coreference> & coreferences);
  void send_setCoreferences(const std::vector<Coreference> & coreferences);
  void recv_setCoreferences();
  void setDependencies(const std::vector<Dependency> & dependencies);
  void send_setDependencies(const std::vector<Dependency> & dependencies);
  void recv_setDependencies();
  void setEntityMentions(const std::vector<EntityMention> & entityMentions);
  void send_setEntityMentions(const std::vector<EntityMention> & entityMentions);
  void recv_setEntityMentions();
  void setJointRelationCoreferences(const std::vector<JointRelationCoreference> & jointRelationCoreferences);
  void send_setJointRelationCoreferences(const std::vector<JointRelationCoreference> & jointRelationCoreferences);
  void recv_setJointRelationCoreferences();
  void setMentions(const std::vector<EntityMention> & entityMentions);
  void send_setMentions(const std::vector<EntityMention> & entityMentions);
  void recv_setMentions();
  void setNamedEntities(const std::vector<EntityMention> & namedEntities);
  void send_setNamedEntities(const std::vector<EntityMention> & namedEntities);
  void recv_setNamedEntities();
  void setOpinions(const std::vector<Opinion> & opinions);
  void send_setOpinions(const std::vector<Opinion> & opinions);
  void recv_setOpinions();
  void setPartOfSpeechs(const std::vector<PartOfSpeech> & partOfSpeechs);
  void send_setPartOfSpeechs(const std::vector<PartOfSpeech> & partOfSpeechs);
  void recv_setPartOfSpeechs();
  void setPassages(const std::vector<Passage> & passages);
  void send_setPassages(const std::vector<Passage> & passages);
  void recv_setPassages();
  void setProsodicPhrases(const std::vector<ProsodicPhrase> & prosodicPhrases);
  void send_setProsodicPhrases(const std::vector<ProsodicPhrase> & prosodicPhrases);
  void recv_setProsodicPhrases();
  void setRelations(const std::vector<Relation> & relations);
  void send_setRelations(const std::vector<Relation> & relations);
  void recv_setRelations();
  void setSarcasms(const std::vector<Sarcasm> & sarcasms);
  void send_setSarcasms(const std::vector<Sarcasm> & sarcasms);
  void recv_setSarcasms();
  void setSentences(const std::vector<Sentence> & sentences);
  void send_setSentences(const std::vector<Sentence> & sentences);
  void recv_setSentences();
  void setSyntacticChunks(const std::vector<SyntacticChunk> & syntactiChunks);
  void send_setSyntacticChunks(const std::vector<SyntacticChunk> & syntactiChunks);
  void recv_setSyntacticChunks();
};

class HltContentContainerServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<HltContentContainerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HltContentContainerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCommittedBeliefs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCoreferences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDependencies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntityMentions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJointRelationCoreferences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMentions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNamedEntities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOpinions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPartOfSpeechs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPassages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProsodicPhrases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRelations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSarcasms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSentences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSyntacticChunks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCommittedBeliefs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCoreferences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setDependencies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setEntityMentions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setJointRelationCoreferences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setMentions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setNamedEntities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setOpinions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPartOfSpeechs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPassages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setProsodicPhrases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setRelations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSarcasms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSentences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSyntacticChunks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HltContentContainerServiceProcessor(boost::shared_ptr<HltContentContainerServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["getCommittedBeliefs"] = &HltContentContainerServiceProcessor::process_getCommittedBeliefs;
    processMap_["getCoreferences"] = &HltContentContainerServiceProcessor::process_getCoreferences;
    processMap_["getDependencies"] = &HltContentContainerServiceProcessor::process_getDependencies;
    processMap_["getEntityMentions"] = &HltContentContainerServiceProcessor::process_getEntityMentions;
    processMap_["getJointRelationCoreferences"] = &HltContentContainerServiceProcessor::process_getJointRelationCoreferences;
    processMap_["getMentions"] = &HltContentContainerServiceProcessor::process_getMentions;
    processMap_["getNamedEntities"] = &HltContentContainerServiceProcessor::process_getNamedEntities;
    processMap_["getOpinions"] = &HltContentContainerServiceProcessor::process_getOpinions;
    processMap_["getPartOfSpeechs"] = &HltContentContainerServiceProcessor::process_getPartOfSpeechs;
    processMap_["getPassages"] = &HltContentContainerServiceProcessor::process_getPassages;
    processMap_["getProsodicPhrases"] = &HltContentContainerServiceProcessor::process_getProsodicPhrases;
    processMap_["getRelations"] = &HltContentContainerServiceProcessor::process_getRelations;
    processMap_["getSarcasms"] = &HltContentContainerServiceProcessor::process_getSarcasms;
    processMap_["getSentences"] = &HltContentContainerServiceProcessor::process_getSentences;
    processMap_["getSyntacticChunks"] = &HltContentContainerServiceProcessor::process_getSyntacticChunks;
    processMap_["setCommittedBeliefs"] = &HltContentContainerServiceProcessor::process_setCommittedBeliefs;
    processMap_["setCoreferences"] = &HltContentContainerServiceProcessor::process_setCoreferences;
    processMap_["setDependencies"] = &HltContentContainerServiceProcessor::process_setDependencies;
    processMap_["setEntityMentions"] = &HltContentContainerServiceProcessor::process_setEntityMentions;
    processMap_["setJointRelationCoreferences"] = &HltContentContainerServiceProcessor::process_setJointRelationCoreferences;
    processMap_["setMentions"] = &HltContentContainerServiceProcessor::process_setMentions;
    processMap_["setNamedEntities"] = &HltContentContainerServiceProcessor::process_setNamedEntities;
    processMap_["setOpinions"] = &HltContentContainerServiceProcessor::process_setOpinions;
    processMap_["setPartOfSpeechs"] = &HltContentContainerServiceProcessor::process_setPartOfSpeechs;
    processMap_["setPassages"] = &HltContentContainerServiceProcessor::process_setPassages;
    processMap_["setProsodicPhrases"] = &HltContentContainerServiceProcessor::process_setProsodicPhrases;
    processMap_["setRelations"] = &HltContentContainerServiceProcessor::process_setRelations;
    processMap_["setSarcasms"] = &HltContentContainerServiceProcessor::process_setSarcasms;
    processMap_["setSentences"] = &HltContentContainerServiceProcessor::process_setSentences;
    processMap_["setSyntacticChunks"] = &HltContentContainerServiceProcessor::process_setSyntacticChunks;
  }

  virtual ~HltContentContainerServiceProcessor() {}
};

class HltContentContainerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HltContentContainerServiceProcessorFactory(const ::boost::shared_ptr< HltContentContainerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HltContentContainerServiceIfFactory > handlerFactory_;
};

class HltContentContainerServiceMultiface : virtual public HltContentContainerServiceIf, public ItemServiceMultiface {
 public:
  HltContentContainerServiceMultiface(std::vector<boost::shared_ptr<HltContentContainerServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<HltContentContainerServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~HltContentContainerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HltContentContainerServiceIf> > ifaces_;
  HltContentContainerServiceMultiface() {}
  void add(boost::shared_ptr<HltContentContainerServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getCommittedBeliefs(std::vector<CommittedBelief> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCommittedBeliefs(_return);
    }
    ifaces_[i]->getCommittedBeliefs(_return);
    return;
  }

  void getCoreferences(std::vector<Coreference> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCoreferences(_return);
    }
    ifaces_[i]->getCoreferences(_return);
    return;
  }

  void getDependencies(std::vector<Dependency> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDependencies(_return);
    }
    ifaces_[i]->getDependencies(_return);
    return;
  }

  void getEntityMentions(std::vector<EntityMention> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntityMentions(_return);
    }
    ifaces_[i]->getEntityMentions(_return);
    return;
  }

  void getJointRelationCoreferences(std::vector<JointRelationCoreference> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJointRelationCoreferences(_return);
    }
    ifaces_[i]->getJointRelationCoreferences(_return);
    return;
  }

  void getMentions(std::vector<EntityMention> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMentions(_return);
    }
    ifaces_[i]->getMentions(_return);
    return;
  }

  void getNamedEntities(std::vector<EntityMention> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNamedEntities(_return);
    }
    ifaces_[i]->getNamedEntities(_return);
    return;
  }

  void getOpinions(std::vector<Opinion> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOpinions(_return);
    }
    ifaces_[i]->getOpinions(_return);
    return;
  }

  void getPartOfSpeechs(std::vector<PartOfSpeech> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPartOfSpeechs(_return);
    }
    ifaces_[i]->getPartOfSpeechs(_return);
    return;
  }

  void getPassages(std::vector<Passage> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPassages(_return);
    }
    ifaces_[i]->getPassages(_return);
    return;
  }

  void getProsodicPhrases(std::vector<ProsodicPhrase> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProsodicPhrases(_return);
    }
    ifaces_[i]->getProsodicPhrases(_return);
    return;
  }

  void getRelations(std::vector<Relation> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRelations(_return);
    }
    ifaces_[i]->getRelations(_return);
    return;
  }

  void getSarcasms(std::vector<Sarcasm> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSarcasms(_return);
    }
    ifaces_[i]->getSarcasms(_return);
    return;
  }

  void getSentences(std::vector<Sentence> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSentences(_return);
    }
    ifaces_[i]->getSentences(_return);
    return;
  }

  void getSyntacticChunks(std::vector<SyntacticChunk> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSyntacticChunks(_return);
    }
    ifaces_[i]->getSyntacticChunks(_return);
    return;
  }

  void setCommittedBeliefs(const std::vector<CommittedBelief> & committedBeliefs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCommittedBeliefs(committedBeliefs);
    }
    ifaces_[i]->setCommittedBeliefs(committedBeliefs);
  }

  void setCoreferences(const std::vector<Coreference> & coreferences) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCoreferences(coreferences);
    }
    ifaces_[i]->setCoreferences(coreferences);
  }

  void setDependencies(const std::vector<Dependency> & dependencies) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setDependencies(dependencies);
    }
    ifaces_[i]->setDependencies(dependencies);
  }

  void setEntityMentions(const std::vector<EntityMention> & entityMentions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setEntityMentions(entityMentions);
    }
    ifaces_[i]->setEntityMentions(entityMentions);
  }

  void setJointRelationCoreferences(const std::vector<JointRelationCoreference> & jointRelationCoreferences) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setJointRelationCoreferences(jointRelationCoreferences);
    }
    ifaces_[i]->setJointRelationCoreferences(jointRelationCoreferences);
  }

  void setMentions(const std::vector<EntityMention> & entityMentions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setMentions(entityMentions);
    }
    ifaces_[i]->setMentions(entityMentions);
  }

  void setNamedEntities(const std::vector<EntityMention> & namedEntities) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setNamedEntities(namedEntities);
    }
    ifaces_[i]->setNamedEntities(namedEntities);
  }

  void setOpinions(const std::vector<Opinion> & opinions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setOpinions(opinions);
    }
    ifaces_[i]->setOpinions(opinions);
  }

  void setPartOfSpeechs(const std::vector<PartOfSpeech> & partOfSpeechs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPartOfSpeechs(partOfSpeechs);
    }
    ifaces_[i]->setPartOfSpeechs(partOfSpeechs);
  }

  void setPassages(const std::vector<Passage> & passages) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPassages(passages);
    }
    ifaces_[i]->setPassages(passages);
  }

  void setProsodicPhrases(const std::vector<ProsodicPhrase> & prosodicPhrases) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setProsodicPhrases(prosodicPhrases);
    }
    ifaces_[i]->setProsodicPhrases(prosodicPhrases);
  }

  void setRelations(const std::vector<Relation> & relations) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setRelations(relations);
    }
    ifaces_[i]->setRelations(relations);
  }

  void setSarcasms(const std::vector<Sarcasm> & sarcasms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSarcasms(sarcasms);
    }
    ifaces_[i]->setSarcasms(sarcasms);
  }

  void setSentences(const std::vector<Sentence> & sentences) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSentences(sentences);
    }
    ifaces_[i]->setSentences(sentences);
  }

  void setSyntacticChunks(const std::vector<SyntacticChunk> & syntactiChunks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSyntacticChunks(syntactiChunks);
    }
    ifaces_[i]->setSyntacticChunks(syntactiChunks);
  }

};

}}} // namespace

#endif
