/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SubjectivityService_H
#define SubjectivityService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class SubjectivityServiceIf {
 public:
  virtual ~SubjectivityServiceIf() {}
  virtual Subjectivity::type valueOf(const std::string& name) = 0;
  virtual Subjectivity::type values() = 0;
};

class SubjectivityServiceIfFactory {
 public:
  typedef SubjectivityServiceIf Handler;

  virtual ~SubjectivityServiceIfFactory() {}

  virtual SubjectivityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SubjectivityServiceIf* /* handler */) = 0;
};

class SubjectivityServiceIfSingletonFactory : virtual public SubjectivityServiceIfFactory {
 public:
  SubjectivityServiceIfSingletonFactory(const boost::shared_ptr<SubjectivityServiceIf>& iface) : iface_(iface) {}
  virtual ~SubjectivityServiceIfSingletonFactory() {}

  virtual SubjectivityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SubjectivityServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SubjectivityServiceIf> iface_;
};

class SubjectivityServiceNull : virtual public SubjectivityServiceIf {
 public:
  virtual ~SubjectivityServiceNull() {}
  Subjectivity::type valueOf(const std::string& /* name */) {
    Subjectivity::type _return = (Subjectivity::type)0;
    return _return;
  }
  Subjectivity::type values() {
    Subjectivity::type _return = (Subjectivity::type)0;
    return _return;
  }
};

typedef struct _SubjectivityService_valueOf_args__isset {
  _SubjectivityService_valueOf_args__isset() : name(false) {}
  bool name;
} _SubjectivityService_valueOf_args__isset;

class SubjectivityService_valueOf_args {
 public:

  SubjectivityService_valueOf_args() : name() {
  }

  virtual ~SubjectivityService_valueOf_args() throw() {}

  std::string name;

  _SubjectivityService_valueOf_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const SubjectivityService_valueOf_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SubjectivityService_valueOf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubjectivityService_valueOf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SubjectivityService_valueOf_pargs {
 public:


  virtual ~SubjectivityService_valueOf_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SubjectivityService_valueOf_result__isset {
  _SubjectivityService_valueOf_result__isset() : success(false) {}
  bool success;
} _SubjectivityService_valueOf_result__isset;

class SubjectivityService_valueOf_result {
 public:

  SubjectivityService_valueOf_result() : success((Subjectivity::type)0) {
  }

  virtual ~SubjectivityService_valueOf_result() throw() {}

  Subjectivity::type success;

  _SubjectivityService_valueOf_result__isset __isset;

  void __set_success(const Subjectivity::type val) {
    success = val;
  }

  bool operator == (const SubjectivityService_valueOf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SubjectivityService_valueOf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubjectivityService_valueOf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SubjectivityService_valueOf_presult__isset {
  _SubjectivityService_valueOf_presult__isset() : success(false) {}
  bool success;
} _SubjectivityService_valueOf_presult__isset;

class SubjectivityService_valueOf_presult {
 public:


  virtual ~SubjectivityService_valueOf_presult() throw() {}

  Subjectivity::type* success;

  _SubjectivityService_valueOf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SubjectivityService_values_args {
 public:

  SubjectivityService_values_args() {
  }

  virtual ~SubjectivityService_values_args() throw() {}


  bool operator == (const SubjectivityService_values_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SubjectivityService_values_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubjectivityService_values_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SubjectivityService_values_pargs {
 public:


  virtual ~SubjectivityService_values_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SubjectivityService_values_result__isset {
  _SubjectivityService_values_result__isset() : success(false) {}
  bool success;
} _SubjectivityService_values_result__isset;

class SubjectivityService_values_result {
 public:

  SubjectivityService_values_result() : success((Subjectivity::type)0) {
  }

  virtual ~SubjectivityService_values_result() throw() {}

  Subjectivity::type success;

  _SubjectivityService_values_result__isset __isset;

  void __set_success(const Subjectivity::type val) {
    success = val;
  }

  bool operator == (const SubjectivityService_values_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SubjectivityService_values_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubjectivityService_values_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SubjectivityService_values_presult__isset {
  _SubjectivityService_values_presult__isset() : success(false) {}
  bool success;
} _SubjectivityService_values_presult__isset;

class SubjectivityService_values_presult {
 public:


  virtual ~SubjectivityService_values_presult() throw() {}

  Subjectivity::type* success;

  _SubjectivityService_values_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SubjectivityServiceClient : virtual public SubjectivityServiceIf {
 public:
  SubjectivityServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SubjectivityServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  Subjectivity::type valueOf(const std::string& name);
  void send_valueOf(const std::string& name);
  Subjectivity::type recv_valueOf();
  Subjectivity::type values();
  void send_values();
  Subjectivity::type recv_values();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SubjectivityServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SubjectivityServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SubjectivityServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_valueOf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_values(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SubjectivityServiceProcessor(boost::shared_ptr<SubjectivityServiceIf> iface) :
    iface_(iface) {
    processMap_["valueOf"] = &SubjectivityServiceProcessor::process_valueOf;
    processMap_["values"] = &SubjectivityServiceProcessor::process_values;
  }

  virtual ~SubjectivityServiceProcessor() {}
};

class SubjectivityServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SubjectivityServiceProcessorFactory(const ::boost::shared_ptr< SubjectivityServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SubjectivityServiceIfFactory > handlerFactory_;
};

class SubjectivityServiceMultiface : virtual public SubjectivityServiceIf {
 public:
  SubjectivityServiceMultiface(std::vector<boost::shared_ptr<SubjectivityServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SubjectivityServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SubjectivityServiceIf> > ifaces_;
  SubjectivityServiceMultiface() {}
  void add(boost::shared_ptr<SubjectivityServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  Subjectivity::type valueOf(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->valueOf(name);
    }
    return ifaces_[i]->valueOf(name);
  }

  Subjectivity::type values() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->values();
    }
    return ifaces_[i]->values();
  }

};

}}} // namespace

#endif