/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "io_types.h"

#include <algorithm>

namespace thrift { namespace adept { namespace io {

const char* EREDocument::ascii_fingerprint = "20590C88CFB1BE03A1F6EBBDAA4F87F3";
const uint8_t EREDocument::binary_fingerprint[16] = {0x20,0x59,0x0C,0x88,0xCF,0xB1,0xBE,0x03,0xA1,0xF6,0xEB,0xBD,0xAA,0x4F,0x87,0xF3};

uint32_t EREDocument::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fullText = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullText);
          isset_fullText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->document.read(iprot);
          this->__isset.document = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->charMapping.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              int64_t _key5;
              xfer += iprot->readI64(_key5);
              int64_t& _val6 = this->charMapping[_key5];
              xfer += iprot->readI64(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.charMapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->charToTokenOffset.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              int64_t _key12;
              xfer += iprot->readI64(_key12);
              int64_t& _val13 = this->charToTokenOffset[_key12];
              xfer += iprot->readI64(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.charToTokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->startIndices.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->startIndices.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readI32(this->startIndices[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.startIndices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->endIndices.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->endIndices.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += iprot->readI32(this->endIndices[_i23]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.endIndices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->entityMentionsById.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _ktype25;
            ::apache::thrift::protocol::TType _vtype26;
            xfer += iprot->readMapBegin(_ktype25, _vtype26, _size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              int64_t _key29;
              xfer += iprot->readI64(_key29);
               ::thrift::adept::common::EntityMention& _val30 = this->entityMentionsById[_key29];
              xfer += _val30.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.entityMentionsById = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->canonicalEntityMentionsById.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _ktype32;
            ::apache::thrift::protocol::TType _vtype33;
            xfer += iprot->readMapBegin(_ktype32, _vtype33, _size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              int64_t _key36;
              xfer += iprot->readI64(_key36);
               ::thrift::adept::common::EntityMention& _val37 = this->canonicalEntityMentionsById[_key36];
              xfer += _val37.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.canonicalEntityMentionsById = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isProxy);
          this->__isset.isProxy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->eventsById.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _ktype39;
            ::apache::thrift::protocol::TType _vtype40;
            xfer += iprot->readMapBegin(_ktype39, _vtype40, _size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              int64_t _key43;
              xfer += iprot->readI64(_key43);
              std::vector< ::thrift::adept::common::Event> & _val44 = this->eventsById[_key43];
              {
                _val44.clear();
                uint32_t _size45;
                ::apache::thrift::protocol::TType _etype48;
                xfer += iprot->readListBegin(_etype48, _size45);
                _val44.resize(_size45);
                uint32_t _i49;
                for (_i49 = 0; _i49 < _size45; ++_i49)
                {
                  xfer += _val44[_i49].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.eventsById = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fullText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EREDocument::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EREDocument");

  xfer += oprot->writeFieldBegin("fullText", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fullText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("document", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->document.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("charMapping", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->charMapping.size()));
    std::map<int64_t, int64_t> ::const_iterator _iter50;
    for (_iter50 = this->charMapping.begin(); _iter50 != this->charMapping.end(); ++_iter50)
    {
      xfer += oprot->writeI64(_iter50->first);
      xfer += oprot->writeI64(_iter50->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("charToTokenOffset", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->charToTokenOffset.size()));
    std::map<int64_t, int64_t> ::const_iterator _iter51;
    for (_iter51 = this->charToTokenOffset.begin(); _iter51 != this->charToTokenOffset.end(); ++_iter51)
    {
      xfer += oprot->writeI64(_iter51->first);
      xfer += oprot->writeI64(_iter51->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startIndices", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->startIndices.size()));
    std::vector<int32_t> ::const_iterator _iter52;
    for (_iter52 = this->startIndices.begin(); _iter52 != this->startIndices.end(); ++_iter52)
    {
      xfer += oprot->writeI32((*_iter52));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endIndices", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->endIndices.size()));
    std::vector<int32_t> ::const_iterator _iter53;
    for (_iter53 = this->endIndices.begin(); _iter53 != this->endIndices.end(); ++_iter53)
    {
      xfer += oprot->writeI32((*_iter53));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityMentionsById", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entityMentionsById.size()));
    std::map<int64_t,  ::thrift::adept::common::EntityMention> ::const_iterator _iter54;
    for (_iter54 = this->entityMentionsById.begin(); _iter54 != this->entityMentionsById.end(); ++_iter54)
    {
      xfer += oprot->writeI64(_iter54->first);
      xfer += _iter54->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canonicalEntityMentionsById", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->canonicalEntityMentionsById.size()));
    std::map<int64_t,  ::thrift::adept::common::EntityMention> ::const_iterator _iter55;
    for (_iter55 = this->canonicalEntityMentionsById.begin(); _iter55 != this->canonicalEntityMentionsById.end(); ++_iter55)
    {
      xfer += oprot->writeI64(_iter55->first);
      xfer += _iter55->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isProxy", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->isProxy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventsById", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->eventsById.size()));
    std::map<int64_t, std::vector< ::thrift::adept::common::Event> > ::const_iterator _iter56;
    for (_iter56 = this->eventsById.begin(); _iter56 != this->eventsById.end(); ++_iter56)
    {
      xfer += oprot->writeI64(_iter56->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter56->second.size()));
        std::vector< ::thrift::adept::common::Event> ::const_iterator _iter57;
        for (_iter57 = _iter56->second.begin(); _iter57 != _iter56->second.end(); ++_iter57)
        {
          xfer += (*_iter57).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EREDocument &a, EREDocument &b) {
  using ::std::swap;
  swap(a.fullText, b.fullText);
  swap(a.document, b.document);
  swap(a.charMapping, b.charMapping);
  swap(a.charToTokenOffset, b.charToTokenOffset);
  swap(a.startIndices, b.startIndices);
  swap(a.endIndices, b.endIndices);
  swap(a.entityMentionsById, b.entityMentionsById);
  swap(a.canonicalEntityMentionsById, b.canonicalEntityMentionsById);
  swap(a.isProxy, b.isProxy);
  swap(a.eventsById, b.eventsById);
  swap(a.__isset, b.__isset);
}

const char* CoNLLDocument::ascii_fingerprint = "689DB8F9C69E647441881CA05C60E136";
const uint8_t CoNLLDocument::binary_fingerprint[16] = {0x68,0x9D,0xB8,0xF9,0xC6,0x9E,0x64,0x74,0x41,0x88,0x1C,0xA0,0x5C,0x60,0xE1,0x36};

uint32_t CoNLLDocument::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fullText = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullText);
          isset_fullText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->document.read(iprot);
          this->__isset.document = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wordNums.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            xfer += iprot->readListBegin(_etype61, _size58);
            this->wordNums.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              {
                this->wordNums[_i62].clear();
                uint32_t _size63;
                ::apache::thrift::protocol::TType _etype66;
                xfer += iprot->readListBegin(_etype66, _size63);
                this->wordNums[_i62].resize(_size63);
                uint32_t _i67;
                for (_i67 = 0; _i67 < _size63; ++_i67)
                {
                  xfer += iprot->readI32(this->wordNums[_i62][_i67]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.wordNums = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tokens.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->tokens.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              {
                this->tokens[_i72].clear();
                uint32_t _size73;
                ::apache::thrift::protocol::TType _etype76;
                xfer += iprot->readListBegin(_etype76, _size73);
                this->tokens[_i72].resize(_size73);
                uint32_t _i77;
                for (_i77 = 0; _i77 < _size73; ++_i77)
                {
                  xfer += iprot->readString(this->tokens[_i72][_i77]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tokens = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->POSs.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _etype81;
            xfer += iprot->readListBegin(_etype81, _size78);
            this->POSs.resize(_size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              {
                this->POSs[_i82].clear();
                uint32_t _size83;
                ::apache::thrift::protocol::TType _etype86;
                xfer += iprot->readListBegin(_etype86, _size83);
                this->POSs[_i82].resize(_size83);
                uint32_t _i87;
                for (_i87 = 0; _i87 < _size83; ++_i87)
                {
                  xfer += iprot->readString(this->POSs[_i82][_i87]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.POSs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->namedEntities.clear();
            uint32_t _size88;
            ::apache::thrift::protocol::TType _etype91;
            xfer += iprot->readListBegin(_etype91, _size88);
            this->namedEntities.resize(_size88);
            uint32_t _i92;
            for (_i92 = 0; _i92 < _size88; ++_i92)
            {
              {
                this->namedEntities[_i92].clear();
                uint32_t _size93;
                ::apache::thrift::protocol::TType _ktype94;
                ::apache::thrift::protocol::TType _vtype95;
                xfer += iprot->readMapBegin(_ktype94, _vtype95, _size93);
                uint32_t _i97;
                for (_i97 = 0; _i97 < _size93; ++_i97)
                {
                  std::string _key98;
                  xfer += iprot->readString(_key98);
                  int64_t& _val99 = this->namedEntities[_i92][_key98];
                  xfer += iprot->readI64(_val99);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.namedEntities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->corefs.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            xfer += iprot->readListBegin(_etype103, _size100);
            this->corefs.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              {
                this->corefs[_i104].clear();
                uint32_t _size105;
                ::apache::thrift::protocol::TType _etype108;
                xfer += iprot->readListBegin(_etype108, _size105);
                this->corefs[_i104].resize(_size105);
                uint32_t _i109;
                for (_i109 = 0; _i109 < _size105; ++_i109)
                {
                  {
                    this->corefs[_i104][_i109].clear();
                    uint32_t _size110;
                    ::apache::thrift::protocol::TType _etype113;
                    xfer += iprot->readListBegin(_etype113, _size110);
                    this->corefs[_i104][_i109].resize(_size110);
                    uint32_t _i114;
                    for (_i114 = 0; _i114 < _size110; ++_i114)
                    {
                      xfer += iprot->readI64(this->corefs[_i104][_i109][_i114]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.corefs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->tokensToPOSs.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _ktype116;
            ::apache::thrift::protocol::TType _vtype117;
            xfer += iprot->readMapBegin(_ktype116, _vtype117, _size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
               ::thrift::adept::common::Token _key120;
              xfer += _key120.read(iprot);
              std::string& _val121 = this->tokensToPOSs[_key120];
              xfer += iprot->readString(_val121);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.tokensToPOSs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fullText)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CoNLLDocument::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CoNLLDocument");

  xfer += oprot->writeFieldBegin("fullText", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fullText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("document", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->document.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wordNums", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->wordNums.size()));
    std::vector<std::vector<int32_t> > ::const_iterator _iter122;
    for (_iter122 = this->wordNums.begin(); _iter122 != this->wordNums.end(); ++_iter122)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*_iter122).size()));
        std::vector<int32_t> ::const_iterator _iter123;
        for (_iter123 = (*_iter122).begin(); _iter123 != (*_iter122).end(); ++_iter123)
        {
          xfer += oprot->writeI32((*_iter123));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokens", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->tokens.size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter124;
    for (_iter124 = this->tokens.begin(); _iter124 != this->tokens.end(); ++_iter124)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter124).size()));
        std::vector<std::string> ::const_iterator _iter125;
        for (_iter125 = (*_iter124).begin(); _iter125 != (*_iter124).end(); ++_iter125)
        {
          xfer += oprot->writeString((*_iter125));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("POSs", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->POSs.size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter126;
    for (_iter126 = this->POSs.begin(); _iter126 != this->POSs.end(); ++_iter126)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter126).size()));
        std::vector<std::string> ::const_iterator _iter127;
        for (_iter127 = (*_iter126).begin(); _iter127 != (*_iter126).end(); ++_iter127)
        {
          xfer += oprot->writeString((*_iter127));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("namedEntities", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->namedEntities.size()));
    std::vector<std::map<std::string, int64_t> > ::const_iterator _iter128;
    for (_iter128 = this->namedEntities.begin(); _iter128 != this->namedEntities.end(); ++_iter128)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter128).size()));
        std::map<std::string, int64_t> ::const_iterator _iter129;
        for (_iter129 = (*_iter128).begin(); _iter129 != (*_iter128).end(); ++_iter129)
        {
          xfer += oprot->writeString(_iter129->first);
          xfer += oprot->writeI64(_iter129->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("corefs", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->corefs.size()));
    std::vector<std::vector<std::vector<int64_t> > > ::const_iterator _iter130;
    for (_iter130 = this->corefs.begin(); _iter130 != this->corefs.end(); ++_iter130)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*_iter130).size()));
        std::vector<std::vector<int64_t> > ::const_iterator _iter131;
        for (_iter131 = (*_iter130).begin(); _iter131 != (*_iter130).end(); ++_iter131)
        {
          {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter131).size()));
            std::vector<int64_t> ::const_iterator _iter132;
            for (_iter132 = (*_iter131).begin(); _iter132 != (*_iter131).end(); ++_iter132)
            {
              xfer += oprot->writeI64((*_iter132));
            }
            xfer += oprot->writeListEnd();
          }
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokensToPOSs", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tokensToPOSs.size()));
    std::map< ::thrift::adept::common::Token, std::string> ::const_iterator _iter133;
    for (_iter133 = this->tokensToPOSs.begin(); _iter133 != this->tokensToPOSs.end(); ++_iter133)
    {
      xfer += _iter133->first.write(oprot);
      xfer += oprot->writeString(_iter133->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoNLLDocument &a, CoNLLDocument &b) {
  using ::std::swap;
  swap(a.fullText, b.fullText);
  swap(a.document, b.document);
  swap(a.wordNums, b.wordNums);
  swap(a.tokens, b.tokens);
  swap(a.POSs, b.POSs);
  swap(a.namedEntities, b.namedEntities);
  swap(a.corefs, b.corefs);
  swap(a.tokensToPOSs, b.tokensToPOSs);
  swap(a.__isset, b.__isset);
}

}}} // namespace