/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TokenOffsetService_H
#define TokenOffsetService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class TokenOffsetServiceIf {
 public:
  virtual ~TokenOffsetServiceIf() {}
  virtual bool equals(const TokenOffsetObject& obj) = 0;
  virtual int64_t getBegin() = 0;
  virtual int64_t getEnd() = 0;
  virtual int32_t hashCode() = 0;
};

class TokenOffsetServiceIfFactory {
 public:
  typedef TokenOffsetServiceIf Handler;

  virtual ~TokenOffsetServiceIfFactory() {}

  virtual TokenOffsetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TokenOffsetServiceIf* /* handler */) = 0;
};

class TokenOffsetServiceIfSingletonFactory : virtual public TokenOffsetServiceIfFactory {
 public:
  TokenOffsetServiceIfSingletonFactory(const boost::shared_ptr<TokenOffsetServiceIf>& iface) : iface_(iface) {}
  virtual ~TokenOffsetServiceIfSingletonFactory() {}

  virtual TokenOffsetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TokenOffsetServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TokenOffsetServiceIf> iface_;
};

class TokenOffsetServiceNull : virtual public TokenOffsetServiceIf {
 public:
  virtual ~TokenOffsetServiceNull() {}
  bool equals(const TokenOffsetObject& /* obj */) {
    bool _return = false;
    return _return;
  }
  int64_t getBegin() {
    int64_t _return = 0;
    return _return;
  }
  int64_t getEnd() {
    int64_t _return = 0;
    return _return;
  }
  int32_t hashCode() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _TokenOffsetService_equals_args__isset {
  _TokenOffsetService_equals_args__isset() : obj(false) {}
  bool obj;
} _TokenOffsetService_equals_args__isset;

class TokenOffsetService_equals_args {
 public:

  TokenOffsetService_equals_args() {
  }

  virtual ~TokenOffsetService_equals_args() throw() {}

  TokenOffsetObject obj;

  _TokenOffsetService_equals_args__isset __isset;

  void __set_obj(const TokenOffsetObject& val) {
    obj = val;
  }

  bool operator == (const TokenOffsetService_equals_args & rhs) const
  {
    if (!(obj == rhs.obj))
      return false;
    return true;
  }
  bool operator != (const TokenOffsetService_equals_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_equals_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenOffsetService_equals_pargs {
 public:


  virtual ~TokenOffsetService_equals_pargs() throw() {}

  const TokenOffsetObject* obj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_equals_result__isset {
  _TokenOffsetService_equals_result__isset() : success(false) {}
  bool success;
} _TokenOffsetService_equals_result__isset;

class TokenOffsetService_equals_result {
 public:

  TokenOffsetService_equals_result() : success(0) {
  }

  virtual ~TokenOffsetService_equals_result() throw() {}

  bool success;

  _TokenOffsetService_equals_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TokenOffsetService_equals_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenOffsetService_equals_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_equals_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_equals_presult__isset {
  _TokenOffsetService_equals_presult__isset() : success(false) {}
  bool success;
} _TokenOffsetService_equals_presult__isset;

class TokenOffsetService_equals_presult {
 public:


  virtual ~TokenOffsetService_equals_presult() throw() {}

  bool* success;

  _TokenOffsetService_equals_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenOffsetService_getBegin_args {
 public:

  TokenOffsetService_getBegin_args() {
  }

  virtual ~TokenOffsetService_getBegin_args() throw() {}


  bool operator == (const TokenOffsetService_getBegin_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenOffsetService_getBegin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_getBegin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenOffsetService_getBegin_pargs {
 public:


  virtual ~TokenOffsetService_getBegin_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_getBegin_result__isset {
  _TokenOffsetService_getBegin_result__isset() : success(false) {}
  bool success;
} _TokenOffsetService_getBegin_result__isset;

class TokenOffsetService_getBegin_result {
 public:

  TokenOffsetService_getBegin_result() : success(0) {
  }

  virtual ~TokenOffsetService_getBegin_result() throw() {}

  int64_t success;

  _TokenOffsetService_getBegin_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const TokenOffsetService_getBegin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenOffsetService_getBegin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_getBegin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_getBegin_presult__isset {
  _TokenOffsetService_getBegin_presult__isset() : success(false) {}
  bool success;
} _TokenOffsetService_getBegin_presult__isset;

class TokenOffsetService_getBegin_presult {
 public:


  virtual ~TokenOffsetService_getBegin_presult() throw() {}

  int64_t* success;

  _TokenOffsetService_getBegin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenOffsetService_getEnd_args {
 public:

  TokenOffsetService_getEnd_args() {
  }

  virtual ~TokenOffsetService_getEnd_args() throw() {}


  bool operator == (const TokenOffsetService_getEnd_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenOffsetService_getEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_getEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenOffsetService_getEnd_pargs {
 public:


  virtual ~TokenOffsetService_getEnd_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_getEnd_result__isset {
  _TokenOffsetService_getEnd_result__isset() : success(false) {}
  bool success;
} _TokenOffsetService_getEnd_result__isset;

class TokenOffsetService_getEnd_result {
 public:

  TokenOffsetService_getEnd_result() : success(0) {
  }

  virtual ~TokenOffsetService_getEnd_result() throw() {}

  int64_t success;

  _TokenOffsetService_getEnd_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const TokenOffsetService_getEnd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenOffsetService_getEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_getEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_getEnd_presult__isset {
  _TokenOffsetService_getEnd_presult__isset() : success(false) {}
  bool success;
} _TokenOffsetService_getEnd_presult__isset;

class TokenOffsetService_getEnd_presult {
 public:


  virtual ~TokenOffsetService_getEnd_presult() throw() {}

  int64_t* success;

  _TokenOffsetService_getEnd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenOffsetService_hashCode_args {
 public:

  TokenOffsetService_hashCode_args() {
  }

  virtual ~TokenOffsetService_hashCode_args() throw() {}


  bool operator == (const TokenOffsetService_hashCode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenOffsetService_hashCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_hashCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenOffsetService_hashCode_pargs {
 public:


  virtual ~TokenOffsetService_hashCode_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_hashCode_result__isset {
  _TokenOffsetService_hashCode_result__isset() : success(false) {}
  bool success;
} _TokenOffsetService_hashCode_result__isset;

class TokenOffsetService_hashCode_result {
 public:

  TokenOffsetService_hashCode_result() : success(0) {
  }

  virtual ~TokenOffsetService_hashCode_result() throw() {}

  int32_t success;

  _TokenOffsetService_hashCode_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const TokenOffsetService_hashCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenOffsetService_hashCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenOffsetService_hashCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenOffsetService_hashCode_presult__isset {
  _TokenOffsetService_hashCode_presult__isset() : success(false) {}
  bool success;
} _TokenOffsetService_hashCode_presult__isset;

class TokenOffsetService_hashCode_presult {
 public:


  virtual ~TokenOffsetService_hashCode_presult() throw() {}

  int32_t* success;

  _TokenOffsetService_hashCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TokenOffsetServiceClient : virtual public TokenOffsetServiceIf {
 public:
  TokenOffsetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TokenOffsetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool equals(const TokenOffsetObject& obj);
  void send_equals(const TokenOffsetObject& obj);
  bool recv_equals();
  int64_t getBegin();
  void send_getBegin();
  int64_t recv_getBegin();
  int64_t getEnd();
  void send_getEnd();
  int64_t recv_getEnd();
  int32_t hashCode();
  void send_hashCode();
  int32_t recv_hashCode();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TokenOffsetServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TokenOffsetServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TokenOffsetServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_equals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBegin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hashCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TokenOffsetServiceProcessor(boost::shared_ptr<TokenOffsetServiceIf> iface) :
    iface_(iface) {
    processMap_["equals"] = &TokenOffsetServiceProcessor::process_equals;
    processMap_["getBegin"] = &TokenOffsetServiceProcessor::process_getBegin;
    processMap_["getEnd"] = &TokenOffsetServiceProcessor::process_getEnd;
    processMap_["hashCode"] = &TokenOffsetServiceProcessor::process_hashCode;
  }

  virtual ~TokenOffsetServiceProcessor() {}
};

class TokenOffsetServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TokenOffsetServiceProcessorFactory(const ::boost::shared_ptr< TokenOffsetServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TokenOffsetServiceIfFactory > handlerFactory_;
};

class TokenOffsetServiceMultiface : virtual public TokenOffsetServiceIf {
 public:
  TokenOffsetServiceMultiface(std::vector<boost::shared_ptr<TokenOffsetServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TokenOffsetServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TokenOffsetServiceIf> > ifaces_;
  TokenOffsetServiceMultiface() {}
  void add(boost::shared_ptr<TokenOffsetServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool equals(const TokenOffsetObject& obj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->equals(obj);
    }
    return ifaces_[i]->equals(obj);
  }

  int64_t getBegin() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBegin();
    }
    return ifaces_[i]->getBegin();
  }

  int64_t getEnd() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEnd();
    }
    return ifaces_[i]->getEnd();
  }

  int32_t hashCode() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hashCode();
    }
    return ifaces_[i]->hashCode();
  }

};

}}} // namespace

#endif