/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DependencyService_H
#define DependencyService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class DependencyServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~DependencyServiceIf() {}
  virtual void getDependencyType(std::string& _return) = 0;
  virtual void getDependent(ChunkUnion& _return) = 0;
  virtual void getGovernor(ChunkUnion& _return) = 0;
};

class DependencyServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef DependencyServiceIf Handler;

  virtual ~DependencyServiceIfFactory() {}

  virtual DependencyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class DependencyServiceIfSingletonFactory : virtual public DependencyServiceIfFactory {
 public:
  DependencyServiceIfSingletonFactory(const boost::shared_ptr<DependencyServiceIf>& iface) : iface_(iface) {}
  virtual ~DependencyServiceIfSingletonFactory() {}

  virtual DependencyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DependencyServiceIf> iface_;
};

class DependencyServiceNull : virtual public DependencyServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~DependencyServiceNull() {}
  void getDependencyType(std::string& /* _return */) {
    return;
  }
  void getDependent(ChunkUnion& /* _return */) {
    return;
  }
  void getGovernor(ChunkUnion& /* _return */) {
    return;
  }
};


class DependencyService_getDependencyType_args {
 public:

  DependencyService_getDependencyType_args() {
  }

  virtual ~DependencyService_getDependencyType_args() throw() {}


  bool operator == (const DependencyService_getDependencyType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DependencyService_getDependencyType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DependencyService_getDependencyType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DependencyService_getDependencyType_pargs {
 public:


  virtual ~DependencyService_getDependencyType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DependencyService_getDependencyType_result__isset {
  _DependencyService_getDependencyType_result__isset() : success(false) {}
  bool success;
} _DependencyService_getDependencyType_result__isset;

class DependencyService_getDependencyType_result {
 public:

  DependencyService_getDependencyType_result() : success() {
  }

  virtual ~DependencyService_getDependencyType_result() throw() {}

  std::string success;

  _DependencyService_getDependencyType_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DependencyService_getDependencyType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DependencyService_getDependencyType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DependencyService_getDependencyType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DependencyService_getDependencyType_presult__isset {
  _DependencyService_getDependencyType_presult__isset() : success(false) {}
  bool success;
} _DependencyService_getDependencyType_presult__isset;

class DependencyService_getDependencyType_presult {
 public:


  virtual ~DependencyService_getDependencyType_presult() throw() {}

  std::string* success;

  _DependencyService_getDependencyType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DependencyService_getDependent_args {
 public:

  DependencyService_getDependent_args() {
  }

  virtual ~DependencyService_getDependent_args() throw() {}


  bool operator == (const DependencyService_getDependent_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DependencyService_getDependent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DependencyService_getDependent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DependencyService_getDependent_pargs {
 public:


  virtual ~DependencyService_getDependent_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DependencyService_getDependent_result__isset {
  _DependencyService_getDependent_result__isset() : success(false) {}
  bool success;
} _DependencyService_getDependent_result__isset;

class DependencyService_getDependent_result {
 public:

  DependencyService_getDependent_result() {
  }

  virtual ~DependencyService_getDependent_result() throw() {}

  ChunkUnion success;

  _DependencyService_getDependent_result__isset __isset;

  void __set_success(const ChunkUnion& val) {
    success = val;
  }

  bool operator == (const DependencyService_getDependent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DependencyService_getDependent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DependencyService_getDependent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DependencyService_getDependent_presult__isset {
  _DependencyService_getDependent_presult__isset() : success(false) {}
  bool success;
} _DependencyService_getDependent_presult__isset;

class DependencyService_getDependent_presult {
 public:


  virtual ~DependencyService_getDependent_presult() throw() {}

  ChunkUnion* success;

  _DependencyService_getDependent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DependencyService_getGovernor_args {
 public:

  DependencyService_getGovernor_args() {
  }

  virtual ~DependencyService_getGovernor_args() throw() {}


  bool operator == (const DependencyService_getGovernor_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DependencyService_getGovernor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DependencyService_getGovernor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DependencyService_getGovernor_pargs {
 public:


  virtual ~DependencyService_getGovernor_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DependencyService_getGovernor_result__isset {
  _DependencyService_getGovernor_result__isset() : success(false) {}
  bool success;
} _DependencyService_getGovernor_result__isset;

class DependencyService_getGovernor_result {
 public:

  DependencyService_getGovernor_result() {
  }

  virtual ~DependencyService_getGovernor_result() throw() {}

  ChunkUnion success;

  _DependencyService_getGovernor_result__isset __isset;

  void __set_success(const ChunkUnion& val) {
    success = val;
  }

  bool operator == (const DependencyService_getGovernor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DependencyService_getGovernor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DependencyService_getGovernor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DependencyService_getGovernor_presult__isset {
  _DependencyService_getGovernor_presult__isset() : success(false) {}
  bool success;
} _DependencyService_getGovernor_presult__isset;

class DependencyService_getGovernor_presult {
 public:


  virtual ~DependencyService_getGovernor_presult() throw() {}

  ChunkUnion* success;

  _DependencyService_getGovernor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DependencyServiceClient : virtual public DependencyServiceIf, public ItemServiceClient {
 public:
  DependencyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  DependencyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDependencyType(std::string& _return);
  void send_getDependencyType();
  void recv_getDependencyType(std::string& _return);
  void getDependent(ChunkUnion& _return);
  void send_getDependent();
  void recv_getDependent(ChunkUnion& _return);
  void getGovernor(ChunkUnion& _return);
  void send_getGovernor();
  void recv_getGovernor(ChunkUnion& _return);
};

class DependencyServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<DependencyServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DependencyServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getDependencyType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDependent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGovernor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DependencyServiceProcessor(boost::shared_ptr<DependencyServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["getDependencyType"] = &DependencyServiceProcessor::process_getDependencyType;
    processMap_["getDependent"] = &DependencyServiceProcessor::process_getDependent;
    processMap_["getGovernor"] = &DependencyServiceProcessor::process_getGovernor;
  }

  virtual ~DependencyServiceProcessor() {}
};

class DependencyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DependencyServiceProcessorFactory(const ::boost::shared_ptr< DependencyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DependencyServiceIfFactory > handlerFactory_;
};

class DependencyServiceMultiface : virtual public DependencyServiceIf, public ItemServiceMultiface {
 public:
  DependencyServiceMultiface(std::vector<boost::shared_ptr<DependencyServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<DependencyServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~DependencyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DependencyServiceIf> > ifaces_;
  DependencyServiceMultiface() {}
  void add(boost::shared_ptr<DependencyServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getDependencyType(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDependencyType(_return);
    }
    ifaces_[i]->getDependencyType(_return);
    return;
  }

  void getDependent(ChunkUnion& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDependent(_return);
    }
    ifaces_[i]->getDependent(_return);
    return;
  }

  void getGovernor(ChunkUnion& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGovernor(_return);
    }
    ifaces_[i]->getGovernor(_return);
    return;
  }

};

}}} // namespace

#endif
