/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SyntacticChunkService_H
#define SyntacticChunkService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ChunkService.h"

namespace thrift { namespace adept { namespace common {

class SyntacticChunkServiceIf : virtual public ChunkServiceIf {
 public:
  virtual ~SyntacticChunkServiceIf() {}
  virtual int64_t getSequenceId() = 0;
  virtual void getSyntacticChunkType(Type& _return) = 0;
};

class SyntacticChunkServiceIfFactory : virtual public ChunkServiceIfFactory {
 public:
  typedef SyntacticChunkServiceIf Handler;

  virtual ~SyntacticChunkServiceIfFactory() {}

  virtual SyntacticChunkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class SyntacticChunkServiceIfSingletonFactory : virtual public SyntacticChunkServiceIfFactory {
 public:
  SyntacticChunkServiceIfSingletonFactory(const boost::shared_ptr<SyntacticChunkServiceIf>& iface) : iface_(iface) {}
  virtual ~SyntacticChunkServiceIfSingletonFactory() {}

  virtual SyntacticChunkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SyntacticChunkServiceIf> iface_;
};

class SyntacticChunkServiceNull : virtual public SyntacticChunkServiceIf , virtual public ChunkServiceNull {
 public:
  virtual ~SyntacticChunkServiceNull() {}
  int64_t getSequenceId() {
    int64_t _return = 0;
    return _return;
  }
  void getSyntacticChunkType(Type& /* _return */) {
    return;
  }
};


class SyntacticChunkService_getSequenceId_args {
 public:

  SyntacticChunkService_getSequenceId_args() {
  }

  virtual ~SyntacticChunkService_getSequenceId_args() throw() {}


  bool operator == (const SyntacticChunkService_getSequenceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyntacticChunkService_getSequenceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyntacticChunkService_getSequenceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyntacticChunkService_getSequenceId_pargs {
 public:


  virtual ~SyntacticChunkService_getSequenceId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyntacticChunkService_getSequenceId_result__isset {
  _SyntacticChunkService_getSequenceId_result__isset() : success(false) {}
  bool success;
} _SyntacticChunkService_getSequenceId_result__isset;

class SyntacticChunkService_getSequenceId_result {
 public:

  SyntacticChunkService_getSequenceId_result() : success(0) {
  }

  virtual ~SyntacticChunkService_getSequenceId_result() throw() {}

  int64_t success;

  _SyntacticChunkService_getSequenceId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SyntacticChunkService_getSequenceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyntacticChunkService_getSequenceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyntacticChunkService_getSequenceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyntacticChunkService_getSequenceId_presult__isset {
  _SyntacticChunkService_getSequenceId_presult__isset() : success(false) {}
  bool success;
} _SyntacticChunkService_getSequenceId_presult__isset;

class SyntacticChunkService_getSequenceId_presult {
 public:


  virtual ~SyntacticChunkService_getSequenceId_presult() throw() {}

  int64_t* success;

  _SyntacticChunkService_getSequenceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyntacticChunkService_getSyntacticChunkType_args {
 public:

  SyntacticChunkService_getSyntacticChunkType_args() {
  }

  virtual ~SyntacticChunkService_getSyntacticChunkType_args() throw() {}


  bool operator == (const SyntacticChunkService_getSyntacticChunkType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyntacticChunkService_getSyntacticChunkType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyntacticChunkService_getSyntacticChunkType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyntacticChunkService_getSyntacticChunkType_pargs {
 public:


  virtual ~SyntacticChunkService_getSyntacticChunkType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyntacticChunkService_getSyntacticChunkType_result__isset {
  _SyntacticChunkService_getSyntacticChunkType_result__isset() : success(false) {}
  bool success;
} _SyntacticChunkService_getSyntacticChunkType_result__isset;

class SyntacticChunkService_getSyntacticChunkType_result {
 public:

  SyntacticChunkService_getSyntacticChunkType_result() {
  }

  virtual ~SyntacticChunkService_getSyntacticChunkType_result() throw() {}

  Type success;

  _SyntacticChunkService_getSyntacticChunkType_result__isset __isset;

  void __set_success(const Type& val) {
    success = val;
  }

  bool operator == (const SyntacticChunkService_getSyntacticChunkType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyntacticChunkService_getSyntacticChunkType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyntacticChunkService_getSyntacticChunkType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyntacticChunkService_getSyntacticChunkType_presult__isset {
  _SyntacticChunkService_getSyntacticChunkType_presult__isset() : success(false) {}
  bool success;
} _SyntacticChunkService_getSyntacticChunkType_presult__isset;

class SyntacticChunkService_getSyntacticChunkType_presult {
 public:


  virtual ~SyntacticChunkService_getSyntacticChunkType_presult() throw() {}

  Type* success;

  _SyntacticChunkService_getSyntacticChunkType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SyntacticChunkServiceClient : virtual public SyntacticChunkServiceIf, public ChunkServiceClient {
 public:
  SyntacticChunkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ChunkServiceClient(prot, prot) {}
  SyntacticChunkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ChunkServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t getSequenceId();
  void send_getSequenceId();
  int64_t recv_getSequenceId();
  void getSyntacticChunkType(Type& _return);
  void send_getSyntacticChunkType();
  void recv_getSyntacticChunkType(Type& _return);
};

class SyntacticChunkServiceProcessor : public ChunkServiceProcessor {
 protected:
  boost::shared_ptr<SyntacticChunkServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SyntacticChunkServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getSequenceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSyntacticChunkType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SyntacticChunkServiceProcessor(boost::shared_ptr<SyntacticChunkServiceIf> iface) :
    ChunkServiceProcessor(iface),
    iface_(iface) {
    processMap_["getSequenceId"] = &SyntacticChunkServiceProcessor::process_getSequenceId;
    processMap_["getSyntacticChunkType"] = &SyntacticChunkServiceProcessor::process_getSyntacticChunkType;
  }

  virtual ~SyntacticChunkServiceProcessor() {}
};

class SyntacticChunkServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SyntacticChunkServiceProcessorFactory(const ::boost::shared_ptr< SyntacticChunkServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SyntacticChunkServiceIfFactory > handlerFactory_;
};

class SyntacticChunkServiceMultiface : virtual public SyntacticChunkServiceIf, public ChunkServiceMultiface {
 public:
  SyntacticChunkServiceMultiface(std::vector<boost::shared_ptr<SyntacticChunkServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<SyntacticChunkServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ChunkServiceMultiface::add(*iter);
    }
  }
  virtual ~SyntacticChunkServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SyntacticChunkServiceIf> > ifaces_;
  SyntacticChunkServiceMultiface() {}
  void add(boost::shared_ptr<SyntacticChunkServiceIf> iface) {
    ChunkServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  int64_t getSequenceId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSequenceId();
    }
    return ifaces_[i]->getSequenceId();
  }

  void getSyntacticChunkType(Type& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSyntacticChunkType(_return);
    }
    ifaces_[i]->getSyntacticChunkType(_return);
    return;
  }

};

}}} // namespace

#endif