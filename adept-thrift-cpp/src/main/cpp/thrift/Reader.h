/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Reader_H
#define Reader_H

#include <thrift/TDispatchProcessor.h>
#include "io_types.h"

namespace thrift { namespace adept { namespace io {

class ReaderIf {
 public:
  virtual ~ReaderIf() {}
  virtual void readConversationFile(std::string& _return, const std::string& path, const std::vector< ::thrift::adept::common::Utterance> & utterances, const std::vector<std::string> & speakers, const std::string& title) = 0;
  virtual void readEREFile(EREDocument& _return, const std::string& path, const std::string& docId) = 0;
  virtual void EREtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return, const std::string& EREPath, const std::string& XMLPath) = 0;
  virtual void getSentences(std::vector< ::thrift::adept::common::Sentence> & _return, const CoNLLDocument& conllDoc) = 0;
  virtual void readCoNLLFile(CoNLLDocument& _return, const std::string& path) = 0;
  virtual void CoNLLtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return, const std::string& filepath) = 0;
  virtual void getAbsolutePathFromClasspathOrFileSystem(std::string& _return, const std::string& name) = 0;
  virtual void readFileIntoString(std::string& _return, const std::string& path) = 0;
  virtual void readFileIntoLines(std::string& _return, const std::string& filename, const std::vector<std::string> & lines) = 0;
  virtual void fileToLines(std::vector<std::string> & _return, const std::string& filename) = 0;
  virtual void checkSurrogates(std::string& _return, const std::string& text) = 0;
};

class ReaderIfFactory {
 public:
  typedef ReaderIf Handler;

  virtual ~ReaderIfFactory() {}

  virtual ReaderIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReaderIf* /* handler */) = 0;
};

class ReaderIfSingletonFactory : virtual public ReaderIfFactory {
 public:
  ReaderIfSingletonFactory(const boost::shared_ptr<ReaderIf>& iface) : iface_(iface) {}
  virtual ~ReaderIfSingletonFactory() {}

  virtual ReaderIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReaderIf* /* handler */) {}

 protected:
  boost::shared_ptr<ReaderIf> iface_;
};

class ReaderNull : virtual public ReaderIf {
 public:
  virtual ~ReaderNull() {}
  void readConversationFile(std::string& /* _return */, const std::string& /* path */, const std::vector< ::thrift::adept::common::Utterance> & /* utterances */, const std::vector<std::string> & /* speakers */, const std::string& /* title */) {
    return;
  }
  void readEREFile(EREDocument& /* _return */, const std::string& /* path */, const std::string& /* docId */) {
    return;
  }
  void EREtoHltContentContainer( ::thrift::adept::common::HltContentContainer& /* _return */, const std::string& /* EREPath */, const std::string& /* XMLPath */) {
    return;
  }
  void getSentences(std::vector< ::thrift::adept::common::Sentence> & /* _return */, const CoNLLDocument& /* conllDoc */) {
    return;
  }
  void readCoNLLFile(CoNLLDocument& /* _return */, const std::string& /* path */) {
    return;
  }
  void CoNLLtoHltContentContainer( ::thrift::adept::common::HltContentContainer& /* _return */, const std::string& /* filepath */) {
    return;
  }
  void getAbsolutePathFromClasspathOrFileSystem(std::string& /* _return */, const std::string& /* name */) {
    return;
  }
  void readFileIntoString(std::string& /* _return */, const std::string& /* path */) {
    return;
  }
  void readFileIntoLines(std::string& /* _return */, const std::string& /* filename */, const std::vector<std::string> & /* lines */) {
    return;
  }
  void fileToLines(std::vector<std::string> & /* _return */, const std::string& /* filename */) {
    return;
  }
  void checkSurrogates(std::string& /* _return */, const std::string& /* text */) {
    return;
  }
};

typedef struct _Reader_readConversationFile_args__isset {
  _Reader_readConversationFile_args__isset() : path(false), utterances(false), speakers(false), title(false) {}
  bool path;
  bool utterances;
  bool speakers;
  bool title;
} _Reader_readConversationFile_args__isset;

class Reader_readConversationFile_args {
 public:

  Reader_readConversationFile_args() : path(), title() {
  }

  virtual ~Reader_readConversationFile_args() throw() {}

  std::string path;
  std::vector< ::thrift::adept::common::Utterance>  utterances;
  std::vector<std::string>  speakers;
  std::string title;

  _Reader_readConversationFile_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_utterances(const std::vector< ::thrift::adept::common::Utterance> & val) {
    utterances = val;
  }

  void __set_speakers(const std::vector<std::string> & val) {
    speakers = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  bool operator == (const Reader_readConversationFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(utterances == rhs.utterances))
      return false;
    if (!(speakers == rhs.speakers))
      return false;
    if (!(title == rhs.title))
      return false;
    return true;
  }
  bool operator != (const Reader_readConversationFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readConversationFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_readConversationFile_pargs {
 public:


  virtual ~Reader_readConversationFile_pargs() throw() {}

  const std::string* path;
  const std::vector< ::thrift::adept::common::Utterance> * utterances;
  const std::vector<std::string> * speakers;
  const std::string* title;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readConversationFile_result__isset {
  _Reader_readConversationFile_result__isset() : success(false) {}
  bool success;
} _Reader_readConversationFile_result__isset;

class Reader_readConversationFile_result {
 public:

  Reader_readConversationFile_result() : success() {
  }

  virtual ~Reader_readConversationFile_result() throw() {}

  std::string success;

  _Reader_readConversationFile_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Reader_readConversationFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_readConversationFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readConversationFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readConversationFile_presult__isset {
  _Reader_readConversationFile_presult__isset() : success(false) {}
  bool success;
} _Reader_readConversationFile_presult__isset;

class Reader_readConversationFile_presult {
 public:


  virtual ~Reader_readConversationFile_presult() throw() {}

  std::string* success;

  _Reader_readConversationFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_readEREFile_args__isset {
  _Reader_readEREFile_args__isset() : path(false), docId(false) {}
  bool path;
  bool docId;
} _Reader_readEREFile_args__isset;

class Reader_readEREFile_args {
 public:

  Reader_readEREFile_args() : path(), docId() {
  }

  virtual ~Reader_readEREFile_args() throw() {}

  std::string path;
  std::string docId;

  _Reader_readEREFile_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_docId(const std::string& val) {
    docId = val;
  }

  bool operator == (const Reader_readEREFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(docId == rhs.docId))
      return false;
    return true;
  }
  bool operator != (const Reader_readEREFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readEREFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_readEREFile_pargs {
 public:


  virtual ~Reader_readEREFile_pargs() throw() {}

  const std::string* path;
  const std::string* docId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readEREFile_result__isset {
  _Reader_readEREFile_result__isset() : success(false) {}
  bool success;
} _Reader_readEREFile_result__isset;

class Reader_readEREFile_result {
 public:

  Reader_readEREFile_result() {
  }

  virtual ~Reader_readEREFile_result() throw() {}

  EREDocument success;

  _Reader_readEREFile_result__isset __isset;

  void __set_success(const EREDocument& val) {
    success = val;
  }

  bool operator == (const Reader_readEREFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_readEREFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readEREFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readEREFile_presult__isset {
  _Reader_readEREFile_presult__isset() : success(false) {}
  bool success;
} _Reader_readEREFile_presult__isset;

class Reader_readEREFile_presult {
 public:


  virtual ~Reader_readEREFile_presult() throw() {}

  EREDocument* success;

  _Reader_readEREFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_EREtoHltContentContainer_args__isset {
  _Reader_EREtoHltContentContainer_args__isset() : EREPath(false), XMLPath(false) {}
  bool EREPath;
  bool XMLPath;
} _Reader_EREtoHltContentContainer_args__isset;

class Reader_EREtoHltContentContainer_args {
 public:

  Reader_EREtoHltContentContainer_args() : EREPath(), XMLPath() {
  }

  virtual ~Reader_EREtoHltContentContainer_args() throw() {}

  std::string EREPath;
  std::string XMLPath;

  _Reader_EREtoHltContentContainer_args__isset __isset;

  void __set_EREPath(const std::string& val) {
    EREPath = val;
  }

  void __set_XMLPath(const std::string& val) {
    XMLPath = val;
  }

  bool operator == (const Reader_EREtoHltContentContainer_args & rhs) const
  {
    if (!(EREPath == rhs.EREPath))
      return false;
    if (!(XMLPath == rhs.XMLPath))
      return false;
    return true;
  }
  bool operator != (const Reader_EREtoHltContentContainer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_EREtoHltContentContainer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_EREtoHltContentContainer_pargs {
 public:


  virtual ~Reader_EREtoHltContentContainer_pargs() throw() {}

  const std::string* EREPath;
  const std::string* XMLPath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_EREtoHltContentContainer_result__isset {
  _Reader_EREtoHltContentContainer_result__isset() : success(false) {}
  bool success;
} _Reader_EREtoHltContentContainer_result__isset;

class Reader_EREtoHltContentContainer_result {
 public:

  Reader_EREtoHltContentContainer_result() {
  }

  virtual ~Reader_EREtoHltContentContainer_result() throw() {}

   ::thrift::adept::common::HltContentContainer success;

  _Reader_EREtoHltContentContainer_result__isset __isset;

  void __set_success(const  ::thrift::adept::common::HltContentContainer& val) {
    success = val;
  }

  bool operator == (const Reader_EREtoHltContentContainer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_EREtoHltContentContainer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_EREtoHltContentContainer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_EREtoHltContentContainer_presult__isset {
  _Reader_EREtoHltContentContainer_presult__isset() : success(false) {}
  bool success;
} _Reader_EREtoHltContentContainer_presult__isset;

class Reader_EREtoHltContentContainer_presult {
 public:


  virtual ~Reader_EREtoHltContentContainer_presult() throw() {}

   ::thrift::adept::common::HltContentContainer* success;

  _Reader_EREtoHltContentContainer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_getSentences_args__isset {
  _Reader_getSentences_args__isset() : conllDoc(false) {}
  bool conllDoc;
} _Reader_getSentences_args__isset;

class Reader_getSentences_args {
 public:

  Reader_getSentences_args() {
  }

  virtual ~Reader_getSentences_args() throw() {}

  CoNLLDocument conllDoc;

  _Reader_getSentences_args__isset __isset;

  void __set_conllDoc(const CoNLLDocument& val) {
    conllDoc = val;
  }

  bool operator == (const Reader_getSentences_args & rhs) const
  {
    if (!(conllDoc == rhs.conllDoc))
      return false;
    return true;
  }
  bool operator != (const Reader_getSentences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_getSentences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_getSentences_pargs {
 public:


  virtual ~Reader_getSentences_pargs() throw() {}

  const CoNLLDocument* conllDoc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_getSentences_result__isset {
  _Reader_getSentences_result__isset() : success(false) {}
  bool success;
} _Reader_getSentences_result__isset;

class Reader_getSentences_result {
 public:

  Reader_getSentences_result() {
  }

  virtual ~Reader_getSentences_result() throw() {}

  std::vector< ::thrift::adept::common::Sentence>  success;

  _Reader_getSentences_result__isset __isset;

  void __set_success(const std::vector< ::thrift::adept::common::Sentence> & val) {
    success = val;
  }

  bool operator == (const Reader_getSentences_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_getSentences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_getSentences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_getSentences_presult__isset {
  _Reader_getSentences_presult__isset() : success(false) {}
  bool success;
} _Reader_getSentences_presult__isset;

class Reader_getSentences_presult {
 public:


  virtual ~Reader_getSentences_presult() throw() {}

  std::vector< ::thrift::adept::common::Sentence> * success;

  _Reader_getSentences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_readCoNLLFile_args__isset {
  _Reader_readCoNLLFile_args__isset() : path(false) {}
  bool path;
} _Reader_readCoNLLFile_args__isset;

class Reader_readCoNLLFile_args {
 public:

  Reader_readCoNLLFile_args() : path() {
  }

  virtual ~Reader_readCoNLLFile_args() throw() {}

  std::string path;

  _Reader_readCoNLLFile_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const Reader_readCoNLLFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Reader_readCoNLLFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readCoNLLFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_readCoNLLFile_pargs {
 public:


  virtual ~Reader_readCoNLLFile_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readCoNLLFile_result__isset {
  _Reader_readCoNLLFile_result__isset() : success(false) {}
  bool success;
} _Reader_readCoNLLFile_result__isset;

class Reader_readCoNLLFile_result {
 public:

  Reader_readCoNLLFile_result() {
  }

  virtual ~Reader_readCoNLLFile_result() throw() {}

  CoNLLDocument success;

  _Reader_readCoNLLFile_result__isset __isset;

  void __set_success(const CoNLLDocument& val) {
    success = val;
  }

  bool operator == (const Reader_readCoNLLFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_readCoNLLFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readCoNLLFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readCoNLLFile_presult__isset {
  _Reader_readCoNLLFile_presult__isset() : success(false) {}
  bool success;
} _Reader_readCoNLLFile_presult__isset;

class Reader_readCoNLLFile_presult {
 public:


  virtual ~Reader_readCoNLLFile_presult() throw() {}

  CoNLLDocument* success;

  _Reader_readCoNLLFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_CoNLLtoHltContentContainer_args__isset {
  _Reader_CoNLLtoHltContentContainer_args__isset() : filepath(false) {}
  bool filepath;
} _Reader_CoNLLtoHltContentContainer_args__isset;

class Reader_CoNLLtoHltContentContainer_args {
 public:

  Reader_CoNLLtoHltContentContainer_args() : filepath() {
  }

  virtual ~Reader_CoNLLtoHltContentContainer_args() throw() {}

  std::string filepath;

  _Reader_CoNLLtoHltContentContainer_args__isset __isset;

  void __set_filepath(const std::string& val) {
    filepath = val;
  }

  bool operator == (const Reader_CoNLLtoHltContentContainer_args & rhs) const
  {
    if (!(filepath == rhs.filepath))
      return false;
    return true;
  }
  bool operator != (const Reader_CoNLLtoHltContentContainer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_CoNLLtoHltContentContainer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_CoNLLtoHltContentContainer_pargs {
 public:


  virtual ~Reader_CoNLLtoHltContentContainer_pargs() throw() {}

  const std::string* filepath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_CoNLLtoHltContentContainer_result__isset {
  _Reader_CoNLLtoHltContentContainer_result__isset() : success(false) {}
  bool success;
} _Reader_CoNLLtoHltContentContainer_result__isset;

class Reader_CoNLLtoHltContentContainer_result {
 public:

  Reader_CoNLLtoHltContentContainer_result() {
  }

  virtual ~Reader_CoNLLtoHltContentContainer_result() throw() {}

   ::thrift::adept::common::HltContentContainer success;

  _Reader_CoNLLtoHltContentContainer_result__isset __isset;

  void __set_success(const  ::thrift::adept::common::HltContentContainer& val) {
    success = val;
  }

  bool operator == (const Reader_CoNLLtoHltContentContainer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_CoNLLtoHltContentContainer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_CoNLLtoHltContentContainer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_CoNLLtoHltContentContainer_presult__isset {
  _Reader_CoNLLtoHltContentContainer_presult__isset() : success(false) {}
  bool success;
} _Reader_CoNLLtoHltContentContainer_presult__isset;

class Reader_CoNLLtoHltContentContainer_presult {
 public:


  virtual ~Reader_CoNLLtoHltContentContainer_presult() throw() {}

   ::thrift::adept::common::HltContentContainer* success;

  _Reader_CoNLLtoHltContentContainer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_getAbsolutePathFromClasspathOrFileSystem_args__isset {
  _Reader_getAbsolutePathFromClasspathOrFileSystem_args__isset() : name(false) {}
  bool name;
} _Reader_getAbsolutePathFromClasspathOrFileSystem_args__isset;

class Reader_getAbsolutePathFromClasspathOrFileSystem_args {
 public:

  Reader_getAbsolutePathFromClasspathOrFileSystem_args() : name() {
  }

  virtual ~Reader_getAbsolutePathFromClasspathOrFileSystem_args() throw() {}

  std::string name;

  _Reader_getAbsolutePathFromClasspathOrFileSystem_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Reader_getAbsolutePathFromClasspathOrFileSystem_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Reader_getAbsolutePathFromClasspathOrFileSystem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_getAbsolutePathFromClasspathOrFileSystem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_getAbsolutePathFromClasspathOrFileSystem_pargs {
 public:


  virtual ~Reader_getAbsolutePathFromClasspathOrFileSystem_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_getAbsolutePathFromClasspathOrFileSystem_result__isset {
  _Reader_getAbsolutePathFromClasspathOrFileSystem_result__isset() : success(false) {}
  bool success;
} _Reader_getAbsolutePathFromClasspathOrFileSystem_result__isset;

class Reader_getAbsolutePathFromClasspathOrFileSystem_result {
 public:

  Reader_getAbsolutePathFromClasspathOrFileSystem_result() : success() {
  }

  virtual ~Reader_getAbsolutePathFromClasspathOrFileSystem_result() throw() {}

  std::string success;

  _Reader_getAbsolutePathFromClasspathOrFileSystem_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Reader_getAbsolutePathFromClasspathOrFileSystem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_getAbsolutePathFromClasspathOrFileSystem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_getAbsolutePathFromClasspathOrFileSystem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_getAbsolutePathFromClasspathOrFileSystem_presult__isset {
  _Reader_getAbsolutePathFromClasspathOrFileSystem_presult__isset() : success(false) {}
  bool success;
} _Reader_getAbsolutePathFromClasspathOrFileSystem_presult__isset;

class Reader_getAbsolutePathFromClasspathOrFileSystem_presult {
 public:


  virtual ~Reader_getAbsolutePathFromClasspathOrFileSystem_presult() throw() {}

  std::string* success;

  _Reader_getAbsolutePathFromClasspathOrFileSystem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_readFileIntoString_args__isset {
  _Reader_readFileIntoString_args__isset() : path(false) {}
  bool path;
} _Reader_readFileIntoString_args__isset;

class Reader_readFileIntoString_args {
 public:

  Reader_readFileIntoString_args() : path() {
  }

  virtual ~Reader_readFileIntoString_args() throw() {}

  std::string path;

  _Reader_readFileIntoString_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const Reader_readFileIntoString_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Reader_readFileIntoString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readFileIntoString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_readFileIntoString_pargs {
 public:


  virtual ~Reader_readFileIntoString_pargs() throw() {}

  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readFileIntoString_result__isset {
  _Reader_readFileIntoString_result__isset() : success(false) {}
  bool success;
} _Reader_readFileIntoString_result__isset;

class Reader_readFileIntoString_result {
 public:

  Reader_readFileIntoString_result() : success() {
  }

  virtual ~Reader_readFileIntoString_result() throw() {}

  std::string success;

  _Reader_readFileIntoString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Reader_readFileIntoString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_readFileIntoString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readFileIntoString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readFileIntoString_presult__isset {
  _Reader_readFileIntoString_presult__isset() : success(false) {}
  bool success;
} _Reader_readFileIntoString_presult__isset;

class Reader_readFileIntoString_presult {
 public:


  virtual ~Reader_readFileIntoString_presult() throw() {}

  std::string* success;

  _Reader_readFileIntoString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_readFileIntoLines_args__isset {
  _Reader_readFileIntoLines_args__isset() : filename(false), lines(false) {}
  bool filename;
  bool lines;
} _Reader_readFileIntoLines_args__isset;

class Reader_readFileIntoLines_args {
 public:

  Reader_readFileIntoLines_args() : filename() {
  }

  virtual ~Reader_readFileIntoLines_args() throw() {}

  std::string filename;
  std::vector<std::string>  lines;

  _Reader_readFileIntoLines_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_lines(const std::vector<std::string> & val) {
    lines = val;
  }

  bool operator == (const Reader_readFileIntoLines_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(lines == rhs.lines))
      return false;
    return true;
  }
  bool operator != (const Reader_readFileIntoLines_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readFileIntoLines_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_readFileIntoLines_pargs {
 public:


  virtual ~Reader_readFileIntoLines_pargs() throw() {}

  const std::string* filename;
  const std::vector<std::string> * lines;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readFileIntoLines_result__isset {
  _Reader_readFileIntoLines_result__isset() : success(false) {}
  bool success;
} _Reader_readFileIntoLines_result__isset;

class Reader_readFileIntoLines_result {
 public:

  Reader_readFileIntoLines_result() : success() {
  }

  virtual ~Reader_readFileIntoLines_result() throw() {}

  std::string success;

  _Reader_readFileIntoLines_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Reader_readFileIntoLines_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_readFileIntoLines_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_readFileIntoLines_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_readFileIntoLines_presult__isset {
  _Reader_readFileIntoLines_presult__isset() : success(false) {}
  bool success;
} _Reader_readFileIntoLines_presult__isset;

class Reader_readFileIntoLines_presult {
 public:


  virtual ~Reader_readFileIntoLines_presult() throw() {}

  std::string* success;

  _Reader_readFileIntoLines_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_fileToLines_args__isset {
  _Reader_fileToLines_args__isset() : filename(false) {}
  bool filename;
} _Reader_fileToLines_args__isset;

class Reader_fileToLines_args {
 public:

  Reader_fileToLines_args() : filename() {
  }

  virtual ~Reader_fileToLines_args() throw() {}

  std::string filename;

  _Reader_fileToLines_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const Reader_fileToLines_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Reader_fileToLines_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_fileToLines_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_fileToLines_pargs {
 public:


  virtual ~Reader_fileToLines_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_fileToLines_result__isset {
  _Reader_fileToLines_result__isset() : success(false) {}
  bool success;
} _Reader_fileToLines_result__isset;

class Reader_fileToLines_result {
 public:

  Reader_fileToLines_result() {
  }

  virtual ~Reader_fileToLines_result() throw() {}

  std::vector<std::string>  success;

  _Reader_fileToLines_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const Reader_fileToLines_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_fileToLines_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_fileToLines_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_fileToLines_presult__isset {
  _Reader_fileToLines_presult__isset() : success(false) {}
  bool success;
} _Reader_fileToLines_presult__isset;

class Reader_fileToLines_presult {
 public:


  virtual ~Reader_fileToLines_presult() throw() {}

  std::vector<std::string> * success;

  _Reader_fileToLines_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Reader_checkSurrogates_args__isset {
  _Reader_checkSurrogates_args__isset() : text(false) {}
  bool text;
} _Reader_checkSurrogates_args__isset;

class Reader_checkSurrogates_args {
 public:

  Reader_checkSurrogates_args() : text() {
  }

  virtual ~Reader_checkSurrogates_args() throw() {}

  std::string text;

  _Reader_checkSurrogates_args__isset __isset;

  void __set_text(const std::string& val) {
    text = val;
  }

  bool operator == (const Reader_checkSurrogates_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const Reader_checkSurrogates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_checkSurrogates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Reader_checkSurrogates_pargs {
 public:


  virtual ~Reader_checkSurrogates_pargs() throw() {}

  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_checkSurrogates_result__isset {
  _Reader_checkSurrogates_result__isset() : success(false) {}
  bool success;
} _Reader_checkSurrogates_result__isset;

class Reader_checkSurrogates_result {
 public:

  Reader_checkSurrogates_result() : success() {
  }

  virtual ~Reader_checkSurrogates_result() throw() {}

  std::string success;

  _Reader_checkSurrogates_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Reader_checkSurrogates_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Reader_checkSurrogates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reader_checkSurrogates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Reader_checkSurrogates_presult__isset {
  _Reader_checkSurrogates_presult__isset() : success(false) {}
  bool success;
} _Reader_checkSurrogates_presult__isset;

class Reader_checkSurrogates_presult {
 public:


  virtual ~Reader_checkSurrogates_presult() throw() {}

  std::string* success;

  _Reader_checkSurrogates_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReaderClient : virtual public ReaderIf {
 public:
  ReaderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ReaderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void readConversationFile(std::string& _return, const std::string& path, const std::vector< ::thrift::adept::common::Utterance> & utterances, const std::vector<std::string> & speakers, const std::string& title);
  void send_readConversationFile(const std::string& path, const std::vector< ::thrift::adept::common::Utterance> & utterances, const std::vector<std::string> & speakers, const std::string& title);
  void recv_readConversationFile(std::string& _return);
  void readEREFile(EREDocument& _return, const std::string& path, const std::string& docId);
  void send_readEREFile(const std::string& path, const std::string& docId);
  void recv_readEREFile(EREDocument& _return);
  void EREtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return, const std::string& EREPath, const std::string& XMLPath);
  void send_EREtoHltContentContainer(const std::string& EREPath, const std::string& XMLPath);
  void recv_EREtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return);
  void getSentences(std::vector< ::thrift::adept::common::Sentence> & _return, const CoNLLDocument& conllDoc);
  void send_getSentences(const CoNLLDocument& conllDoc);
  void recv_getSentences(std::vector< ::thrift::adept::common::Sentence> & _return);
  void readCoNLLFile(CoNLLDocument& _return, const std::string& path);
  void send_readCoNLLFile(const std::string& path);
  void recv_readCoNLLFile(CoNLLDocument& _return);
  void CoNLLtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return, const std::string& filepath);
  void send_CoNLLtoHltContentContainer(const std::string& filepath);
  void recv_CoNLLtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return);
  void getAbsolutePathFromClasspathOrFileSystem(std::string& _return, const std::string& name);
  void send_getAbsolutePathFromClasspathOrFileSystem(const std::string& name);
  void recv_getAbsolutePathFromClasspathOrFileSystem(std::string& _return);
  void readFileIntoString(std::string& _return, const std::string& path);
  void send_readFileIntoString(const std::string& path);
  void recv_readFileIntoString(std::string& _return);
  void readFileIntoLines(std::string& _return, const std::string& filename, const std::vector<std::string> & lines);
  void send_readFileIntoLines(const std::string& filename, const std::vector<std::string> & lines);
  void recv_readFileIntoLines(std::string& _return);
  void fileToLines(std::vector<std::string> & _return, const std::string& filename);
  void send_fileToLines(const std::string& filename);
  void recv_fileToLines(std::vector<std::string> & _return);
  void checkSurrogates(std::string& _return, const std::string& text);
  void send_checkSurrogates(const std::string& text);
  void recv_checkSurrogates(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReaderProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ReaderIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReaderProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_readConversationFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readEREFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EREtoHltContentContainer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSentences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readCoNLLFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CoNLLtoHltContentContainer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAbsolutePathFromClasspathOrFileSystem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readFileIntoString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readFileIntoLines(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fileToLines(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkSurrogates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReaderProcessor(boost::shared_ptr<ReaderIf> iface) :
    iface_(iface) {
    processMap_["readConversationFile"] = &ReaderProcessor::process_readConversationFile;
    processMap_["readEREFile"] = &ReaderProcessor::process_readEREFile;
    processMap_["EREtoHltContentContainer"] = &ReaderProcessor::process_EREtoHltContentContainer;
    processMap_["getSentences"] = &ReaderProcessor::process_getSentences;
    processMap_["readCoNLLFile"] = &ReaderProcessor::process_readCoNLLFile;
    processMap_["CoNLLtoHltContentContainer"] = &ReaderProcessor::process_CoNLLtoHltContentContainer;
    processMap_["getAbsolutePathFromClasspathOrFileSystem"] = &ReaderProcessor::process_getAbsolutePathFromClasspathOrFileSystem;
    processMap_["readFileIntoString"] = &ReaderProcessor::process_readFileIntoString;
    processMap_["readFileIntoLines"] = &ReaderProcessor::process_readFileIntoLines;
    processMap_["fileToLines"] = &ReaderProcessor::process_fileToLines;
    processMap_["checkSurrogates"] = &ReaderProcessor::process_checkSurrogates;
  }

  virtual ~ReaderProcessor() {}
};

class ReaderProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReaderProcessorFactory(const ::boost::shared_ptr< ReaderIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ReaderIfFactory > handlerFactory_;
};

class ReaderMultiface : virtual public ReaderIf {
 public:
  ReaderMultiface(std::vector<boost::shared_ptr<ReaderIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReaderMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ReaderIf> > ifaces_;
  ReaderMultiface() {}
  void add(boost::shared_ptr<ReaderIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void readConversationFile(std::string& _return, const std::string& path, const std::vector< ::thrift::adept::common::Utterance> & utterances, const std::vector<std::string> & speakers, const std::string& title) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readConversationFile(_return, path, utterances, speakers, title);
    }
    ifaces_[i]->readConversationFile(_return, path, utterances, speakers, title);
    return;
  }

  void readEREFile(EREDocument& _return, const std::string& path, const std::string& docId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readEREFile(_return, path, docId);
    }
    ifaces_[i]->readEREFile(_return, path, docId);
    return;
  }

  void EREtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return, const std::string& EREPath, const std::string& XMLPath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EREtoHltContentContainer(_return, EREPath, XMLPath);
    }
    ifaces_[i]->EREtoHltContentContainer(_return, EREPath, XMLPath);
    return;
  }

  void getSentences(std::vector< ::thrift::adept::common::Sentence> & _return, const CoNLLDocument& conllDoc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSentences(_return, conllDoc);
    }
    ifaces_[i]->getSentences(_return, conllDoc);
    return;
  }

  void readCoNLLFile(CoNLLDocument& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readCoNLLFile(_return, path);
    }
    ifaces_[i]->readCoNLLFile(_return, path);
    return;
  }

  void CoNLLtoHltContentContainer( ::thrift::adept::common::HltContentContainer& _return, const std::string& filepath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CoNLLtoHltContentContainer(_return, filepath);
    }
    ifaces_[i]->CoNLLtoHltContentContainer(_return, filepath);
    return;
  }

  void getAbsolutePathFromClasspathOrFileSystem(std::string& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAbsolutePathFromClasspathOrFileSystem(_return, name);
    }
    ifaces_[i]->getAbsolutePathFromClasspathOrFileSystem(_return, name);
    return;
  }

  void readFileIntoString(std::string& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readFileIntoString(_return, path);
    }
    ifaces_[i]->readFileIntoString(_return, path);
    return;
  }

  void readFileIntoLines(std::string& _return, const std::string& filename, const std::vector<std::string> & lines) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readFileIntoLines(_return, filename, lines);
    }
    ifaces_[i]->readFileIntoLines(_return, filename, lines);
    return;
  }

  void fileToLines(std::vector<std::string> & _return, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fileToLines(_return, filename);
    }
    ifaces_[i]->fileToLines(_return, filename);
    return;
  }

  void checkSurrogates(std::string& _return, const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkSurrogates(_return, text);
    }
    ifaces_[i]->checkSurrogates(_return, text);
    return;
  }

};

}}} // namespace

#endif