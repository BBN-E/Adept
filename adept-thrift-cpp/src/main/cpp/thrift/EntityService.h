/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EntityService_H
#define EntityService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class EntityServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~EntityServiceIf() {}
  virtual bool equals(const EntityObject& obj) = 0;
  virtual void getCanonicalMention(EntityMention& _return) = 0;
  virtual void getEntity(std::string& _return) = 0;
  virtual int64_t getEntityId() = 0;
  virtual void getEntityType(Type& _return) = 0;
  virtual int32_t hashCode() = 0;
  virtual void setCanonicalMentions(const EntityMention& canonicalMention) = 0;
};

class EntityServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef EntityServiceIf Handler;

  virtual ~EntityServiceIfFactory() {}

  virtual EntityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class EntityServiceIfSingletonFactory : virtual public EntityServiceIfFactory {
 public:
  EntityServiceIfSingletonFactory(const boost::shared_ptr<EntityServiceIf>& iface) : iface_(iface) {}
  virtual ~EntityServiceIfSingletonFactory() {}

  virtual EntityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<EntityServiceIf> iface_;
};

class EntityServiceNull : virtual public EntityServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~EntityServiceNull() {}
  bool equals(const EntityObject& /* obj */) {
    bool _return = false;
    return _return;
  }
  void getCanonicalMention(EntityMention& /* _return */) {
    return;
  }
  void getEntity(std::string& /* _return */) {
    return;
  }
  int64_t getEntityId() {
    int64_t _return = 0;
    return _return;
  }
  void getEntityType(Type& /* _return */) {
    return;
  }
  int32_t hashCode() {
    int32_t _return = 0;
    return _return;
  }
  void setCanonicalMentions(const EntityMention& /* canonicalMention */) {
    return;
  }
};

typedef struct _EntityService_equals_args__isset {
  _EntityService_equals_args__isset() : obj(false) {}
  bool obj;
} _EntityService_equals_args__isset;

class EntityService_equals_args {
 public:

  EntityService_equals_args() {
  }

  virtual ~EntityService_equals_args() throw() {}

  EntityObject obj;

  _EntityService_equals_args__isset __isset;

  void __set_obj(const EntityObject& val) {
    obj = val;
  }

  bool operator == (const EntityService_equals_args & rhs) const
  {
    if (!(obj == rhs.obj))
      return false;
    return true;
  }
  bool operator != (const EntityService_equals_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_equals_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_equals_pargs {
 public:


  virtual ~EntityService_equals_pargs() throw() {}

  const EntityObject* obj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_equals_result__isset {
  _EntityService_equals_result__isset() : success(false) {}
  bool success;
} _EntityService_equals_result__isset;

class EntityService_equals_result {
 public:

  EntityService_equals_result() : success(0) {
  }

  virtual ~EntityService_equals_result() throw() {}

  bool success;

  _EntityService_equals_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const EntityService_equals_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityService_equals_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_equals_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_equals_presult__isset {
  _EntityService_equals_presult__isset() : success(false) {}
  bool success;
} _EntityService_equals_presult__isset;

class EntityService_equals_presult {
 public:


  virtual ~EntityService_equals_presult() throw() {}

  bool* success;

  _EntityService_equals_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityService_getCanonicalMention_args {
 public:

  EntityService_getCanonicalMention_args() {
  }

  virtual ~EntityService_getCanonicalMention_args() throw() {}


  bool operator == (const EntityService_getCanonicalMention_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityService_getCanonicalMention_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getCanonicalMention_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_getCanonicalMention_pargs {
 public:


  virtual ~EntityService_getCanonicalMention_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getCanonicalMention_result__isset {
  _EntityService_getCanonicalMention_result__isset() : success(false) {}
  bool success;
} _EntityService_getCanonicalMention_result__isset;

class EntityService_getCanonicalMention_result {
 public:

  EntityService_getCanonicalMention_result() {
  }

  virtual ~EntityService_getCanonicalMention_result() throw() {}

  EntityMention success;

  _EntityService_getCanonicalMention_result__isset __isset;

  void __set_success(const EntityMention& val) {
    success = val;
  }

  bool operator == (const EntityService_getCanonicalMention_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityService_getCanonicalMention_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getCanonicalMention_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getCanonicalMention_presult__isset {
  _EntityService_getCanonicalMention_presult__isset() : success(false) {}
  bool success;
} _EntityService_getCanonicalMention_presult__isset;

class EntityService_getCanonicalMention_presult {
 public:


  virtual ~EntityService_getCanonicalMention_presult() throw() {}

  EntityMention* success;

  _EntityService_getCanonicalMention_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityService_getEntity_args {
 public:

  EntityService_getEntity_args() {
  }

  virtual ~EntityService_getEntity_args() throw() {}


  bool operator == (const EntityService_getEntity_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityService_getEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_getEntity_pargs {
 public:


  virtual ~EntityService_getEntity_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getEntity_result__isset {
  _EntityService_getEntity_result__isset() : success(false) {}
  bool success;
} _EntityService_getEntity_result__isset;

class EntityService_getEntity_result {
 public:

  EntityService_getEntity_result() : success() {
  }

  virtual ~EntityService_getEntity_result() throw() {}

  std::string success;

  _EntityService_getEntity_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const EntityService_getEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityService_getEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getEntity_presult__isset {
  _EntityService_getEntity_presult__isset() : success(false) {}
  bool success;
} _EntityService_getEntity_presult__isset;

class EntityService_getEntity_presult {
 public:


  virtual ~EntityService_getEntity_presult() throw() {}

  std::string* success;

  _EntityService_getEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityService_getEntityId_args {
 public:

  EntityService_getEntityId_args() {
  }

  virtual ~EntityService_getEntityId_args() throw() {}


  bool operator == (const EntityService_getEntityId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityService_getEntityId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getEntityId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_getEntityId_pargs {
 public:


  virtual ~EntityService_getEntityId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getEntityId_result__isset {
  _EntityService_getEntityId_result__isset() : success(false) {}
  bool success;
} _EntityService_getEntityId_result__isset;

class EntityService_getEntityId_result {
 public:

  EntityService_getEntityId_result() : success(0) {
  }

  virtual ~EntityService_getEntityId_result() throw() {}

  int64_t success;

  _EntityService_getEntityId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const EntityService_getEntityId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityService_getEntityId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getEntityId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getEntityId_presult__isset {
  _EntityService_getEntityId_presult__isset() : success(false) {}
  bool success;
} _EntityService_getEntityId_presult__isset;

class EntityService_getEntityId_presult {
 public:


  virtual ~EntityService_getEntityId_presult() throw() {}

  int64_t* success;

  _EntityService_getEntityId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityService_getEntityType_args {
 public:

  EntityService_getEntityType_args() {
  }

  virtual ~EntityService_getEntityType_args() throw() {}


  bool operator == (const EntityService_getEntityType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityService_getEntityType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getEntityType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_getEntityType_pargs {
 public:


  virtual ~EntityService_getEntityType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getEntityType_result__isset {
  _EntityService_getEntityType_result__isset() : success(false) {}
  bool success;
} _EntityService_getEntityType_result__isset;

class EntityService_getEntityType_result {
 public:

  EntityService_getEntityType_result() {
  }

  virtual ~EntityService_getEntityType_result() throw() {}

  Type success;

  _EntityService_getEntityType_result__isset __isset;

  void __set_success(const Type& val) {
    success = val;
  }

  bool operator == (const EntityService_getEntityType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityService_getEntityType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_getEntityType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_getEntityType_presult__isset {
  _EntityService_getEntityType_presult__isset() : success(false) {}
  bool success;
} _EntityService_getEntityType_presult__isset;

class EntityService_getEntityType_presult {
 public:


  virtual ~EntityService_getEntityType_presult() throw() {}

  Type* success;

  _EntityService_getEntityType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityService_hashCode_args {
 public:

  EntityService_hashCode_args() {
  }

  virtual ~EntityService_hashCode_args() throw() {}


  bool operator == (const EntityService_hashCode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityService_hashCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_hashCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_hashCode_pargs {
 public:


  virtual ~EntityService_hashCode_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_hashCode_result__isset {
  _EntityService_hashCode_result__isset() : success(false) {}
  bool success;
} _EntityService_hashCode_result__isset;

class EntityService_hashCode_result {
 public:

  EntityService_hashCode_result() : success(0) {
  }

  virtual ~EntityService_hashCode_result() throw() {}

  int32_t success;

  _EntityService_hashCode_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const EntityService_hashCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityService_hashCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_hashCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityService_hashCode_presult__isset {
  _EntityService_hashCode_presult__isset() : success(false) {}
  bool success;
} _EntityService_hashCode_presult__isset;

class EntityService_hashCode_presult {
 public:


  virtual ~EntityService_hashCode_presult() throw() {}

  int32_t* success;

  _EntityService_hashCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntityService_setCanonicalMentions_args__isset {
  _EntityService_setCanonicalMentions_args__isset() : canonicalMention(false) {}
  bool canonicalMention;
} _EntityService_setCanonicalMentions_args__isset;

class EntityService_setCanonicalMentions_args {
 public:

  EntityService_setCanonicalMentions_args() {
  }

  virtual ~EntityService_setCanonicalMentions_args() throw() {}

  EntityMention canonicalMention;

  _EntityService_setCanonicalMentions_args__isset __isset;

  void __set_canonicalMention(const EntityMention& val) {
    canonicalMention = val;
  }

  bool operator == (const EntityService_setCanonicalMentions_args & rhs) const
  {
    if (!(canonicalMention == rhs.canonicalMention))
      return false;
    return true;
  }
  bool operator != (const EntityService_setCanonicalMentions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_setCanonicalMentions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_setCanonicalMentions_pargs {
 public:


  virtual ~EntityService_setCanonicalMentions_pargs() throw() {}

  const EntityMention* canonicalMention;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_setCanonicalMentions_result {
 public:

  EntityService_setCanonicalMentions_result() {
  }

  virtual ~EntityService_setCanonicalMentions_result() throw() {}


  bool operator == (const EntityService_setCanonicalMentions_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityService_setCanonicalMentions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityService_setCanonicalMentions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityService_setCanonicalMentions_presult {
 public:


  virtual ~EntityService_setCanonicalMentions_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EntityServiceClient : virtual public EntityServiceIf, public ItemServiceClient {
 public:
  EntityServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  EntityServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool equals(const EntityObject& obj);
  void send_equals(const EntityObject& obj);
  bool recv_equals();
  void getCanonicalMention(EntityMention& _return);
  void send_getCanonicalMention();
  void recv_getCanonicalMention(EntityMention& _return);
  void getEntity(std::string& _return);
  void send_getEntity();
  void recv_getEntity(std::string& _return);
  int64_t getEntityId();
  void send_getEntityId();
  int64_t recv_getEntityId();
  void getEntityType(Type& _return);
  void send_getEntityType();
  void recv_getEntityType(Type& _return);
  int32_t hashCode();
  void send_hashCode();
  int32_t recv_hashCode();
  void setCanonicalMentions(const EntityMention& canonicalMention);
  void send_setCanonicalMentions(const EntityMention& canonicalMention);
  void recv_setCanonicalMentions();
};

class EntityServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<EntityServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EntityServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_equals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCanonicalMention(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntityId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntityType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hashCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCanonicalMentions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EntityServiceProcessor(boost::shared_ptr<EntityServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["equals"] = &EntityServiceProcessor::process_equals;
    processMap_["getCanonicalMention"] = &EntityServiceProcessor::process_getCanonicalMention;
    processMap_["getEntity"] = &EntityServiceProcessor::process_getEntity;
    processMap_["getEntityId"] = &EntityServiceProcessor::process_getEntityId;
    processMap_["getEntityType"] = &EntityServiceProcessor::process_getEntityType;
    processMap_["hashCode"] = &EntityServiceProcessor::process_hashCode;
    processMap_["setCanonicalMentions"] = &EntityServiceProcessor::process_setCanonicalMentions;
  }

  virtual ~EntityServiceProcessor() {}
};

class EntityServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EntityServiceProcessorFactory(const ::boost::shared_ptr< EntityServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EntityServiceIfFactory > handlerFactory_;
};

class EntityServiceMultiface : virtual public EntityServiceIf, public ItemServiceMultiface {
 public:
  EntityServiceMultiface(std::vector<boost::shared_ptr<EntityServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<EntityServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~EntityServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EntityServiceIf> > ifaces_;
  EntityServiceMultiface() {}
  void add(boost::shared_ptr<EntityServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool equals(const EntityObject& obj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->equals(obj);
    }
    return ifaces_[i]->equals(obj);
  }

  void getCanonicalMention(EntityMention& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCanonicalMention(_return);
    }
    ifaces_[i]->getCanonicalMention(_return);
    return;
  }

  void getEntity(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntity(_return);
    }
    ifaces_[i]->getEntity(_return);
    return;
  }

  int64_t getEntityId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntityId();
    }
    return ifaces_[i]->getEntityId();
  }

  void getEntityType(Type& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntityType(_return);
    }
    ifaces_[i]->getEntityType(_return);
    return;
  }

  int32_t hashCode() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hashCode();
    }
    return ifaces_[i]->hashCode();
  }

  void setCanonicalMentions(const EntityMention& canonicalMention) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCanonicalMentions(canonicalMention);
    }
    ifaces_[i]->setCanonicalMentions(canonicalMention);
  }

};

}}} // namespace

#endif