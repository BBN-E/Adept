/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ParaphraseService_H
#define ParaphraseService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class ParaphraseServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~ParaphraseServiceIf() {}
  virtual double getConfidence() = 0;
  virtual void getPosTag(std::string& _return) = 0;
  virtual void setPosTag(const Type& posTag) = 0;
};

class ParaphraseServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef ParaphraseServiceIf Handler;

  virtual ~ParaphraseServiceIfFactory() {}

  virtual ParaphraseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class ParaphraseServiceIfSingletonFactory : virtual public ParaphraseServiceIfFactory {
 public:
  ParaphraseServiceIfSingletonFactory(const boost::shared_ptr<ParaphraseServiceIf>& iface) : iface_(iface) {}
  virtual ~ParaphraseServiceIfSingletonFactory() {}

  virtual ParaphraseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ParaphraseServiceIf> iface_;
};

class ParaphraseServiceNull : virtual public ParaphraseServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~ParaphraseServiceNull() {}
  double getConfidence() {
    double _return = (double)0;
    return _return;
  }
  void getPosTag(std::string& /* _return */) {
    return;
  }
  void setPosTag(const Type& /* posTag */) {
    return;
  }
};


class ParaphraseService_getConfidence_args {
 public:

  ParaphraseService_getConfidence_args() {
  }

  virtual ~ParaphraseService_getConfidence_args() throw() {}


  bool operator == (const ParaphraseService_getConfidence_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaphraseService_getConfidence_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaphraseService_getConfidence_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaphraseService_getConfidence_pargs {
 public:


  virtual ~ParaphraseService_getConfidence_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaphraseService_getConfidence_result__isset {
  _ParaphraseService_getConfidence_result__isset() : success(false) {}
  bool success;
} _ParaphraseService_getConfidence_result__isset;

class ParaphraseService_getConfidence_result {
 public:

  ParaphraseService_getConfidence_result() : success(0) {
  }

  virtual ~ParaphraseService_getConfidence_result() throw() {}

  double success;

  _ParaphraseService_getConfidence_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const ParaphraseService_getConfidence_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParaphraseService_getConfidence_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaphraseService_getConfidence_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaphraseService_getConfidence_presult__isset {
  _ParaphraseService_getConfidence_presult__isset() : success(false) {}
  bool success;
} _ParaphraseService_getConfidence_presult__isset;

class ParaphraseService_getConfidence_presult {
 public:


  virtual ~ParaphraseService_getConfidence_presult() throw() {}

  double* success;

  _ParaphraseService_getConfidence_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ParaphraseService_getPosTag_args {
 public:

  ParaphraseService_getPosTag_args() {
  }

  virtual ~ParaphraseService_getPosTag_args() throw() {}


  bool operator == (const ParaphraseService_getPosTag_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaphraseService_getPosTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaphraseService_getPosTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaphraseService_getPosTag_pargs {
 public:


  virtual ~ParaphraseService_getPosTag_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaphraseService_getPosTag_result__isset {
  _ParaphraseService_getPosTag_result__isset() : success(false) {}
  bool success;
} _ParaphraseService_getPosTag_result__isset;

class ParaphraseService_getPosTag_result {
 public:

  ParaphraseService_getPosTag_result() : success() {
  }

  virtual ~ParaphraseService_getPosTag_result() throw() {}

  std::string success;

  _ParaphraseService_getPosTag_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ParaphraseService_getPosTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParaphraseService_getPosTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaphraseService_getPosTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParaphraseService_getPosTag_presult__isset {
  _ParaphraseService_getPosTag_presult__isset() : success(false) {}
  bool success;
} _ParaphraseService_getPosTag_presult__isset;

class ParaphraseService_getPosTag_presult {
 public:


  virtual ~ParaphraseService_getPosTag_presult() throw() {}

  std::string* success;

  _ParaphraseService_getPosTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParaphraseService_setPosTag_args__isset {
  _ParaphraseService_setPosTag_args__isset() : posTag(false) {}
  bool posTag;
} _ParaphraseService_setPosTag_args__isset;

class ParaphraseService_setPosTag_args {
 public:

  ParaphraseService_setPosTag_args() {
  }

  virtual ~ParaphraseService_setPosTag_args() throw() {}

  Type posTag;

  _ParaphraseService_setPosTag_args__isset __isset;

  void __set_posTag(const Type& val) {
    posTag = val;
  }

  bool operator == (const ParaphraseService_setPosTag_args & rhs) const
  {
    if (!(posTag == rhs.posTag))
      return false;
    return true;
  }
  bool operator != (const ParaphraseService_setPosTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaphraseService_setPosTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaphraseService_setPosTag_pargs {
 public:


  virtual ~ParaphraseService_setPosTag_pargs() throw() {}

  const Type* posTag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaphraseService_setPosTag_result {
 public:

  ParaphraseService_setPosTag_result() {
  }

  virtual ~ParaphraseService_setPosTag_result() throw() {}


  bool operator == (const ParaphraseService_setPosTag_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParaphraseService_setPosTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParaphraseService_setPosTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParaphraseService_setPosTag_presult {
 public:


  virtual ~ParaphraseService_setPosTag_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ParaphraseServiceClient : virtual public ParaphraseServiceIf, public ItemServiceClient {
 public:
  ParaphraseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  ParaphraseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getConfidence();
  void send_getConfidence();
  double recv_getConfidence();
  void getPosTag(std::string& _return);
  void send_getPosTag();
  void recv_getPosTag(std::string& _return);
  void setPosTag(const Type& posTag);
  void send_setPosTag(const Type& posTag);
  void recv_setPosTag();
};

class ParaphraseServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<ParaphraseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ParaphraseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getConfidence(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPosTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPosTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ParaphraseServiceProcessor(boost::shared_ptr<ParaphraseServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["getConfidence"] = &ParaphraseServiceProcessor::process_getConfidence;
    processMap_["getPosTag"] = &ParaphraseServiceProcessor::process_getPosTag;
    processMap_["setPosTag"] = &ParaphraseServiceProcessor::process_setPosTag;
  }

  virtual ~ParaphraseServiceProcessor() {}
};

class ParaphraseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ParaphraseServiceProcessorFactory(const ::boost::shared_ptr< ParaphraseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ParaphraseServiceIfFactory > handlerFactory_;
};

class ParaphraseServiceMultiface : virtual public ParaphraseServiceIf, public ItemServiceMultiface {
 public:
  ParaphraseServiceMultiface(std::vector<boost::shared_ptr<ParaphraseServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ParaphraseServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~ParaphraseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ParaphraseServiceIf> > ifaces_;
  ParaphraseServiceMultiface() {}
  void add(boost::shared_ptr<ParaphraseServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  double getConfidence() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getConfidence();
    }
    return ifaces_[i]->getConfidence();
  }

  void getPosTag(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPosTag(_return);
    }
    ifaces_[i]->getPosTag(_return);
    return;
  }

  void setPosTag(const Type& posTag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPosTag(posTag);
    }
    ifaces_[i]->setPosTag(posTag);
  }

};

}}} // namespace

#endif