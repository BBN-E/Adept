/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Serializer_H
#define Serializer_H

#include <thrift/TDispatchProcessor.h>
#include "serialization_types.h"

namespace thrift { namespace adept { namespace serialization {

class SerializerIf {
 public:
  virtual ~SerializerIf() {}
  virtual void serializeAsByteArray(std::string& _return, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) = 0;
  virtual void deserializeByteArray( ::thrift::adept::common::HltContentContainer& _return, const std::string& data) = 0;
  virtual void serializeAsString(std::string& _return, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) = 0;
  virtual void deserializeString( ::thrift::adept::common::HltContentContainer& _return, const std::string& data) = 0;
};

class SerializerIfFactory {
 public:
  typedef SerializerIf Handler;

  virtual ~SerializerIfFactory() {}

  virtual SerializerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SerializerIf* /* handler */) = 0;
};

class SerializerIfSingletonFactory : virtual public SerializerIfFactory {
 public:
  SerializerIfSingletonFactory(const boost::shared_ptr<SerializerIf>& iface) : iface_(iface) {}
  virtual ~SerializerIfSingletonFactory() {}

  virtual SerializerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SerializerIf* /* handler */) {}

 protected:
  boost::shared_ptr<SerializerIf> iface_;
};

class SerializerNull : virtual public SerializerIf {
 public:
  virtual ~SerializerNull() {}
  void serializeAsByteArray(std::string& /* _return */, const  ::thrift::adept::common::HltContentContainer& /* hltContentContainer */) {
    return;
  }
  void deserializeByteArray( ::thrift::adept::common::HltContentContainer& /* _return */, const std::string& /* data */) {
    return;
  }
  void serializeAsString(std::string& /* _return */, const  ::thrift::adept::common::HltContentContainer& /* hltContentContainer */) {
    return;
  }
  void deserializeString( ::thrift::adept::common::HltContentContainer& /* _return */, const std::string& /* data */) {
    return;
  }
};

typedef struct _Serializer_serializeAsByteArray_args__isset {
  _Serializer_serializeAsByteArray_args__isset() : hltContentContainer(false) {}
  bool hltContentContainer;
} _Serializer_serializeAsByteArray_args__isset;

class Serializer_serializeAsByteArray_args {
 public:

  Serializer_serializeAsByteArray_args() {
  }

  virtual ~Serializer_serializeAsByteArray_args() throw() {}

   ::thrift::adept::common::HltContentContainer hltContentContainer;

  _Serializer_serializeAsByteArray_args__isset __isset;

  void __set_hltContentContainer(const  ::thrift::adept::common::HltContentContainer& val) {
    hltContentContainer = val;
  }

  bool operator == (const Serializer_serializeAsByteArray_args & rhs) const
  {
    if (!(hltContentContainer == rhs.hltContentContainer))
      return false;
    return true;
  }
  bool operator != (const Serializer_serializeAsByteArray_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_serializeAsByteArray_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serializer_serializeAsByteArray_pargs {
 public:


  virtual ~Serializer_serializeAsByteArray_pargs() throw() {}

  const  ::thrift::adept::common::HltContentContainer* hltContentContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_serializeAsByteArray_result__isset {
  _Serializer_serializeAsByteArray_result__isset() : success(false) {}
  bool success;
} _Serializer_serializeAsByteArray_result__isset;

class Serializer_serializeAsByteArray_result {
 public:

  Serializer_serializeAsByteArray_result() : success() {
  }

  virtual ~Serializer_serializeAsByteArray_result() throw() {}

  std::string success;

  _Serializer_serializeAsByteArray_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Serializer_serializeAsByteArray_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serializer_serializeAsByteArray_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_serializeAsByteArray_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_serializeAsByteArray_presult__isset {
  _Serializer_serializeAsByteArray_presult__isset() : success(false) {}
  bool success;
} _Serializer_serializeAsByteArray_presult__isset;

class Serializer_serializeAsByteArray_presult {
 public:


  virtual ~Serializer_serializeAsByteArray_presult() throw() {}

  std::string* success;

  _Serializer_serializeAsByteArray_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serializer_deserializeByteArray_args__isset {
  _Serializer_deserializeByteArray_args__isset() : data(false) {}
  bool data;
} _Serializer_deserializeByteArray_args__isset;

class Serializer_deserializeByteArray_args {
 public:

  Serializer_deserializeByteArray_args() : data() {
  }

  virtual ~Serializer_deserializeByteArray_args() throw() {}

  std::string data;

  _Serializer_deserializeByteArray_args__isset __isset;

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const Serializer_deserializeByteArray_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Serializer_deserializeByteArray_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_deserializeByteArray_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serializer_deserializeByteArray_pargs {
 public:


  virtual ~Serializer_deserializeByteArray_pargs() throw() {}

  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_deserializeByteArray_result__isset {
  _Serializer_deserializeByteArray_result__isset() : success(false) {}
  bool success;
} _Serializer_deserializeByteArray_result__isset;

class Serializer_deserializeByteArray_result {
 public:

  Serializer_deserializeByteArray_result() {
  }

  virtual ~Serializer_deserializeByteArray_result() throw() {}

   ::thrift::adept::common::HltContentContainer success;

  _Serializer_deserializeByteArray_result__isset __isset;

  void __set_success(const  ::thrift::adept::common::HltContentContainer& val) {
    success = val;
  }

  bool operator == (const Serializer_deserializeByteArray_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serializer_deserializeByteArray_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_deserializeByteArray_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_deserializeByteArray_presult__isset {
  _Serializer_deserializeByteArray_presult__isset() : success(false) {}
  bool success;
} _Serializer_deserializeByteArray_presult__isset;

class Serializer_deserializeByteArray_presult {
 public:


  virtual ~Serializer_deserializeByteArray_presult() throw() {}

   ::thrift::adept::common::HltContentContainer* success;

  _Serializer_deserializeByteArray_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serializer_serializeAsString_args__isset {
  _Serializer_serializeAsString_args__isset() : hltContentContainer(false) {}
  bool hltContentContainer;
} _Serializer_serializeAsString_args__isset;

class Serializer_serializeAsString_args {
 public:

  Serializer_serializeAsString_args() {
  }

  virtual ~Serializer_serializeAsString_args() throw() {}

   ::thrift::adept::common::HltContentContainer hltContentContainer;

  _Serializer_serializeAsString_args__isset __isset;

  void __set_hltContentContainer(const  ::thrift::adept::common::HltContentContainer& val) {
    hltContentContainer = val;
  }

  bool operator == (const Serializer_serializeAsString_args & rhs) const
  {
    if (!(hltContentContainer == rhs.hltContentContainer))
      return false;
    return true;
  }
  bool operator != (const Serializer_serializeAsString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_serializeAsString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serializer_serializeAsString_pargs {
 public:


  virtual ~Serializer_serializeAsString_pargs() throw() {}

  const  ::thrift::adept::common::HltContentContainer* hltContentContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_serializeAsString_result__isset {
  _Serializer_serializeAsString_result__isset() : success(false) {}
  bool success;
} _Serializer_serializeAsString_result__isset;

class Serializer_serializeAsString_result {
 public:

  Serializer_serializeAsString_result() : success() {
  }

  virtual ~Serializer_serializeAsString_result() throw() {}

  std::string success;

  _Serializer_serializeAsString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Serializer_serializeAsString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serializer_serializeAsString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_serializeAsString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_serializeAsString_presult__isset {
  _Serializer_serializeAsString_presult__isset() : success(false) {}
  bool success;
} _Serializer_serializeAsString_presult__isset;

class Serializer_serializeAsString_presult {
 public:


  virtual ~Serializer_serializeAsString_presult() throw() {}

  std::string* success;

  _Serializer_serializeAsString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serializer_deserializeString_args__isset {
  _Serializer_deserializeString_args__isset() : data(false) {}
  bool data;
} _Serializer_deserializeString_args__isset;

class Serializer_deserializeString_args {
 public:

  Serializer_deserializeString_args() : data() {
  }

  virtual ~Serializer_deserializeString_args() throw() {}

  std::string data;

  _Serializer_deserializeString_args__isset __isset;

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const Serializer_deserializeString_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Serializer_deserializeString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_deserializeString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serializer_deserializeString_pargs {
 public:


  virtual ~Serializer_deserializeString_pargs() throw() {}

  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_deserializeString_result__isset {
  _Serializer_deserializeString_result__isset() : success(false) {}
  bool success;
} _Serializer_deserializeString_result__isset;

class Serializer_deserializeString_result {
 public:

  Serializer_deserializeString_result() {
  }

  virtual ~Serializer_deserializeString_result() throw() {}

   ::thrift::adept::common::HltContentContainer success;

  _Serializer_deserializeString_result__isset __isset;

  void __set_success(const  ::thrift::adept::common::HltContentContainer& val) {
    success = val;
  }

  bool operator == (const Serializer_deserializeString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serializer_deserializeString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serializer_deserializeString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serializer_deserializeString_presult__isset {
  _Serializer_deserializeString_presult__isset() : success(false) {}
  bool success;
} _Serializer_deserializeString_presult__isset;

class Serializer_deserializeString_presult {
 public:


  virtual ~Serializer_deserializeString_presult() throw() {}

   ::thrift::adept::common::HltContentContainer* success;

  _Serializer_deserializeString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SerializerClient : virtual public SerializerIf {
 public:
  SerializerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SerializerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void serializeAsByteArray(std::string& _return, const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  void send_serializeAsByteArray(const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  void recv_serializeAsByteArray(std::string& _return);
  void deserializeByteArray( ::thrift::adept::common::HltContentContainer& _return, const std::string& data);
  void send_deserializeByteArray(const std::string& data);
  void recv_deserializeByteArray( ::thrift::adept::common::HltContentContainer& _return);
  void serializeAsString(std::string& _return, const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  void send_serializeAsString(const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  void recv_serializeAsString(std::string& _return);
  void deserializeString( ::thrift::adept::common::HltContentContainer& _return, const std::string& data);
  void send_deserializeString(const std::string& data);
  void recv_deserializeString( ::thrift::adept::common::HltContentContainer& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SerializerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SerializerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SerializerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_serializeAsByteArray(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deserializeByteArray(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_serializeAsString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deserializeString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SerializerProcessor(boost::shared_ptr<SerializerIf> iface) :
    iface_(iface) {
    processMap_["serializeAsByteArray"] = &SerializerProcessor::process_serializeAsByteArray;
    processMap_["deserializeByteArray"] = &SerializerProcessor::process_deserializeByteArray;
    processMap_["serializeAsString"] = &SerializerProcessor::process_serializeAsString;
    processMap_["deserializeString"] = &SerializerProcessor::process_deserializeString;
  }

  virtual ~SerializerProcessor() {}
};

class SerializerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SerializerProcessorFactory(const ::boost::shared_ptr< SerializerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SerializerIfFactory > handlerFactory_;
};

class SerializerMultiface : virtual public SerializerIf {
 public:
  SerializerMultiface(std::vector<boost::shared_ptr<SerializerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SerializerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SerializerIf> > ifaces_;
  SerializerMultiface() {}
  void add(boost::shared_ptr<SerializerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void serializeAsByteArray(std::string& _return, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->serializeAsByteArray(_return, hltContentContainer);
    }
    ifaces_[i]->serializeAsByteArray(_return, hltContentContainer);
    return;
  }

  void deserializeByteArray( ::thrift::adept::common::HltContentContainer& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deserializeByteArray(_return, data);
    }
    ifaces_[i]->deserializeByteArray(_return, data);
    return;
  }

  void serializeAsString(std::string& _return, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->serializeAsString(_return, hltContentContainer);
    }
    ifaces_[i]->serializeAsString(_return, hltContentContainer);
    return;
  }

  void deserializeString( ::thrift::adept::common::HltContentContainer& _return, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deserializeString(_return, data);
    }
    ifaces_[i]->deserializeString(_return, data);
    return;
  }

};

}}} // namespace

#endif