/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "common_types.h"

#include <algorithm>

namespace thrift { namespace adept { namespace common {

int _kPolarityValues[] = {
  Polarity::POSITIVE,
  Polarity::NEGATIVE,
  Polarity::NEUTRAL
};
const char* _kPolarityNames[] = {
  "POSITIVE",
  "NEGATIVE",
  "NEUTRAL"
};
const std::map<int, const char*> _Polarity_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPolarityValues, _kPolarityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTopicPolarityValues[] = {
  TopicPolarity::POSITIVE,
  TopicPolarity::NEGATIVE,
  TopicPolarity::NONE
};
const char* _kTopicPolarityNames[] = {
  "POSITIVE",
  "NEGATIVE",
  "NONE"
};
const std::map<int, const char*> _TopicPolarity_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTopicPolarityValues, _kTopicPolarityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAsrNameValues[] = {
  AsrName::NONE,
  AsrName::LDC,
  AsrName::BBN
};
const char* _kAsrNameNames[] = {
  "NONE",
  "LDC",
  "BBN"
};
const std::map<int, const char*> _AsrName_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAsrNameValues, _kAsrNameNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAudioFileTypeValues[] = {
  AudioFileType::WAV,
  AudioFileType::MP3,
  AudioFileType::SPH
};
const char* _kAudioFileTypeNames[] = {
  "WAV",
  "MP3",
  "SPH"
};
const std::map<int, const char*> _AudioFileType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAudioFileTypeValues, _kAudioFileTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kChannelNameValues[] = {
  ChannelName::NONE,
  ChannelName::LEFT_STEREO,
  ChannelName::RIGHT_STEREO,
  ChannelName::MONO
};
const char* _kChannelNameNames[] = {
  "NONE",
  "LEFT_STEREO",
  "RIGHT_STEREO",
  "MONO"
};
const std::map<int, const char*> _ChannelName_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kChannelNameValues, _kChannelNameNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kContentTypeValues[] = {
  ContentType::TEXT,
  ContentType::SPEECH
};
const char* _kContentTypeNames[] = {
  "TEXT",
  "SPEECH"
};
const std::map<int, const char*> _ContentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kContentTypeValues, _kContentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEntailmentJudgmentValues[] = {
  EntailmentJudgment::ENTAILS,
  EntailmentJudgment::CONTRADICTS,
  EntailmentJudgment::NOT_RELATED
};
const char* _kEntailmentJudgmentNames[] = {
  "ENTAILS",
  "CONTRADICTS",
  "NOT_RELATED"
};
const std::map<int, const char*> _EntailmentJudgment_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEntailmentJudgmentValues, _kEntailmentJudgmentNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kModalityValues[] = {
  Modality::ABILITY,
  Modality::EFFORT,
  Modality::INTENTION,
  Modality::SUCCESS,
  Modality::WANT,
  Modality::COMMITTED_BELIEF,
  Modality::NON_COMMITTED_BELIEF,
  Modality::NON_ATTRIBUTABLE_BELIEF
};
const char* _kModalityNames[] = {
  "ABILITY",
  "EFFORT",
  "INTENTION",
  "SUCCESS",
  "WANT",
  "COMMITTED_BELIEF",
  "NON_COMMITTED_BELIEF",
  "NON_ATTRIBUTABLE_BELIEF"
};
const std::map<int, const char*> _Modality_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kModalityValues, _kModalityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSarcasmJudgmentValues[] = {
  SarcasmJudgment::POSITIVE,
  SarcasmJudgment::NEGATIVE,
  SarcasmJudgment::NONE
};
const char* _kSarcasmJudgmentNames[] = {
  "POSITIVE",
  "NEGATIVE",
  "NONE"
};
const std::map<int, const char*> _SarcasmJudgment_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSarcasmJudgmentValues, _kSarcasmJudgmentNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSentenceTypeValues[] = {
  SentenceType::NONE,
  SentenceType::STATEMENT,
  SentenceType::QUESTION,
  SentenceType::INCOMPLETE,
  SentenceType::CLAUSE
};
const char* _kSentenceTypeNames[] = {
  "NONE",
  "STATEMENT",
  "QUESTION",
  "INCOMPLETE",
  "CLAUSE"
};
const std::map<int, const char*> _SentenceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSentenceTypeValues, _kSentenceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSpeechUnitValues[] = {
  SpeechUnit::NONE,
  SpeechUnit::WORD,
  SpeechUnit::PHONEME
};
const char* _kSpeechUnitNames[] = {
  "NONE",
  "WORD",
  "PHONEME"
};
const std::map<int, const char*> _SpeechUnit_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSpeechUnitValues, _kSpeechUnitNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSubjectivityValues[] = {
  Subjectivity::SUBJECTIVE,
  Subjectivity::OBJECTIVE,
  Subjectivity::NONE
};
const char* _kSubjectivityNames[] = {
  "SUBJECTIVE",
  "OBJECTIVE",
  "NONE"
};
const std::map<int, const char*> _Subjectivity_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSubjectivityValues, _kSubjectivityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTokenTypeValues[] = {
  TokenType::WORD,
  TokenType::PUNCTUATION,
  TokenType::GARBAGE,
  TokenType::LEXEME,
  TokenType::PAUSE_FILLER,
  TokenType::LAUGHTER,
  TokenType::SILENCE,
  TokenType::MUSIC,
  TokenType::TAG,
  TokenType::OTHER
};
const char* _kTokenTypeNames[] = {
  "WORD",
  "PUNCTUATION",
  "GARBAGE",
  "LEXEME",
  "PAUSE_FILLER",
  "LAUGHTER",
  "SILENCE",
  "MUSIC",
  "TAG",
  "OTHER"
};
const std::map<int, const char*> _TokenType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kTokenTypeValues, _kTokenTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTokenizerTypeValues[] = {
  TokenizerType::ADEPT,
  TokenizerType::STANFORD_CORENLP,
  TokenizerType::UMASS,
  TokenizerType::WHITESPACE,
  TokenizerType::OTHER
};
const char* _kTokenizerTypeNames[] = {
  "ADEPT",
  "STANFORD_CORENLP",
  "UMASS",
  "WHITESPACE",
  "OTHER"
};
const std::map<int, const char*> _TokenizerType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTokenizerTypeValues, _kTokenizerTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTranscriptTypeValues[] = {
  TranscriptType::SOURCE,
  TranscriptType::TRANSLATION
};
const char* _kTranscriptTypeNames[] = {
  "SOURCE",
  "TRANSLATION"
};
const std::map<int, const char*> _TranscriptType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTranscriptTypeValues, _kTranscriptTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTranslatorNameValues[] = {
  TranslatorName::NONE,
  TranslatorName::SDL_LW
};
const char* _kTranslatorNameNames[] = {
  "NONE",
  "SDL_LW"
};
const std::map<int, const char*> _TranslatorName_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTranslatorNameValues, _kTranslatorNameNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTranslatorTypeValues[] = {
  TranslatorType::NONE,
  TranslatorType::SDL_LW
};
const char* _kTranslatorTypeNames[] = {
  "NONE",
  "SDL_LW"
};
const std::map<int, const char*> _TranslatorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTranslatorTypeValues, _kTranslatorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* EmailAddress::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t EmailAddress::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t EmailAddress::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmailAddress::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EmailAddress");

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmailAddress &a, EmailAddress &b) {
  using ::std::swap;
  swap(a.address, b.address);
  swap(a.displayName, b.displayName);
  swap(a.__isset, b.__isset);
}

const char* ID::ascii_fingerprint = "50272E49E7C02012722B8F62131C940B";
const uint8_t ID::binary_fingerprint[16] = {0x50,0x27,0x2E,0x49,0xE7,0xC0,0x20,0x12,0x72,0x2B,0x8F,0x62,0x13,0x1C,0x94,0x0B};

uint32_t ID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->idStr);
          this->__isset.idStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->MAX_ID);
          this->__isset.MAX_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->MIN_ID);
          this->__isset.MIN_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ID");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idStr", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->idStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MAX_ID", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->MAX_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MIN_ID", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->MIN_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ID &a, ID &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.idStr, b.idStr);
  swap(a.MAX_ID, b.MAX_ID);
  swap(a.MIN_ID, b.MIN_ID);
  swap(a.__isset, b.__isset);
}

const char* LanguageIdentification::ascii_fingerprint = "3A0A4D3F88A437AC8F1C7B1E5645D2ED";
const uint8_t LanguageIdentification::binary_fingerprint[16] = {0x3A,0x0A,0x4D,0x3F,0x88,0xA4,0x37,0xAC,0x8F,0x1C,0x7B,0x1E,0x56,0x45,0xD2,0xED};

uint32_t LanguageIdentification::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->languageProbabilityDistribution.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              double& _val6 = this->languageProbabilityDistribution[_key5];
              xfer += iprot->readDouble(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.languageProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LanguageIdentification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LanguageIdentification");

  xfer += oprot->writeFieldBegin("languageProbabilityDistribution", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->languageProbabilityDistribution.size()));
    std::map<std::string, double> ::const_iterator _iter7;
    for (_iter7 = this->languageProbabilityDistribution.begin(); _iter7 != this->languageProbabilityDistribution.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeDouble(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LanguageIdentification &a, LanguageIdentification &b) {
  using ::std::swap;
  swap(a.languageProbabilityDistribution, b.languageProbabilityDistribution);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* Item::ascii_fingerprint = "B4C8E7B3C61A8F148CF6AE923592490C";
const uint8_t Item::binary_fingerprint[16] = {0xB4,0xC8,0xE7,0xB3,0xC6,0x1A,0x8F,0x14,0x8C,0xF6,0xAE,0x92,0x35,0x92,0x49,0x0C};

uint32_t Item::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Item::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Item");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Item &a, Item &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* TokenOffset::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t TokenOffset::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t TokenOffset::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_beginIndex = false;
  bool isset_endIndex = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->beginIndex);
          isset_beginIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endIndex);
          isset_endIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_beginIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_endIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TokenOffset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TokenOffset");

  xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->beginIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->endIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TokenOffset &a, TokenOffset &b) {
  using ::std::swap;
  swap(a.beginIndex, b.beginIndex);
  swap(a.endIndex, b.endIndex);
}

const char* TokenOffsetObject::ascii_fingerprint = "9CFE4A6581B5B8EB11F5BBBCEFA07940";
const uint8_t TokenOffsetObject::binary_fingerprint[16] = {0x9C,0xFE,0x4A,0x65,0x81,0xB5,0xB8,0xEB,0x11,0xF5,0xBB,0xBC,0xEF,0xA0,0x79,0x40};

uint32_t TokenOffsetObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          this->__isset.tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TokenOffsetObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TokenOffsetObject");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TokenOffsetObject &a, TokenOffsetObject &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.__isset, b.__isset);
}

const char* Corpus::ascii_fingerprint = "099833CCB2DCA3002B546E64AE341C2F";
const uint8_t Corpus::binary_fingerprint[16] = {0x09,0x98,0x33,0xCC,0xB2,0xDC,0xA3,0x00,0x2B,0x54,0x6E,0x64,0xAE,0x34,0x1C,0x2F};

uint32_t Corpus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_corpusId = false;
  bool isset_type = false;
  bool isset_name = false;
  bool isset_uri = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->corpusId);
          isset_corpusId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          isset_uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_corpusId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Corpus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Corpus");

  xfer += oprot->writeFieldBegin("corpusId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->corpusId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Corpus &a, Corpus &b) {
  using ::std::swap;
  swap(a.corpusId, b.corpusId);
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.uri, b.uri);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

const char* Document::ascii_fingerprint = "3E3409FCC20AAA11F5A77574D10F1BC1";
const uint8_t Document::binary_fingerprint[16] = {0x3E,0x34,0x09,0xFC,0xC2,0x0A,0xAA,0x11,0xF5,0xA7,0x75,0x74,0xD1,0x0F,0x1B,0xC1};

uint32_t Document::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_docId = false;
  bool isset_corpus = false;
  bool isset_docType = false;
  bool isset_uri = false;
  bool isset_language = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->docId);
          isset_docId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->corpus.read(iprot);
          isset_corpus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->docType);
          isset_docType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          isset_uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          isset_language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->audioUri);
          this->__isset.audioUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->genre);
          this->__isset.genre = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->headline);
          this->__isset.headline = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_docId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_corpus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_docType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_language)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Document::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Document");

  xfer += oprot->writeFieldBegin("docId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->docId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("corpus", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->corpus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("docType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->docType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.audioUri) {
    xfer += oprot->writeFieldBegin("audioUri", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->audioUri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.genre) {
    xfer += oprot->writeFieldBegin("genre", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->genre);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.headline) {
    xfer += oprot->writeFieldBegin("headline", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->headline);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Document &a, Document &b) {
  using ::std::swap;
  swap(a.docId, b.docId);
  swap(a.corpus, b.corpus);
  swap(a.docType, b.docType);
  swap(a.uri, b.uri);
  swap(a.language, b.language);
  swap(a.audioUri, b.audioUri);
  swap(a.genre, b.genre);
  swap(a.headline, b.headline);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* DocumentList::ascii_fingerprint = "B2B923FC6CA362F42AA820E6B5B95B7E";
const uint8_t DocumentList::binary_fingerprint[16] = {0xB2,0xB9,0x23,0xFC,0x6C,0xA3,0x62,0xF4,0x2A,0xA8,0x20,0xE6,0xB5,0xB9,0x5B,0x7E};

uint32_t DocumentList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serialVersionUID);
          this->__isset.serialVersionUID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DocumentList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DocumentList");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serialVersionUID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serialVersionUID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DocumentList &a, DocumentList &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serialVersionUID, b.serialVersionUID);
  swap(a.__isset, b.__isset);
}

const char* AudioOffset::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t AudioOffset::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t AudioOffset::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_beginIndex = false;
  bool isset_endIndex = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->beginIndex);
          isset_beginIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->endIndex);
          isset_endIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_beginIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_endIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AudioOffset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AudioOffset");

  xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->beginIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->endIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AudioOffset &a, AudioOffset &b) {
  using ::std::swap;
  swap(a.beginIndex, b.beginIndex);
  swap(a.endIndex, b.endIndex);
}

const char* Audio::ascii_fingerprint = "FE1D49D498DAE06E02274F9D1F519995";
const uint8_t Audio::binary_fingerprint[16] = {0xFE,0x1D,0x49,0xD4,0x98,0xDA,0xE0,0x6E,0x02,0x27,0x4F,0x9D,0x1F,0x51,0x99,0x95};

uint32_t Audio::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->audioBuffer);
          this->__isset.audioBuffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->audioType = (AudioFileType::type)ecast8;
          this->__isset.audioType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timeSpan.read(iprot);
          this->__isset.timeSpan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Audio::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Audio");

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audioBuffer", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->audioBuffer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audioType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->audioType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeSpan", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->timeSpan.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Audio &a, Audio &b) {
  using ::std::swap;
  swap(a.uri, b.uri);
  swap(a.audioBuffer, b.audioBuffer);
  swap(a.audioType, b.audioType);
  swap(a.timeSpan, b.timeSpan);
  swap(a.__isset, b.__isset);
}

const char* CharOffset::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t CharOffset::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t CharOffset::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_beginIndex = false;
  bool isset_endIndex = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->beginIndex);
          isset_beginIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endIndex);
          isset_endIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_beginIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_endIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CharOffset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CharOffset");

  xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->beginIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->endIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CharOffset &a, CharOffset &b) {
  using ::std::swap;
  swap(a.beginIndex, b.beginIndex);
  swap(a.endIndex, b.endIndex);
}

const char* Token::ascii_fingerprint = "B4F83E4C381C4B9785883D4072CF552B";
const uint8_t Token::binary_fingerprint[16] = {0xB4,0xF8,0x3E,0x4C,0x38,0x1C,0x4B,0x97,0x85,0x88,0x3D,0x40,0x72,0xCF,0x55,0x2B};

uint32_t Token::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_charOffset = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          isset_charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->audioOffset.read(iprot);
          this->__isset.audioOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          this->__isset.confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lemma);
          this->__isset.lemma = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->tokenType = (TokenType::type)ecast9;
          this->__isset.tokenType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_charOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Token::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Token");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->charOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.audioOffset) {
    xfer += oprot->writeFieldBegin("audioOffset", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->audioOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confidence) {
    xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->confidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lemma) {
    xfer += oprot->writeFieldBegin("lemma", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->lemma);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tokenType) {
    xfer += oprot->writeFieldBegin("tokenType", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->tokenType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Token &a, Token &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.charOffset, b.charOffset);
  swap(a.value, b.value);
  swap(a.audioOffset, b.audioOffset);
  swap(a.confidence, b.confidence);
  swap(a.lemma, b.lemma);
  swap(a.tokenType, b.tokenType);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

const char* Tag::ascii_fingerprint = "85A7790D72F1BC675F7124B6C1C15D82";
const uint8_t Tag::binary_fingerprint[16] = {0x85,0xA7,0x79,0x0D,0x72,0xF1,0xBC,0x67,0x5F,0x71,0x24,0xB6,0xC1,0xC1,0x5D,0x82};

uint32_t Tag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tagName = false;
  bool isset_attributes = false;
  bool isset_charOffset = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          isset_tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attributes.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _ktype11;
            ::apache::thrift::protocol::TType _vtype12;
            xfer += iprot->readMapBegin(_ktype11, _vtype12, _size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              std::string _key15;
              xfer += iprot->readString(_key15);
              Token& _val16 = this->attributes[_key15];
              xfer += _val16.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          isset_charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tagName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_attributes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_charOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Tag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tag");

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
    std::map<std::string, Token> ::const_iterator _iter17;
    for (_iter17 = this->attributes.begin(); _iter17 != this->attributes.end(); ++_iter17)
    {
      xfer += oprot->writeString(_iter17->first);
      xfer += _iter17->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->charOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tag &a, Tag &b) {
  using ::std::swap;
  swap(a.tagName, b.tagName);
  swap(a.attributes, b.attributes);
  swap(a.charOffset, b.charOffset);
}

const char* TokenStream::ascii_fingerprint = "664C4D2BE01E88B4A9D98E2757EDACB0";
const uint8_t TokenStream::binary_fingerprint[16] = {0x66,0x4C,0x4D,0x2B,0xE0,0x1E,0x88,0xB4,0xA9,0xD9,0x8E,0x27,0x57,0xED,0xAC,0xB0};

uint32_t TokenStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenizerType = false;
  bool isset_transcriptType = false;
  bool isset_language = false;
  bool isset_channelName = false;
  bool isset_contentType = false;
  bool isset_textValue = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->tokenizerType = (TokenizerType::type)ecast18;
          isset_tokenizerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->transcriptType = (TranscriptType::type)ecast19;
          isset_transcriptType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          isset_language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->channelName = (ChannelName::type)ecast20;
          isset_channelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->contentType = (ContentType::type)ecast21;
          isset_contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->textValue);
          isset_textValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->asrName = (AsrName::type)ecast22;
          this->__isset.asrName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->document.read(iprot);
          this->__isset.document = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serialVersionUID);
          this->__isset.serialVersionUID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->speechUnit = (SpeechUnit::type)ecast23;
          this->__isset.speechUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->translatorName = (TranslatorName::type)ecast24;
          this->__isset.translatorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tokenList.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->tokenList.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += this->tokenList[_i29].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tokenList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenizerType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transcriptType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_language)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_channelName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_textValue)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TokenStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TokenStream");

  xfer += oprot->writeFieldBegin("tokenizerType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->tokenizerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transcriptType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->transcriptType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelName", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->channelName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->contentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("textValue", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->textValue);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.asrName) {
    xfer += oprot->writeFieldBegin("asrName", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->asrName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.document) {
    xfer += oprot->writeFieldBegin("document", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->document.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serialVersionUID) {
    xfer += oprot->writeFieldBegin("serialVersionUID", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->serialVersionUID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.speechUnit) {
    xfer += oprot->writeFieldBegin("speechUnit", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32((int32_t)this->speechUnit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.translatorName) {
    xfer += oprot->writeFieldBegin("translatorName", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->translatorName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tokenList) {
    xfer += oprot->writeFieldBegin("tokenList", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tokenList.size()));
      std::vector<Token> ::const_iterator _iter30;
      for (_iter30 = this->tokenList.begin(); _iter30 != this->tokenList.end(); ++_iter30)
      {
        xfer += (*_iter30).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TokenStream &a, TokenStream &b) {
  using ::std::swap;
  swap(a.tokenizerType, b.tokenizerType);
  swap(a.transcriptType, b.transcriptType);
  swap(a.language, b.language);
  swap(a.channelName, b.channelName);
  swap(a.contentType, b.contentType);
  swap(a.textValue, b.textValue);
  swap(a.asrName, b.asrName);
  swap(a.document, b.document);
  swap(a.serialVersionUID, b.serialVersionUID);
  swap(a.speechUnit, b.speechUnit);
  swap(a.translatorName, b.translatorName);
  swap(a.tokenList, b.tokenList);
  swap(a.__isset, b.__isset);
}

const char* Arc::ascii_fingerprint = "FBD83E72059D3D39148456E9B8B7F463";
const uint8_t Arc::binary_fingerprint[16] = {0xFB,0xD8,0x3E,0x72,0x05,0x9D,0x3D,0x39,0x14,0x84,0x56,0xE9,0xB8,0xB7,0xF4,0x63};

uint32_t Arc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->destination);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Arc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Arc");

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->destination);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Arc &a, Arc &b) {
  using ::std::swap;
  swap(a.source, b.source);
  swap(a.destination, b.destination);
  swap(a.token, b.token);
  swap(a.weight, b.weight);
  swap(a.__isset, b.__isset);
}

const char* TokenLattice::ascii_fingerprint = "5C1B78F96829EE68180F1FD0485EEEC8";
const uint8_t TokenLattice::binary_fingerprint[16] = {0x5C,0x1B,0x78,0xF9,0x68,0x29,0xEE,0x68,0x18,0x0F,0x1F,0xD0,0x48,0x5E,0xEE,0xC8};

uint32_t TokenLattice::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startState);
          this->__isset.startState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endState);
          this->__isset.endState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arcs.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->arcs.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += this->arcs[_i35].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arcs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TokenLattice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TokenLattice");

  xfer += oprot->writeFieldBegin("startState", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->startState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endState", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->endState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arcs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->arcs.size()));
    std::vector<Arc> ::const_iterator _iter36;
    for (_iter36 = this->arcs.begin(); _iter36 != this->arcs.end(); ++_iter36)
    {
      xfer += (*_iter36).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TokenLattice &a, TokenLattice &b) {
  using ::std::swap;
  swap(a.startState, b.startState);
  swap(a.endState, b.endState);
  swap(a.arcs, b.arcs);
  swap(a.__isset, b.__isset);
}

const char* Chunk::ascii_fingerprint = "119BA4322A23950A1A1CF6A2CE800503";
const uint8_t Chunk::binary_fingerprint[16] = {0x11,0x9B,0xA4,0x32,0x2A,0x23,0x95,0x0A,0x1A,0x1C,0xF6,0xA2,0xCE,0x80,0x05,0x03};

uint32_t Chunk::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Chunk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Chunk");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Chunk &a, Chunk &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* AdeptException::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t AdeptException::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t AdeptException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serialVersionUID);
          this->__isset.serialVersionUID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdeptException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AdeptException");

  xfer += oprot->writeFieldBegin("serialVersionUID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->serialVersionUID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdeptException &a, AdeptException &b) {
  using ::std::swap;
  swap(a.serialVersionUID, b.serialVersionUID);
  swap(a.__isset, b.__isset);
}

const char* AnomalousText::ascii_fingerprint = "3553379BE997F185411FB39D97CB88A0";
const uint8_t AnomalousText::binary_fingerprint[16] = {0x35,0x53,0x37,0x9B,0xE9,0x97,0xF1,0x85,0x41,0x1F,0xB3,0x9D,0x97,0xCB,0x88,0xA0};

uint32_t AnomalousText::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_confidence = false;
  bool isset_document = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          isset_confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->document.read(iprot);
          isset_document = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->explanation);
          this->__isset.explanation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_confidence)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_document)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AnomalousText::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AnomalousText");

  xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->confidence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("document", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->document.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.explanation) {
    xfer += oprot->writeFieldBegin("explanation", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->explanation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AnomalousText &a, AnomalousText &b) {
  using ::std::swap;
  swap(a.confidence, b.confidence);
  swap(a.document, b.document);
  swap(a.explanation, b.explanation);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Type::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t Type::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t Type::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Type::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Type");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Type &a, Type &b) {
  using ::std::swap;
  swap(a.type, b.type);
}

const char* CommittedBelief::ascii_fingerprint = "8A4D67CBA5CDECF7CCADB0869709400D";
const uint8_t CommittedBelief::binary_fingerprint[16] = {0x8A,0x4D,0x67,0xCB,0xA5,0xCD,0xEC,0xF7,0xCC,0xAD,0xB0,0x86,0x97,0x09,0x40,0x0D};

uint32_t CommittedBelief::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_modality = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast37;
          xfer += iprot->readI32(ecast37);
          this->modality = (Modality::type)ecast37;
          isset_modality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modality)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CommittedBelief::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommittedBelief");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("modality", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->modality);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommittedBelief &a, CommittedBelief &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.modality, b.modality);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* EntityMention::ascii_fingerprint = "F687548AF097E3BE0870F4F1440025A4";
const uint8_t EntityMention::binary_fingerprint[16] = {0xF6,0x87,0x54,0x8A,0xF0,0x97,0xE3,0xBE,0x08,0x70,0xF4,0xF1,0x44,0x00,0x25,0xA4};

uint32_t EntityMention::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->entityIdDistribution.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _ktype39;
            ::apache::thrift::protocol::TType _vtype40;
            xfer += iprot->readMapBegin(_ktype39, _vtype40, _size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              int64_t _key43;
              xfer += iprot->readI64(_key43);
              double& _val44 = this->entityIdDistribution[_key43];
              xfer += iprot->readDouble(_val44);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.entityIdDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entityType.read(iprot);
          this->__isset.entityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mentionType.read(iprot);
          this->__isset.mentionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->context);
          this->__isset.context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->contextSize);
          this->__isset.contextSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t EntityMention::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EntityMention");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.entityIdDistribution) {
    xfer += oprot->writeFieldBegin("entityIdDistribution", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->entityIdDistribution.size()));
      std::map<int64_t, double> ::const_iterator _iter45;
      for (_iter45 = this->entityIdDistribution.begin(); _iter45 != this->entityIdDistribution.end(); ++_iter45)
      {
        xfer += oprot->writeI64(_iter45->first);
        xfer += oprot->writeDouble(_iter45->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.entityType) {
    xfer += oprot->writeFieldBegin("entityType", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->entityType.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mentionType) {
    xfer += oprot->writeFieldBegin("mentionType", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->mentionType.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.context) {
    xfer += oprot->writeFieldBegin("context", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->context);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contextSize) {
    xfer += oprot->writeFieldBegin("contextSize", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->contextSize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EntityMention &a, EntityMention &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.entityIdDistribution, b.entityIdDistribution);
  swap(a.entityType, b.entityType);
  swap(a.mentionType, b.mentionType);
  swap(a.context, b.context);
  swap(a.contextSize, b.contextSize);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Entity::ascii_fingerprint = "F38F0B1DB4EE5A0B3A5F350B127EB0FB";
const uint8_t Entity::binary_fingerprint[16] = {0xF3,0x8F,0x0B,0x1D,0xB4,0xEE,0x5A,0x0B,0x3A,0x5F,0x35,0x0B,0x12,0x7E,0xB0,0xFB};

uint32_t Entity::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_entityId = false;
  bool isset_entityType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->entityId);
          isset_entityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entityType.read(iprot);
          isset_entityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->canonicalMention.read(iprot);
          this->__isset.canonicalMention = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_entityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entityType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Entity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Entity");

  xfer += oprot->writeFieldBegin("entityId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->entityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->entityType.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.canonicalMention) {
    xfer += oprot->writeFieldBegin("canonicalMention", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->canonicalMention.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Entity &a, Entity &b) {
  using ::std::swap;
  swap(a.entityId, b.entityId);
  swap(a.entityType, b.entityType);
  swap(a.canonicalMention, b.canonicalMention);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* EntityObject::ascii_fingerprint = "6776C0CBAADECB6EE6FB96E6C8AF02A1";
const uint8_t EntityObject::binary_fingerprint[16] = {0x67,0x76,0xC0,0xCB,0xAA,0xDE,0xCB,0x6E,0xE6,0xFB,0x96,0xE6,0xC8,0xAF,0x02,0xA1};

uint32_t EntityObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entity.read(iprot);
          this->__isset.entity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EntityObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EntityObject");

  xfer += oprot->writeFieldBegin("entity", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->entity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EntityObject &a, EntityObject &b) {
  using ::std::swap;
  swap(a.entity, b.entity);
  swap(a.__isset, b.__isset);
}

const char* Coreference::ascii_fingerprint = "6FC5DFAF04BF0A5F0029E38C1ADF1096";
const uint8_t Coreference::binary_fingerprint[16] = {0x6F,0xC5,0xDF,0xAF,0x04,0xBF,0x0A,0x5F,0x00,0x29,0xE3,0x8C,0x1A,0xDF,0x10,0x96};

uint32_t Coreference::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_coreferenceId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->coreferenceId);
          isset_coreferenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entities.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            xfer += iprot->readListBegin(_etype49, _size46);
            this->entities.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              xfer += this->entities[_i50].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resolvedEntityMentions.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            xfer += iprot->readListBegin(_etype54, _size51);
            this->resolvedEntityMentions.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += this->resolvedEntityMentions[_i55].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resolvedEntityMentions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_coreferenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Coreference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Coreference");

  xfer += oprot->writeFieldBegin("coreferenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->coreferenceId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.entities) {
    xfer += oprot->writeFieldBegin("entities", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entities.size()));
      std::vector<Entity> ::const_iterator _iter56;
      for (_iter56 = this->entities.begin(); _iter56 != this->entities.end(); ++_iter56)
      {
        xfer += (*_iter56).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resolvedEntityMentions) {
    xfer += oprot->writeFieldBegin("resolvedEntityMentions", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resolvedEntityMentions.size()));
      std::vector<EntityMention> ::const_iterator _iter57;
      for (_iter57 = this->resolvedEntityMentions.begin(); _iter57 != this->resolvedEntityMentions.end(); ++_iter57)
      {
        xfer += (*_iter57).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Coreference &a, Coreference &b) {
  using ::std::swap;
  swap(a.coreferenceId, b.coreferenceId);
  swap(a.entities, b.entities);
  swap(a.resolvedEntityMentions, b.resolvedEntityMentions);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* DiscourseUnit::ascii_fingerprint = "66FA40A3D781ED3795E5793ABC3280EC";
const uint8_t DiscourseUnit::binary_fingerprint[16] = {0x66,0xFA,0x40,0xA3,0xD7,0x81,0xED,0x37,0x95,0xE5,0x79,0x3A,0xBC,0x32,0x80,0xEC};

uint32_t DiscourseUnit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_sequenceId = false;
  bool isset_discourceType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->discourceType);
          isset_discourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->noveltyConfidence);
          this->__isset.noveltyConfidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->uncertaintyConfidence);
          this->__isset.uncertaintyConfidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_discourceType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DiscourseUnit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DiscourseUnit");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("discourceType", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->discourceType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.noveltyConfidence) {
    xfer += oprot->writeFieldBegin("noveltyConfidence", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->noveltyConfidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uncertaintyConfidence) {
    xfer += oprot->writeFieldBegin("uncertaintyConfidence", ::apache::thrift::protocol::T_DOUBLE, 7);
    xfer += oprot->writeDouble(this->uncertaintyConfidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DiscourseUnit &a, DiscourseUnit &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.sequenceId, b.sequenceId);
  swap(a.discourceType, b.discourceType);
  swap(a.noveltyConfidence, b.noveltyConfidence);
  swap(a.uncertaintyConfidence, b.uncertaintyConfidence);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Passage::ascii_fingerprint = "0B1DE46BCF4B6AFE1E4056463BCA189C";
const uint8_t Passage::binary_fingerprint[16] = {0x0B,0x1D,0xE4,0x6B,0xCF,0x4B,0x6A,0xFE,0x1E,0x40,0x56,0x46,0x3B,0xCA,0x18,0x9C};

uint32_t Passage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentType);
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Passage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Passage");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentType) {
    xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->contentType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Passage &a, Passage &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.contentType, b.contentType);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Message::ascii_fingerprint = "8ED8D8576C0EB7956DAEF370F45FBF82";
const uint8_t Message::binary_fingerprint[16] = {0x8E,0xD8,0xD8,0x57,0x6C,0x0E,0xB7,0x95,0x6D,0xAE,0xF3,0x70,0xF4,0x5F,0xBF,0x82};

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sender.read(iprot);
          this->__isset.sender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recipients.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            xfer += iprot->readListBegin(_etype61, _size58);
            this->recipients.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              xfer += this->recipients[_i62].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recipients = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ccRecipients.clear();
            uint32_t _size63;
            ::apache::thrift::protocol::TType _etype66;
            xfer += iprot->readListBegin(_etype66, _size63);
            this->ccRecipients.resize(_size63);
            uint32_t _i67;
            for (_i67 = 0; _i67 < _size63; ++_i67)
            {
              xfer += this->ccRecipients[_i67].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ccRecipients = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bccRecipients.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->bccRecipients.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += this->bccRecipients[_i72].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bccRecipients = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sentDate);
          this->__isset.sentDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subject);
          this->__isset.subject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentType);
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userAgent);
          this->__isset.userAgent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->inReplyTo.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->inReplyTo.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += iprot->readString(this->inReplyTo[_i77]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.inReplyTo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->reference.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _etype81;
            xfer += iprot->readListBegin(_etype81, _size78);
            this->reference.resize(_size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              xfer += iprot->readString(this->reference[_i82]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.reference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->returnPathAddress.read(iprot);
          this->__isset.returnPathAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sender) {
    xfer += oprot->writeFieldBegin("sender", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->sender.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipients) {
    xfer += oprot->writeFieldBegin("recipients", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recipients.size()));
      std::vector<EmailAddress> ::const_iterator _iter83;
      for (_iter83 = this->recipients.begin(); _iter83 != this->recipients.end(); ++_iter83)
      {
        xfer += (*_iter83).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ccRecipients) {
    xfer += oprot->writeFieldBegin("ccRecipients", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ccRecipients.size()));
      std::vector<EmailAddress> ::const_iterator _iter84;
      for (_iter84 = this->ccRecipients.begin(); _iter84 != this->ccRecipients.end(); ++_iter84)
      {
        xfer += (*_iter84).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bccRecipients) {
    xfer += oprot->writeFieldBegin("bccRecipients", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->bccRecipients.size()));
      std::vector<EmailAddress> ::const_iterator _iter85;
      for (_iter85 = this->bccRecipients.begin(); _iter85 != this->bccRecipients.end(); ++_iter85)
      {
        xfer += (*_iter85).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sentDate) {
    xfer += oprot->writeFieldBegin("sentDate", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->sentDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subject) {
    xfer += oprot->writeFieldBegin("subject", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->subject);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentType) {
    xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->contentType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageId) {
    xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->messageId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userAgent) {
    xfer += oprot->writeFieldBegin("userAgent", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->userAgent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inReplyTo) {
    xfer += oprot->writeFieldBegin("inReplyTo", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->inReplyTo.size()));
      std::vector<std::string> ::const_iterator _iter86;
      for (_iter86 = this->inReplyTo.begin(); _iter86 != this->inReplyTo.end(); ++_iter86)
      {
        xfer += oprot->writeString((*_iter86));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reference) {
    xfer += oprot->writeFieldBegin("reference", ::apache::thrift::protocol::T_LIST, 16);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->reference.size()));
      std::vector<std::string> ::const_iterator _iter87;
      for (_iter87 = this->reference.begin(); _iter87 != this->reference.end(); ++_iter87)
      {
        xfer += oprot->writeString((*_iter87));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.returnPathAddress) {
    xfer += oprot->writeFieldBegin("returnPathAddress", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->returnPathAddress.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.sender, b.sender);
  swap(a.recipients, b.recipients);
  swap(a.ccRecipients, b.ccRecipients);
  swap(a.bccRecipients, b.bccRecipients);
  swap(a.sentDate, b.sentDate);
  swap(a.priority, b.priority);
  swap(a.subject, b.subject);
  swap(a.contentType, b.contentType);
  swap(a.messageId, b.messageId);
  swap(a.userAgent, b.userAgent);
  swap(a.inReplyTo, b.inReplyTo);
  swap(a.reference, b.reference);
  swap(a.returnPathAddress, b.returnPathAddress);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* Entailment::ascii_fingerprint = "4D8BD83EDFFA9D4EB7ACC8C41225F9BC";
const uint8_t Entailment::binary_fingerprint[16] = {0x4D,0x8B,0xD8,0x3E,0xDF,0xFA,0x9D,0x4E,0xB7,0xAC,0xC8,0xC4,0x12,0x25,0xF9,0xBC};

uint32_t Entailment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_entailmentId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->entailmentId);
          isset_entailmentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->hypothesis.read(iprot);
          this->__isset.hypothesis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->judgmentDistribution.clear();
            uint32_t _size88;
            ::apache::thrift::protocol::TType _ktype89;
            ::apache::thrift::protocol::TType _vtype90;
            xfer += iprot->readMapBegin(_ktype89, _vtype90, _size88);
            uint32_t _i92;
            for (_i92 = 0; _i92 < _size88; ++_i92)
            {
              EntailmentJudgment::type _key93;
              int32_t ecast95;
              xfer += iprot->readI32(ecast95);
              _key93 = (EntailmentJudgment::type)ecast95;
              double& _val94 = this->judgmentDistribution[_key93];
              xfer += iprot->readDouble(_val94);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.judgmentDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->text.read(iprot);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_entailmentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Entailment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Entailment");

  xfer += oprot->writeFieldBegin("entailmentId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->entailmentId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.hypothesis) {
    xfer += oprot->writeFieldBegin("hypothesis", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->hypothesis.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.judgmentDistribution) {
    xfer += oprot->writeFieldBegin("judgmentDistribution", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->judgmentDistribution.size()));
      std::map<EntailmentJudgment::type, double> ::const_iterator _iter96;
      for (_iter96 = this->judgmentDistribution.begin(); _iter96 != this->judgmentDistribution.end(); ++_iter96)
      {
        xfer += oprot->writeI32((int32_t)_iter96->first);
        xfer += oprot->writeDouble(_iter96->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.text) {
    xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->text.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Entailment &a, Entailment &b) {
  using ::std::swap;
  swap(a.entailmentId, b.entailmentId);
  swap(a.hypothesis, b.hypothesis);
  swap(a.judgmentDistribution, b.judgmentDistribution);
  swap(a.text, b.text);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* HltContent::ascii_fingerprint = "20C06E79BA52E52B07B09C122C971051";
const uint8_t HltContent::binary_fingerprint[16] = {0x20,0xC0,0x6E,0x79,0xBA,0x52,0xE5,0x2B,0x07,0xB0,0x9C,0x12,0x2C,0x97,0x10,0x51};

uint32_t HltContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HltContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HltContent");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HltContent &a, HltContent &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* InterPausalUnit::ascii_fingerprint = "73CF609B7073880A17EBC2A2015F91E7";
const uint8_t InterPausalUnit::binary_fingerprint[16] = {0x73,0xCF,0x60,0x9B,0x70,0x73,0x88,0x0A,0x17,0xEB,0xC2,0xA2,0x01,0x5F,0x91,0xE7};

uint32_t InterPausalUnit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_ipuAudioOffset = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipuAudioOffset.read(iprot);
          isset_ipuAudioOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->acousticFeatures.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _ktype98;
            ::apache::thrift::protocol::TType _vtype99;
            xfer += iprot->readMapBegin(_ktype98, _vtype99, _size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              std::string _key102;
              xfer += iprot->readString(_key102);
              double& _val103 = this->acousticFeatures[_key102];
              xfer += iprot->readDouble(_val103);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.acousticFeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ipuAudioOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InterPausalUnit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InterPausalUnit");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipuAudioOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ipuAudioOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.acousticFeatures) {
    xfer += oprot->writeFieldBegin("acousticFeatures", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->acousticFeatures.size()));
      std::map<std::string, double> ::const_iterator _iter104;
      for (_iter104 = this->acousticFeatures.begin(); _iter104 != this->acousticFeatures.end(); ++_iter104)
      {
        xfer += oprot->writeString(_iter104->first);
        xfer += oprot->writeDouble(_iter104->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InterPausalUnit &a, InterPausalUnit &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.ipuAudioOffset, b.ipuAudioOffset);
  swap(a.acousticFeatures, b.acousticFeatures);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Opinion::ascii_fingerprint = "946874239DB6BB1145787D5B49C7E945";
const uint8_t Opinion::binary_fingerprint[16] = {0x94,0x68,0x74,0x23,0x9D,0xB6,0xBB,0x11,0x45,0x78,0x7D,0x5B,0x49,0xC7,0xE9,0x45};

uint32_t Opinion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_subjectivity = false;
  bool isset_polarity = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast105;
          xfer += iprot->readI32(ecast105);
          this->subjectivity = (Subjectivity::type)ecast105;
          isset_subjectivity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast106;
          xfer += iprot->readI32(ecast106);
          this->polarity = (Polarity::type)ecast106;
          isset_polarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_subjectivity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_polarity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Opinion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Opinion");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("subjectivity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->subjectivity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("polarity", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->polarity);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Opinion &a, Opinion &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.subjectivity, b.subjectivity);
  swap(a.polarity, b.polarity);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Paraphrase::ascii_fingerprint = "6A2B2C2C95937C9BFB10479B15C22F85";
const uint8_t Paraphrase::binary_fingerprint[16] = {0x6A,0x2B,0x2C,0x2C,0x95,0x93,0x7C,0x9B,0xFB,0x10,0x47,0x9B,0x15,0xC2,0x2F,0x85};

uint32_t Paraphrase::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_value = false;
  bool isset_confidence = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          isset_confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->posTag.read(iprot);
          this->__isset.posTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_confidence)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Paraphrase::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Paraphrase");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->confidence);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.posTag) {
    xfer += oprot->writeFieldBegin("posTag", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->posTag.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Paraphrase &a, Paraphrase &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.confidence, b.confidence);
  swap(a.posTag, b.posTag);
  swap(a.id, b.id);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* PartOfSpeech::ascii_fingerprint = "612203E8AE490B29F72EDAA8D39FAC91";
const uint8_t PartOfSpeech::binary_fingerprint[16] = {0x61,0x22,0x03,0xE8,0xAE,0x49,0x0B,0x29,0xF7,0x2E,0xDA,0xA8,0xD3,0x9F,0xAC,0x91};

uint32_t PartOfSpeech::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->posTag.read(iprot);
          this->__isset.posTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartOfSpeech::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PartOfSpeech");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.posTag) {
    xfer += oprot->writeFieldBegin("posTag", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->posTag.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartOfSpeech &a, PartOfSpeech &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.posTag, b.posTag);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* PostQuote::ascii_fingerprint = "7722AA25C655F5E635CDB65F6AB60000";
const uint8_t PostQuote::binary_fingerprint[16] = {0x77,0x22,0xAA,0x25,0xC6,0x55,0xF5,0xE6,0x35,0xCD,0xB6,0x5F,0x6A,0xB6,0x00,0x00};

uint32_t PostQuote::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_openTag = false;
  bool isset_closeTag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->openTag.read(iprot);
          isset_openTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->closeTag.read(iprot);
          isset_closeTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->subQuotes.clear();
            uint32_t _size107;
            ::apache::thrift::protocol::TType _etype110;
            xfer += iprot->readListBegin(_etype110, _size107);
            this->subQuotes.resize(_size107);
            uint32_t _i111;
            for (_i111 = 0; _i111 < _size107; ++_i111)
            {
              xfer += iprot->readI32(this->subQuotes[_i111]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.subQuotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->postId);
          this->__isset.postId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_openTag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_closeTag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PostQuote::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PostQuote");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("openTag", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->openTag.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("closeTag", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->closeTag.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.subQuotes) {
    xfer += oprot->writeFieldBegin("subQuotes", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->subQuotes.size()));
      std::vector<int32_t> ::const_iterator _iter112;
      for (_iter112 = this->subQuotes.begin(); _iter112 != this->subQuotes.end(); ++_iter112)
      {
        xfer += oprot->writeI32((*_iter112));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.postId) {
    xfer += oprot->writeFieldBegin("postId", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->postId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PostQuote &a, PostQuote &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.openTag, b.openTag);
  swap(a.closeTag, b.closeTag);
  swap(a.subQuotes, b.subQuotes);
  swap(a.charOffset, b.charOffset);
  swap(a.postId, b.postId);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

  CharOffset PostQuote::getTopLevelOffset(const Post post, const int32_t index) {
    std::vector<PostQuote> allSubQuotes = post.allSubQuotes;
    if (index == 0) {
      if (subQuotes.size() == 0) {
	CharOffset charOffset;
	charOffset.beginIndex = openTag.charOffset.endIndex;
	charOffset.endIndex = closeTag.charOffset.beginIndex;
        return charOffset;
      } else {
	int32_t subQuoteIndex = subQuotes[index];
	CharOffset charOffset;
	charOffset.beginIndex = openTag.charOffset.endIndex;
	charOffset.endIndex = allSubQuotes[subQuoteIndex].openTag.charOffset.beginIndex;
        return charOffset;
      }
    } else if (index < subQuotes.size()) {
      int32_t firstIndex = subQuotes[index - 1];
      int32_t secondIndex = subQuotes[index];
      CharOffset charOffset;
      charOffset.beginIndex = allSubQuotes[firstIndex].closeTag.charOffset.endIndex;
      charOffset.endIndex = allSubQuotes[secondIndex].openTag.charOffset.beginIndex;
      return charOffset;
    } else if (index == subQuotes.size()) {
      int32_t subQuoteIndex = subQuotes[index - 1];
      CharOffset charOffset;
      charOffset.beginIndex = allSubQuotes[subQuoteIndex].closeTag.charOffset.endIndex;
      charOffset.endIndex = closeTag.charOffset.beginIndex;
      return charOffset;
    } else {
      std::cout << "Post content index out of range";
      throw 10;
    }

  }

  std::string PostQuote::getTopLevelContent(const Post post, const int32_t index) {
    CharOffset charOffset = getTopLevelOffset(post, index);
    int32_t length = charOffset.endIndex - charOffset.beginIndex;
    int32_t beginPos = charOffset.beginIndex - openTag.charOffset.beginIndex;
    std::string contentValue = value.substr(beginPos, length);
    return contentValue;
  }

const char* Post::ascii_fingerprint = "F87028720B1AE2F879CD8E198A913FDF";
const uint8_t Post::binary_fingerprint[16] = {0xF8,0x70,0x28,0x72,0x0B,0x1A,0xE2,0xF8,0x79,0xCD,0x8E,0x19,0x8A,0x91,0x3F,0xDF};

uint32_t Post::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_openTag = false;
  bool isset_closeTag = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->openTag.read(iprot);
          isset_openTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->closeTag.read(iprot);
          isset_closeTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->quotes.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readListBegin(_etype116, _size113);
            this->quotes.resize(_size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              xfer += iprot->readI32(this->quotes[_i117]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.quotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->allSubQuotes.clear();
            uint32_t _size118;
            ::apache::thrift::protocol::TType _etype121;
            xfer += iprot->readListBegin(_etype121, _size118);
            this->allSubQuotes.resize(_size118);
            uint32_t _i122;
            for (_i122 = 0; _i122 < _size118; ++_i122)
            {
              xfer += this->allSubQuotes[_i122].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.allSubQuotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_openTag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_closeTag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Post::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Post");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("openTag", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->openTag.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("closeTag", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->closeTag.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.quotes) {
    xfer += oprot->writeFieldBegin("quotes", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->quotes.size()));
      std::vector<int32_t> ::const_iterator _iter123;
      for (_iter123 = this->quotes.begin(); _iter123 != this->quotes.end(); ++_iter123)
      {
        xfer += oprot->writeI32((*_iter123));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.allSubQuotes) {
    xfer += oprot->writeFieldBegin("allSubQuotes", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->allSubQuotes.size()));
      std::vector<PostQuote> ::const_iterator _iter124;
      for (_iter124 = this->allSubQuotes.begin(); _iter124 != this->allSubQuotes.end(); ++_iter124)
      {
        xfer += (*_iter124).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Post &a, Post &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.openTag, b.openTag);
  swap(a.closeTag, b.closeTag);
  swap(a.quotes, b.quotes);
  swap(a.allSubQuotes, b.allSubQuotes);
  swap(a.charOffset, b.charOffset);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* ProsodicPhrase::ascii_fingerprint = "154DE8E5D003001C4800E5CAD63BDBFC";
const uint8_t ProsodicPhrase::binary_fingerprint[16] = {0x15,0x4D,0xE8,0xE5,0xD0,0x03,0x00,0x1C,0x48,0x00,0xE5,0xCA,0xD6,0x3B,0xDB,0xFC};

uint32_t ProsodicPhrase::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_sequenceId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          this->__isset.confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->noveltyConfidence);
          this->__isset.noveltyConfidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->uncertaintyConfidence);
          this->__isset.uncertaintyConfidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProsodicPhrase::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProsodicPhrase");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.confidence) {
    xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->confidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noveltyConfidence) {
    xfer += oprot->writeFieldBegin("noveltyConfidence", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->noveltyConfidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uncertaintyConfidence) {
    xfer += oprot->writeFieldBegin("uncertaintyConfidence", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->uncertaintyConfidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProsodicPhrase &a, ProsodicPhrase &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.sequenceId, b.sequenceId);
  swap(a.confidence, b.confidence);
  swap(a.noveltyConfidence, b.noveltyConfidence);
  swap(a.type, b.type);
  swap(a.uncertaintyConfidence, b.uncertaintyConfidence);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Sarcasm::ascii_fingerprint = "987A6F73FA0D3BB10B3944817D1959B8";
const uint8_t Sarcasm::binary_fingerprint[16] = {0x98,0x7A,0x6F,0x73,0xFA,0x0D,0x3B,0xB1,0x0B,0x39,0x44,0x81,0x7D,0x19,0x59,0xB8};

uint32_t Sarcasm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sarcasmId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_judgment = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sarcasmId);
          isset_sarcasmId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast125;
          xfer += iprot->readI32(ecast125);
          this->judgment = (SarcasmJudgment::type)ecast125;
          isset_judgment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          this->__isset.confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sarcasmId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_judgment)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Sarcasm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Sarcasm");

  xfer += oprot->writeFieldBegin("sarcasmId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sarcasmId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("judgment", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->judgment);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.confidence) {
    xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->confidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Sarcasm &a, Sarcasm &b) {
  using ::std::swap;
  swap(a.sarcasmId, b.sarcasmId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.judgment, b.judgment);
  swap(a.confidence, b.confidence);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Sentence::ascii_fingerprint = "993B39586AC05763F2E1EE150686008D";
const uint8_t Sentence::binary_fingerprint[16] = {0x99,0x3B,0x39,0x58,0x6A,0xC0,0x57,0x63,0xF2,0xE1,0xEE,0x15,0x06,0x86,0x00,0x8D};

uint32_t Sentence::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->noveltyConfidence);
          this->__isset.noveltyConfidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->punctuation);
          this->__isset.punctuation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast126;
          xfer += iprot->readI32(ecast126);
          this->type = (SentenceType::type)ecast126;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->uncertaintyConfidence);
          this->__isset.uncertaintyConfidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Sentence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Sentence");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noveltyConfidence) {
    xfer += oprot->writeFieldBegin("noveltyConfidence", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->noveltyConfidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.punctuation) {
    xfer += oprot->writeFieldBegin("punctuation", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->punctuation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uncertaintyConfidence) {
    xfer += oprot->writeFieldBegin("uncertaintyConfidence", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->uncertaintyConfidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Sentence &a, Sentence &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.noveltyConfidence, b.noveltyConfidence);
  swap(a.punctuation, b.punctuation);
  swap(a.type, b.type);
  swap(a.uncertaintyConfidence, b.uncertaintyConfidence);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Session::ascii_fingerprint = "189CF08E06776A5B7B6D1D6F6E6FF6F1";
const uint8_t Session::binary_fingerprint[16] = {0x18,0x9C,0xF0,0x8E,0x06,0x77,0x6A,0x5B,0x7B,0x6D,0x1D,0x6F,0x6E,0x6F,0xF6,0xF1};

uint32_t Session::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_sequenceId = false;
  bool isset_contentType = false;
  bool isset_sentences = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentType);
          isset_contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sentences.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _etype130;
            xfer += iprot->readListBegin(_etype130, _size127);
            this->sentences.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              xfer += this->sentences[_i131].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_sentences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_contentType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sentences)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Session::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Session");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->contentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentences", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sentences.size()));
    std::vector<Sentence> ::const_iterator _iter132;
    for (_iter132 = this->sentences.begin(); _iter132 != this->sentences.end(); ++_iter132)
    {
      xfer += (*_iter132).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->charOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Session &a, Session &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.sequenceId, b.sequenceId);
  swap(a.contentType, b.contentType);
  swap(a.sentences, b.sentences);
  swap(a.charOffset, b.charOffset);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* SentenceSimilarity::ascii_fingerprint = "E4D4A2DB16AA59AD45605F4EF5D88A05";
const uint8_t SentenceSimilarity::binary_fingerprint[16] = {0xE4,0xD4,0xA2,0xDB,0x16,0xAA,0x59,0xAD,0x45,0x60,0x5F,0x4E,0xF5,0xD8,0x8A,0x05};

uint32_t SentenceSimilarity::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_similarity = false;
  bool isset_sentence1 = false;
  bool isset_sentence2 = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->similarity);
          isset_similarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sentence1.read(iprot);
          isset_sentence1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sentence2.read(iprot);
          isset_sentence2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_similarity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sentence1)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sentence2)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SentenceSimilarity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SentenceSimilarity");

  xfer += oprot->writeFieldBegin("similarity", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->similarity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentence1", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sentence1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentence2", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->sentence2.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SentenceSimilarity &a, SentenceSimilarity &b) {
  using ::std::swap;
  swap(a.similarity, b.similarity);
  swap(a.sentence1, b.sentence1);
  swap(a.sentence2, b.sentence2);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Slot::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t Slot::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t Slot::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_slotId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->slotId);
          isset_slotId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_slotId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Slot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Slot");

  xfer += oprot->writeFieldBegin("slotId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->slotId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Slot &a, Slot &b) {
  using ::std::swap;
  swap(a.slotId, b.slotId);
}

const char* Story::ascii_fingerprint = "D70E12EA7998E4CFCCBBCFE197839151";
const uint8_t Story::binary_fingerprint[16] = {0xD7,0x0E,0x12,0xEA,0x79,0x98,0xE4,0xCF,0xCC,0xBB,0xCF,0xE1,0x97,0x83,0x91,0x51};

uint32_t Story::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_sequenceId = false;
  bool isset_topicLabels = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->topicLabels.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->topicLabels.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += iprot->readString(this->topicLabels[_i137]);
            }
            xfer += iprot->readListEnd();
          }
          isset_topicLabels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topicLabels)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Story::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Story");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topicLabels", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->topicLabels.size()));
    std::vector<std::string> ::const_iterator _iter138;
    for (_iter138 = this->topicLabels.begin(); _iter138 != this->topicLabels.end(); ++_iter138)
    {
      xfer += oprot->writeString((*_iter138));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Story &a, Story &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.sequenceId, b.sequenceId);
  swap(a.topicLabels, b.topicLabels);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* SyntacticChunk::ascii_fingerprint = "AA567E4ED40368AD43D87BB4871B7438";
const uint8_t SyntacticChunk::binary_fingerprint[16] = {0xAA,0x56,0x7E,0x4E,0xD4,0x03,0x68,0xAD,0x43,0xD8,0x7B,0xB4,0x87,0x1B,0x74,0x38};

uint32_t SyntacticChunk::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sequenceId = false;
  bool isset_scType = false;
  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sequenceId);
          isset_sequenceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->scType.read(iprot);
          isset_scType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sequenceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SyntacticChunk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SyntacticChunk");

  xfer += oprot->writeFieldBegin("sequenceId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sequenceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->scType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SyntacticChunk &a, SyntacticChunk &b) {
  using ::std::swap;
  swap(a.sequenceId, b.sequenceId);
  swap(a.scType, b.scType);
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* TokenStreamList::ascii_fingerprint = "4ACF9A2B729628F23759F4764DA95264";
const uint8_t TokenStreamList::binary_fingerprint[16] = {0x4A,0xCF,0x9A,0x2B,0x72,0x96,0x28,0xF2,0x37,0x59,0xF4,0x76,0x4D,0xA9,0x52,0x64};

uint32_t TokenStreamList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tokenStreamList.clear();
            uint32_t _size139;
            ::apache::thrift::protocol::TType _etype142;
            xfer += iprot->readListBegin(_etype142, _size139);
            this->tokenStreamList.resize(_size139);
            uint32_t _i143;
            for (_i143 = 0; _i143 < _size139; ++_i143)
            {
              xfer += this->tokenStreamList[_i143].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tokenStreamList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TokenStreamList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TokenStreamList");

  xfer += oprot->writeFieldBegin("tokenStreamList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tokenStreamList.size()));
    std::vector<TokenStream> ::const_iterator _iter144;
    for (_iter144 = this->tokenStreamList.begin(); _iter144 != this->tokenStreamList.end(); ++_iter144)
    {
      xfer += (*_iter144).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TokenStreamList &a, TokenStreamList &b) {
  using ::std::swap;
  swap(a.tokenStreamList, b.tokenStreamList);
  swap(a.__isset, b.__isset);
}

const char* Viewpoint::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t Viewpoint::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t Viewpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_speakerId = false;
  bool isset_belief = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->speakerId);
          isset_speakerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->belief);
          isset_belief = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_speakerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_belief)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Viewpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Viewpoint");

  xfer += oprot->writeFieldBegin("speakerId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->speakerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("belief", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->belief);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Viewpoint &a, Viewpoint &b) {
  using ::std::swap;
  swap(a.speakerId, b.speakerId);
  swap(a.belief, b.belief);
}

const char* Topic::ascii_fingerprint = "945A09935A3A03061DD330F93CC56143";
const uint8_t Topic::binary_fingerprint[16] = {0x94,0x5A,0x09,0x93,0x5A,0x3A,0x03,0x06,0x1D,0xD3,0x30,0xF9,0x3C,0xC5,0x61,0x43};

uint32_t Topic::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_topicId = false;
  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->topicId);
          isset_topicId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->belief);
          this->__isset.belief = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast145;
          xfer += iprot->readI32(ecast145);
          this->polarity = (TopicPolarity::type)ecast145;
          this->__isset.polarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->viewpoints.clear();
            uint32_t _size146;
            ::apache::thrift::protocol::TType _etype149;
            xfer += iprot->readListBegin(_etype149, _size146);
            this->viewpoints.resize(_size146);
            uint32_t _i150;
            for (_i150 = 0; _i150 < _size146; ++_i150)
            {
              xfer += this->viewpoints[_i150].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.viewpoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_topicId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Topic::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Topic");

  xfer += oprot->writeFieldBegin("topicId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->topicId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.belief) {
    xfer += oprot->writeFieldBegin("belief", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->belief);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.polarity) {
    xfer += oprot->writeFieldBegin("polarity", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->polarity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.viewpoints) {
    xfer += oprot->writeFieldBegin("viewpoints", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->viewpoints.size()));
      std::vector<Viewpoint> ::const_iterator _iter151;
      for (_iter151 = this->viewpoints.begin(); _iter151 != this->viewpoints.end(); ++_iter151)
      {
        xfer += (*_iter151).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Topic &a, Topic &b) {
  using ::std::swap;
  swap(a.topicId, b.topicId);
  swap(a.name, b.name);
  swap(a.belief, b.belief);
  swap(a.polarity, b.polarity);
  swap(a.viewpoints, b.viewpoints);
  swap(a.__isset, b.__isset);
}

const char* Value::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t Value::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

uint32_t Value::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_valueId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->valueId);
          isset_valueId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_valueId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Value::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Value");

  xfer += oprot->writeFieldBegin("valueId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->valueId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Value &a, Value &b) {
  using ::std::swap;
  swap(a.valueId, b.valueId);
}

const char* Triple::ascii_fingerprint = "37F932D049A8D2B3AE7D1ED8E4475F7A";
const uint8_t Triple::binary_fingerprint[16] = {0x37,0xF9,0x32,0xD0,0x49,0xA8,0xD2,0xB3,0xAE,0x7D,0x1E,0xD8,0xE4,0x47,0x5F,0x7A};

uint32_t Triple::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_entity = false;
  bool isset_slot = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entity.read(iprot);
          isset_entity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->slot.read(iprot);
          isset_slot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_entity)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_slot)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Triple::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Triple");

  xfer += oprot->writeFieldBegin("entity", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->entity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->slot.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Triple &a, Triple &b) {
  using ::std::swap;
  swap(a.entity, b.entity);
  swap(a.slot, b.slot);
  swap(a.value, b.value);
}

const char* Utterance::ascii_fingerprint = "8970DFAB68B818864BC9B61CDC4B80C4";
const uint8_t Utterance::binary_fingerprint[16] = {0x89,0x70,0xDF,0xAB,0x68,0xB8,0x18,0x86,0x4B,0xC9,0xB6,0x1C,0xDC,0x4B,0x80,0xC4};

uint32_t Utterance::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tokenOffset = false;
  bool isset_tokenStream = false;
  bool isset_utteranceId = false;
  bool isset_speakerId = false;
  bool isset_annotation = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenOffset.read(iprot);
          isset_tokenOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tokenStream.read(iprot);
          isset_tokenStream = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->charOffset.read(iprot);
          this->__isset.charOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->utteranceId);
          isset_utteranceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->speakerId);
          isset_speakerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->annotation);
          isset_annotation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tokenOffset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tokenStream)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_utteranceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_speakerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_annotation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Utterance::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Utterance");

  xfer += oprot->writeFieldBegin("tokenOffset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tokenOffset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenStream", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tokenStream.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.charOffset) {
    xfer += oprot->writeFieldBegin("charOffset", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->charOffset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("utteranceId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->utteranceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speakerId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->speakerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("annotation", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->annotation);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Utterance &a, Utterance &b) {
  using ::std::swap;
  swap(a.tokenOffset, b.tokenOffset);
  swap(a.tokenStream, b.tokenStream);
  swap(a.charOffset, b.charOffset);
  swap(a.utteranceId, b.utteranceId);
  swap(a.speakerId, b.speakerId);
  swap(a.annotation, b.annotation);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Conversation::ascii_fingerprint = "9FE2CF826285CBC522199F2A36997319";
const uint8_t Conversation::binary_fingerprint[16] = {0x9F,0xE2,0xCF,0x82,0x62,0x85,0xCB,0xC5,0x22,0x19,0x9F,0x2A,0x36,0x99,0x73,0x19};

uint32_t Conversation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_conversationId = false;
  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->conversationId);
          isset_conversationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->oneSided);
          this->__isset.oneSided = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->topics.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _etype155;
            xfer += iprot->readListBegin(_etype155, _size152);
            this->topics.resize(_size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              xfer += this->topics[_i156].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.topics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->utterances.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _etype160;
            xfer += iprot->readListBegin(_etype160, _size157);
            this->utterances.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += this->utterances[_i161].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.utterances = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_conversationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Conversation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Conversation");

  xfer += oprot->writeFieldBegin("conversationId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->conversationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.oneSided) {
    xfer += oprot->writeFieldBegin("oneSided", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->oneSided);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topics) {
    xfer += oprot->writeFieldBegin("topics", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->topics.size()));
      std::vector<Topic> ::const_iterator _iter162;
      for (_iter162 = this->topics.begin(); _iter162 != this->topics.end(); ++_iter162)
      {
        xfer += (*_iter162).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.utterances) {
    xfer += oprot->writeFieldBegin("utterances", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->utterances.size()));
      std::vector<Utterance> ::const_iterator _iter163;
      for (_iter163 = this->utterances.begin(); _iter163 != this->utterances.end(); ++_iter163)
      {
        xfer += (*_iter163).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Conversation &a, Conversation &b) {
  using ::std::swap;
  swap(a.conversationId, b.conversationId);
  swap(a.name, b.name);
  swap(a.oneSided, b.oneSided);
  swap(a.topics, b.topics);
  swap(a.utterances, b.utterances);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* ChunkUnion::ascii_fingerprint = "7E487971266C23A0B729BD7BCFE341CA";
const uint8_t ChunkUnion::binary_fingerprint[16] = {0x7E,0x48,0x79,0x71,0x26,0x6C,0x23,0xA0,0xB7,0x29,0xBD,0x7B,0xCF,0xE3,0x41,0xCA};

uint32_t ChunkUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->committedBelief.read(iprot);
          this->__isset.committedBelief = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->discourseUnit.read(iprot);
          this->__isset.discourseUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entityMention.read(iprot);
          this->__isset.entityMention = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opinion.read(iprot);
          this->__isset.opinion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->partOfSpeech.read(iprot);
          this->__isset.partOfSpeech = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->passage.read(iprot);
          this->__isset.passage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->prosodicPhrase.read(iprot);
          this->__isset.prosodicPhrase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sarcasm.read(iprot);
          this->__isset.sarcasm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sentence.read(iprot);
          this->__isset.sentence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->story.read(iprot);
          this->__isset.story = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->syntacticChunk.read(iprot);
          this->__isset.syntacticChunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->utterance.read(iprot);
          this->__isset.utterance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chunk.read(iprot);
          this->__isset.chunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChunkUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ChunkUnion");

  xfer += oprot->writeFieldBegin("committedBelief", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->committedBelief.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("discourseUnit", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->discourseUnit.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityMention", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->entityMention.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opinion", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->opinion.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partOfSpeech", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->partOfSpeech.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passage", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->passage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prosodicPhrase", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->prosodicPhrase.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sarcasm", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->sarcasm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentence", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->sentence.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("story", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->story.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syntacticChunk", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->syntacticChunk.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("utterance", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->utterance.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chunk", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->chunk.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChunkUnion &a, ChunkUnion &b) {
  using ::std::swap;
  swap(a.committedBelief, b.committedBelief);
  swap(a.discourseUnit, b.discourseUnit);
  swap(a.entityMention, b.entityMention);
  swap(a.opinion, b.opinion);
  swap(a.partOfSpeech, b.partOfSpeech);
  swap(a.passage, b.passage);
  swap(a.prosodicPhrase, b.prosodicPhrase);
  swap(a.sarcasm, b.sarcasm);
  swap(a.sentence, b.sentence);
  swap(a.story, b.story);
  swap(a.syntacticChunk, b.syntacticChunk);
  swap(a.utterance, b.utterance);
  swap(a.chunk, b.chunk);
  swap(a.__isset, b.__isset);
}

const char* Argument::ascii_fingerprint = "D4A064B4B18C6503982CDE34B3E19ED3";
const uint8_t Argument::binary_fingerprint[16] = {0xD4,0xA0,0x64,0xB4,0xB1,0x8C,0x65,0x03,0x98,0x2C,0xDE,0x34,0xB3,0xE1,0x9E,0xD3};

uint32_t Argument::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_argumentType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->argumentType.read(iprot);
          isset_argumentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->argumentDistribution.clear();
            uint32_t _size164;
            ::apache::thrift::protocol::TType _ktype165;
            ::apache::thrift::protocol::TType _vtype166;
            xfer += iprot->readMapBegin(_ktype165, _vtype166, _size164);
            uint32_t _i168;
            for (_i168 = 0; _i168 < _size164; ++_i168)
            {
              ChunkUnion _key169;
              xfer += _key169.read(iprot);
              double& _val170 = this->argumentDistribution[_key169];
              xfer += iprot->readDouble(_val170);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.argumentDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_argumentType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Argument::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Argument");

  xfer += oprot->writeFieldBegin("argumentType", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->argumentType.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.argumentDistribution) {
    xfer += oprot->writeFieldBegin("argumentDistribution", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->argumentDistribution.size()));
      std::map<ChunkUnion, double> ::const_iterator _iter171;
      for (_iter171 = this->argumentDistribution.begin(); _iter171 != this->argumentDistribution.end(); ++_iter171)
      {
        xfer += _iter171->first.write(oprot);
        xfer += oprot->writeDouble(_iter171->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Argument &a, Argument &b) {
  using ::std::swap;
  swap(a.argumentType, b.argumentType);
  swap(a.argumentDistribution, b.argumentDistribution);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* ArgumentTuple::ascii_fingerprint = "E5A7781E14F42BF82F70332761202623";
const uint8_t ArgumentTuple::binary_fingerprint[16] = {0xE5,0xA7,0x78,0x1E,0x14,0xF4,0x2B,0xF8,0x2F,0x70,0x33,0x27,0x61,0x20,0x26,0x23};

uint32_t ArgumentTuple::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tupleType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tupleType.read(iprot);
          isset_tupleType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _etype175;
            xfer += iprot->readListBegin(_etype175, _size172);
            this->attributes.resize(_size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              xfer += this->attributes[_i176].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size177;
            ::apache::thrift::protocol::TType _etype180;
            xfer += iprot->readListBegin(_etype180, _size177);
            this->arguments.resize(_size177);
            uint32_t _i181;
            for (_i181 = 0; _i181 < _size177; ++_i181)
            {
              xfer += this->arguments[_i181].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          this->__isset.confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tupleType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ArgumentTuple::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ArgumentTuple");

  xfer += oprot->writeFieldBegin("tupleType", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tupleType.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
      std::vector<Type> ::const_iterator _iter182;
      for (_iter182 = this->attributes.begin(); _iter182 != this->attributes.end(); ++_iter182)
      {
        xfer += (*_iter182).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.arguments) {
    xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->arguments.size()));
      std::vector<Argument> ::const_iterator _iter183;
      for (_iter183 = this->arguments.begin(); _iter183 != this->arguments.end(); ++_iter183)
      {
        xfer += (*_iter183).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confidence) {
    xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->confidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ArgumentTuple &a, ArgumentTuple &b) {
  using ::std::swap;
  swap(a.tupleType, b.tupleType);
  swap(a.attributes, b.attributes);
  swap(a.arguments, b.arguments);
  swap(a.confidence, b.confidence);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Event::ascii_fingerprint = "3774A49C3C66335C3F98ED2611B7F073";
const uint8_t Event::binary_fingerprint[16] = {0x37,0x74,0xA4,0x9C,0x3C,0x66,0x33,0x5C,0x3F,0x98,0xED,0x26,0x11,0xB7,0xF0,0x73};

uint32_t Event::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;
  bool isset_eventType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->eventType.read(iprot);
          isset_eventType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size184;
            ::apache::thrift::protocol::TType _etype187;
            xfer += iprot->readListBegin(_etype187, _size184);
            this->attributes.resize(_size184);
            uint32_t _i188;
            for (_i188 = 0; _i188 < _size184; ++_i188)
            {
              xfer += this->attributes[_i188].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size189;
            ::apache::thrift::protocol::TType _etype192;
            xfer += iprot->readListBegin(_etype192, _size189);
            this->arguments.resize(_size189);
            uint32_t _i193;
            for (_i193 = 0; _i193 < _size189; ++_i193)
            {
              xfer += this->arguments[_i193].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          this->__isset.confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Event::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Event");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->eventType.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
      std::vector<Type> ::const_iterator _iter194;
      for (_iter194 = this->attributes.begin(); _iter194 != this->attributes.end(); ++_iter194)
      {
        xfer += (*_iter194).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.arguments) {
    xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->arguments.size()));
      std::vector<Argument> ::const_iterator _iter195;
      for (_iter195 = this->arguments.begin(); _iter195 != this->arguments.end(); ++_iter195)
      {
        xfer += (*_iter195).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confidence) {
    xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->confidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Event &a, Event &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.eventType, b.eventType);
  swap(a.attributes, b.attributes);
  swap(a.arguments, b.arguments);
  swap(a.confidence, b.confidence);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* EventRelations::ascii_fingerprint = "2EF78D2801D61A5B0489A85763967963";
const uint8_t EventRelations::binary_fingerprint[16] = {0x2E,0xF7,0x8D,0x28,0x01,0xD6,0x1A,0x5B,0x04,0x89,0xA8,0x57,0x63,0x96,0x79,0x63};

uint32_t EventRelations::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->coreferences.clear();
            uint32_t _size196;
            ::apache::thrift::protocol::TType _etype199;
            xfer += iprot->readListBegin(_etype199, _size196);
            this->coreferences.resize(_size196);
            uint32_t _i200;
            for (_i200 = 0; _i200 < _size196; ++_i200)
            {
              xfer += this->coreferences[_i200].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.coreferences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EventRelations::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EventRelations");

  if (this->__isset.coreferences) {
    xfer += oprot->writeFieldBegin("coreferences", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->coreferences.size()));
      std::vector<Event> ::const_iterator _iter201;
      for (_iter201 = this->coreferences.begin(); _iter201 != this->coreferences.end(); ++_iter201)
      {
        xfer += (*_iter201).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EventRelations &a, EventRelations &b) {
  using ::std::swap;
  swap(a.coreferences, b.coreferences);
  swap(a.__isset, b.__isset);
}

const char* Relation::ascii_fingerprint = "A1FC45A85F65C78E854DEEA1DBC11A49";
const uint8_t Relation::binary_fingerprint[16] = {0xA1,0xFC,0x45,0xA8,0x5F,0x65,0xC7,0x8E,0x85,0x4D,0xEE,0xA1,0xDB,0xC1,0x1A,0x49};

uint32_t Relation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_relationId = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->relationId);
          isset_relationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size202;
            ::apache::thrift::protocol::TType _etype205;
            xfer += iprot->readListBegin(_etype205, _size202);
            this->arguments.resize(_size202);
            uint32_t _i206;
            for (_i206 = 0; _i206 < _size202; ++_i206)
            {
              xfer += this->arguments[_i206].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->confidence);
          this->__isset.confidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_relationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Relation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Relation");

  xfer += oprot->writeFieldBegin("relationId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->relationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.arguments) {
    xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->arguments.size()));
      std::vector<Argument> ::const_iterator _iter207;
      for (_iter207 = this->arguments.begin(); _iter207 != this->arguments.end(); ++_iter207)
      {
        xfer += (*_iter207).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.confidence) {
    xfer += oprot->writeFieldBegin("confidence", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->confidence);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Relation &a, Relation &b) {
  using ::std::swap;
  swap(a.relationId, b.relationId);
  swap(a.type, b.type);
  swap(a.arguments, b.arguments);
  swap(a.confidence, b.confidence);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* JointRelationCoreference::ascii_fingerprint = "BD65783B66CEE8EA919F153DA617E4F1";
const uint8_t JointRelationCoreference::binary_fingerprint[16] = {0xBD,0x65,0x78,0x3B,0x66,0xCE,0xE8,0xEA,0x91,0x9F,0x15,0x3D,0xA6,0x17,0xE4,0xF1};

uint32_t JointRelationCoreference::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->coreference.read(iprot);
          this->__isset.coreference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->relations.clear();
            uint32_t _size208;
            ::apache::thrift::protocol::TType _etype211;
            xfer += iprot->readListBegin(_etype211, _size208);
            this->relations.resize(_size208);
            uint32_t _i212;
            for (_i212 = 0; _i212 < _size208; ++_i212)
            {
              xfer += this->relations[_i212].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.relations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JointRelationCoreference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JointRelationCoreference");

  xfer += oprot->writeFieldBegin("coreference", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->coreference.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relations", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->relations.size()));
    std::vector<Relation> ::const_iterator _iter213;
    for (_iter213 = this->relations.begin(); _iter213 != this->relations.end(); ++_iter213)
    {
      xfer += (*_iter213).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JointRelationCoreference &a, JointRelationCoreference &b) {
  using ::std::swap;
  swap(a.coreference, b.coreference);
  swap(a.relations, b.relations);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* Dependency::ascii_fingerprint = "D210DC09F016E0023337E60891B77C75";
const uint8_t Dependency::binary_fingerprint[16] = {0xD2,0x10,0xDC,0x09,0xF0,0x16,0xE0,0x02,0x33,0x37,0xE6,0x08,0x91,0xB7,0x7C,0x75};

uint32_t Dependency::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_governor = false;
  bool isset_dependent = false;
  bool isset_dependencyType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->governor.read(iprot);
          isset_governor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dependent.read(iprot);
          isset_dependent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dependencyType);
          isset_dependencyType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_governor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dependencyType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Dependency::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Dependency");

  xfer += oprot->writeFieldBegin("governor", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->governor.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependent", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dependent.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependencyType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dependencyType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dependency &a, Dependency &b) {
  using ::std::swap;
  swap(a.governor, b.governor);
  swap(a.dependent, b.dependent);
  swap(a.dependencyType, b.dependencyType);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* HltContentContainer::ascii_fingerprint = "727E762FDA75DF72AACA2A07FAD05EB3";
const uint8_t HltContentContainer::binary_fingerprint[16] = {0x72,0x7E,0x76,0x2F,0xDA,0x75,0xDF,0x72,0xAA,0xCA,0x2A,0x07,0xFA,0xD0,0x5E,0xB3};

uint32_t HltContentContainer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->committedBeliefs.clear();
            uint32_t _size214;
            ::apache::thrift::protocol::TType _etype217;
            xfer += iprot->readListBegin(_etype217, _size214);
            this->committedBeliefs.resize(_size214);
            uint32_t _i218;
            for (_i218 = 0; _i218 < _size214; ++_i218)
            {
              xfer += this->committedBeliefs[_i218].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.committedBeliefs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->coreferences.clear();
            uint32_t _size219;
            ::apache::thrift::protocol::TType _etype222;
            xfer += iprot->readListBegin(_etype222, _size219);
            this->coreferences.resize(_size219);
            uint32_t _i223;
            for (_i223 = 0; _i223 < _size219; ++_i223)
            {
              xfer += this->coreferences[_i223].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.coreferences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dependencies.clear();
            uint32_t _size224;
            ::apache::thrift::protocol::TType _etype227;
            xfer += iprot->readListBegin(_etype227, _size224);
            this->dependencies.resize(_size224);
            uint32_t _i228;
            for (_i228 = 0; _i228 < _size224; ++_i228)
            {
              xfer += this->dependencies[_i228].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dependencies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entityMentions.clear();
            uint32_t _size229;
            ::apache::thrift::protocol::TType _etype232;
            xfer += iprot->readListBegin(_etype232, _size229);
            this->entityMentions.resize(_size229);
            uint32_t _i233;
            for (_i233 = 0; _i233 < _size229; ++_i233)
            {
              xfer += this->entityMentions[_i233].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entityMentions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->jointRelationCoreferences.clear();
            uint32_t _size234;
            ::apache::thrift::protocol::TType _etype237;
            xfer += iprot->readListBegin(_etype237, _size234);
            this->jointRelationCoreferences.resize(_size234);
            uint32_t _i238;
            for (_i238 = 0; _i238 < _size234; ++_i238)
            {
              xfer += this->jointRelationCoreferences[_i238].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.jointRelationCoreferences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->namedEntities.clear();
            uint32_t _size239;
            ::apache::thrift::protocol::TType _etype242;
            xfer += iprot->readListBegin(_etype242, _size239);
            this->namedEntities.resize(_size239);
            uint32_t _i243;
            for (_i243 = 0; _i243 < _size239; ++_i243)
            {
              xfer += this->namedEntities[_i243].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.namedEntities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opinions.clear();
            uint32_t _size244;
            ::apache::thrift::protocol::TType _etype247;
            xfer += iprot->readListBegin(_etype247, _size244);
            this->opinions.resize(_size244);
            uint32_t _i248;
            for (_i248 = 0; _i248 < _size244; ++_i248)
            {
              xfer += this->opinions[_i248].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opinions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partOfSpeechs.clear();
            uint32_t _size249;
            ::apache::thrift::protocol::TType _etype252;
            xfer += iprot->readListBegin(_etype252, _size249);
            this->partOfSpeechs.resize(_size249);
            uint32_t _i253;
            for (_i253 = 0; _i253 < _size249; ++_i253)
            {
              xfer += this->partOfSpeechs[_i253].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partOfSpeechs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->passages.clear();
            uint32_t _size254;
            ::apache::thrift::protocol::TType _etype257;
            xfer += iprot->readListBegin(_etype257, _size254);
            this->passages.resize(_size254);
            uint32_t _i258;
            for (_i258 = 0; _i258 < _size254; ++_i258)
            {
              xfer += this->passages[_i258].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.passages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->posts.clear();
            uint32_t _size259;
            ::apache::thrift::protocol::TType _etype262;
            xfer += iprot->readListBegin(_etype262, _size259);
            this->posts.resize(_size259);
            uint32_t _i263;
            for (_i263 = 0; _i263 < _size259; ++_i263)
            {
              xfer += this->posts[_i263].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.posts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->prosodicPhrases.clear();
            uint32_t _size264;
            ::apache::thrift::protocol::TType _etype267;
            xfer += iprot->readListBegin(_etype267, _size264);
            this->prosodicPhrases.resize(_size264);
            uint32_t _i268;
            for (_i268 = 0; _i268 < _size264; ++_i268)
            {
              xfer += this->prosodicPhrases[_i268].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.prosodicPhrases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->relations.clear();
            uint32_t _size269;
            ::apache::thrift::protocol::TType _etype272;
            xfer += iprot->readListBegin(_etype272, _size269);
            this->relations.resize(_size269);
            uint32_t _i273;
            for (_i273 = 0; _i273 < _size269; ++_i273)
            {
              xfer += this->relations[_i273].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.relations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sarcasms.clear();
            uint32_t _size274;
            ::apache::thrift::protocol::TType _etype277;
            xfer += iprot->readListBegin(_etype277, _size274);
            this->sarcasms.resize(_size274);
            uint32_t _i278;
            for (_i278 = 0; _i278 < _size274; ++_i278)
            {
              xfer += this->sarcasms[_i278].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sarcasms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sentences.clear();
            uint32_t _size279;
            ::apache::thrift::protocol::TType _etype282;
            xfer += iprot->readListBegin(_etype282, _size279);
            this->sentences.resize(_size279);
            uint32_t _i283;
            for (_i283 = 0; _i283 < _size279; ++_i283)
            {
              xfer += this->sentences[_i283].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sentences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->syntacticChunks.clear();
            uint32_t _size284;
            ::apache::thrift::protocol::TType _etype287;
            xfer += iprot->readListBegin(_etype287, _size284);
            this->syntacticChunks.resize(_size284);
            uint32_t _i288;
            for (_i288 = 0; _i288 < _size284; ++_i288)
            {
              xfer += this->syntacticChunks[_i288].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.syntacticChunks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sessions.clear();
            uint32_t _size289;
            ::apache::thrift::protocol::TType _etype292;
            xfer += iprot->readListBegin(_etype292, _size289);
            this->sessions.resize(_size289);
            uint32_t _i293;
            for (_i293 = 0; _i293 < _size289; ++_i293)
            {
              xfer += this->sessions[_i293].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sessions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->utterances.clear();
            uint32_t _size294;
            ::apache::thrift::protocol::TType _etype297;
            xfer += iprot->readListBegin(_etype297, _size294);
            this->utterances.resize(_size294);
            uint32_t _i298;
            for (_i298 = 0; _i298 < _size294; ++_i298)
            {
              xfer += this->utterances[_i298].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.utterances = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size299;
            ::apache::thrift::protocol::TType _etype302;
            xfer += iprot->readListBegin(_etype302, _size299);
            this->messages.resize(_size299);
            uint32_t _i303;
            for (_i303 = 0; _i303 < _size299; ++_i303)
            {
              xfer += this->messages[_i303].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->interPausalUnits.clear();
            uint32_t _size304;
            ::apache::thrift::protocol::TType _etype307;
            xfer += iprot->readListBegin(_etype307, _size304);
            this->interPausalUnits.resize(_size304);
            uint32_t _i308;
            for (_i308 = 0; _i308 < _size304; ++_i308)
            {
              xfer += this->interPausalUnits[_i308].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.interPausalUnits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size309;
            ::apache::thrift::protocol::TType _etype312;
            xfer += iprot->readListBegin(_etype312, _size309);
            this->events.resize(_size309);
            uint32_t _i313;
            for (_i313 = 0; _i313 < _size309; ++_i313)
            {
              xfer += this->events[_i313].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventRelations.clear();
            uint32_t _size314;
            ::apache::thrift::protocol::TType _etype317;
            xfer += iprot->readListBegin(_etype317, _size314);
            this->eventRelations.resize(_size314);
            uint32_t _i318;
            for (_i318 = 0; _i318 < _size314; ++_i318)
            {
              xfer += this->eventRelations[_i318].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.eventRelations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->algorithmName);
          this->__isset.algorithmName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HltContentContainer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HltContentContainer");

  xfer += oprot->writeFieldBegin("committedBeliefs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->committedBeliefs.size()));
    std::vector<CommittedBelief> ::const_iterator _iter319;
    for (_iter319 = this->committedBeliefs.begin(); _iter319 != this->committedBeliefs.end(); ++_iter319)
    {
      xfer += (*_iter319).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coreferences", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->coreferences.size()));
    std::vector<Coreference> ::const_iterator _iter320;
    for (_iter320 = this->coreferences.begin(); _iter320 != this->coreferences.end(); ++_iter320)
    {
      xfer += (*_iter320).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependencies", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->dependencies.size()));
    std::vector<Dependency> ::const_iterator _iter321;
    for (_iter321 = this->dependencies.begin(); _iter321 != this->dependencies.end(); ++_iter321)
    {
      xfer += (*_iter321).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityMentions", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entityMentions.size()));
    std::vector<EntityMention> ::const_iterator _iter322;
    for (_iter322 = this->entityMentions.begin(); _iter322 != this->entityMentions.end(); ++_iter322)
    {
      xfer += (*_iter322).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jointRelationCoreferences", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->jointRelationCoreferences.size()));
    std::vector<JointRelationCoreference> ::const_iterator _iter323;
    for (_iter323 = this->jointRelationCoreferences.begin(); _iter323 != this->jointRelationCoreferences.end(); ++_iter323)
    {
      xfer += (*_iter323).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("namedEntities", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->namedEntities.size()));
    std::vector<EntityMention> ::const_iterator _iter324;
    for (_iter324 = this->namedEntities.begin(); _iter324 != this->namedEntities.end(); ++_iter324)
    {
      xfer += (*_iter324).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opinions", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->opinions.size()));
    std::vector<Opinion> ::const_iterator _iter325;
    for (_iter325 = this->opinions.begin(); _iter325 != this->opinions.end(); ++_iter325)
    {
      xfer += (*_iter325).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partOfSpeechs", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partOfSpeechs.size()));
    std::vector<PartOfSpeech> ::const_iterator _iter326;
    for (_iter326 = this->partOfSpeechs.begin(); _iter326 != this->partOfSpeechs.end(); ++_iter326)
    {
      xfer += (*_iter326).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->passages.size()));
    std::vector<Passage> ::const_iterator _iter327;
    for (_iter327 = this->passages.begin(); _iter327 != this->passages.end(); ++_iter327)
    {
      xfer += (*_iter327).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("posts", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->posts.size()));
    std::vector<Post> ::const_iterator _iter328;
    for (_iter328 = this->posts.begin(); _iter328 != this->posts.end(); ++_iter328)
    {
      xfer += (*_iter328).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prosodicPhrases", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->prosodicPhrases.size()));
    std::vector<ProsodicPhrase> ::const_iterator _iter329;
    for (_iter329 = this->prosodicPhrases.begin(); _iter329 != this->prosodicPhrases.end(); ++_iter329)
    {
      xfer += (*_iter329).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relations", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->relations.size()));
    std::vector<Relation> ::const_iterator _iter330;
    for (_iter330 = this->relations.begin(); _iter330 != this->relations.end(); ++_iter330)
    {
      xfer += (*_iter330).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sarcasms", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sarcasms.size()));
    std::vector<Sarcasm> ::const_iterator _iter331;
    for (_iter331 = this->sarcasms.begin(); _iter331 != this->sarcasms.end(); ++_iter331)
    {
      xfer += (*_iter331).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentences", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sentences.size()));
    std::vector<Sentence> ::const_iterator _iter332;
    for (_iter332 = this->sentences.begin(); _iter332 != this->sentences.end(); ++_iter332)
    {
      xfer += (*_iter332).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syntacticChunks", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->syntacticChunks.size()));
    std::vector<SyntacticChunk> ::const_iterator _iter333;
    for (_iter333 = this->syntacticChunks.begin(); _iter333 != this->syntacticChunks.end(); ++_iter333)
    {
      xfer += (*_iter333).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessions", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sessions.size()));
    std::vector<Session> ::const_iterator _iter334;
    for (_iter334 = this->sessions.begin(); _iter334 != this->sessions.end(); ++_iter334)
    {
      xfer += (*_iter334).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("utterances", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->utterances.size()));
    std::vector<Utterance> ::const_iterator _iter335;
    for (_iter335 = this->utterances.begin(); _iter335 != this->utterances.end(); ++_iter335)
    {
      xfer += (*_iter335).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
    std::vector<Message> ::const_iterator _iter336;
    for (_iter336 = this->messages.begin(); _iter336 != this->messages.end(); ++_iter336)
    {
      xfer += (*_iter336).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interPausalUnits", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->interPausalUnits.size()));
    std::vector<InterPausalUnit> ::const_iterator _iter337;
    for (_iter337 = this->interPausalUnits.begin(); _iter337 != this->interPausalUnits.end(); ++_iter337)
    {
      xfer += (*_iter337).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 20);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector<Event> ::const_iterator _iter338;
    for (_iter338 = this->events.begin(); _iter338 != this->events.end(); ++_iter338)
    {
      xfer += (*_iter338).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventRelations", ::apache::thrift::protocol::T_LIST, 21);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventRelations.size()));
    std::vector<EventRelations> ::const_iterator _iter339;
    for (_iter339 = this->eventRelations.begin(); _iter339 != this->eventRelations.end(); ++_iter339)
    {
      xfer += (*_iter339).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.algorithmName) {
    xfer += oprot->writeFieldBegin("algorithmName", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->algorithmName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HltContentContainer &a, HltContentContainer &b) {
  using ::std::swap;
  swap(a.committedBeliefs, b.committedBeliefs);
  swap(a.coreferences, b.coreferences);
  swap(a.dependencies, b.dependencies);
  swap(a.entityMentions, b.entityMentions);
  swap(a.jointRelationCoreferences, b.jointRelationCoreferences);
  swap(a.namedEntities, b.namedEntities);
  swap(a.opinions, b.opinions);
  swap(a.partOfSpeechs, b.partOfSpeechs);
  swap(a.passages, b.passages);
  swap(a.posts, b.posts);
  swap(a.prosodicPhrases, b.prosodicPhrases);
  swap(a.relations, b.relations);
  swap(a.sarcasms, b.sarcasms);
  swap(a.sentences, b.sentences);
  swap(a.syntacticChunks, b.syntacticChunks);
  swap(a.sessions, b.sessions);
  swap(a.utterances, b.utterances);
  swap(a.messages, b.messages);
  swap(a.interPausalUnits, b.interPausalUnits);
  swap(a.events, b.events);
  swap(a.eventRelations, b.eventRelations);
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.algorithmName, b.algorithmName);
  swap(a.__isset, b.__isset);
}

const char* HltContentContainerList::ascii_fingerprint = "0C96E79CBA6E7B14C41A80C4360A82A4";
const uint8_t HltContentContainerList::binary_fingerprint[16] = {0x0C,0x96,0xE7,0x9C,0xBA,0x6E,0x7B,0x14,0xC4,0x1A,0x80,0xC4,0x36,0x0A,0x82,0xA4};

uint32_t HltContentContainerList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->id.read(iprot);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serialVersionUID);
          this->__isset.serialVersionUID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hltContentContainerList.clear();
            uint32_t _size340;
            ::apache::thrift::protocol::TType _etype343;
            xfer += iprot->readListBegin(_etype343, _size340);
            this->hltContentContainerList.resize(_size340);
            uint32_t _i344;
            for (_i344 = 0; _i344 < _size340; ++_i344)
            {
              xfer += this->hltContentContainerList[_i344].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hltContentContainerList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HltContentContainerList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HltContentContainerList");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serialVersionUID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serialVersionUID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hltContentContainerList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->hltContentContainerList.size()));
    std::vector<HltContentContainer> ::const_iterator _iter345;
    for (_iter345 = this->hltContentContainerList.begin(); _iter345 != this->hltContentContainerList.end(); ++_iter345)
    {
      xfer += (*_iter345).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HltContentContainerList &a, HltContentContainerList &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serialVersionUID, b.serialVersionUID);
  swap(a.hltContentContainerList, b.hltContentContainerList);
  swap(a.__isset, b.__isset);
}

const char* Translation::ascii_fingerprint = "3E53EF97BB298040F03E900E2BE663F0";
const uint8_t Translation::binary_fingerprint[16] = {0x3E,0x53,0xEF,0x97,0xBB,0x29,0x80,0x40,0xF0,0x3E,0x90,0x0E,0x2B,0xE6,0x63,0xF0};

uint32_t Translation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sourceChunk = false;
  bool isset_targetChunk = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sourceChunk.read(iprot);
          isset_sourceChunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->targetChunk.read(iprot);
          isset_targetChunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sourceChunk)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_targetChunk)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Translation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Translation");

  xfer += oprot->writeFieldBegin("sourceChunk", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->sourceChunk.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetChunk", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->targetChunk.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Translation &a, Translation &b) {
  using ::std::swap;
  swap(a.sourceChunk, b.sourceChunk);
  swap(a.targetChunk, b.targetChunk);
}

const char* HltContentUnion::ascii_fingerprint = "344AB6F24EE4EADE7F4019847C9FA0A7";
const uint8_t HltContentUnion::binary_fingerprint[16] = {0x34,0x4A,0xB6,0xF2,0x4E,0xE4,0xEA,0xDE,0x7F,0x40,0x19,0x84,0x7C,0x9F,0xA0,0xA7};

uint32_t HltContentUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->anomalousText.read(iprot);
          this->__isset.anomalousText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->argument.read(iprot);
          this->__isset.argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chunk.read(iprot);
          this->__isset.chunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->committedBelief.read(iprot);
          this->__isset.committedBelief = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->discourseUnit.read(iprot);
          this->__isset.discourseUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entityMention.read(iprot);
          this->__isset.entityMention = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->opinion.read(iprot);
          this->__isset.opinion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->partOfSpeech.read(iprot);
          this->__isset.partOfSpeech = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->passage.read(iprot);
          this->__isset.passage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->prosodicPhrase.read(iprot);
          this->__isset.prosodicPhrase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sarcasm.read(iprot);
          this->__isset.sarcasm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sentence.read(iprot);
          this->__isset.sentence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->story.read(iprot);
          this->__isset.story = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->syntacticChunk.read(iprot);
          this->__isset.syntacticChunk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->utterance.read(iprot);
          this->__isset.utterance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->coreference.read(iprot);
          this->__isset.coreference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dependency.read(iprot);
          this->__isset.dependency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entity.read(iprot);
          this->__isset.entity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->hltContentContainer.read(iprot);
          this->__isset.hltContentContainer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->interPausalUnit.read(iprot);
          this->__isset.interPausalUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->jointRelationCoreference.read(iprot);
          this->__isset.jointRelationCoreference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->paraphrase.read(iprot);
          this->__isset.paraphrase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relation.read(iprot);
          this->__isset.relation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sentenceSimilarity.read(iprot);
          this->__isset.sentenceSimilarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chunkUnion.read(iprot);
          this->__isset.chunkUnion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HltContentUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HltContentUnion");

  xfer += oprot->writeFieldBegin("anomalousText", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->anomalousText.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argument", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->argument.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chunk", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->chunk.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("committedBelief", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->committedBelief.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("discourseUnit", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->discourseUnit.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityMention", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->entityMention.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opinion", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->opinion.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partOfSpeech", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->partOfSpeech.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passage", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->passage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prosodicPhrase", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->prosodicPhrase.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sarcasm", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->sarcasm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentence", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->sentence.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("story", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->story.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syntacticChunk", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->syntacticChunk.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("utterance", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->utterance.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coreference", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->coreference.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dependency", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->dependency.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entity", ::apache::thrift::protocol::T_STRUCT, 18);
  xfer += this->entity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hltContentContainer", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->hltContentContainer.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interPausalUnit", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->interPausalUnit.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jointRelationCoreference", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->jointRelationCoreference.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paraphrase", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->paraphrase.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relation", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->relation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentenceSimilarity", ::apache::thrift::protocol::T_STRUCT, 24);
  xfer += this->sentenceSimilarity.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chunkUnion", ::apache::thrift::protocol::T_STRUCT, 25);
  xfer += this->chunkUnion.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HltContentUnion &a, HltContentUnion &b) {
  using ::std::swap;
  swap(a.anomalousText, b.anomalousText);
  swap(a.argument, b.argument);
  swap(a.chunk, b.chunk);
  swap(a.committedBelief, b.committedBelief);
  swap(a.discourseUnit, b.discourseUnit);
  swap(a.entityMention, b.entityMention);
  swap(a.opinion, b.opinion);
  swap(a.partOfSpeech, b.partOfSpeech);
  swap(a.passage, b.passage);
  swap(a.prosodicPhrase, b.prosodicPhrase);
  swap(a.sarcasm, b.sarcasm);
  swap(a.sentence, b.sentence);
  swap(a.story, b.story);
  swap(a.syntacticChunk, b.syntacticChunk);
  swap(a.utterance, b.utterance);
  swap(a.coreference, b.coreference);
  swap(a.dependency, b.dependency);
  swap(a.entity, b.entity);
  swap(a.hltContentContainer, b.hltContentContainer);
  swap(a.interPausalUnit, b.interPausalUnit);
  swap(a.jointRelationCoreference, b.jointRelationCoreference);
  swap(a.paraphrase, b.paraphrase);
  swap(a.relation, b.relation);
  swap(a.sentenceSimilarity, b.sentenceSimilarity);
  swap(a.chunkUnion, b.chunkUnion);
  swap(a.__isset, b.__isset);
}

}}} // namespace