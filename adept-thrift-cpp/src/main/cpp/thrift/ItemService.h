/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ItemService_H
#define ItemService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class ItemServiceIf {
 public:
  virtual ~ItemServiceIf() {}
  virtual void getId(std::string& _return) = 0;
  virtual void getIdString(std::string& _return) = 0;
  virtual void getValue(std::string& _return) = 0;
};

class ItemServiceIfFactory {
 public:
  typedef ItemServiceIf Handler;

  virtual ~ItemServiceIfFactory() {}

  virtual ItemServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class ItemServiceIfSingletonFactory : virtual public ItemServiceIfFactory {
 public:
  ItemServiceIfSingletonFactory(const boost::shared_ptr<ItemServiceIf>& iface) : iface_(iface) {}
  virtual ~ItemServiceIfSingletonFactory() {}

  virtual ItemServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ItemServiceIf> iface_;
};

class ItemServiceNull : virtual public ItemServiceIf {
 public:
  virtual ~ItemServiceNull() {}
  void getId(std::string& /* _return */) {
    return;
  }
  void getIdString(std::string& /* _return */) {
    return;
  }
  void getValue(std::string& /* _return */) {
    return;
  }
};


class ItemService_getId_args {
 public:

  ItemService_getId_args() {
  }

  virtual ~ItemService_getId_args() throw() {}


  bool operator == (const ItemService_getId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ItemService_getId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemService_getId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ItemService_getId_pargs {
 public:


  virtual ~ItemService_getId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ItemService_getId_result__isset {
  _ItemService_getId_result__isset() : success(false) {}
  bool success;
} _ItemService_getId_result__isset;

class ItemService_getId_result {
 public:

  ItemService_getId_result() : success() {
  }

  virtual ~ItemService_getId_result() throw() {}

  std::string success;

  _ItemService_getId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ItemService_getId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ItemService_getId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemService_getId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ItemService_getId_presult__isset {
  _ItemService_getId_presult__isset() : success(false) {}
  bool success;
} _ItemService_getId_presult__isset;

class ItemService_getId_presult {
 public:


  virtual ~ItemService_getId_presult() throw() {}

  std::string* success;

  _ItemService_getId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ItemService_getIdString_args {
 public:

  ItemService_getIdString_args() {
  }

  virtual ~ItemService_getIdString_args() throw() {}


  bool operator == (const ItemService_getIdString_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ItemService_getIdString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemService_getIdString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ItemService_getIdString_pargs {
 public:


  virtual ~ItemService_getIdString_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ItemService_getIdString_result__isset {
  _ItemService_getIdString_result__isset() : success(false) {}
  bool success;
} _ItemService_getIdString_result__isset;

class ItemService_getIdString_result {
 public:

  ItemService_getIdString_result() : success() {
  }

  virtual ~ItemService_getIdString_result() throw() {}

  std::string success;

  _ItemService_getIdString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ItemService_getIdString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ItemService_getIdString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemService_getIdString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ItemService_getIdString_presult__isset {
  _ItemService_getIdString_presult__isset() : success(false) {}
  bool success;
} _ItemService_getIdString_presult__isset;

class ItemService_getIdString_presult {
 public:


  virtual ~ItemService_getIdString_presult() throw() {}

  std::string* success;

  _ItemService_getIdString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ItemService_getValue_args {
 public:

  ItemService_getValue_args() {
  }

  virtual ~ItemService_getValue_args() throw() {}


  bool operator == (const ItemService_getValue_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ItemService_getValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemService_getValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ItemService_getValue_pargs {
 public:


  virtual ~ItemService_getValue_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ItemService_getValue_result__isset {
  _ItemService_getValue_result__isset() : success(false) {}
  bool success;
} _ItemService_getValue_result__isset;

class ItemService_getValue_result {
 public:

  ItemService_getValue_result() : success() {
  }

  virtual ~ItemService_getValue_result() throw() {}

  std::string success;

  _ItemService_getValue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ItemService_getValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ItemService_getValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemService_getValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ItemService_getValue_presult__isset {
  _ItemService_getValue_presult__isset() : success(false) {}
  bool success;
} _ItemService_getValue_presult__isset;

class ItemService_getValue_presult {
 public:


  virtual ~ItemService_getValue_presult() throw() {}

  std::string* success;

  _ItemService_getValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ItemServiceClient : virtual public ItemServiceIf {
 public:
  ItemServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ItemServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getId(std::string& _return);
  void send_getId();
  void recv_getId(std::string& _return);
  void getIdString(std::string& _return);
  void send_getIdString();
  void recv_getIdString(std::string& _return);
  void getValue(std::string& _return);
  void send_getValue();
  void recv_getValue(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ItemServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ItemServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ItemServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIdString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ItemServiceProcessor(boost::shared_ptr<ItemServiceIf> iface) :
    iface_(iface) {
    processMap_["getId"] = &ItemServiceProcessor::process_getId;
    processMap_["getIdString"] = &ItemServiceProcessor::process_getIdString;
    processMap_["getValue"] = &ItemServiceProcessor::process_getValue;
  }

  virtual ~ItemServiceProcessor() {}
};

class ItemServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ItemServiceProcessorFactory(const ::boost::shared_ptr< ItemServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ItemServiceIfFactory > handlerFactory_;
};

class ItemServiceMultiface : virtual public ItemServiceIf {
 public:
  ItemServiceMultiface(std::vector<boost::shared_ptr<ItemServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ItemServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ItemServiceIf> > ifaces_;
  ItemServiceMultiface() {}
  void add(boost::shared_ptr<ItemServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getId(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getId(_return);
    }
    ifaces_[i]->getId(_return);
    return;
  }

  void getIdString(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIdString(_return);
    }
    ifaces_[i]->getIdString(_return);
    return;
  }

  void getValue(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue(_return);
    }
    ifaces_[i]->getValue(_return);
    return;
  }

};

}}} // namespace

#endif
