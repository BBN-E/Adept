/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AudioOffsetService_H
#define AudioOffsetService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class AudioOffsetServiceIf {
 public:
  virtual ~AudioOffsetServiceIf() {}
  virtual double getBegin() = 0;
  virtual double getEnd() = 0;
};

class AudioOffsetServiceIfFactory {
 public:
  typedef AudioOffsetServiceIf Handler;

  virtual ~AudioOffsetServiceIfFactory() {}

  virtual AudioOffsetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AudioOffsetServiceIf* /* handler */) = 0;
};

class AudioOffsetServiceIfSingletonFactory : virtual public AudioOffsetServiceIfFactory {
 public:
  AudioOffsetServiceIfSingletonFactory(const boost::shared_ptr<AudioOffsetServiceIf>& iface) : iface_(iface) {}
  virtual ~AudioOffsetServiceIfSingletonFactory() {}

  virtual AudioOffsetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AudioOffsetServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AudioOffsetServiceIf> iface_;
};

class AudioOffsetServiceNull : virtual public AudioOffsetServiceIf {
 public:
  virtual ~AudioOffsetServiceNull() {}
  double getBegin() {
    double _return = (double)0;
    return _return;
  }
  double getEnd() {
    double _return = (double)0;
    return _return;
  }
};


class AudioOffsetService_getBegin_args {
 public:

  AudioOffsetService_getBegin_args() {
  }

  virtual ~AudioOffsetService_getBegin_args() throw() {}


  bool operator == (const AudioOffsetService_getBegin_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioOffsetService_getBegin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioOffsetService_getBegin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioOffsetService_getBegin_pargs {
 public:


  virtual ~AudioOffsetService_getBegin_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioOffsetService_getBegin_result__isset {
  _AudioOffsetService_getBegin_result__isset() : success(false) {}
  bool success;
} _AudioOffsetService_getBegin_result__isset;

class AudioOffsetService_getBegin_result {
 public:

  AudioOffsetService_getBegin_result() : success(0) {
  }

  virtual ~AudioOffsetService_getBegin_result() throw() {}

  double success;

  _AudioOffsetService_getBegin_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AudioOffsetService_getBegin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioOffsetService_getBegin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioOffsetService_getBegin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioOffsetService_getBegin_presult__isset {
  _AudioOffsetService_getBegin_presult__isset() : success(false) {}
  bool success;
} _AudioOffsetService_getBegin_presult__isset;

class AudioOffsetService_getBegin_presult {
 public:


  virtual ~AudioOffsetService_getBegin_presult() throw() {}

  double* success;

  _AudioOffsetService_getBegin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioOffsetService_getEnd_args {
 public:

  AudioOffsetService_getEnd_args() {
  }

  virtual ~AudioOffsetService_getEnd_args() throw() {}


  bool operator == (const AudioOffsetService_getEnd_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioOffsetService_getEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioOffsetService_getEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioOffsetService_getEnd_pargs {
 public:


  virtual ~AudioOffsetService_getEnd_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioOffsetService_getEnd_result__isset {
  _AudioOffsetService_getEnd_result__isset() : success(false) {}
  bool success;
} _AudioOffsetService_getEnd_result__isset;

class AudioOffsetService_getEnd_result {
 public:

  AudioOffsetService_getEnd_result() : success(0) {
  }

  virtual ~AudioOffsetService_getEnd_result() throw() {}

  double success;

  _AudioOffsetService_getEnd_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AudioOffsetService_getEnd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioOffsetService_getEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioOffsetService_getEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioOffsetService_getEnd_presult__isset {
  _AudioOffsetService_getEnd_presult__isset() : success(false) {}
  bool success;
} _AudioOffsetService_getEnd_presult__isset;

class AudioOffsetService_getEnd_presult {
 public:


  virtual ~AudioOffsetService_getEnd_presult() throw() {}

  double* success;

  _AudioOffsetService_getEnd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AudioOffsetServiceClient : virtual public AudioOffsetServiceIf {
 public:
  AudioOffsetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AudioOffsetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getBegin();
  void send_getBegin();
  double recv_getBegin();
  double getEnd();
  void send_getEnd();
  double recv_getEnd();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AudioOffsetServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AudioOffsetServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AudioOffsetServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getBegin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AudioOffsetServiceProcessor(boost::shared_ptr<AudioOffsetServiceIf> iface) :
    iface_(iface) {
    processMap_["getBegin"] = &AudioOffsetServiceProcessor::process_getBegin;
    processMap_["getEnd"] = &AudioOffsetServiceProcessor::process_getEnd;
  }

  virtual ~AudioOffsetServiceProcessor() {}
};

class AudioOffsetServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AudioOffsetServiceProcessorFactory(const ::boost::shared_ptr< AudioOffsetServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AudioOffsetServiceIfFactory > handlerFactory_;
};

class AudioOffsetServiceMultiface : virtual public AudioOffsetServiceIf {
 public:
  AudioOffsetServiceMultiface(std::vector<boost::shared_ptr<AudioOffsetServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AudioOffsetServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AudioOffsetServiceIf> > ifaces_;
  AudioOffsetServiceMultiface() {}
  void add(boost::shared_ptr<AudioOffsetServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double getBegin() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBegin();
    }
    return ifaces_[i]->getBegin();
  }

  double getEnd() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEnd();
    }
    return ifaces_[i]->getEnd();
  }

};

}}} // namespace

#endif