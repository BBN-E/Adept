/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UtteranceService_H
#define UtteranceService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ChunkService.h"

namespace thrift { namespace adept { namespace common {

class UtteranceServiceIf : virtual public ChunkServiceIf {
 public:
  virtual ~UtteranceServiceIf() {}
  virtual void getAnnotation(std::string& _return) = 0;
  virtual int64_t getSpeakerId() = 0;
  virtual int64_t getUtteranceId() = 0;
  virtual void setAnnotation(const std::string& annotation) = 0;
};

class UtteranceServiceIfFactory : virtual public ChunkServiceIfFactory {
 public:
  typedef UtteranceServiceIf Handler;

  virtual ~UtteranceServiceIfFactory() {}

  virtual UtteranceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class UtteranceServiceIfSingletonFactory : virtual public UtteranceServiceIfFactory {
 public:
  UtteranceServiceIfSingletonFactory(const boost::shared_ptr<UtteranceServiceIf>& iface) : iface_(iface) {}
  virtual ~UtteranceServiceIfSingletonFactory() {}

  virtual UtteranceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<UtteranceServiceIf> iface_;
};

class UtteranceServiceNull : virtual public UtteranceServiceIf , virtual public ChunkServiceNull {
 public:
  virtual ~UtteranceServiceNull() {}
  void getAnnotation(std::string& /* _return */) {
    return;
  }
  int64_t getSpeakerId() {
    int64_t _return = 0;
    return _return;
  }
  int64_t getUtteranceId() {
    int64_t _return = 0;
    return _return;
  }
  void setAnnotation(const std::string& /* annotation */) {
    return;
  }
};


class UtteranceService_getAnnotation_args {
 public:

  UtteranceService_getAnnotation_args() {
  }

  virtual ~UtteranceService_getAnnotation_args() throw() {}


  bool operator == (const UtteranceService_getAnnotation_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UtteranceService_getAnnotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_getAnnotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UtteranceService_getAnnotation_pargs {
 public:


  virtual ~UtteranceService_getAnnotation_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UtteranceService_getAnnotation_result__isset {
  _UtteranceService_getAnnotation_result__isset() : success(false) {}
  bool success;
} _UtteranceService_getAnnotation_result__isset;

class UtteranceService_getAnnotation_result {
 public:

  UtteranceService_getAnnotation_result() : success() {
  }

  virtual ~UtteranceService_getAnnotation_result() throw() {}

  std::string success;

  _UtteranceService_getAnnotation_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const UtteranceService_getAnnotation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UtteranceService_getAnnotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_getAnnotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UtteranceService_getAnnotation_presult__isset {
  _UtteranceService_getAnnotation_presult__isset() : success(false) {}
  bool success;
} _UtteranceService_getAnnotation_presult__isset;

class UtteranceService_getAnnotation_presult {
 public:


  virtual ~UtteranceService_getAnnotation_presult() throw() {}

  std::string* success;

  _UtteranceService_getAnnotation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class UtteranceService_getSpeakerId_args {
 public:

  UtteranceService_getSpeakerId_args() {
  }

  virtual ~UtteranceService_getSpeakerId_args() throw() {}


  bool operator == (const UtteranceService_getSpeakerId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UtteranceService_getSpeakerId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_getSpeakerId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UtteranceService_getSpeakerId_pargs {
 public:


  virtual ~UtteranceService_getSpeakerId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UtteranceService_getSpeakerId_result__isset {
  _UtteranceService_getSpeakerId_result__isset() : success(false) {}
  bool success;
} _UtteranceService_getSpeakerId_result__isset;

class UtteranceService_getSpeakerId_result {
 public:

  UtteranceService_getSpeakerId_result() : success(0) {
  }

  virtual ~UtteranceService_getSpeakerId_result() throw() {}

  int64_t success;

  _UtteranceService_getSpeakerId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const UtteranceService_getSpeakerId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UtteranceService_getSpeakerId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_getSpeakerId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UtteranceService_getSpeakerId_presult__isset {
  _UtteranceService_getSpeakerId_presult__isset() : success(false) {}
  bool success;
} _UtteranceService_getSpeakerId_presult__isset;

class UtteranceService_getSpeakerId_presult {
 public:


  virtual ~UtteranceService_getSpeakerId_presult() throw() {}

  int64_t* success;

  _UtteranceService_getSpeakerId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class UtteranceService_getUtteranceId_args {
 public:

  UtteranceService_getUtteranceId_args() {
  }

  virtual ~UtteranceService_getUtteranceId_args() throw() {}


  bool operator == (const UtteranceService_getUtteranceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UtteranceService_getUtteranceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_getUtteranceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UtteranceService_getUtteranceId_pargs {
 public:


  virtual ~UtteranceService_getUtteranceId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UtteranceService_getUtteranceId_result__isset {
  _UtteranceService_getUtteranceId_result__isset() : success(false) {}
  bool success;
} _UtteranceService_getUtteranceId_result__isset;

class UtteranceService_getUtteranceId_result {
 public:

  UtteranceService_getUtteranceId_result() : success(0) {
  }

  virtual ~UtteranceService_getUtteranceId_result() throw() {}

  int64_t success;

  _UtteranceService_getUtteranceId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const UtteranceService_getUtteranceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UtteranceService_getUtteranceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_getUtteranceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UtteranceService_getUtteranceId_presult__isset {
  _UtteranceService_getUtteranceId_presult__isset() : success(false) {}
  bool success;
} _UtteranceService_getUtteranceId_presult__isset;

class UtteranceService_getUtteranceId_presult {
 public:


  virtual ~UtteranceService_getUtteranceId_presult() throw() {}

  int64_t* success;

  _UtteranceService_getUtteranceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UtteranceService_setAnnotation_args__isset {
  _UtteranceService_setAnnotation_args__isset() : annotation(false) {}
  bool annotation;
} _UtteranceService_setAnnotation_args__isset;

class UtteranceService_setAnnotation_args {
 public:

  UtteranceService_setAnnotation_args() : annotation() {
  }

  virtual ~UtteranceService_setAnnotation_args() throw() {}

  std::string annotation;

  _UtteranceService_setAnnotation_args__isset __isset;

  void __set_annotation(const std::string& val) {
    annotation = val;
  }

  bool operator == (const UtteranceService_setAnnotation_args & rhs) const
  {
    if (!(annotation == rhs.annotation))
      return false;
    return true;
  }
  bool operator != (const UtteranceService_setAnnotation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_setAnnotation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UtteranceService_setAnnotation_pargs {
 public:


  virtual ~UtteranceService_setAnnotation_pargs() throw() {}

  const std::string* annotation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UtteranceService_setAnnotation_result {
 public:

  UtteranceService_setAnnotation_result() {
  }

  virtual ~UtteranceService_setAnnotation_result() throw() {}


  bool operator == (const UtteranceService_setAnnotation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UtteranceService_setAnnotation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UtteranceService_setAnnotation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UtteranceService_setAnnotation_presult {
 public:


  virtual ~UtteranceService_setAnnotation_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UtteranceServiceClient : virtual public UtteranceServiceIf, public ChunkServiceClient {
 public:
  UtteranceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ChunkServiceClient(prot, prot) {}
  UtteranceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ChunkServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAnnotation(std::string& _return);
  void send_getAnnotation();
  void recv_getAnnotation(std::string& _return);
  int64_t getSpeakerId();
  void send_getSpeakerId();
  int64_t recv_getSpeakerId();
  int64_t getUtteranceId();
  void send_getUtteranceId();
  int64_t recv_getUtteranceId();
  void setAnnotation(const std::string& annotation);
  void send_setAnnotation(const std::string& annotation);
  void recv_setAnnotation();
};

class UtteranceServiceProcessor : public ChunkServiceProcessor {
 protected:
  boost::shared_ptr<UtteranceServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UtteranceServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAnnotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSpeakerId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUtteranceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAnnotation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UtteranceServiceProcessor(boost::shared_ptr<UtteranceServiceIf> iface) :
    ChunkServiceProcessor(iface),
    iface_(iface) {
    processMap_["getAnnotation"] = &UtteranceServiceProcessor::process_getAnnotation;
    processMap_["getSpeakerId"] = &UtteranceServiceProcessor::process_getSpeakerId;
    processMap_["getUtteranceId"] = &UtteranceServiceProcessor::process_getUtteranceId;
    processMap_["setAnnotation"] = &UtteranceServiceProcessor::process_setAnnotation;
  }

  virtual ~UtteranceServiceProcessor() {}
};

class UtteranceServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UtteranceServiceProcessorFactory(const ::boost::shared_ptr< UtteranceServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UtteranceServiceIfFactory > handlerFactory_;
};

class UtteranceServiceMultiface : virtual public UtteranceServiceIf, public ChunkServiceMultiface {
 public:
  UtteranceServiceMultiface(std::vector<boost::shared_ptr<UtteranceServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<UtteranceServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ChunkServiceMultiface::add(*iter);
    }
  }
  virtual ~UtteranceServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UtteranceServiceIf> > ifaces_;
  UtteranceServiceMultiface() {}
  void add(boost::shared_ptr<UtteranceServiceIf> iface) {
    ChunkServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getAnnotation(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAnnotation(_return);
    }
    ifaces_[i]->getAnnotation(_return);
    return;
  }

  int64_t getSpeakerId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSpeakerId();
    }
    return ifaces_[i]->getSpeakerId();
  }

  int64_t getUtteranceId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUtteranceId();
    }
    return ifaces_[i]->getUtteranceId();
  }

  void setAnnotation(const std::string& annotation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAnnotation(annotation);
    }
    ifaces_[i]->setAnnotation(annotation);
  }

};

}}} // namespace

#endif
