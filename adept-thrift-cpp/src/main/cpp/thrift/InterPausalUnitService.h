/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InterPausalUnitService_H
#define InterPausalUnitService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class InterPausalUnitServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~InterPausalUnitServiceIf() {}
  virtual void getAcousticFeatures(std::map<std::string, double> & _return) = 0;
  virtual void getIpuAudioOffset(AudioOffset& _return) = 0;
  virtual int64_t getSequenceId() = 0;
  virtual void setAcousticFeatures(const std::map<std::string, double> & acousticFeatures) = 0;
};

class InterPausalUnitServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef InterPausalUnitServiceIf Handler;

  virtual ~InterPausalUnitServiceIfFactory() {}

  virtual InterPausalUnitServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class InterPausalUnitServiceIfSingletonFactory : virtual public InterPausalUnitServiceIfFactory {
 public:
  InterPausalUnitServiceIfSingletonFactory(const boost::shared_ptr<InterPausalUnitServiceIf>& iface) : iface_(iface) {}
  virtual ~InterPausalUnitServiceIfSingletonFactory() {}

  virtual InterPausalUnitServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<InterPausalUnitServiceIf> iface_;
};

class InterPausalUnitServiceNull : virtual public InterPausalUnitServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~InterPausalUnitServiceNull() {}
  void getAcousticFeatures(std::map<std::string, double> & /* _return */) {
    return;
  }
  void getIpuAudioOffset(AudioOffset& /* _return */) {
    return;
  }
  int64_t getSequenceId() {
    int64_t _return = 0;
    return _return;
  }
  void setAcousticFeatures(const std::map<std::string, double> & /* acousticFeatures */) {
    return;
  }
};


class InterPausalUnitService_getAcousticFeatures_args {
 public:

  InterPausalUnitService_getAcousticFeatures_args() {
  }

  virtual ~InterPausalUnitService_getAcousticFeatures_args() throw() {}


  bool operator == (const InterPausalUnitService_getAcousticFeatures_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InterPausalUnitService_getAcousticFeatures_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_getAcousticFeatures_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterPausalUnitService_getAcousticFeatures_pargs {
 public:


  virtual ~InterPausalUnitService_getAcousticFeatures_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterPausalUnitService_getAcousticFeatures_result__isset {
  _InterPausalUnitService_getAcousticFeatures_result__isset() : success(false) {}
  bool success;
} _InterPausalUnitService_getAcousticFeatures_result__isset;

class InterPausalUnitService_getAcousticFeatures_result {
 public:

  InterPausalUnitService_getAcousticFeatures_result() {
  }

  virtual ~InterPausalUnitService_getAcousticFeatures_result() throw() {}

  std::map<std::string, double>  success;

  _InterPausalUnitService_getAcousticFeatures_result__isset __isset;

  void __set_success(const std::map<std::string, double> & val) {
    success = val;
  }

  bool operator == (const InterPausalUnitService_getAcousticFeatures_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InterPausalUnitService_getAcousticFeatures_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_getAcousticFeatures_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterPausalUnitService_getAcousticFeatures_presult__isset {
  _InterPausalUnitService_getAcousticFeatures_presult__isset() : success(false) {}
  bool success;
} _InterPausalUnitService_getAcousticFeatures_presult__isset;

class InterPausalUnitService_getAcousticFeatures_presult {
 public:


  virtual ~InterPausalUnitService_getAcousticFeatures_presult() throw() {}

  std::map<std::string, double> * success;

  _InterPausalUnitService_getAcousticFeatures_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InterPausalUnitService_getIpuAudioOffset_args {
 public:

  InterPausalUnitService_getIpuAudioOffset_args() {
  }

  virtual ~InterPausalUnitService_getIpuAudioOffset_args() throw() {}


  bool operator == (const InterPausalUnitService_getIpuAudioOffset_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InterPausalUnitService_getIpuAudioOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_getIpuAudioOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterPausalUnitService_getIpuAudioOffset_pargs {
 public:


  virtual ~InterPausalUnitService_getIpuAudioOffset_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterPausalUnitService_getIpuAudioOffset_result__isset {
  _InterPausalUnitService_getIpuAudioOffset_result__isset() : success(false) {}
  bool success;
} _InterPausalUnitService_getIpuAudioOffset_result__isset;

class InterPausalUnitService_getIpuAudioOffset_result {
 public:

  InterPausalUnitService_getIpuAudioOffset_result() {
  }

  virtual ~InterPausalUnitService_getIpuAudioOffset_result() throw() {}

  AudioOffset success;

  _InterPausalUnitService_getIpuAudioOffset_result__isset __isset;

  void __set_success(const AudioOffset& val) {
    success = val;
  }

  bool operator == (const InterPausalUnitService_getIpuAudioOffset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InterPausalUnitService_getIpuAudioOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_getIpuAudioOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterPausalUnitService_getIpuAudioOffset_presult__isset {
  _InterPausalUnitService_getIpuAudioOffset_presult__isset() : success(false) {}
  bool success;
} _InterPausalUnitService_getIpuAudioOffset_presult__isset;

class InterPausalUnitService_getIpuAudioOffset_presult {
 public:


  virtual ~InterPausalUnitService_getIpuAudioOffset_presult() throw() {}

  AudioOffset* success;

  _InterPausalUnitService_getIpuAudioOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class InterPausalUnitService_getSequenceId_args {
 public:

  InterPausalUnitService_getSequenceId_args() {
  }

  virtual ~InterPausalUnitService_getSequenceId_args() throw() {}


  bool operator == (const InterPausalUnitService_getSequenceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InterPausalUnitService_getSequenceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_getSequenceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterPausalUnitService_getSequenceId_pargs {
 public:


  virtual ~InterPausalUnitService_getSequenceId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterPausalUnitService_getSequenceId_result__isset {
  _InterPausalUnitService_getSequenceId_result__isset() : success(false) {}
  bool success;
} _InterPausalUnitService_getSequenceId_result__isset;

class InterPausalUnitService_getSequenceId_result {
 public:

  InterPausalUnitService_getSequenceId_result() : success(0) {
  }

  virtual ~InterPausalUnitService_getSequenceId_result() throw() {}

  int64_t success;

  _InterPausalUnitService_getSequenceId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const InterPausalUnitService_getSequenceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InterPausalUnitService_getSequenceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_getSequenceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterPausalUnitService_getSequenceId_presult__isset {
  _InterPausalUnitService_getSequenceId_presult__isset() : success(false) {}
  bool success;
} _InterPausalUnitService_getSequenceId_presult__isset;

class InterPausalUnitService_getSequenceId_presult {
 public:


  virtual ~InterPausalUnitService_getSequenceId_presult() throw() {}

  int64_t* success;

  _InterPausalUnitService_getSequenceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InterPausalUnitService_setAcousticFeatures_args__isset {
  _InterPausalUnitService_setAcousticFeatures_args__isset() : acousticFeatures(false) {}
  bool acousticFeatures;
} _InterPausalUnitService_setAcousticFeatures_args__isset;

class InterPausalUnitService_setAcousticFeatures_args {
 public:

  InterPausalUnitService_setAcousticFeatures_args() {
  }

  virtual ~InterPausalUnitService_setAcousticFeatures_args() throw() {}

  std::map<std::string, double>  acousticFeatures;

  _InterPausalUnitService_setAcousticFeatures_args__isset __isset;

  void __set_acousticFeatures(const std::map<std::string, double> & val) {
    acousticFeatures = val;
  }

  bool operator == (const InterPausalUnitService_setAcousticFeatures_args & rhs) const
  {
    if (!(acousticFeatures == rhs.acousticFeatures))
      return false;
    return true;
  }
  bool operator != (const InterPausalUnitService_setAcousticFeatures_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_setAcousticFeatures_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterPausalUnitService_setAcousticFeatures_pargs {
 public:


  virtual ~InterPausalUnitService_setAcousticFeatures_pargs() throw() {}

  const std::map<std::string, double> * acousticFeatures;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterPausalUnitService_setAcousticFeatures_result {
 public:

  InterPausalUnitService_setAcousticFeatures_result() {
  }

  virtual ~InterPausalUnitService_setAcousticFeatures_result() throw() {}


  bool operator == (const InterPausalUnitService_setAcousticFeatures_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InterPausalUnitService_setAcousticFeatures_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterPausalUnitService_setAcousticFeatures_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterPausalUnitService_setAcousticFeatures_presult {
 public:


  virtual ~InterPausalUnitService_setAcousticFeatures_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InterPausalUnitServiceClient : virtual public InterPausalUnitServiceIf, public ItemServiceClient {
 public:
  InterPausalUnitServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  InterPausalUnitServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAcousticFeatures(std::map<std::string, double> & _return);
  void send_getAcousticFeatures();
  void recv_getAcousticFeatures(std::map<std::string, double> & _return);
  void getIpuAudioOffset(AudioOffset& _return);
  void send_getIpuAudioOffset();
  void recv_getIpuAudioOffset(AudioOffset& _return);
  int64_t getSequenceId();
  void send_getSequenceId();
  int64_t recv_getSequenceId();
  void setAcousticFeatures(const std::map<std::string, double> & acousticFeatures);
  void send_setAcousticFeatures(const std::map<std::string, double> & acousticFeatures);
  void recv_setAcousticFeatures();
};

class InterPausalUnitServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<InterPausalUnitServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (InterPausalUnitServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAcousticFeatures(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIpuAudioOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSequenceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAcousticFeatures(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InterPausalUnitServiceProcessor(boost::shared_ptr<InterPausalUnitServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["getAcousticFeatures"] = &InterPausalUnitServiceProcessor::process_getAcousticFeatures;
    processMap_["getIpuAudioOffset"] = &InterPausalUnitServiceProcessor::process_getIpuAudioOffset;
    processMap_["getSequenceId"] = &InterPausalUnitServiceProcessor::process_getSequenceId;
    processMap_["setAcousticFeatures"] = &InterPausalUnitServiceProcessor::process_setAcousticFeatures;
  }

  virtual ~InterPausalUnitServiceProcessor() {}
};

class InterPausalUnitServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InterPausalUnitServiceProcessorFactory(const ::boost::shared_ptr< InterPausalUnitServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InterPausalUnitServiceIfFactory > handlerFactory_;
};

class InterPausalUnitServiceMultiface : virtual public InterPausalUnitServiceIf, public ItemServiceMultiface {
 public:
  InterPausalUnitServiceMultiface(std::vector<boost::shared_ptr<InterPausalUnitServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<InterPausalUnitServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~InterPausalUnitServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InterPausalUnitServiceIf> > ifaces_;
  InterPausalUnitServiceMultiface() {}
  void add(boost::shared_ptr<InterPausalUnitServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getAcousticFeatures(std::map<std::string, double> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAcousticFeatures(_return);
    }
    ifaces_[i]->getAcousticFeatures(_return);
    return;
  }

  void getIpuAudioOffset(AudioOffset& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIpuAudioOffset(_return);
    }
    ifaces_[i]->getIpuAudioOffset(_return);
    return;
  }

  int64_t getSequenceId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSequenceId();
    }
    return ifaces_[i]->getSequenceId();
  }

  void setAcousticFeatures(const std::map<std::string, double> & acousticFeatures) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAcousticFeatures(acousticFeatures);
    }
    ifaces_[i]->setAcousticFeatures(acousticFeatures);
  }

};

}}} // namespace

#endif
