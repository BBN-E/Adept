/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SentenceSegmenter_H
#define SentenceSegmenter_H

#include <thrift/TDispatchProcessor.h>
#include "utilities_types.h"

namespace thrift { namespace adept { namespace utilities {

class SentenceSegmenterIf {
 public:
  virtual ~SentenceSegmenterIf() {}
  virtual void tokenize(std::vector< ::thrift::adept::common::Sentence> & _return, const std::string& text, const  ::thrift::adept::common::TokenStream& tokenStream) = 0;
};

class SentenceSegmenterIfFactory {
 public:
  typedef SentenceSegmenterIf Handler;

  virtual ~SentenceSegmenterIfFactory() {}

  virtual SentenceSegmenterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SentenceSegmenterIf* /* handler */) = 0;
};

class SentenceSegmenterIfSingletonFactory : virtual public SentenceSegmenterIfFactory {
 public:
  SentenceSegmenterIfSingletonFactory(const boost::shared_ptr<SentenceSegmenterIf>& iface) : iface_(iface) {}
  virtual ~SentenceSegmenterIfSingletonFactory() {}

  virtual SentenceSegmenterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SentenceSegmenterIf* /* handler */) {}

 protected:
  boost::shared_ptr<SentenceSegmenterIf> iface_;
};

class SentenceSegmenterNull : virtual public SentenceSegmenterIf {
 public:
  virtual ~SentenceSegmenterNull() {}
  void tokenize(std::vector< ::thrift::adept::common::Sentence> & /* _return */, const std::string& /* text */, const  ::thrift::adept::common::TokenStream& /* tokenStream */) {
    return;
  }
};

typedef struct _SentenceSegmenter_tokenize_args__isset {
  _SentenceSegmenter_tokenize_args__isset() : text(false), tokenStream(false) {}
  bool text;
  bool tokenStream;
} _SentenceSegmenter_tokenize_args__isset;

class SentenceSegmenter_tokenize_args {
 public:

  SentenceSegmenter_tokenize_args() : text() {
  }

  virtual ~SentenceSegmenter_tokenize_args() throw() {}

  std::string text;
   ::thrift::adept::common::TokenStream tokenStream;

  _SentenceSegmenter_tokenize_args__isset __isset;

  void __set_text(const std::string& val) {
    text = val;
  }

  void __set_tokenStream(const  ::thrift::adept::common::TokenStream& val) {
    tokenStream = val;
  }

  bool operator == (const SentenceSegmenter_tokenize_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(tokenStream == rhs.tokenStream))
      return false;
    return true;
  }
  bool operator != (const SentenceSegmenter_tokenize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceSegmenter_tokenize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SentenceSegmenter_tokenize_pargs {
 public:


  virtual ~SentenceSegmenter_tokenize_pargs() throw() {}

  const std::string* text;
  const  ::thrift::adept::common::TokenStream* tokenStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceSegmenter_tokenize_result__isset {
  _SentenceSegmenter_tokenize_result__isset() : success(false) {}
  bool success;
} _SentenceSegmenter_tokenize_result__isset;

class SentenceSegmenter_tokenize_result {
 public:

  SentenceSegmenter_tokenize_result() {
  }

  virtual ~SentenceSegmenter_tokenize_result() throw() {}

  std::vector< ::thrift::adept::common::Sentence>  success;

  _SentenceSegmenter_tokenize_result__isset __isset;

  void __set_success(const std::vector< ::thrift::adept::common::Sentence> & val) {
    success = val;
  }

  bool operator == (const SentenceSegmenter_tokenize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SentenceSegmenter_tokenize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceSegmenter_tokenize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceSegmenter_tokenize_presult__isset {
  _SentenceSegmenter_tokenize_presult__isset() : success(false) {}
  bool success;
} _SentenceSegmenter_tokenize_presult__isset;

class SentenceSegmenter_tokenize_presult {
 public:


  virtual ~SentenceSegmenter_tokenize_presult() throw() {}

  std::vector< ::thrift::adept::common::Sentence> * success;

  _SentenceSegmenter_tokenize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SentenceSegmenterClient : virtual public SentenceSegmenterIf {
 public:
  SentenceSegmenterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SentenceSegmenterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void tokenize(std::vector< ::thrift::adept::common::Sentence> & _return, const std::string& text, const  ::thrift::adept::common::TokenStream& tokenStream);
  void send_tokenize(const std::string& text, const  ::thrift::adept::common::TokenStream& tokenStream);
  void recv_tokenize(std::vector< ::thrift::adept::common::Sentence> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SentenceSegmenterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SentenceSegmenterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SentenceSegmenterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_tokenize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SentenceSegmenterProcessor(boost::shared_ptr<SentenceSegmenterIf> iface) :
    iface_(iface) {
    processMap_["tokenize"] = &SentenceSegmenterProcessor::process_tokenize;
  }

  virtual ~SentenceSegmenterProcessor() {}
};

class SentenceSegmenterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SentenceSegmenterProcessorFactory(const ::boost::shared_ptr< SentenceSegmenterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SentenceSegmenterIfFactory > handlerFactory_;
};

class SentenceSegmenterMultiface : virtual public SentenceSegmenterIf {
 public:
  SentenceSegmenterMultiface(std::vector<boost::shared_ptr<SentenceSegmenterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SentenceSegmenterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SentenceSegmenterIf> > ifaces_;
  SentenceSegmenterMultiface() {}
  void add(boost::shared_ptr<SentenceSegmenterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void tokenize(std::vector< ::thrift::adept::common::Sentence> & _return, const std::string& text, const  ::thrift::adept::common::TokenStream& tokenStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tokenize(_return, text, tokenStream);
    }
    ifaces_[i]->tokenize(_return, text, tokenStream);
    return;
  }

};

}}} // namespace

#endif