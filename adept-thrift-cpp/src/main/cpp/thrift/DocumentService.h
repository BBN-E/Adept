/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DocumentService_H
#define DocumentService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class DocumentServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~DocumentServiceIf() {}
  virtual void addTokenStream(const TokenStream& tokenStream) = 0;
  virtual void getAudioUri(std::string& _return) = 0;
  virtual void getCorpus(Corpus& _return) = 0;
  virtual void getDocId(std::string& _return) = 0;
  virtual void getDocType(std::string& _return) = 0;
  virtual void getGenre(std::string& _return) = 0;
  virtual void getHeadline(std::string& _return) = 0;
  virtual void getLanguage(std::string& _return) = 0;
  virtual void getTokenStream(TokenStream& _return, const TokenizerType::type tokenizerType) = 0;
  virtual void getTokenStreamList(std::vector<TokenStream> & _return) = 0;
  virtual void getUri(std::string& _return) = 0;
  virtual void setAudioUri(const std::string& audioUri) = 0;
  virtual void setGenre(const std::string& genre) = 0;
  virtual void setHeadline(const std::string& headline) = 0;
  virtual void setTokenStreamList(const std::vector<TokenStream> & tokenStreamList) = 0;
  virtual void setValue(const std::string& value) = 0;
};

class DocumentServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef DocumentServiceIf Handler;

  virtual ~DocumentServiceIfFactory() {}

  virtual DocumentServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class DocumentServiceIfSingletonFactory : virtual public DocumentServiceIfFactory {
 public:
  DocumentServiceIfSingletonFactory(const boost::shared_ptr<DocumentServiceIf>& iface) : iface_(iface) {}
  virtual ~DocumentServiceIfSingletonFactory() {}

  virtual DocumentServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DocumentServiceIf> iface_;
};

class DocumentServiceNull : virtual public DocumentServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~DocumentServiceNull() {}
  void addTokenStream(const TokenStream& /* tokenStream */) {
    return;
  }
  void getAudioUri(std::string& /* _return */) {
    return;
  }
  void getCorpus(Corpus& /* _return */) {
    return;
  }
  void getDocId(std::string& /* _return */) {
    return;
  }
  void getDocType(std::string& /* _return */) {
    return;
  }
  void getGenre(std::string& /* _return */) {
    return;
  }
  void getHeadline(std::string& /* _return */) {
    return;
  }
  void getLanguage(std::string& /* _return */) {
    return;
  }
  void getTokenStream(TokenStream& /* _return */, const TokenizerType::type /* tokenizerType */) {
    return;
  }
  void getTokenStreamList(std::vector<TokenStream> & /* _return */) {
    return;
  }
  void getUri(std::string& /* _return */) {
    return;
  }
  void setAudioUri(const std::string& /* audioUri */) {
    return;
  }
  void setGenre(const std::string& /* genre */) {
    return;
  }
  void setHeadline(const std::string& /* headline */) {
    return;
  }
  void setTokenStreamList(const std::vector<TokenStream> & /* tokenStreamList */) {
    return;
  }
  void setValue(const std::string& /* value */) {
    return;
  }
};

typedef struct _DocumentService_addTokenStream_args__isset {
  _DocumentService_addTokenStream_args__isset() : tokenStream(false) {}
  bool tokenStream;
} _DocumentService_addTokenStream_args__isset;

class DocumentService_addTokenStream_args {
 public:

  DocumentService_addTokenStream_args() {
  }

  virtual ~DocumentService_addTokenStream_args() throw() {}

  TokenStream tokenStream;

  _DocumentService_addTokenStream_args__isset __isset;

  void __set_tokenStream(const TokenStream& val) {
    tokenStream = val;
  }

  bool operator == (const DocumentService_addTokenStream_args & rhs) const
  {
    if (!(tokenStream == rhs.tokenStream))
      return false;
    return true;
  }
  bool operator != (const DocumentService_addTokenStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_addTokenStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_addTokenStream_pargs {
 public:


  virtual ~DocumentService_addTokenStream_pargs() throw() {}

  const TokenStream* tokenStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_addTokenStream_result {
 public:

  DocumentService_addTokenStream_result() {
  }

  virtual ~DocumentService_addTokenStream_result() throw() {}


  bool operator == (const DocumentService_addTokenStream_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_addTokenStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_addTokenStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_addTokenStream_presult {
 public:


  virtual ~DocumentService_addTokenStream_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getAudioUri_args {
 public:

  DocumentService_getAudioUri_args() {
  }

  virtual ~DocumentService_getAudioUri_args() throw() {}


  bool operator == (const DocumentService_getAudioUri_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getAudioUri_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getAudioUri_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getAudioUri_pargs {
 public:


  virtual ~DocumentService_getAudioUri_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getAudioUri_result__isset {
  _DocumentService_getAudioUri_result__isset() : success(false) {}
  bool success;
} _DocumentService_getAudioUri_result__isset;

class DocumentService_getAudioUri_result {
 public:

  DocumentService_getAudioUri_result() : success() {
  }

  virtual ~DocumentService_getAudioUri_result() throw() {}

  std::string success;

  _DocumentService_getAudioUri_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DocumentService_getAudioUri_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getAudioUri_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getAudioUri_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getAudioUri_presult__isset {
  _DocumentService_getAudioUri_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getAudioUri_presult__isset;

class DocumentService_getAudioUri_presult {
 public:


  virtual ~DocumentService_getAudioUri_presult() throw() {}

  std::string* success;

  _DocumentService_getAudioUri_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getCorpus_args {
 public:

  DocumentService_getCorpus_args() {
  }

  virtual ~DocumentService_getCorpus_args() throw() {}


  bool operator == (const DocumentService_getCorpus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getCorpus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getCorpus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getCorpus_pargs {
 public:


  virtual ~DocumentService_getCorpus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getCorpus_result__isset {
  _DocumentService_getCorpus_result__isset() : success(false) {}
  bool success;
} _DocumentService_getCorpus_result__isset;

class DocumentService_getCorpus_result {
 public:

  DocumentService_getCorpus_result() {
  }

  virtual ~DocumentService_getCorpus_result() throw() {}

  Corpus success;

  _DocumentService_getCorpus_result__isset __isset;

  void __set_success(const Corpus& val) {
    success = val;
  }

  bool operator == (const DocumentService_getCorpus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getCorpus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getCorpus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getCorpus_presult__isset {
  _DocumentService_getCorpus_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getCorpus_presult__isset;

class DocumentService_getCorpus_presult {
 public:


  virtual ~DocumentService_getCorpus_presult() throw() {}

  Corpus* success;

  _DocumentService_getCorpus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getDocId_args {
 public:

  DocumentService_getDocId_args() {
  }

  virtual ~DocumentService_getDocId_args() throw() {}


  bool operator == (const DocumentService_getDocId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getDocId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getDocId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getDocId_pargs {
 public:


  virtual ~DocumentService_getDocId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getDocId_result__isset {
  _DocumentService_getDocId_result__isset() : success(false) {}
  bool success;
} _DocumentService_getDocId_result__isset;

class DocumentService_getDocId_result {
 public:

  DocumentService_getDocId_result() : success() {
  }

  virtual ~DocumentService_getDocId_result() throw() {}

  std::string success;

  _DocumentService_getDocId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DocumentService_getDocId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getDocId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getDocId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getDocId_presult__isset {
  _DocumentService_getDocId_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getDocId_presult__isset;

class DocumentService_getDocId_presult {
 public:


  virtual ~DocumentService_getDocId_presult() throw() {}

  std::string* success;

  _DocumentService_getDocId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getDocType_args {
 public:

  DocumentService_getDocType_args() {
  }

  virtual ~DocumentService_getDocType_args() throw() {}


  bool operator == (const DocumentService_getDocType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getDocType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getDocType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getDocType_pargs {
 public:


  virtual ~DocumentService_getDocType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getDocType_result__isset {
  _DocumentService_getDocType_result__isset() : success(false) {}
  bool success;
} _DocumentService_getDocType_result__isset;

class DocumentService_getDocType_result {
 public:

  DocumentService_getDocType_result() : success() {
  }

  virtual ~DocumentService_getDocType_result() throw() {}

  std::string success;

  _DocumentService_getDocType_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DocumentService_getDocType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getDocType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getDocType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getDocType_presult__isset {
  _DocumentService_getDocType_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getDocType_presult__isset;

class DocumentService_getDocType_presult {
 public:


  virtual ~DocumentService_getDocType_presult() throw() {}

  std::string* success;

  _DocumentService_getDocType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getGenre_args {
 public:

  DocumentService_getGenre_args() {
  }

  virtual ~DocumentService_getGenre_args() throw() {}


  bool operator == (const DocumentService_getGenre_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getGenre_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getGenre_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getGenre_pargs {
 public:


  virtual ~DocumentService_getGenre_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getGenre_result__isset {
  _DocumentService_getGenre_result__isset() : success(false) {}
  bool success;
} _DocumentService_getGenre_result__isset;

class DocumentService_getGenre_result {
 public:

  DocumentService_getGenre_result() : success() {
  }

  virtual ~DocumentService_getGenre_result() throw() {}

  std::string success;

  _DocumentService_getGenre_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DocumentService_getGenre_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getGenre_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getGenre_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getGenre_presult__isset {
  _DocumentService_getGenre_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getGenre_presult__isset;

class DocumentService_getGenre_presult {
 public:


  virtual ~DocumentService_getGenre_presult() throw() {}

  std::string* success;

  _DocumentService_getGenre_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getHeadline_args {
 public:

  DocumentService_getHeadline_args() {
  }

  virtual ~DocumentService_getHeadline_args() throw() {}


  bool operator == (const DocumentService_getHeadline_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getHeadline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getHeadline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getHeadline_pargs {
 public:


  virtual ~DocumentService_getHeadline_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getHeadline_result__isset {
  _DocumentService_getHeadline_result__isset() : success(false) {}
  bool success;
} _DocumentService_getHeadline_result__isset;

class DocumentService_getHeadline_result {
 public:

  DocumentService_getHeadline_result() : success() {
  }

  virtual ~DocumentService_getHeadline_result() throw() {}

  std::string success;

  _DocumentService_getHeadline_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DocumentService_getHeadline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getHeadline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getHeadline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getHeadline_presult__isset {
  _DocumentService_getHeadline_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getHeadline_presult__isset;

class DocumentService_getHeadline_presult {
 public:


  virtual ~DocumentService_getHeadline_presult() throw() {}

  std::string* success;

  _DocumentService_getHeadline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getLanguage_args {
 public:

  DocumentService_getLanguage_args() {
  }

  virtual ~DocumentService_getLanguage_args() throw() {}


  bool operator == (const DocumentService_getLanguage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getLanguage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getLanguage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getLanguage_pargs {
 public:


  virtual ~DocumentService_getLanguage_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getLanguage_result__isset {
  _DocumentService_getLanguage_result__isset() : success(false) {}
  bool success;
} _DocumentService_getLanguage_result__isset;

class DocumentService_getLanguage_result {
 public:

  DocumentService_getLanguage_result() : success() {
  }

  virtual ~DocumentService_getLanguage_result() throw() {}

  std::string success;

  _DocumentService_getLanguage_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DocumentService_getLanguage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getLanguage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getLanguage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getLanguage_presult__isset {
  _DocumentService_getLanguage_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getLanguage_presult__isset;

class DocumentService_getLanguage_presult {
 public:


  virtual ~DocumentService_getLanguage_presult() throw() {}

  std::string* success;

  _DocumentService_getLanguage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentService_getTokenStream_args__isset {
  _DocumentService_getTokenStream_args__isset() : tokenizerType(false) {}
  bool tokenizerType;
} _DocumentService_getTokenStream_args__isset;

class DocumentService_getTokenStream_args {
 public:

  DocumentService_getTokenStream_args() : tokenizerType((TokenizerType::type)0) {
  }

  virtual ~DocumentService_getTokenStream_args() throw() {}

  TokenizerType::type tokenizerType;

  _DocumentService_getTokenStream_args__isset __isset;

  void __set_tokenizerType(const TokenizerType::type val) {
    tokenizerType = val;
  }

  bool operator == (const DocumentService_getTokenStream_args & rhs) const
  {
    if (!(tokenizerType == rhs.tokenizerType))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getTokenStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getTokenStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getTokenStream_pargs {
 public:


  virtual ~DocumentService_getTokenStream_pargs() throw() {}

  const TokenizerType::type* tokenizerType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getTokenStream_result__isset {
  _DocumentService_getTokenStream_result__isset() : success(false) {}
  bool success;
} _DocumentService_getTokenStream_result__isset;

class DocumentService_getTokenStream_result {
 public:

  DocumentService_getTokenStream_result() {
  }

  virtual ~DocumentService_getTokenStream_result() throw() {}

  TokenStream success;

  _DocumentService_getTokenStream_result__isset __isset;

  void __set_success(const TokenStream& val) {
    success = val;
  }

  bool operator == (const DocumentService_getTokenStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getTokenStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getTokenStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getTokenStream_presult__isset {
  _DocumentService_getTokenStream_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getTokenStream_presult__isset;

class DocumentService_getTokenStream_presult {
 public:


  virtual ~DocumentService_getTokenStream_presult() throw() {}

  TokenStream* success;

  _DocumentService_getTokenStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getTokenStreamList_args {
 public:

  DocumentService_getTokenStreamList_args() {
  }

  virtual ~DocumentService_getTokenStreamList_args() throw() {}


  bool operator == (const DocumentService_getTokenStreamList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getTokenStreamList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getTokenStreamList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getTokenStreamList_pargs {
 public:


  virtual ~DocumentService_getTokenStreamList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getTokenStreamList_result__isset {
  _DocumentService_getTokenStreamList_result__isset() : success(false) {}
  bool success;
} _DocumentService_getTokenStreamList_result__isset;

class DocumentService_getTokenStreamList_result {
 public:

  DocumentService_getTokenStreamList_result() {
  }

  virtual ~DocumentService_getTokenStreamList_result() throw() {}

  std::vector<TokenStream>  success;

  _DocumentService_getTokenStreamList_result__isset __isset;

  void __set_success(const std::vector<TokenStream> & val) {
    success = val;
  }

  bool operator == (const DocumentService_getTokenStreamList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getTokenStreamList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getTokenStreamList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getTokenStreamList_presult__isset {
  _DocumentService_getTokenStreamList_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getTokenStreamList_presult__isset;

class DocumentService_getTokenStreamList_presult {
 public:


  virtual ~DocumentService_getTokenStreamList_presult() throw() {}

  std::vector<TokenStream> * success;

  _DocumentService_getTokenStreamList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DocumentService_getUri_args {
 public:

  DocumentService_getUri_args() {
  }

  virtual ~DocumentService_getUri_args() throw() {}


  bool operator == (const DocumentService_getUri_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_getUri_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getUri_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_getUri_pargs {
 public:


  virtual ~DocumentService_getUri_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getUri_result__isset {
  _DocumentService_getUri_result__isset() : success(false) {}
  bool success;
} _DocumentService_getUri_result__isset;

class DocumentService_getUri_result {
 public:

  DocumentService_getUri_result() : success() {
  }

  virtual ~DocumentService_getUri_result() throw() {}

  std::string success;

  _DocumentService_getUri_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DocumentService_getUri_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentService_getUri_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_getUri_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentService_getUri_presult__isset {
  _DocumentService_getUri_presult__isset() : success(false) {}
  bool success;
} _DocumentService_getUri_presult__isset;

class DocumentService_getUri_presult {
 public:


  virtual ~DocumentService_getUri_presult() throw() {}

  std::string* success;

  _DocumentService_getUri_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentService_setAudioUri_args__isset {
  _DocumentService_setAudioUri_args__isset() : audioUri(false) {}
  bool audioUri;
} _DocumentService_setAudioUri_args__isset;

class DocumentService_setAudioUri_args {
 public:

  DocumentService_setAudioUri_args() : audioUri() {
  }

  virtual ~DocumentService_setAudioUri_args() throw() {}

  std::string audioUri;

  _DocumentService_setAudioUri_args__isset __isset;

  void __set_audioUri(const std::string& val) {
    audioUri = val;
  }

  bool operator == (const DocumentService_setAudioUri_args & rhs) const
  {
    if (!(audioUri == rhs.audioUri))
      return false;
    return true;
  }
  bool operator != (const DocumentService_setAudioUri_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setAudioUri_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setAudioUri_pargs {
 public:


  virtual ~DocumentService_setAudioUri_pargs() throw() {}

  const std::string* audioUri;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setAudioUri_result {
 public:

  DocumentService_setAudioUri_result() {
  }

  virtual ~DocumentService_setAudioUri_result() throw() {}


  bool operator == (const DocumentService_setAudioUri_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_setAudioUri_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setAudioUri_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setAudioUri_presult {
 public:


  virtual ~DocumentService_setAudioUri_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentService_setGenre_args__isset {
  _DocumentService_setGenre_args__isset() : genre(false) {}
  bool genre;
} _DocumentService_setGenre_args__isset;

class DocumentService_setGenre_args {
 public:

  DocumentService_setGenre_args() : genre() {
  }

  virtual ~DocumentService_setGenre_args() throw() {}

  std::string genre;

  _DocumentService_setGenre_args__isset __isset;

  void __set_genre(const std::string& val) {
    genre = val;
  }

  bool operator == (const DocumentService_setGenre_args & rhs) const
  {
    if (!(genre == rhs.genre))
      return false;
    return true;
  }
  bool operator != (const DocumentService_setGenre_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setGenre_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setGenre_pargs {
 public:


  virtual ~DocumentService_setGenre_pargs() throw() {}

  const std::string* genre;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setGenre_result {
 public:

  DocumentService_setGenre_result() {
  }

  virtual ~DocumentService_setGenre_result() throw() {}


  bool operator == (const DocumentService_setGenre_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_setGenre_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setGenre_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setGenre_presult {
 public:


  virtual ~DocumentService_setGenre_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentService_setHeadline_args__isset {
  _DocumentService_setHeadline_args__isset() : headline(false) {}
  bool headline;
} _DocumentService_setHeadline_args__isset;

class DocumentService_setHeadline_args {
 public:

  DocumentService_setHeadline_args() : headline() {
  }

  virtual ~DocumentService_setHeadline_args() throw() {}

  std::string headline;

  _DocumentService_setHeadline_args__isset __isset;

  void __set_headline(const std::string& val) {
    headline = val;
  }

  bool operator == (const DocumentService_setHeadline_args & rhs) const
  {
    if (!(headline == rhs.headline))
      return false;
    return true;
  }
  bool operator != (const DocumentService_setHeadline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setHeadline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setHeadline_pargs {
 public:


  virtual ~DocumentService_setHeadline_pargs() throw() {}

  const std::string* headline;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setHeadline_result {
 public:

  DocumentService_setHeadline_result() {
  }

  virtual ~DocumentService_setHeadline_result() throw() {}


  bool operator == (const DocumentService_setHeadline_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_setHeadline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setHeadline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setHeadline_presult {
 public:


  virtual ~DocumentService_setHeadline_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentService_setTokenStreamList_args__isset {
  _DocumentService_setTokenStreamList_args__isset() : tokenStreamList(false) {}
  bool tokenStreamList;
} _DocumentService_setTokenStreamList_args__isset;

class DocumentService_setTokenStreamList_args {
 public:

  DocumentService_setTokenStreamList_args() {
  }

  virtual ~DocumentService_setTokenStreamList_args() throw() {}

  std::vector<TokenStream>  tokenStreamList;

  _DocumentService_setTokenStreamList_args__isset __isset;

  void __set_tokenStreamList(const std::vector<TokenStream> & val) {
    tokenStreamList = val;
  }

  bool operator == (const DocumentService_setTokenStreamList_args & rhs) const
  {
    if (!(tokenStreamList == rhs.tokenStreamList))
      return false;
    return true;
  }
  bool operator != (const DocumentService_setTokenStreamList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setTokenStreamList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setTokenStreamList_pargs {
 public:


  virtual ~DocumentService_setTokenStreamList_pargs() throw() {}

  const std::vector<TokenStream> * tokenStreamList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setTokenStreamList_result {
 public:

  DocumentService_setTokenStreamList_result() {
  }

  virtual ~DocumentService_setTokenStreamList_result() throw() {}


  bool operator == (const DocumentService_setTokenStreamList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_setTokenStreamList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setTokenStreamList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setTokenStreamList_presult {
 public:


  virtual ~DocumentService_setTokenStreamList_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentService_setValue_args__isset {
  _DocumentService_setValue_args__isset() : value(false) {}
  bool value;
} _DocumentService_setValue_args__isset;

class DocumentService_setValue_args {
 public:

  DocumentService_setValue_args() : value() {
  }

  virtual ~DocumentService_setValue_args() throw() {}

  std::string value;

  _DocumentService_setValue_args__isset __isset;

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const DocumentService_setValue_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DocumentService_setValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setValue_pargs {
 public:


  virtual ~DocumentService_setValue_pargs() throw() {}

  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setValue_result {
 public:

  DocumentService_setValue_result() {
  }

  virtual ~DocumentService_setValue_result() throw() {}


  bool operator == (const DocumentService_setValue_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DocumentService_setValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentService_setValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentService_setValue_presult {
 public:


  virtual ~DocumentService_setValue_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DocumentServiceClient : virtual public DocumentServiceIf, public ItemServiceClient {
 public:
  DocumentServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  DocumentServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void addTokenStream(const TokenStream& tokenStream);
  void send_addTokenStream(const TokenStream& tokenStream);
  void recv_addTokenStream();
  void getAudioUri(std::string& _return);
  void send_getAudioUri();
  void recv_getAudioUri(std::string& _return);
  void getCorpus(Corpus& _return);
  void send_getCorpus();
  void recv_getCorpus(Corpus& _return);
  void getDocId(std::string& _return);
  void send_getDocId();
  void recv_getDocId(std::string& _return);
  void getDocType(std::string& _return);
  void send_getDocType();
  void recv_getDocType(std::string& _return);
  void getGenre(std::string& _return);
  void send_getGenre();
  void recv_getGenre(std::string& _return);
  void getHeadline(std::string& _return);
  void send_getHeadline();
  void recv_getHeadline(std::string& _return);
  void getLanguage(std::string& _return);
  void send_getLanguage();
  void recv_getLanguage(std::string& _return);
  void getTokenStream(TokenStream& _return, const TokenizerType::type tokenizerType);
  void send_getTokenStream(const TokenizerType::type tokenizerType);
  void recv_getTokenStream(TokenStream& _return);
  void getTokenStreamList(std::vector<TokenStream> & _return);
  void send_getTokenStreamList();
  void recv_getTokenStreamList(std::vector<TokenStream> & _return);
  void getUri(std::string& _return);
  void send_getUri();
  void recv_getUri(std::string& _return);
  void setAudioUri(const std::string& audioUri);
  void send_setAudioUri(const std::string& audioUri);
  void recv_setAudioUri();
  void setGenre(const std::string& genre);
  void send_setGenre(const std::string& genre);
  void recv_setGenre();
  void setHeadline(const std::string& headline);
  void send_setHeadline(const std::string& headline);
  void recv_setHeadline();
  void setTokenStreamList(const std::vector<TokenStream> & tokenStreamList);
  void send_setTokenStreamList(const std::vector<TokenStream> & tokenStreamList);
  void recv_setTokenStreamList();
  void setValue(const std::string& value);
  void send_setValue(const std::string& value);
  void recv_setValue();
};

class DocumentServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<DocumentServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DocumentServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addTokenStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAudioUri(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCorpus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGenre(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHeadline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLanguage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTokenStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTokenStreamList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUri(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAudioUri(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setGenre(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setHeadline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTokenStreamList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DocumentServiceProcessor(boost::shared_ptr<DocumentServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["addTokenStream"] = &DocumentServiceProcessor::process_addTokenStream;
    processMap_["getAudioUri"] = &DocumentServiceProcessor::process_getAudioUri;
    processMap_["getCorpus"] = &DocumentServiceProcessor::process_getCorpus;
    processMap_["getDocId"] = &DocumentServiceProcessor::process_getDocId;
    processMap_["getDocType"] = &DocumentServiceProcessor::process_getDocType;
    processMap_["getGenre"] = &DocumentServiceProcessor::process_getGenre;
    processMap_["getHeadline"] = &DocumentServiceProcessor::process_getHeadline;
    processMap_["getLanguage"] = &DocumentServiceProcessor::process_getLanguage;
    processMap_["getTokenStream"] = &DocumentServiceProcessor::process_getTokenStream;
    processMap_["getTokenStreamList"] = &DocumentServiceProcessor::process_getTokenStreamList;
    processMap_["getUri"] = &DocumentServiceProcessor::process_getUri;
    processMap_["setAudioUri"] = &DocumentServiceProcessor::process_setAudioUri;
    processMap_["setGenre"] = &DocumentServiceProcessor::process_setGenre;
    processMap_["setHeadline"] = &DocumentServiceProcessor::process_setHeadline;
    processMap_["setTokenStreamList"] = &DocumentServiceProcessor::process_setTokenStreamList;
    processMap_["setValue"] = &DocumentServiceProcessor::process_setValue;
  }

  virtual ~DocumentServiceProcessor() {}
};

class DocumentServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DocumentServiceProcessorFactory(const ::boost::shared_ptr< DocumentServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DocumentServiceIfFactory > handlerFactory_;
};

class DocumentServiceMultiface : virtual public DocumentServiceIf, public ItemServiceMultiface {
 public:
  DocumentServiceMultiface(std::vector<boost::shared_ptr<DocumentServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<DocumentServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~DocumentServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DocumentServiceIf> > ifaces_;
  DocumentServiceMultiface() {}
  void add(boost::shared_ptr<DocumentServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void addTokenStream(const TokenStream& tokenStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addTokenStream(tokenStream);
    }
    ifaces_[i]->addTokenStream(tokenStream);
  }

  void getAudioUri(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAudioUri(_return);
    }
    ifaces_[i]->getAudioUri(_return);
    return;
  }

  void getCorpus(Corpus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCorpus(_return);
    }
    ifaces_[i]->getCorpus(_return);
    return;
  }

  void getDocId(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocId(_return);
    }
    ifaces_[i]->getDocId(_return);
    return;
  }

  void getDocType(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocType(_return);
    }
    ifaces_[i]->getDocType(_return);
    return;
  }

  void getGenre(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGenre(_return);
    }
    ifaces_[i]->getGenre(_return);
    return;
  }

  void getHeadline(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHeadline(_return);
    }
    ifaces_[i]->getHeadline(_return);
    return;
  }

  void getLanguage(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLanguage(_return);
    }
    ifaces_[i]->getLanguage(_return);
    return;
  }

  void getTokenStream(TokenStream& _return, const TokenizerType::type tokenizerType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTokenStream(_return, tokenizerType);
    }
    ifaces_[i]->getTokenStream(_return, tokenizerType);
    return;
  }

  void getTokenStreamList(std::vector<TokenStream> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTokenStreamList(_return);
    }
    ifaces_[i]->getTokenStreamList(_return);
    return;
  }

  void getUri(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUri(_return);
    }
    ifaces_[i]->getUri(_return);
    return;
  }

  void setAudioUri(const std::string& audioUri) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAudioUri(audioUri);
    }
    ifaces_[i]->setAudioUri(audioUri);
  }

  void setGenre(const std::string& genre) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setGenre(genre);
    }
    ifaces_[i]->setGenre(genre);
  }

  void setHeadline(const std::string& headline) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setHeadline(headline);
    }
    ifaces_[i]->setHeadline(headline);
  }

  void setTokenStreamList(const std::vector<TokenStream> & tokenStreamList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTokenStreamList(tokenStreamList);
    }
    ifaces_[i]->setTokenStreamList(tokenStreamList);
  }

  void setValue(const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setValue(value);
    }
    ifaces_[i]->setValue(value);
  }

};

}}} // namespace

#endif
