/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ValueService_H
#define ValueService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class ValueServiceIf {
 public:
  virtual ~ValueServiceIf() {}
  virtual void getValue(std::string& _return) = 0;
  virtual int64_t getValueId() = 0;
};

class ValueServiceIfFactory {
 public:
  typedef ValueServiceIf Handler;

  virtual ~ValueServiceIfFactory() {}

  virtual ValueServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ValueServiceIf* /* handler */) = 0;
};

class ValueServiceIfSingletonFactory : virtual public ValueServiceIfFactory {
 public:
  ValueServiceIfSingletonFactory(const boost::shared_ptr<ValueServiceIf>& iface) : iface_(iface) {}
  virtual ~ValueServiceIfSingletonFactory() {}

  virtual ValueServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ValueServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ValueServiceIf> iface_;
};

class ValueServiceNull : virtual public ValueServiceIf {
 public:
  virtual ~ValueServiceNull() {}
  void getValue(std::string& /* _return */) {
    return;
  }
  int64_t getValueId() {
    int64_t _return = 0;
    return _return;
  }
};


class ValueService_getValue_args {
 public:

  ValueService_getValue_args() {
  }

  virtual ~ValueService_getValue_args() throw() {}


  bool operator == (const ValueService_getValue_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ValueService_getValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueService_getValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ValueService_getValue_pargs {
 public:


  virtual ~ValueService_getValue_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ValueService_getValue_result__isset {
  _ValueService_getValue_result__isset() : success(false) {}
  bool success;
} _ValueService_getValue_result__isset;

class ValueService_getValue_result {
 public:

  ValueService_getValue_result() : success() {
  }

  virtual ~ValueService_getValue_result() throw() {}

  std::string success;

  _ValueService_getValue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ValueService_getValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ValueService_getValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueService_getValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ValueService_getValue_presult__isset {
  _ValueService_getValue_presult__isset() : success(false) {}
  bool success;
} _ValueService_getValue_presult__isset;

class ValueService_getValue_presult {
 public:


  virtual ~ValueService_getValue_presult() throw() {}

  std::string* success;

  _ValueService_getValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ValueService_getValueId_args {
 public:

  ValueService_getValueId_args() {
  }

  virtual ~ValueService_getValueId_args() throw() {}


  bool operator == (const ValueService_getValueId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ValueService_getValueId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueService_getValueId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ValueService_getValueId_pargs {
 public:


  virtual ~ValueService_getValueId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ValueService_getValueId_result__isset {
  _ValueService_getValueId_result__isset() : success(false) {}
  bool success;
} _ValueService_getValueId_result__isset;

class ValueService_getValueId_result {
 public:

  ValueService_getValueId_result() : success(0) {
  }

  virtual ~ValueService_getValueId_result() throw() {}

  int64_t success;

  _ValueService_getValueId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const ValueService_getValueId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ValueService_getValueId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueService_getValueId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ValueService_getValueId_presult__isset {
  _ValueService_getValueId_presult__isset() : success(false) {}
  bool success;
} _ValueService_getValueId_presult__isset;

class ValueService_getValueId_presult {
 public:


  virtual ~ValueService_getValueId_presult() throw() {}

  int64_t* success;

  _ValueService_getValueId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ValueServiceClient : virtual public ValueServiceIf {
 public:
  ValueServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ValueServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getValue(std::string& _return);
  void send_getValue();
  void recv_getValue(std::string& _return);
  int64_t getValueId();
  void send_getValueId();
  int64_t recv_getValueId();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ValueServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ValueServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ValueServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValueId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ValueServiceProcessor(boost::shared_ptr<ValueServiceIf> iface) :
    iface_(iface) {
    processMap_["getValue"] = &ValueServiceProcessor::process_getValue;
    processMap_["getValueId"] = &ValueServiceProcessor::process_getValueId;
  }

  virtual ~ValueServiceProcessor() {}
};

class ValueServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ValueServiceProcessorFactory(const ::boost::shared_ptr< ValueServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ValueServiceIfFactory > handlerFactory_;
};

class ValueServiceMultiface : virtual public ValueServiceIf {
 public:
  ValueServiceMultiface(std::vector<boost::shared_ptr<ValueServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ValueServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ValueServiceIf> > ifaces_;
  ValueServiceMultiface() {}
  void add(boost::shared_ptr<ValueServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getValue(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue(_return);
    }
    ifaces_[i]->getValue(_return);
    return;
  }

  int64_t getValueId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValueId();
    }
    return ifaces_[i]->getValueId();
  }

};

}}} // namespace

#endif