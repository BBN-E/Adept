/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AnomalousTextService_H
#define AnomalousTextService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class AnomalousTextServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~AnomalousTextServiceIf() {}
  virtual double getConfidence() = 0;
  virtual void getDocument(Document& _return) = 0;
  virtual void getExplanation(std::string& _return) = 0;
  virtual void setExplanation(const std::string& explanation) = 0;
};

class AnomalousTextServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef AnomalousTextServiceIf Handler;

  virtual ~AnomalousTextServiceIfFactory() {}

  virtual AnomalousTextServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class AnomalousTextServiceIfSingletonFactory : virtual public AnomalousTextServiceIfFactory {
 public:
  AnomalousTextServiceIfSingletonFactory(const boost::shared_ptr<AnomalousTextServiceIf>& iface) : iface_(iface) {}
  virtual ~AnomalousTextServiceIfSingletonFactory() {}

  virtual AnomalousTextServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AnomalousTextServiceIf> iface_;
};

class AnomalousTextServiceNull : virtual public AnomalousTextServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~AnomalousTextServiceNull() {}
  double getConfidence() {
    double _return = (double)0;
    return _return;
  }
  void getDocument(Document& /* _return */) {
    return;
  }
  void getExplanation(std::string& /* _return */) {
    return;
  }
  void setExplanation(const std::string& /* explanation */) {
    return;
  }
};


class AnomalousTextService_getConfidence_args {
 public:

  AnomalousTextService_getConfidence_args() {
  }

  virtual ~AnomalousTextService_getConfidence_args() throw() {}


  bool operator == (const AnomalousTextService_getConfidence_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AnomalousTextService_getConfidence_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_getConfidence_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AnomalousTextService_getConfidence_pargs {
 public:


  virtual ~AnomalousTextService_getConfidence_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AnomalousTextService_getConfidence_result__isset {
  _AnomalousTextService_getConfidence_result__isset() : success(false) {}
  bool success;
} _AnomalousTextService_getConfidence_result__isset;

class AnomalousTextService_getConfidence_result {
 public:

  AnomalousTextService_getConfidence_result() : success(0) {
  }

  virtual ~AnomalousTextService_getConfidence_result() throw() {}

  double success;

  _AnomalousTextService_getConfidence_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const AnomalousTextService_getConfidence_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AnomalousTextService_getConfidence_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_getConfidence_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AnomalousTextService_getConfidence_presult__isset {
  _AnomalousTextService_getConfidence_presult__isset() : success(false) {}
  bool success;
} _AnomalousTextService_getConfidence_presult__isset;

class AnomalousTextService_getConfidence_presult {
 public:


  virtual ~AnomalousTextService_getConfidence_presult() throw() {}

  double* success;

  _AnomalousTextService_getConfidence_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AnomalousTextService_getDocument_args {
 public:

  AnomalousTextService_getDocument_args() {
  }

  virtual ~AnomalousTextService_getDocument_args() throw() {}


  bool operator == (const AnomalousTextService_getDocument_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AnomalousTextService_getDocument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_getDocument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AnomalousTextService_getDocument_pargs {
 public:


  virtual ~AnomalousTextService_getDocument_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AnomalousTextService_getDocument_result__isset {
  _AnomalousTextService_getDocument_result__isset() : success(false) {}
  bool success;
} _AnomalousTextService_getDocument_result__isset;

class AnomalousTextService_getDocument_result {
 public:

  AnomalousTextService_getDocument_result() {
  }

  virtual ~AnomalousTextService_getDocument_result() throw() {}

  Document success;

  _AnomalousTextService_getDocument_result__isset __isset;

  void __set_success(const Document& val) {
    success = val;
  }

  bool operator == (const AnomalousTextService_getDocument_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AnomalousTextService_getDocument_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_getDocument_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AnomalousTextService_getDocument_presult__isset {
  _AnomalousTextService_getDocument_presult__isset() : success(false) {}
  bool success;
} _AnomalousTextService_getDocument_presult__isset;

class AnomalousTextService_getDocument_presult {
 public:


  virtual ~AnomalousTextService_getDocument_presult() throw() {}

  Document* success;

  _AnomalousTextService_getDocument_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AnomalousTextService_getExplanation_args {
 public:

  AnomalousTextService_getExplanation_args() {
  }

  virtual ~AnomalousTextService_getExplanation_args() throw() {}


  bool operator == (const AnomalousTextService_getExplanation_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AnomalousTextService_getExplanation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_getExplanation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AnomalousTextService_getExplanation_pargs {
 public:


  virtual ~AnomalousTextService_getExplanation_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AnomalousTextService_getExplanation_result__isset {
  _AnomalousTextService_getExplanation_result__isset() : success(false) {}
  bool success;
} _AnomalousTextService_getExplanation_result__isset;

class AnomalousTextService_getExplanation_result {
 public:

  AnomalousTextService_getExplanation_result() : success() {
  }

  virtual ~AnomalousTextService_getExplanation_result() throw() {}

  std::string success;

  _AnomalousTextService_getExplanation_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AnomalousTextService_getExplanation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AnomalousTextService_getExplanation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_getExplanation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AnomalousTextService_getExplanation_presult__isset {
  _AnomalousTextService_getExplanation_presult__isset() : success(false) {}
  bool success;
} _AnomalousTextService_getExplanation_presult__isset;

class AnomalousTextService_getExplanation_presult {
 public:


  virtual ~AnomalousTextService_getExplanation_presult() throw() {}

  std::string* success;

  _AnomalousTextService_getExplanation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AnomalousTextService_setExplanation_args__isset {
  _AnomalousTextService_setExplanation_args__isset() : explanation(false) {}
  bool explanation;
} _AnomalousTextService_setExplanation_args__isset;

class AnomalousTextService_setExplanation_args {
 public:

  AnomalousTextService_setExplanation_args() : explanation() {
  }

  virtual ~AnomalousTextService_setExplanation_args() throw() {}

  std::string explanation;

  _AnomalousTextService_setExplanation_args__isset __isset;

  void __set_explanation(const std::string& val) {
    explanation = val;
  }

  bool operator == (const AnomalousTextService_setExplanation_args & rhs) const
  {
    if (!(explanation == rhs.explanation))
      return false;
    return true;
  }
  bool operator != (const AnomalousTextService_setExplanation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_setExplanation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AnomalousTextService_setExplanation_pargs {
 public:


  virtual ~AnomalousTextService_setExplanation_pargs() throw() {}

  const std::string* explanation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AnomalousTextService_setExplanation_result {
 public:

  AnomalousTextService_setExplanation_result() {
  }

  virtual ~AnomalousTextService_setExplanation_result() throw() {}


  bool operator == (const AnomalousTextService_setExplanation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AnomalousTextService_setExplanation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnomalousTextService_setExplanation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AnomalousTextService_setExplanation_presult {
 public:


  virtual ~AnomalousTextService_setExplanation_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AnomalousTextServiceClient : virtual public AnomalousTextServiceIf, public ItemServiceClient {
 public:
  AnomalousTextServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  AnomalousTextServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getConfidence();
  void send_getConfidence();
  double recv_getConfidence();
  void getDocument(Document& _return);
  void send_getDocument();
  void recv_getDocument(Document& _return);
  void getExplanation(std::string& _return);
  void send_getExplanation();
  void recv_getExplanation(std::string& _return);
  void setExplanation(const std::string& explanation);
  void send_setExplanation(const std::string& explanation);
  void recv_setExplanation();
};

class AnomalousTextServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<AnomalousTextServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AnomalousTextServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getConfidence(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExplanation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setExplanation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AnomalousTextServiceProcessor(boost::shared_ptr<AnomalousTextServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["getConfidence"] = &AnomalousTextServiceProcessor::process_getConfidence;
    processMap_["getDocument"] = &AnomalousTextServiceProcessor::process_getDocument;
    processMap_["getExplanation"] = &AnomalousTextServiceProcessor::process_getExplanation;
    processMap_["setExplanation"] = &AnomalousTextServiceProcessor::process_setExplanation;
  }

  virtual ~AnomalousTextServiceProcessor() {}
};

class AnomalousTextServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AnomalousTextServiceProcessorFactory(const ::boost::shared_ptr< AnomalousTextServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AnomalousTextServiceIfFactory > handlerFactory_;
};

class AnomalousTextServiceMultiface : virtual public AnomalousTextServiceIf, public ItemServiceMultiface {
 public:
  AnomalousTextServiceMultiface(std::vector<boost::shared_ptr<AnomalousTextServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<AnomalousTextServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~AnomalousTextServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AnomalousTextServiceIf> > ifaces_;
  AnomalousTextServiceMultiface() {}
  void add(boost::shared_ptr<AnomalousTextServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  double getConfidence() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getConfidence();
    }
    return ifaces_[i]->getConfidence();
  }

  void getDocument(Document& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocument(_return);
    }
    ifaces_[i]->getDocument(_return);
    return;
  }

  void getExplanation(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExplanation(_return);
    }
    ifaces_[i]->getExplanation(_return);
    return;
  }

  void setExplanation(const std::string& explanation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setExplanation(explanation);
    }
    ifaces_[i]->setExplanation(explanation);
  }

};

}}} // namespace

#endif