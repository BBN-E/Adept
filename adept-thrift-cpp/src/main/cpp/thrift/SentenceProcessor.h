/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SentenceProcessor_H
#define SentenceProcessor_H

#include <thrift/TDispatchProcessor.h>
#include "module_types.h"

namespace thrift { namespace adept { namespace module {

class SentenceProcessorIf {
 public:
  virtual ~SentenceProcessorIf() {}
  virtual void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Sentence& sentence) = 0;
  virtual int64_t processAsync(const  ::thrift::adept::common::Sentence& sentence) = 0;
  virtual bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents) = 0;
};

class SentenceProcessorIfFactory {
 public:
  typedef SentenceProcessorIf Handler;

  virtual ~SentenceProcessorIfFactory() {}

  virtual SentenceProcessorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SentenceProcessorIf* /* handler */) = 0;
};

class SentenceProcessorIfSingletonFactory : virtual public SentenceProcessorIfFactory {
 public:
  SentenceProcessorIfSingletonFactory(const boost::shared_ptr<SentenceProcessorIf>& iface) : iface_(iface) {}
  virtual ~SentenceProcessorIfSingletonFactory() {}

  virtual SentenceProcessorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SentenceProcessorIf* /* handler */) {}

 protected:
  boost::shared_ptr<SentenceProcessorIf> iface_;
};

class SentenceProcessorNull : virtual public SentenceProcessorIf {
 public:
  virtual ~SentenceProcessorNull() {}
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & /* _return */, const  ::thrift::adept::common::Sentence& /* sentence */) {
    return;
  }
  int64_t processAsync(const  ::thrift::adept::common::Sentence& /* sentence */) {
    int64_t _return = 0;
    return _return;
  }
  bool tryGetResult(const int64_t /* requestId */, const std::vector< ::thrift::adept::common::HltContentUnion> & /* hltContents */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SentenceProcessor_process_args__isset {
  _SentenceProcessor_process_args__isset() : sentence(false) {}
  bool sentence;
} _SentenceProcessor_process_args__isset;

class SentenceProcessor_process_args {
 public:

  SentenceProcessor_process_args() {
  }

  virtual ~SentenceProcessor_process_args() throw() {}

   ::thrift::adept::common::Sentence sentence;

  _SentenceProcessor_process_args__isset __isset;

  void __set_sentence(const  ::thrift::adept::common::Sentence& val) {
    sentence = val;
  }

  bool operator == (const SentenceProcessor_process_args & rhs) const
  {
    if (!(sentence == rhs.sentence))
      return false;
    return true;
  }
  bool operator != (const SentenceProcessor_process_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceProcessor_process_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SentenceProcessor_process_pargs {
 public:


  virtual ~SentenceProcessor_process_pargs() throw() {}

  const  ::thrift::adept::common::Sentence* sentence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceProcessor_process_result__isset {
  _SentenceProcessor_process_result__isset() : success(false) {}
  bool success;
} _SentenceProcessor_process_result__isset;

class SentenceProcessor_process_result {
 public:

  SentenceProcessor_process_result() {
  }

  virtual ~SentenceProcessor_process_result() throw() {}

  std::vector< ::thrift::adept::common::HltContentUnion>  success;

  _SentenceProcessor_process_result__isset __isset;

  void __set_success(const std::vector< ::thrift::adept::common::HltContentUnion> & val) {
    success = val;
  }

  bool operator == (const SentenceProcessor_process_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SentenceProcessor_process_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceProcessor_process_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceProcessor_process_presult__isset {
  _SentenceProcessor_process_presult__isset() : success(false) {}
  bool success;
} _SentenceProcessor_process_presult__isset;

class SentenceProcessor_process_presult {
 public:


  virtual ~SentenceProcessor_process_presult() throw() {}

  std::vector< ::thrift::adept::common::HltContentUnion> * success;

  _SentenceProcessor_process_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SentenceProcessor_processAsync_args__isset {
  _SentenceProcessor_processAsync_args__isset() : sentence(false) {}
  bool sentence;
} _SentenceProcessor_processAsync_args__isset;

class SentenceProcessor_processAsync_args {
 public:

  SentenceProcessor_processAsync_args() {
  }

  virtual ~SentenceProcessor_processAsync_args() throw() {}

   ::thrift::adept::common::Sentence sentence;

  _SentenceProcessor_processAsync_args__isset __isset;

  void __set_sentence(const  ::thrift::adept::common::Sentence& val) {
    sentence = val;
  }

  bool operator == (const SentenceProcessor_processAsync_args & rhs) const
  {
    if (!(sentence == rhs.sentence))
      return false;
    return true;
  }
  bool operator != (const SentenceProcessor_processAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceProcessor_processAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SentenceProcessor_processAsync_pargs {
 public:


  virtual ~SentenceProcessor_processAsync_pargs() throw() {}

  const  ::thrift::adept::common::Sentence* sentence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceProcessor_processAsync_result__isset {
  _SentenceProcessor_processAsync_result__isset() : success(false) {}
  bool success;
} _SentenceProcessor_processAsync_result__isset;

class SentenceProcessor_processAsync_result {
 public:

  SentenceProcessor_processAsync_result() : success(0) {
  }

  virtual ~SentenceProcessor_processAsync_result() throw() {}

  int64_t success;

  _SentenceProcessor_processAsync_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SentenceProcessor_processAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SentenceProcessor_processAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceProcessor_processAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceProcessor_processAsync_presult__isset {
  _SentenceProcessor_processAsync_presult__isset() : success(false) {}
  bool success;
} _SentenceProcessor_processAsync_presult__isset;

class SentenceProcessor_processAsync_presult {
 public:


  virtual ~SentenceProcessor_processAsync_presult() throw() {}

  int64_t* success;

  _SentenceProcessor_processAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SentenceProcessor_tryGetResult_args__isset {
  _SentenceProcessor_tryGetResult_args__isset() : requestId(false), hltContents(false) {}
  bool requestId;
  bool hltContents;
} _SentenceProcessor_tryGetResult_args__isset;

class SentenceProcessor_tryGetResult_args {
 public:

  SentenceProcessor_tryGetResult_args() : requestId(0) {
  }

  virtual ~SentenceProcessor_tryGetResult_args() throw() {}

  int64_t requestId;
  std::vector< ::thrift::adept::common::HltContentUnion>  hltContents;

  _SentenceProcessor_tryGetResult_args__isset __isset;

  void __set_requestId(const int64_t val) {
    requestId = val;
  }

  void __set_hltContents(const std::vector< ::thrift::adept::common::HltContentUnion> & val) {
    hltContents = val;
  }

  bool operator == (const SentenceProcessor_tryGetResult_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(hltContents == rhs.hltContents))
      return false;
    return true;
  }
  bool operator != (const SentenceProcessor_tryGetResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceProcessor_tryGetResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SentenceProcessor_tryGetResult_pargs {
 public:


  virtual ~SentenceProcessor_tryGetResult_pargs() throw() {}

  const int64_t* requestId;
  const std::vector< ::thrift::adept::common::HltContentUnion> * hltContents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceProcessor_tryGetResult_result__isset {
  _SentenceProcessor_tryGetResult_result__isset() : success(false) {}
  bool success;
} _SentenceProcessor_tryGetResult_result__isset;

class SentenceProcessor_tryGetResult_result {
 public:

  SentenceProcessor_tryGetResult_result() : success(0) {
  }

  virtual ~SentenceProcessor_tryGetResult_result() throw() {}

  bool success;

  _SentenceProcessor_tryGetResult_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SentenceProcessor_tryGetResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SentenceProcessor_tryGetResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentenceProcessor_tryGetResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentenceProcessor_tryGetResult_presult__isset {
  _SentenceProcessor_tryGetResult_presult__isset() : success(false) {}
  bool success;
} _SentenceProcessor_tryGetResult_presult__isset;

class SentenceProcessor_tryGetResult_presult {
 public:


  virtual ~SentenceProcessor_tryGetResult_presult() throw() {}

  bool* success;

  _SentenceProcessor_tryGetResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SentenceProcessorClient : virtual public SentenceProcessorIf {
 public:
  SentenceProcessorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SentenceProcessorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Sentence& sentence);
  void send_process(const  ::thrift::adept::common::Sentence& sentence);
  void recv_process(std::vector< ::thrift::adept::common::HltContentUnion> & _return);
  int64_t processAsync(const  ::thrift::adept::common::Sentence& sentence);
  void send_processAsync(const  ::thrift::adept::common::Sentence& sentence);
  int64_t recv_processAsync();
  bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents);
  void send_tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents);
  bool recv_tryGetResult();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SentenceProcessorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SentenceProcessorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SentenceProcessorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_process(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_processAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tryGetResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SentenceProcessorProcessor(boost::shared_ptr<SentenceProcessorIf> iface) :
    iface_(iface) {
    processMap_["process"] = &SentenceProcessorProcessor::process_process;
    processMap_["processAsync"] = &SentenceProcessorProcessor::process_processAsync;
    processMap_["tryGetResult"] = &SentenceProcessorProcessor::process_tryGetResult;
  }

  virtual ~SentenceProcessorProcessor() {}
};

class SentenceProcessorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SentenceProcessorProcessorFactory(const ::boost::shared_ptr< SentenceProcessorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SentenceProcessorIfFactory > handlerFactory_;
};

class SentenceProcessorMultiface : virtual public SentenceProcessorIf {
 public:
  SentenceProcessorMultiface(std::vector<boost::shared_ptr<SentenceProcessorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SentenceProcessorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SentenceProcessorIf> > ifaces_;
  SentenceProcessorMultiface() {}
  void add(boost::shared_ptr<SentenceProcessorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Sentence& sentence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->process(_return, sentence);
    }
    ifaces_[i]->process(_return, sentence);
    return;
  }

  int64_t processAsync(const  ::thrift::adept::common::Sentence& sentence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->processAsync(sentence);
    }
    return ifaces_[i]->processAsync(sentence);
  }

  bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tryGetResult(requestId, hltContents);
    }
    return ifaces_[i]->tryGetResult(requestId, hltContents);
  }

};

}}} // namespace

#endif