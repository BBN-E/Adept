/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TranslationService_H
#define TranslationService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class TranslationServiceIf {
 public:
  virtual ~TranslationServiceIf() {}
  virtual void getSourceChunk(ChunkUnion& _return) = 0;
  virtual void getTargetChunk(ChunkUnion& _return) = 0;
};

class TranslationServiceIfFactory {
 public:
  typedef TranslationServiceIf Handler;

  virtual ~TranslationServiceIfFactory() {}

  virtual TranslationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TranslationServiceIf* /* handler */) = 0;
};

class TranslationServiceIfSingletonFactory : virtual public TranslationServiceIfFactory {
 public:
  TranslationServiceIfSingletonFactory(const boost::shared_ptr<TranslationServiceIf>& iface) : iface_(iface) {}
  virtual ~TranslationServiceIfSingletonFactory() {}

  virtual TranslationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TranslationServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TranslationServiceIf> iface_;
};

class TranslationServiceNull : virtual public TranslationServiceIf {
 public:
  virtual ~TranslationServiceNull() {}
  void getSourceChunk(ChunkUnion& /* _return */) {
    return;
  }
  void getTargetChunk(ChunkUnion& /* _return */) {
    return;
  }
};


class TranslationService_getSourceChunk_args {
 public:

  TranslationService_getSourceChunk_args() {
  }

  virtual ~TranslationService_getSourceChunk_args() throw() {}


  bool operator == (const TranslationService_getSourceChunk_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TranslationService_getSourceChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranslationService_getSourceChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranslationService_getSourceChunk_pargs {
 public:


  virtual ~TranslationService_getSourceChunk_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranslationService_getSourceChunk_result__isset {
  _TranslationService_getSourceChunk_result__isset() : success(false) {}
  bool success;
} _TranslationService_getSourceChunk_result__isset;

class TranslationService_getSourceChunk_result {
 public:

  TranslationService_getSourceChunk_result() {
  }

  virtual ~TranslationService_getSourceChunk_result() throw() {}

  ChunkUnion success;

  _TranslationService_getSourceChunk_result__isset __isset;

  void __set_success(const ChunkUnion& val) {
    success = val;
  }

  bool operator == (const TranslationService_getSourceChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranslationService_getSourceChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranslationService_getSourceChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranslationService_getSourceChunk_presult__isset {
  _TranslationService_getSourceChunk_presult__isset() : success(false) {}
  bool success;
} _TranslationService_getSourceChunk_presult__isset;

class TranslationService_getSourceChunk_presult {
 public:


  virtual ~TranslationService_getSourceChunk_presult() throw() {}

  ChunkUnion* success;

  _TranslationService_getSourceChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TranslationService_getTargetChunk_args {
 public:

  TranslationService_getTargetChunk_args() {
  }

  virtual ~TranslationService_getTargetChunk_args() throw() {}


  bool operator == (const TranslationService_getTargetChunk_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TranslationService_getTargetChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranslationService_getTargetChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranslationService_getTargetChunk_pargs {
 public:


  virtual ~TranslationService_getTargetChunk_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranslationService_getTargetChunk_result__isset {
  _TranslationService_getTargetChunk_result__isset() : success(false) {}
  bool success;
} _TranslationService_getTargetChunk_result__isset;

class TranslationService_getTargetChunk_result {
 public:

  TranslationService_getTargetChunk_result() {
  }

  virtual ~TranslationService_getTargetChunk_result() throw() {}

  ChunkUnion success;

  _TranslationService_getTargetChunk_result__isset __isset;

  void __set_success(const ChunkUnion& val) {
    success = val;
  }

  bool operator == (const TranslationService_getTargetChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranslationService_getTargetChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranslationService_getTargetChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranslationService_getTargetChunk_presult__isset {
  _TranslationService_getTargetChunk_presult__isset() : success(false) {}
  bool success;
} _TranslationService_getTargetChunk_presult__isset;

class TranslationService_getTargetChunk_presult {
 public:


  virtual ~TranslationService_getTargetChunk_presult() throw() {}

  ChunkUnion* success;

  _TranslationService_getTargetChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TranslationServiceClient : virtual public TranslationServiceIf {
 public:
  TranslationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TranslationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getSourceChunk(ChunkUnion& _return);
  void send_getSourceChunk();
  void recv_getSourceChunk(ChunkUnion& _return);
  void getTargetChunk(ChunkUnion& _return);
  void send_getTargetChunk();
  void recv_getTargetChunk(ChunkUnion& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TranslationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TranslationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TranslationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getSourceChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTargetChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TranslationServiceProcessor(boost::shared_ptr<TranslationServiceIf> iface) :
    iface_(iface) {
    processMap_["getSourceChunk"] = &TranslationServiceProcessor::process_getSourceChunk;
    processMap_["getTargetChunk"] = &TranslationServiceProcessor::process_getTargetChunk;
  }

  virtual ~TranslationServiceProcessor() {}
};

class TranslationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TranslationServiceProcessorFactory(const ::boost::shared_ptr< TranslationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TranslationServiceIfFactory > handlerFactory_;
};

class TranslationServiceMultiface : virtual public TranslationServiceIf {
 public:
  TranslationServiceMultiface(std::vector<boost::shared_ptr<TranslationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TranslationServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TranslationServiceIf> > ifaces_;
  TranslationServiceMultiface() {}
  void add(boost::shared_ptr<TranslationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getSourceChunk(ChunkUnion& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSourceChunk(_return);
    }
    ifaces_[i]->getSourceChunk(_return);
    return;
  }

  void getTargetChunk(ChunkUnion& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTargetChunk(_return);
    }
    ifaces_[i]->getTargetChunk(_return);
    return;
  }

};

}}} // namespace

#endif