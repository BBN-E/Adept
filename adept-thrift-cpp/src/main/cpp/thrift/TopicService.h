/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TopicService_H
#define TopicService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class TopicServiceIf {
 public:
  virtual ~TopicServiceIf() {}
  virtual void addViewpoint(const Viewpoint& viewpoint) = 0;
  virtual void getBelief(std::string& _return) = 0;
  virtual void getName(std::string& _return) = 0;
  virtual TopicPolarity::type getPolarity() = 0;
  virtual int64_t getTopicId() = 0;
  virtual void getViewpoints(std::vector<Viewpoint> & _return) = 0;
  virtual void setBelief(const std::string& belief) = 0;
  virtual void setPolarity(const TopicPolarity::type polarity) = 0;
  virtual void setViewpoints(const std::vector<Viewpoint> & viewpoints) = 0;
};

class TopicServiceIfFactory {
 public:
  typedef TopicServiceIf Handler;

  virtual ~TopicServiceIfFactory() {}

  virtual TopicServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TopicServiceIf* /* handler */) = 0;
};

class TopicServiceIfSingletonFactory : virtual public TopicServiceIfFactory {
 public:
  TopicServiceIfSingletonFactory(const boost::shared_ptr<TopicServiceIf>& iface) : iface_(iface) {}
  virtual ~TopicServiceIfSingletonFactory() {}

  virtual TopicServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TopicServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TopicServiceIf> iface_;
};

class TopicServiceNull : virtual public TopicServiceIf {
 public:
  virtual ~TopicServiceNull() {}
  void addViewpoint(const Viewpoint& /* viewpoint */) {
    return;
  }
  void getBelief(std::string& /* _return */) {
    return;
  }
  void getName(std::string& /* _return */) {
    return;
  }
  TopicPolarity::type getPolarity() {
    TopicPolarity::type _return = (TopicPolarity::type)0;
    return _return;
  }
  int64_t getTopicId() {
    int64_t _return = 0;
    return _return;
  }
  void getViewpoints(std::vector<Viewpoint> & /* _return */) {
    return;
  }
  void setBelief(const std::string& /* belief */) {
    return;
  }
  void setPolarity(const TopicPolarity::type /* polarity */) {
    return;
  }
  void setViewpoints(const std::vector<Viewpoint> & /* viewpoints */) {
    return;
  }
};

typedef struct _TopicService_addViewpoint_args__isset {
  _TopicService_addViewpoint_args__isset() : viewpoint(false) {}
  bool viewpoint;
} _TopicService_addViewpoint_args__isset;

class TopicService_addViewpoint_args {
 public:

  TopicService_addViewpoint_args() {
  }

  virtual ~TopicService_addViewpoint_args() throw() {}

  Viewpoint viewpoint;

  _TopicService_addViewpoint_args__isset __isset;

  void __set_viewpoint(const Viewpoint& val) {
    viewpoint = val;
  }

  bool operator == (const TopicService_addViewpoint_args & rhs) const
  {
    if (!(viewpoint == rhs.viewpoint))
      return false;
    return true;
  }
  bool operator != (const TopicService_addViewpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_addViewpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_addViewpoint_pargs {
 public:


  virtual ~TopicService_addViewpoint_pargs() throw() {}

  const Viewpoint* viewpoint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_addViewpoint_result {
 public:

  TopicService_addViewpoint_result() {
  }

  virtual ~TopicService_addViewpoint_result() throw() {}


  bool operator == (const TopicService_addViewpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_addViewpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_addViewpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_addViewpoint_presult {
 public:


  virtual ~TopicService_addViewpoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TopicService_getBelief_args {
 public:

  TopicService_getBelief_args() {
  }

  virtual ~TopicService_getBelief_args() throw() {}


  bool operator == (const TopicService_getBelief_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_getBelief_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getBelief_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_getBelief_pargs {
 public:


  virtual ~TopicService_getBelief_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getBelief_result__isset {
  _TopicService_getBelief_result__isset() : success(false) {}
  bool success;
} _TopicService_getBelief_result__isset;

class TopicService_getBelief_result {
 public:

  TopicService_getBelief_result() : success() {
  }

  virtual ~TopicService_getBelief_result() throw() {}

  std::string success;

  _TopicService_getBelief_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TopicService_getBelief_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TopicService_getBelief_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getBelief_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getBelief_presult__isset {
  _TopicService_getBelief_presult__isset() : success(false) {}
  bool success;
} _TopicService_getBelief_presult__isset;

class TopicService_getBelief_presult {
 public:


  virtual ~TopicService_getBelief_presult() throw() {}

  std::string* success;

  _TopicService_getBelief_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TopicService_getName_args {
 public:

  TopicService_getName_args() {
  }

  virtual ~TopicService_getName_args() throw() {}


  bool operator == (const TopicService_getName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_getName_pargs {
 public:


  virtual ~TopicService_getName_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getName_result__isset {
  _TopicService_getName_result__isset() : success(false) {}
  bool success;
} _TopicService_getName_result__isset;

class TopicService_getName_result {
 public:

  TopicService_getName_result() : success() {
  }

  virtual ~TopicService_getName_result() throw() {}

  std::string success;

  _TopicService_getName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TopicService_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TopicService_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getName_presult__isset {
  _TopicService_getName_presult__isset() : success(false) {}
  bool success;
} _TopicService_getName_presult__isset;

class TopicService_getName_presult {
 public:


  virtual ~TopicService_getName_presult() throw() {}

  std::string* success;

  _TopicService_getName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TopicService_getPolarity_args {
 public:

  TopicService_getPolarity_args() {
  }

  virtual ~TopicService_getPolarity_args() throw() {}


  bool operator == (const TopicService_getPolarity_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_getPolarity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getPolarity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_getPolarity_pargs {
 public:


  virtual ~TopicService_getPolarity_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getPolarity_result__isset {
  _TopicService_getPolarity_result__isset() : success(false) {}
  bool success;
} _TopicService_getPolarity_result__isset;

class TopicService_getPolarity_result {
 public:

  TopicService_getPolarity_result() : success((TopicPolarity::type)0) {
  }

  virtual ~TopicService_getPolarity_result() throw() {}

  TopicPolarity::type success;

  _TopicService_getPolarity_result__isset __isset;

  void __set_success(const TopicPolarity::type val) {
    success = val;
  }

  bool operator == (const TopicService_getPolarity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TopicService_getPolarity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getPolarity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getPolarity_presult__isset {
  _TopicService_getPolarity_presult__isset() : success(false) {}
  bool success;
} _TopicService_getPolarity_presult__isset;

class TopicService_getPolarity_presult {
 public:


  virtual ~TopicService_getPolarity_presult() throw() {}

  TopicPolarity::type* success;

  _TopicService_getPolarity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TopicService_getTopicId_args {
 public:

  TopicService_getTopicId_args() {
  }

  virtual ~TopicService_getTopicId_args() throw() {}


  bool operator == (const TopicService_getTopicId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_getTopicId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getTopicId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_getTopicId_pargs {
 public:


  virtual ~TopicService_getTopicId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getTopicId_result__isset {
  _TopicService_getTopicId_result__isset() : success(false) {}
  bool success;
} _TopicService_getTopicId_result__isset;

class TopicService_getTopicId_result {
 public:

  TopicService_getTopicId_result() : success(0) {
  }

  virtual ~TopicService_getTopicId_result() throw() {}

  int64_t success;

  _TopicService_getTopicId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const TopicService_getTopicId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TopicService_getTopicId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getTopicId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getTopicId_presult__isset {
  _TopicService_getTopicId_presult__isset() : success(false) {}
  bool success;
} _TopicService_getTopicId_presult__isset;

class TopicService_getTopicId_presult {
 public:


  virtual ~TopicService_getTopicId_presult() throw() {}

  int64_t* success;

  _TopicService_getTopicId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TopicService_getViewpoints_args {
 public:

  TopicService_getViewpoints_args() {
  }

  virtual ~TopicService_getViewpoints_args() throw() {}


  bool operator == (const TopicService_getViewpoints_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_getViewpoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getViewpoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_getViewpoints_pargs {
 public:


  virtual ~TopicService_getViewpoints_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getViewpoints_result__isset {
  _TopicService_getViewpoints_result__isset() : success(false) {}
  bool success;
} _TopicService_getViewpoints_result__isset;

class TopicService_getViewpoints_result {
 public:

  TopicService_getViewpoints_result() {
  }

  virtual ~TopicService_getViewpoints_result() throw() {}

  std::vector<Viewpoint>  success;

  _TopicService_getViewpoints_result__isset __isset;

  void __set_success(const std::vector<Viewpoint> & val) {
    success = val;
  }

  bool operator == (const TopicService_getViewpoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TopicService_getViewpoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_getViewpoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_getViewpoints_presult__isset {
  _TopicService_getViewpoints_presult__isset() : success(false) {}
  bool success;
} _TopicService_getViewpoints_presult__isset;

class TopicService_getViewpoints_presult {
 public:


  virtual ~TopicService_getViewpoints_presult() throw() {}

  std::vector<Viewpoint> * success;

  _TopicService_getViewpoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TopicService_setBelief_args__isset {
  _TopicService_setBelief_args__isset() : belief(false) {}
  bool belief;
} _TopicService_setBelief_args__isset;

class TopicService_setBelief_args {
 public:

  TopicService_setBelief_args() : belief() {
  }

  virtual ~TopicService_setBelief_args() throw() {}

  std::string belief;

  _TopicService_setBelief_args__isset __isset;

  void __set_belief(const std::string& val) {
    belief = val;
  }

  bool operator == (const TopicService_setBelief_args & rhs) const
  {
    if (!(belief == rhs.belief))
      return false;
    return true;
  }
  bool operator != (const TopicService_setBelief_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_setBelief_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setBelief_pargs {
 public:


  virtual ~TopicService_setBelief_pargs() throw() {}

  const std::string* belief;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setBelief_result {
 public:

  TopicService_setBelief_result() {
  }

  virtual ~TopicService_setBelief_result() throw() {}


  bool operator == (const TopicService_setBelief_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_setBelief_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_setBelief_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setBelief_presult {
 public:


  virtual ~TopicService_setBelief_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TopicService_setPolarity_args__isset {
  _TopicService_setPolarity_args__isset() : polarity(false) {}
  bool polarity;
} _TopicService_setPolarity_args__isset;

class TopicService_setPolarity_args {
 public:

  TopicService_setPolarity_args() : polarity((TopicPolarity::type)0) {
  }

  virtual ~TopicService_setPolarity_args() throw() {}

  TopicPolarity::type polarity;

  _TopicService_setPolarity_args__isset __isset;

  void __set_polarity(const TopicPolarity::type val) {
    polarity = val;
  }

  bool operator == (const TopicService_setPolarity_args & rhs) const
  {
    if (!(polarity == rhs.polarity))
      return false;
    return true;
  }
  bool operator != (const TopicService_setPolarity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_setPolarity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setPolarity_pargs {
 public:


  virtual ~TopicService_setPolarity_pargs() throw() {}

  const TopicPolarity::type* polarity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setPolarity_result {
 public:

  TopicService_setPolarity_result() {
  }

  virtual ~TopicService_setPolarity_result() throw() {}


  bool operator == (const TopicService_setPolarity_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_setPolarity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_setPolarity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setPolarity_presult {
 public:


  virtual ~TopicService_setPolarity_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TopicService_setViewpoints_args__isset {
  _TopicService_setViewpoints_args__isset() : viewpoints(false) {}
  bool viewpoints;
} _TopicService_setViewpoints_args__isset;

class TopicService_setViewpoints_args {
 public:

  TopicService_setViewpoints_args() {
  }

  virtual ~TopicService_setViewpoints_args() throw() {}

  std::vector<Viewpoint>  viewpoints;

  _TopicService_setViewpoints_args__isset __isset;

  void __set_viewpoints(const std::vector<Viewpoint> & val) {
    viewpoints = val;
  }

  bool operator == (const TopicService_setViewpoints_args & rhs) const
  {
    if (!(viewpoints == rhs.viewpoints))
      return false;
    return true;
  }
  bool operator != (const TopicService_setViewpoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_setViewpoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setViewpoints_pargs {
 public:


  virtual ~TopicService_setViewpoints_pargs() throw() {}

  const std::vector<Viewpoint> * viewpoints;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setViewpoints_result {
 public:

  TopicService_setViewpoints_result() {
  }

  virtual ~TopicService_setViewpoints_result() throw() {}


  bool operator == (const TopicService_setViewpoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_setViewpoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_setViewpoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_setViewpoints_presult {
 public:


  virtual ~TopicService_setViewpoints_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TopicServiceClient : virtual public TopicServiceIf {
 public:
  TopicServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TopicServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void addViewpoint(const Viewpoint& viewpoint);
  void send_addViewpoint(const Viewpoint& viewpoint);
  void recv_addViewpoint();
  void getBelief(std::string& _return);
  void send_getBelief();
  void recv_getBelief(std::string& _return);
  void getName(std::string& _return);
  void send_getName();
  void recv_getName(std::string& _return);
  TopicPolarity::type getPolarity();
  void send_getPolarity();
  TopicPolarity::type recv_getPolarity();
  int64_t getTopicId();
  void send_getTopicId();
  int64_t recv_getTopicId();
  void getViewpoints(std::vector<Viewpoint> & _return);
  void send_getViewpoints();
  void recv_getViewpoints(std::vector<Viewpoint> & _return);
  void setBelief(const std::string& belief);
  void send_setBelief(const std::string& belief);
  void recv_setBelief();
  void setPolarity(const TopicPolarity::type polarity);
  void send_setPolarity(const TopicPolarity::type polarity);
  void recv_setPolarity();
  void setViewpoints(const std::vector<Viewpoint> & viewpoints);
  void send_setViewpoints(const std::vector<Viewpoint> & viewpoints);
  void recv_setViewpoints();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TopicServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TopicServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TopicServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addViewpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBelief(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPolarity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTopicId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getViewpoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setBelief(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPolarity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setViewpoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TopicServiceProcessor(boost::shared_ptr<TopicServiceIf> iface) :
    iface_(iface) {
    processMap_["addViewpoint"] = &TopicServiceProcessor::process_addViewpoint;
    processMap_["getBelief"] = &TopicServiceProcessor::process_getBelief;
    processMap_["getName"] = &TopicServiceProcessor::process_getName;
    processMap_["getPolarity"] = &TopicServiceProcessor::process_getPolarity;
    processMap_["getTopicId"] = &TopicServiceProcessor::process_getTopicId;
    processMap_["getViewpoints"] = &TopicServiceProcessor::process_getViewpoints;
    processMap_["setBelief"] = &TopicServiceProcessor::process_setBelief;
    processMap_["setPolarity"] = &TopicServiceProcessor::process_setPolarity;
    processMap_["setViewpoints"] = &TopicServiceProcessor::process_setViewpoints;
  }

  virtual ~TopicServiceProcessor() {}
};

class TopicServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TopicServiceProcessorFactory(const ::boost::shared_ptr< TopicServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TopicServiceIfFactory > handlerFactory_;
};

class TopicServiceMultiface : virtual public TopicServiceIf {
 public:
  TopicServiceMultiface(std::vector<boost::shared_ptr<TopicServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TopicServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TopicServiceIf> > ifaces_;
  TopicServiceMultiface() {}
  void add(boost::shared_ptr<TopicServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void addViewpoint(const Viewpoint& viewpoint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addViewpoint(viewpoint);
    }
    ifaces_[i]->addViewpoint(viewpoint);
  }

  void getBelief(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBelief(_return);
    }
    ifaces_[i]->getBelief(_return);
    return;
  }

  void getName(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getName(_return);
    }
    ifaces_[i]->getName(_return);
    return;
  }

  TopicPolarity::type getPolarity() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPolarity();
    }
    return ifaces_[i]->getPolarity();
  }

  int64_t getTopicId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTopicId();
    }
    return ifaces_[i]->getTopicId();
  }

  void getViewpoints(std::vector<Viewpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getViewpoints(_return);
    }
    ifaces_[i]->getViewpoints(_return);
    return;
  }

  void setBelief(const std::string& belief) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setBelief(belief);
    }
    ifaces_[i]->setBelief(belief);
  }

  void setPolarity(const TopicPolarity::type polarity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPolarity(polarity);
    }
    ifaces_[i]->setPolarity(polarity);
  }

  void setViewpoints(const std::vector<Viewpoint> & viewpoints) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setViewpoints(viewpoints);
    }
    ifaces_[i]->setViewpoints(viewpoints);
  }

};

}}} // namespace

#endif
