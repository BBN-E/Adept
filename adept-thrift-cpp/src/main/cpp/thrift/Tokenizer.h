/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Tokenizer_H
#define Tokenizer_H

#include <thrift/TDispatchProcessor.h>
#include "utilities_types.h"

namespace thrift { namespace adept { namespace utilities {

class TokenizerIf {
 public:
  virtual ~TokenizerIf() {}
  virtual void tokenize( ::thrift::adept::common::TokenStream& _return, const std::string& text, const  ::thrift::adept::common::Document& document) = 0;
};

class TokenizerIfFactory {
 public:
  typedef TokenizerIf Handler;

  virtual ~TokenizerIfFactory() {}

  virtual TokenizerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TokenizerIf* /* handler */) = 0;
};

class TokenizerIfSingletonFactory : virtual public TokenizerIfFactory {
 public:
  TokenizerIfSingletonFactory(const boost::shared_ptr<TokenizerIf>& iface) : iface_(iface) {}
  virtual ~TokenizerIfSingletonFactory() {}

  virtual TokenizerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TokenizerIf* /* handler */) {}

 protected:
  boost::shared_ptr<TokenizerIf> iface_;
};

class TokenizerNull : virtual public TokenizerIf {
 public:
  virtual ~TokenizerNull() {}
  void tokenize( ::thrift::adept::common::TokenStream& /* _return */, const std::string& /* text */, const  ::thrift::adept::common::Document& /* document */) {
    return;
  }
};

typedef struct _Tokenizer_tokenize_args__isset {
  _Tokenizer_tokenize_args__isset() : text(false), document(false) {}
  bool text;
  bool document;
} _Tokenizer_tokenize_args__isset;

class Tokenizer_tokenize_args {
 public:

  Tokenizer_tokenize_args() : text() {
  }

  virtual ~Tokenizer_tokenize_args() throw() {}

  std::string text;
   ::thrift::adept::common::Document document;

  _Tokenizer_tokenize_args__isset __isset;

  void __set_text(const std::string& val) {
    text = val;
  }

  void __set_document(const  ::thrift::adept::common::Document& val) {
    document = val;
  }

  bool operator == (const Tokenizer_tokenize_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(document == rhs.document))
      return false;
    return true;
  }
  bool operator != (const Tokenizer_tokenize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tokenizer_tokenize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tokenizer_tokenize_pargs {
 public:


  virtual ~Tokenizer_tokenize_pargs() throw() {}

  const std::string* text;
  const  ::thrift::adept::common::Document* document;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tokenizer_tokenize_result__isset {
  _Tokenizer_tokenize_result__isset() : success(false) {}
  bool success;
} _Tokenizer_tokenize_result__isset;

class Tokenizer_tokenize_result {
 public:

  Tokenizer_tokenize_result() {
  }

  virtual ~Tokenizer_tokenize_result() throw() {}

   ::thrift::adept::common::TokenStream success;

  _Tokenizer_tokenize_result__isset __isset;

  void __set_success(const  ::thrift::adept::common::TokenStream& val) {
    success = val;
  }

  bool operator == (const Tokenizer_tokenize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tokenizer_tokenize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tokenizer_tokenize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tokenizer_tokenize_presult__isset {
  _Tokenizer_tokenize_presult__isset() : success(false) {}
  bool success;
} _Tokenizer_tokenize_presult__isset;

class Tokenizer_tokenize_presult {
 public:


  virtual ~Tokenizer_tokenize_presult() throw() {}

   ::thrift::adept::common::TokenStream* success;

  _Tokenizer_tokenize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TokenizerClient : virtual public TokenizerIf {
 public:
  TokenizerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TokenizerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void tokenize( ::thrift::adept::common::TokenStream& _return, const std::string& text, const  ::thrift::adept::common::Document& document);
  void send_tokenize(const std::string& text, const  ::thrift::adept::common::Document& document);
  void recv_tokenize( ::thrift::adept::common::TokenStream& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TokenizerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TokenizerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TokenizerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_tokenize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TokenizerProcessor(boost::shared_ptr<TokenizerIf> iface) :
    iface_(iface) {
    processMap_["tokenize"] = &TokenizerProcessor::process_tokenize;
  }

  virtual ~TokenizerProcessor() {}
};

class TokenizerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TokenizerProcessorFactory(const ::boost::shared_ptr< TokenizerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TokenizerIfFactory > handlerFactory_;
};

class TokenizerMultiface : virtual public TokenizerIf {
 public:
  TokenizerMultiface(std::vector<boost::shared_ptr<TokenizerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TokenizerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TokenizerIf> > ifaces_;
  TokenizerMultiface() {}
  void add(boost::shared_ptr<TokenizerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void tokenize( ::thrift::adept::common::TokenStream& _return, const std::string& text, const  ::thrift::adept::common::Document& document) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tokenize(_return, text, document);
    }
    ifaces_[i]->tokenize(_return, text, document);
    return;
  }

};

}}} // namespace

#endif
