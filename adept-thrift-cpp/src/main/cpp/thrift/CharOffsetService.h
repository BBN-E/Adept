/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CharOffsetService_H
#define CharOffsetService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class CharOffsetServiceIf {
 public:
  virtual ~CharOffsetServiceIf() {}
  virtual int32_t getBegin() = 0;
  virtual int32_t getEnd() = 0;
};

class CharOffsetServiceIfFactory {
 public:
  typedef CharOffsetServiceIf Handler;

  virtual ~CharOffsetServiceIfFactory() {}

  virtual CharOffsetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CharOffsetServiceIf* /* handler */) = 0;
};

class CharOffsetServiceIfSingletonFactory : virtual public CharOffsetServiceIfFactory {
 public:
  CharOffsetServiceIfSingletonFactory(const boost::shared_ptr<CharOffsetServiceIf>& iface) : iface_(iface) {}
  virtual ~CharOffsetServiceIfSingletonFactory() {}

  virtual CharOffsetServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CharOffsetServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CharOffsetServiceIf> iface_;
};

class CharOffsetServiceNull : virtual public CharOffsetServiceIf {
 public:
  virtual ~CharOffsetServiceNull() {}
  int32_t getBegin() {
    int32_t _return = 0;
    return _return;
  }
  int32_t getEnd() {
    int32_t _return = 0;
    return _return;
  }
};


class CharOffsetService_getBegin_args {
 public:

  CharOffsetService_getBegin_args() {
  }

  virtual ~CharOffsetService_getBegin_args() throw() {}


  bool operator == (const CharOffsetService_getBegin_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CharOffsetService_getBegin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CharOffsetService_getBegin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CharOffsetService_getBegin_pargs {
 public:


  virtual ~CharOffsetService_getBegin_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CharOffsetService_getBegin_result__isset {
  _CharOffsetService_getBegin_result__isset() : success(false) {}
  bool success;
} _CharOffsetService_getBegin_result__isset;

class CharOffsetService_getBegin_result {
 public:

  CharOffsetService_getBegin_result() : success(0) {
  }

  virtual ~CharOffsetService_getBegin_result() throw() {}

  int32_t success;

  _CharOffsetService_getBegin_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const CharOffsetService_getBegin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CharOffsetService_getBegin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CharOffsetService_getBegin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CharOffsetService_getBegin_presult__isset {
  _CharOffsetService_getBegin_presult__isset() : success(false) {}
  bool success;
} _CharOffsetService_getBegin_presult__isset;

class CharOffsetService_getBegin_presult {
 public:


  virtual ~CharOffsetService_getBegin_presult() throw() {}

  int32_t* success;

  _CharOffsetService_getBegin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CharOffsetService_getEnd_args {
 public:

  CharOffsetService_getEnd_args() {
  }

  virtual ~CharOffsetService_getEnd_args() throw() {}


  bool operator == (const CharOffsetService_getEnd_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CharOffsetService_getEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CharOffsetService_getEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CharOffsetService_getEnd_pargs {
 public:


  virtual ~CharOffsetService_getEnd_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CharOffsetService_getEnd_result__isset {
  _CharOffsetService_getEnd_result__isset() : success(false) {}
  bool success;
} _CharOffsetService_getEnd_result__isset;

class CharOffsetService_getEnd_result {
 public:

  CharOffsetService_getEnd_result() : success(0) {
  }

  virtual ~CharOffsetService_getEnd_result() throw() {}

  int32_t success;

  _CharOffsetService_getEnd_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const CharOffsetService_getEnd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CharOffsetService_getEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CharOffsetService_getEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CharOffsetService_getEnd_presult__isset {
  _CharOffsetService_getEnd_presult__isset() : success(false) {}
  bool success;
} _CharOffsetService_getEnd_presult__isset;

class CharOffsetService_getEnd_presult {
 public:


  virtual ~CharOffsetService_getEnd_presult() throw() {}

  int32_t* success;

  _CharOffsetService_getEnd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CharOffsetServiceClient : virtual public CharOffsetServiceIf {
 public:
  CharOffsetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CharOffsetServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t getBegin();
  void send_getBegin();
  int32_t recv_getBegin();
  int32_t getEnd();
  void send_getEnd();
  int32_t recv_getEnd();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CharOffsetServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CharOffsetServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CharOffsetServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getBegin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CharOffsetServiceProcessor(boost::shared_ptr<CharOffsetServiceIf> iface) :
    iface_(iface) {
    processMap_["getBegin"] = &CharOffsetServiceProcessor::process_getBegin;
    processMap_["getEnd"] = &CharOffsetServiceProcessor::process_getEnd;
  }

  virtual ~CharOffsetServiceProcessor() {}
};

class CharOffsetServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CharOffsetServiceProcessorFactory(const ::boost::shared_ptr< CharOffsetServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CharOffsetServiceIfFactory > handlerFactory_;
};

class CharOffsetServiceMultiface : virtual public CharOffsetServiceIf {
 public:
  CharOffsetServiceMultiface(std::vector<boost::shared_ptr<CharOffsetServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CharOffsetServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CharOffsetServiceIf> > ifaces_;
  CharOffsetServiceMultiface() {}
  void add(boost::shared_ptr<CharOffsetServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t getBegin() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBegin();
    }
    return ifaces_[i]->getBegin();
  }

  int32_t getEnd() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEnd();
    }
    return ifaces_[i]->getEnd();
  }

};

}}} // namespace

#endif
