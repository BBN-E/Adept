/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TokenStreamService_H
#define TokenStreamService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class TokenStreamServiceIf {
 public:
  virtual ~TokenStreamServiceIf() {}
  virtual ChannelName::type getChannelName() = 0;
  virtual ContentType::type getContentType() = 0;
  virtual void getDocument(Document& _return) = 0;
  virtual void getLanguage(std::string& _return) = 0;
  virtual int64_t getSerialversionuid() = 0;
  virtual SpeechUnit::type getSpeechUnit() = 0;
  virtual void getTextValue(std::string& _return) = 0;
  virtual TokenizerType::type getTokenizerType() = 0;
  virtual TranscriptType::type getTranscriptType() = 0;
  virtual TranslatorName::type getTranslatorName() = 0;
  virtual void setAsrName(const AsrName::type asrName) = 0;
  virtual void setDocument(const Document& document) = 0;
  virtual void setSpeechUnit(const SpeechUnit::type speechUnit) = 0;
  virtual void setTranslatorName(const TranslatorName::type translatorName) = 0;
};

class TokenStreamServiceIfFactory {
 public:
  typedef TokenStreamServiceIf Handler;

  virtual ~TokenStreamServiceIfFactory() {}

  virtual TokenStreamServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TokenStreamServiceIf* /* handler */) = 0;
};

class TokenStreamServiceIfSingletonFactory : virtual public TokenStreamServiceIfFactory {
 public:
  TokenStreamServiceIfSingletonFactory(const boost::shared_ptr<TokenStreamServiceIf>& iface) : iface_(iface) {}
  virtual ~TokenStreamServiceIfSingletonFactory() {}

  virtual TokenStreamServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TokenStreamServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TokenStreamServiceIf> iface_;
};

class TokenStreamServiceNull : virtual public TokenStreamServiceIf {
 public:
  virtual ~TokenStreamServiceNull() {}
  ChannelName::type getChannelName() {
    ChannelName::type _return = (ChannelName::type)0;
    return _return;
  }
  ContentType::type getContentType() {
    ContentType::type _return = (ContentType::type)0;
    return _return;
  }
  void getDocument(Document& /* _return */) {
    return;
  }
  void getLanguage(std::string& /* _return */) {
    return;
  }
  int64_t getSerialversionuid() {
    int64_t _return = 0;
    return _return;
  }
  SpeechUnit::type getSpeechUnit() {
    SpeechUnit::type _return = (SpeechUnit::type)0;
    return _return;
  }
  void getTextValue(std::string& /* _return */) {
    return;
  }
  TokenizerType::type getTokenizerType() {
    TokenizerType::type _return = (TokenizerType::type)0;
    return _return;
  }
  TranscriptType::type getTranscriptType() {
    TranscriptType::type _return = (TranscriptType::type)0;
    return _return;
  }
  TranslatorName::type getTranslatorName() {
    TranslatorName::type _return = (TranslatorName::type)0;
    return _return;
  }
  void setAsrName(const AsrName::type /* asrName */) {
    return;
  }
  void setDocument(const Document& /* document */) {
    return;
  }
  void setSpeechUnit(const SpeechUnit::type /* speechUnit */) {
    return;
  }
  void setTranslatorName(const TranslatorName::type /* translatorName */) {
    return;
  }
};


class TokenStreamService_getChannelName_args {
 public:

  TokenStreamService_getChannelName_args() {
  }

  virtual ~TokenStreamService_getChannelName_args() throw() {}


  bool operator == (const TokenStreamService_getChannelName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getChannelName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getChannelName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getChannelName_pargs {
 public:


  virtual ~TokenStreamService_getChannelName_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getChannelName_result__isset {
  _TokenStreamService_getChannelName_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getChannelName_result__isset;

class TokenStreamService_getChannelName_result {
 public:

  TokenStreamService_getChannelName_result() : success((ChannelName::type)0) {
  }

  virtual ~TokenStreamService_getChannelName_result() throw() {}

  ChannelName::type success;

  _TokenStreamService_getChannelName_result__isset __isset;

  void __set_success(const ChannelName::type val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getChannelName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getChannelName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getChannelName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getChannelName_presult__isset {
  _TokenStreamService_getChannelName_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getChannelName_presult__isset;

class TokenStreamService_getChannelName_presult {
 public:


  virtual ~TokenStreamService_getChannelName_presult() throw() {}

  ChannelName::type* success;

  _TokenStreamService_getChannelName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getContentType_args {
 public:

  TokenStreamService_getContentType_args() {
  }

  virtual ~TokenStreamService_getContentType_args() throw() {}


  bool operator == (const TokenStreamService_getContentType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getContentType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getContentType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getContentType_pargs {
 public:


  virtual ~TokenStreamService_getContentType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getContentType_result__isset {
  _TokenStreamService_getContentType_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getContentType_result__isset;

class TokenStreamService_getContentType_result {
 public:

  TokenStreamService_getContentType_result() : success((ContentType::type)0) {
  }

  virtual ~TokenStreamService_getContentType_result() throw() {}

  ContentType::type success;

  _TokenStreamService_getContentType_result__isset __isset;

  void __set_success(const ContentType::type val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getContentType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getContentType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getContentType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getContentType_presult__isset {
  _TokenStreamService_getContentType_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getContentType_presult__isset;

class TokenStreamService_getContentType_presult {
 public:


  virtual ~TokenStreamService_getContentType_presult() throw() {}

  ContentType::type* success;

  _TokenStreamService_getContentType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getDocument_args {
 public:

  TokenStreamService_getDocument_args() {
  }

  virtual ~TokenStreamService_getDocument_args() throw() {}


  bool operator == (const TokenStreamService_getDocument_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getDocument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getDocument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getDocument_pargs {
 public:


  virtual ~TokenStreamService_getDocument_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getDocument_result__isset {
  _TokenStreamService_getDocument_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getDocument_result__isset;

class TokenStreamService_getDocument_result {
 public:

  TokenStreamService_getDocument_result() {
  }

  virtual ~TokenStreamService_getDocument_result() throw() {}

  Document success;

  _TokenStreamService_getDocument_result__isset __isset;

  void __set_success(const Document& val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getDocument_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getDocument_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getDocument_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getDocument_presult__isset {
  _TokenStreamService_getDocument_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getDocument_presult__isset;

class TokenStreamService_getDocument_presult {
 public:


  virtual ~TokenStreamService_getDocument_presult() throw() {}

  Document* success;

  _TokenStreamService_getDocument_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getLanguage_args {
 public:

  TokenStreamService_getLanguage_args() {
  }

  virtual ~TokenStreamService_getLanguage_args() throw() {}


  bool operator == (const TokenStreamService_getLanguage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getLanguage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getLanguage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getLanguage_pargs {
 public:


  virtual ~TokenStreamService_getLanguage_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getLanguage_result__isset {
  _TokenStreamService_getLanguage_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getLanguage_result__isset;

class TokenStreamService_getLanguage_result {
 public:

  TokenStreamService_getLanguage_result() : success() {
  }

  virtual ~TokenStreamService_getLanguage_result() throw() {}

  std::string success;

  _TokenStreamService_getLanguage_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getLanguage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getLanguage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getLanguage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getLanguage_presult__isset {
  _TokenStreamService_getLanguage_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getLanguage_presult__isset;

class TokenStreamService_getLanguage_presult {
 public:


  virtual ~TokenStreamService_getLanguage_presult() throw() {}

  std::string* success;

  _TokenStreamService_getLanguage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getSerialversionuid_args {
 public:

  TokenStreamService_getSerialversionuid_args() {
  }

  virtual ~TokenStreamService_getSerialversionuid_args() throw() {}


  bool operator == (const TokenStreamService_getSerialversionuid_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getSerialversionuid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getSerialversionuid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getSerialversionuid_pargs {
 public:


  virtual ~TokenStreamService_getSerialversionuid_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getSerialversionuid_result__isset {
  _TokenStreamService_getSerialversionuid_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getSerialversionuid_result__isset;

class TokenStreamService_getSerialversionuid_result {
 public:

  TokenStreamService_getSerialversionuid_result() : success(0) {
  }

  virtual ~TokenStreamService_getSerialversionuid_result() throw() {}

  int64_t success;

  _TokenStreamService_getSerialversionuid_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getSerialversionuid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getSerialversionuid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getSerialversionuid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getSerialversionuid_presult__isset {
  _TokenStreamService_getSerialversionuid_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getSerialversionuid_presult__isset;

class TokenStreamService_getSerialversionuid_presult {
 public:


  virtual ~TokenStreamService_getSerialversionuid_presult() throw() {}

  int64_t* success;

  _TokenStreamService_getSerialversionuid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getSpeechUnit_args {
 public:

  TokenStreamService_getSpeechUnit_args() {
  }

  virtual ~TokenStreamService_getSpeechUnit_args() throw() {}


  bool operator == (const TokenStreamService_getSpeechUnit_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getSpeechUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getSpeechUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getSpeechUnit_pargs {
 public:


  virtual ~TokenStreamService_getSpeechUnit_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getSpeechUnit_result__isset {
  _TokenStreamService_getSpeechUnit_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getSpeechUnit_result__isset;

class TokenStreamService_getSpeechUnit_result {
 public:

  TokenStreamService_getSpeechUnit_result() : success((SpeechUnit::type)0) {
  }

  virtual ~TokenStreamService_getSpeechUnit_result() throw() {}

  SpeechUnit::type success;

  _TokenStreamService_getSpeechUnit_result__isset __isset;

  void __set_success(const SpeechUnit::type val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getSpeechUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getSpeechUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getSpeechUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getSpeechUnit_presult__isset {
  _TokenStreamService_getSpeechUnit_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getSpeechUnit_presult__isset;

class TokenStreamService_getSpeechUnit_presult {
 public:


  virtual ~TokenStreamService_getSpeechUnit_presult() throw() {}

  SpeechUnit::type* success;

  _TokenStreamService_getSpeechUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getTextValue_args {
 public:

  TokenStreamService_getTextValue_args() {
  }

  virtual ~TokenStreamService_getTextValue_args() throw() {}


  bool operator == (const TokenStreamService_getTextValue_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getTextValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTextValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getTextValue_pargs {
 public:


  virtual ~TokenStreamService_getTextValue_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTextValue_result__isset {
  _TokenStreamService_getTextValue_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTextValue_result__isset;

class TokenStreamService_getTextValue_result {
 public:

  TokenStreamService_getTextValue_result() : success() {
  }

  virtual ~TokenStreamService_getTextValue_result() throw() {}

  std::string success;

  _TokenStreamService_getTextValue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getTextValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getTextValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTextValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTextValue_presult__isset {
  _TokenStreamService_getTextValue_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTextValue_presult__isset;

class TokenStreamService_getTextValue_presult {
 public:


  virtual ~TokenStreamService_getTextValue_presult() throw() {}

  std::string* success;

  _TokenStreamService_getTextValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getTokenizerType_args {
 public:

  TokenStreamService_getTokenizerType_args() {
  }

  virtual ~TokenStreamService_getTokenizerType_args() throw() {}


  bool operator == (const TokenStreamService_getTokenizerType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getTokenizerType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTokenizerType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getTokenizerType_pargs {
 public:


  virtual ~TokenStreamService_getTokenizerType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTokenizerType_result__isset {
  _TokenStreamService_getTokenizerType_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTokenizerType_result__isset;

class TokenStreamService_getTokenizerType_result {
 public:

  TokenStreamService_getTokenizerType_result() : success((TokenizerType::type)0) {
  }

  virtual ~TokenStreamService_getTokenizerType_result() throw() {}

  TokenizerType::type success;

  _TokenStreamService_getTokenizerType_result__isset __isset;

  void __set_success(const TokenizerType::type val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getTokenizerType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getTokenizerType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTokenizerType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTokenizerType_presult__isset {
  _TokenStreamService_getTokenizerType_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTokenizerType_presult__isset;

class TokenStreamService_getTokenizerType_presult {
 public:


  virtual ~TokenStreamService_getTokenizerType_presult() throw() {}

  TokenizerType::type* success;

  _TokenStreamService_getTokenizerType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getTranscriptType_args {
 public:

  TokenStreamService_getTranscriptType_args() {
  }

  virtual ~TokenStreamService_getTranscriptType_args() throw() {}


  bool operator == (const TokenStreamService_getTranscriptType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getTranscriptType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTranscriptType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getTranscriptType_pargs {
 public:


  virtual ~TokenStreamService_getTranscriptType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTranscriptType_result__isset {
  _TokenStreamService_getTranscriptType_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTranscriptType_result__isset;

class TokenStreamService_getTranscriptType_result {
 public:

  TokenStreamService_getTranscriptType_result() : success((TranscriptType::type)0) {
  }

  virtual ~TokenStreamService_getTranscriptType_result() throw() {}

  TranscriptType::type success;

  _TokenStreamService_getTranscriptType_result__isset __isset;

  void __set_success(const TranscriptType::type val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getTranscriptType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getTranscriptType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTranscriptType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTranscriptType_presult__isset {
  _TokenStreamService_getTranscriptType_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTranscriptType_presult__isset;

class TokenStreamService_getTranscriptType_presult {
 public:


  virtual ~TokenStreamService_getTranscriptType_presult() throw() {}

  TranscriptType::type* success;

  _TokenStreamService_getTranscriptType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TokenStreamService_getTranslatorName_args {
 public:

  TokenStreamService_getTranslatorName_args() {
  }

  virtual ~TokenStreamService_getTranslatorName_args() throw() {}


  bool operator == (const TokenStreamService_getTranslatorName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_getTranslatorName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTranslatorName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_getTranslatorName_pargs {
 public:


  virtual ~TokenStreamService_getTranslatorName_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTranslatorName_result__isset {
  _TokenStreamService_getTranslatorName_result__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTranslatorName_result__isset;

class TokenStreamService_getTranslatorName_result {
 public:

  TokenStreamService_getTranslatorName_result() : success((TranslatorName::type)0) {
  }

  virtual ~TokenStreamService_getTranslatorName_result() throw() {}

  TranslatorName::type success;

  _TokenStreamService_getTranslatorName_result__isset __isset;

  void __set_success(const TranslatorName::type val) {
    success = val;
  }

  bool operator == (const TokenStreamService_getTranslatorName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_getTranslatorName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_getTranslatorName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TokenStreamService_getTranslatorName_presult__isset {
  _TokenStreamService_getTranslatorName_presult__isset() : success(false) {}
  bool success;
} _TokenStreamService_getTranslatorName_presult__isset;

class TokenStreamService_getTranslatorName_presult {
 public:


  virtual ~TokenStreamService_getTranslatorName_presult() throw() {}

  TranslatorName::type* success;

  _TokenStreamService_getTranslatorName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TokenStreamService_setAsrName_args__isset {
  _TokenStreamService_setAsrName_args__isset() : asrName(false) {}
  bool asrName;
} _TokenStreamService_setAsrName_args__isset;

class TokenStreamService_setAsrName_args {
 public:

  TokenStreamService_setAsrName_args() : asrName((AsrName::type)0) {
  }

  virtual ~TokenStreamService_setAsrName_args() throw() {}

  AsrName::type asrName;

  _TokenStreamService_setAsrName_args__isset __isset;

  void __set_asrName(const AsrName::type val) {
    asrName = val;
  }

  bool operator == (const TokenStreamService_setAsrName_args & rhs) const
  {
    if (!(asrName == rhs.asrName))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_setAsrName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setAsrName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setAsrName_pargs {
 public:


  virtual ~TokenStreamService_setAsrName_pargs() throw() {}

  const AsrName::type* asrName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setAsrName_result {
 public:

  TokenStreamService_setAsrName_result() {
  }

  virtual ~TokenStreamService_setAsrName_result() throw() {}


  bool operator == (const TokenStreamService_setAsrName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_setAsrName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setAsrName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setAsrName_presult {
 public:


  virtual ~TokenStreamService_setAsrName_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TokenStreamService_setDocument_args__isset {
  _TokenStreamService_setDocument_args__isset() : document(false) {}
  bool document;
} _TokenStreamService_setDocument_args__isset;

class TokenStreamService_setDocument_args {
 public:

  TokenStreamService_setDocument_args() {
  }

  virtual ~TokenStreamService_setDocument_args() throw() {}

  Document document;

  _TokenStreamService_setDocument_args__isset __isset;

  void __set_document(const Document& val) {
    document = val;
  }

  bool operator == (const TokenStreamService_setDocument_args & rhs) const
  {
    if (!(document == rhs.document))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_setDocument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setDocument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setDocument_pargs {
 public:


  virtual ~TokenStreamService_setDocument_pargs() throw() {}

  const Document* document;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setDocument_result {
 public:

  TokenStreamService_setDocument_result() {
  }

  virtual ~TokenStreamService_setDocument_result() throw() {}


  bool operator == (const TokenStreamService_setDocument_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_setDocument_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setDocument_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setDocument_presult {
 public:


  virtual ~TokenStreamService_setDocument_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TokenStreamService_setSpeechUnit_args__isset {
  _TokenStreamService_setSpeechUnit_args__isset() : speechUnit(false) {}
  bool speechUnit;
} _TokenStreamService_setSpeechUnit_args__isset;

class TokenStreamService_setSpeechUnit_args {
 public:

  TokenStreamService_setSpeechUnit_args() : speechUnit((SpeechUnit::type)0) {
  }

  virtual ~TokenStreamService_setSpeechUnit_args() throw() {}

  SpeechUnit::type speechUnit;

  _TokenStreamService_setSpeechUnit_args__isset __isset;

  void __set_speechUnit(const SpeechUnit::type val) {
    speechUnit = val;
  }

  bool operator == (const TokenStreamService_setSpeechUnit_args & rhs) const
  {
    if (!(speechUnit == rhs.speechUnit))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_setSpeechUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setSpeechUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setSpeechUnit_pargs {
 public:


  virtual ~TokenStreamService_setSpeechUnit_pargs() throw() {}

  const SpeechUnit::type* speechUnit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setSpeechUnit_result {
 public:

  TokenStreamService_setSpeechUnit_result() {
  }

  virtual ~TokenStreamService_setSpeechUnit_result() throw() {}


  bool operator == (const TokenStreamService_setSpeechUnit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_setSpeechUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setSpeechUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setSpeechUnit_presult {
 public:


  virtual ~TokenStreamService_setSpeechUnit_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TokenStreamService_setTranslatorName_args__isset {
  _TokenStreamService_setTranslatorName_args__isset() : translatorName(false) {}
  bool translatorName;
} _TokenStreamService_setTranslatorName_args__isset;

class TokenStreamService_setTranslatorName_args {
 public:

  TokenStreamService_setTranslatorName_args() : translatorName((TranslatorName::type)0) {
  }

  virtual ~TokenStreamService_setTranslatorName_args() throw() {}

  TranslatorName::type translatorName;

  _TokenStreamService_setTranslatorName_args__isset __isset;

  void __set_translatorName(const TranslatorName::type val) {
    translatorName = val;
  }

  bool operator == (const TokenStreamService_setTranslatorName_args & rhs) const
  {
    if (!(translatorName == rhs.translatorName))
      return false;
    return true;
  }
  bool operator != (const TokenStreamService_setTranslatorName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setTranslatorName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setTranslatorName_pargs {
 public:


  virtual ~TokenStreamService_setTranslatorName_pargs() throw() {}

  const TranslatorName::type* translatorName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setTranslatorName_result {
 public:

  TokenStreamService_setTranslatorName_result() {
  }

  virtual ~TokenStreamService_setTranslatorName_result() throw() {}


  bool operator == (const TokenStreamService_setTranslatorName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TokenStreamService_setTranslatorName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TokenStreamService_setTranslatorName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TokenStreamService_setTranslatorName_presult {
 public:


  virtual ~TokenStreamService_setTranslatorName_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TokenStreamServiceClient : virtual public TokenStreamServiceIf {
 public:
  TokenStreamServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TokenStreamServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  ChannelName::type getChannelName();
  void send_getChannelName();
  ChannelName::type recv_getChannelName();
  ContentType::type getContentType();
  void send_getContentType();
  ContentType::type recv_getContentType();
  void getDocument(Document& _return);
  void send_getDocument();
  void recv_getDocument(Document& _return);
  void getLanguage(std::string& _return);
  void send_getLanguage();
  void recv_getLanguage(std::string& _return);
  int64_t getSerialversionuid();
  void send_getSerialversionuid();
  int64_t recv_getSerialversionuid();
  SpeechUnit::type getSpeechUnit();
  void send_getSpeechUnit();
  SpeechUnit::type recv_getSpeechUnit();
  void getTextValue(std::string& _return);
  void send_getTextValue();
  void recv_getTextValue(std::string& _return);
  TokenizerType::type getTokenizerType();
  void send_getTokenizerType();
  TokenizerType::type recv_getTokenizerType();
  TranscriptType::type getTranscriptType();
  void send_getTranscriptType();
  TranscriptType::type recv_getTranscriptType();
  TranslatorName::type getTranslatorName();
  void send_getTranslatorName();
  TranslatorName::type recv_getTranslatorName();
  void setAsrName(const AsrName::type asrName);
  void send_setAsrName(const AsrName::type asrName);
  void recv_setAsrName();
  void setDocument(const Document& document);
  void send_setDocument(const Document& document);
  void recv_setDocument();
  void setSpeechUnit(const SpeechUnit::type speechUnit);
  void send_setSpeechUnit(const SpeechUnit::type speechUnit);
  void recv_setSpeechUnit();
  void setTranslatorName(const TranslatorName::type translatorName);
  void send_setTranslatorName(const TranslatorName::type translatorName);
  void recv_setTranslatorName();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TokenStreamServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TokenStreamServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TokenStreamServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getChannelName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContentType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLanguage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSerialversionuid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSpeechUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTextValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTokenizerType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTranscriptType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTranslatorName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAsrName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setDocument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSpeechUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTranslatorName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TokenStreamServiceProcessor(boost::shared_ptr<TokenStreamServiceIf> iface) :
    iface_(iface) {
    processMap_["getChannelName"] = &TokenStreamServiceProcessor::process_getChannelName;
    processMap_["getContentType"] = &TokenStreamServiceProcessor::process_getContentType;
    processMap_["getDocument"] = &TokenStreamServiceProcessor::process_getDocument;
    processMap_["getLanguage"] = &TokenStreamServiceProcessor::process_getLanguage;
    processMap_["getSerialversionuid"] = &TokenStreamServiceProcessor::process_getSerialversionuid;
    processMap_["getSpeechUnit"] = &TokenStreamServiceProcessor::process_getSpeechUnit;
    processMap_["getTextValue"] = &TokenStreamServiceProcessor::process_getTextValue;
    processMap_["getTokenizerType"] = &TokenStreamServiceProcessor::process_getTokenizerType;
    processMap_["getTranscriptType"] = &TokenStreamServiceProcessor::process_getTranscriptType;
    processMap_["getTranslatorName"] = &TokenStreamServiceProcessor::process_getTranslatorName;
    processMap_["setAsrName"] = &TokenStreamServiceProcessor::process_setAsrName;
    processMap_["setDocument"] = &TokenStreamServiceProcessor::process_setDocument;
    processMap_["setSpeechUnit"] = &TokenStreamServiceProcessor::process_setSpeechUnit;
    processMap_["setTranslatorName"] = &TokenStreamServiceProcessor::process_setTranslatorName;
  }

  virtual ~TokenStreamServiceProcessor() {}
};

class TokenStreamServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TokenStreamServiceProcessorFactory(const ::boost::shared_ptr< TokenStreamServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TokenStreamServiceIfFactory > handlerFactory_;
};

class TokenStreamServiceMultiface : virtual public TokenStreamServiceIf {
 public:
  TokenStreamServiceMultiface(std::vector<boost::shared_ptr<TokenStreamServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TokenStreamServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TokenStreamServiceIf> > ifaces_;
  TokenStreamServiceMultiface() {}
  void add(boost::shared_ptr<TokenStreamServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  ChannelName::type getChannelName() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChannelName();
    }
    return ifaces_[i]->getChannelName();
  }

  ContentType::type getContentType() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContentType();
    }
    return ifaces_[i]->getContentType();
  }

  void getDocument(Document& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocument(_return);
    }
    ifaces_[i]->getDocument(_return);
    return;
  }

  void getLanguage(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLanguage(_return);
    }
    ifaces_[i]->getLanguage(_return);
    return;
  }

  int64_t getSerialversionuid() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSerialversionuid();
    }
    return ifaces_[i]->getSerialversionuid();
  }

  SpeechUnit::type getSpeechUnit() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSpeechUnit();
    }
    return ifaces_[i]->getSpeechUnit();
  }

  void getTextValue(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTextValue(_return);
    }
    ifaces_[i]->getTextValue(_return);
    return;
  }

  TokenizerType::type getTokenizerType() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTokenizerType();
    }
    return ifaces_[i]->getTokenizerType();
  }

  TranscriptType::type getTranscriptType() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTranscriptType();
    }
    return ifaces_[i]->getTranscriptType();
  }

  TranslatorName::type getTranslatorName() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTranslatorName();
    }
    return ifaces_[i]->getTranslatorName();
  }

  void setAsrName(const AsrName::type asrName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAsrName(asrName);
    }
    ifaces_[i]->setAsrName(asrName);
  }

  void setDocument(const Document& document) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setDocument(document);
    }
    ifaces_[i]->setDocument(document);
  }

  void setSpeechUnit(const SpeechUnit::type speechUnit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSpeechUnit(speechUnit);
    }
    ifaces_[i]->setSpeechUnit(speechUnit);
  }

  void setTranslatorName(const TranslatorName::type translatorName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTranslatorName(translatorName);
    }
    ifaces_[i]->setTranslatorName(translatorName);
  }

};

}}} // namespace

#endif