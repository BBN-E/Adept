/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MessageService_H
#define MessageService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "PassageService.h"

namespace thrift { namespace adept { namespace common {

class MessageServiceIf : virtual public PassageServiceIf {
 public:
  virtual ~MessageServiceIf() {}
  virtual void getSender(std::string& _return) = 0;
  virtual void setSender(const std::string& sender) = 0;
  virtual void getSentDate(std::string& _return) = 0;
  virtual void setSentDate(const std::string& sentDate) = 0;
  virtual void getPriority(std::string& _return) = 0;
  virtual void setPriority(const std::string& priority) = 0;
  virtual void getSubject(std::string& _return) = 0;
  virtual void setSubject(const std::string& subject) = 0;
  virtual void getRecipients(std::vector<std::string> & _return) = 0;
  virtual void setRecipients(const std::vector<std::string> & recipients) = 0;
  virtual void addRecipient(const std::string& recipient) = 0;
  virtual void getCcRecipients(std::vector<std::string> & _return) = 0;
  virtual void setCcRecipients(const std::vector<std::string> & ccRecipients) = 0;
  virtual void addCcRecipient(const std::string& ccRecipient) = 0;
  virtual void getBccRecipients(std::vector<std::string> & _return) = 0;
  virtual void setBccRecipients(const std::vector<std::string> & bccRecipients) = 0;
  virtual void addBccRecipient(const std::string& bccRecipient) = 0;
};

class MessageServiceIfFactory : virtual public PassageServiceIfFactory {
 public:
  typedef MessageServiceIf Handler;

  virtual ~MessageServiceIfFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class MessageServiceIfSingletonFactory : virtual public MessageServiceIfFactory {
 public:
  MessageServiceIfSingletonFactory(const boost::shared_ptr<MessageServiceIf>& iface) : iface_(iface) {}
  virtual ~MessageServiceIfSingletonFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MessageServiceIf> iface_;
};

class MessageServiceNull : virtual public MessageServiceIf , virtual public PassageServiceNull {
 public:
  virtual ~MessageServiceNull() {}
  void getSender(std::string& /* _return */) {
    return;
  }
  void setSender(const std::string& /* sender */) {
    return;
  }
  void getSentDate(std::string& /* _return */) {
    return;
  }
  void setSentDate(const std::string& /* sentDate */) {
    return;
  }
  void getPriority(std::string& /* _return */) {
    return;
  }
  void setPriority(const std::string& /* priority */) {
    return;
  }
  void getSubject(std::string& /* _return */) {
    return;
  }
  void setSubject(const std::string& /* subject */) {
    return;
  }
  void getRecipients(std::vector<std::string> & /* _return */) {
    return;
  }
  void setRecipients(const std::vector<std::string> & /* recipients */) {
    return;
  }
  void addRecipient(const std::string& /* recipient */) {
    return;
  }
  void getCcRecipients(std::vector<std::string> & /* _return */) {
    return;
  }
  void setCcRecipients(const std::vector<std::string> & /* ccRecipients */) {
    return;
  }
  void addCcRecipient(const std::string& /* ccRecipient */) {
    return;
  }
  void getBccRecipients(std::vector<std::string> & /* _return */) {
    return;
  }
  void setBccRecipients(const std::vector<std::string> & /* bccRecipients */) {
    return;
  }
  void addBccRecipient(const std::string& /* bccRecipient */) {
    return;
  }
};


class MessageService_getSender_args {
 public:

  MessageService_getSender_args() {
  }

  virtual ~MessageService_getSender_args() throw() {}


  bool operator == (const MessageService_getSender_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_getSender_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getSender_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getSender_pargs {
 public:


  virtual ~MessageService_getSender_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getSender_result__isset {
  _MessageService_getSender_result__isset() : success(false) {}
  bool success;
} _MessageService_getSender_result__isset;

class MessageService_getSender_result {
 public:

  MessageService_getSender_result() : success() {
  }

  virtual ~MessageService_getSender_result() throw() {}

  std::string success;

  _MessageService_getSender_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const MessageService_getSender_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getSender_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getSender_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getSender_presult__isset {
  _MessageService_getSender_presult__isset() : success(false) {}
  bool success;
} _MessageService_getSender_presult__isset;

class MessageService_getSender_presult {
 public:


  virtual ~MessageService_getSender_presult() throw() {}

  std::string* success;

  _MessageService_getSender_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_setSender_args__isset {
  _MessageService_setSender_args__isset() : sender(false) {}
  bool sender;
} _MessageService_setSender_args__isset;

class MessageService_setSender_args {
 public:

  MessageService_setSender_args() : sender() {
  }

  virtual ~MessageService_setSender_args() throw() {}

  std::string sender;

  _MessageService_setSender_args__isset __isset;

  void __set_sender(const std::string& val) {
    sender = val;
  }

  bool operator == (const MessageService_setSender_args & rhs) const
  {
    if (!(sender == rhs.sender))
      return false;
    return true;
  }
  bool operator != (const MessageService_setSender_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setSender_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSender_pargs {
 public:


  virtual ~MessageService_setSender_pargs() throw() {}

  const std::string* sender;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSender_result {
 public:

  MessageService_setSender_result() {
  }

  virtual ~MessageService_setSender_result() throw() {}


  bool operator == (const MessageService_setSender_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_setSender_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setSender_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSender_presult {
 public:


  virtual ~MessageService_setSender_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MessageService_getSentDate_args {
 public:

  MessageService_getSentDate_args() {
  }

  virtual ~MessageService_getSentDate_args() throw() {}


  bool operator == (const MessageService_getSentDate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_getSentDate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getSentDate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getSentDate_pargs {
 public:


  virtual ~MessageService_getSentDate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getSentDate_result__isset {
  _MessageService_getSentDate_result__isset() : success(false) {}
  bool success;
} _MessageService_getSentDate_result__isset;

class MessageService_getSentDate_result {
 public:

  MessageService_getSentDate_result() : success() {
  }

  virtual ~MessageService_getSentDate_result() throw() {}

  std::string success;

  _MessageService_getSentDate_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const MessageService_getSentDate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getSentDate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getSentDate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getSentDate_presult__isset {
  _MessageService_getSentDate_presult__isset() : success(false) {}
  bool success;
} _MessageService_getSentDate_presult__isset;

class MessageService_getSentDate_presult {
 public:


  virtual ~MessageService_getSentDate_presult() throw() {}

  std::string* success;

  _MessageService_getSentDate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_setSentDate_args__isset {
  _MessageService_setSentDate_args__isset() : sentDate(false) {}
  bool sentDate;
} _MessageService_setSentDate_args__isset;

class MessageService_setSentDate_args {
 public:

  MessageService_setSentDate_args() : sentDate() {
  }

  virtual ~MessageService_setSentDate_args() throw() {}

  std::string sentDate;

  _MessageService_setSentDate_args__isset __isset;

  void __set_sentDate(const std::string& val) {
    sentDate = val;
  }

  bool operator == (const MessageService_setSentDate_args & rhs) const
  {
    if (!(sentDate == rhs.sentDate))
      return false;
    return true;
  }
  bool operator != (const MessageService_setSentDate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setSentDate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSentDate_pargs {
 public:


  virtual ~MessageService_setSentDate_pargs() throw() {}

  const std::string* sentDate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSentDate_result {
 public:

  MessageService_setSentDate_result() {
  }

  virtual ~MessageService_setSentDate_result() throw() {}


  bool operator == (const MessageService_setSentDate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_setSentDate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setSentDate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSentDate_presult {
 public:


  virtual ~MessageService_setSentDate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MessageService_getPriority_args {
 public:

  MessageService_getPriority_args() {
  }

  virtual ~MessageService_getPriority_args() throw() {}


  bool operator == (const MessageService_getPriority_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_getPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getPriority_pargs {
 public:


  virtual ~MessageService_getPriority_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getPriority_result__isset {
  _MessageService_getPriority_result__isset() : success(false) {}
  bool success;
} _MessageService_getPriority_result__isset;

class MessageService_getPriority_result {
 public:

  MessageService_getPriority_result() : success() {
  }

  virtual ~MessageService_getPriority_result() throw() {}

  std::string success;

  _MessageService_getPriority_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const MessageService_getPriority_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getPriority_presult__isset {
  _MessageService_getPriority_presult__isset() : success(false) {}
  bool success;
} _MessageService_getPriority_presult__isset;

class MessageService_getPriority_presult {
 public:


  virtual ~MessageService_getPriority_presult() throw() {}

  std::string* success;

  _MessageService_getPriority_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_setPriority_args__isset {
  _MessageService_setPriority_args__isset() : priority(false) {}
  bool priority;
} _MessageService_setPriority_args__isset;

class MessageService_setPriority_args {
 public:

  MessageService_setPriority_args() : priority() {
  }

  virtual ~MessageService_setPriority_args() throw() {}

  std::string priority;

  _MessageService_setPriority_args__isset __isset;

  void __set_priority(const std::string& val) {
    priority = val;
  }

  bool operator == (const MessageService_setPriority_args & rhs) const
  {
    if (!(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const MessageService_setPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setPriority_pargs {
 public:


  virtual ~MessageService_setPriority_pargs() throw() {}

  const std::string* priority;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setPriority_result {
 public:

  MessageService_setPriority_result() {
  }

  virtual ~MessageService_setPriority_result() throw() {}


  bool operator == (const MessageService_setPriority_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_setPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setPriority_presult {
 public:


  virtual ~MessageService_setPriority_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MessageService_getSubject_args {
 public:

  MessageService_getSubject_args() {
  }

  virtual ~MessageService_getSubject_args() throw() {}


  bool operator == (const MessageService_getSubject_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_getSubject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getSubject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getSubject_pargs {
 public:


  virtual ~MessageService_getSubject_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getSubject_result__isset {
  _MessageService_getSubject_result__isset() : success(false) {}
  bool success;
} _MessageService_getSubject_result__isset;

class MessageService_getSubject_result {
 public:

  MessageService_getSubject_result() : success() {
  }

  virtual ~MessageService_getSubject_result() throw() {}

  std::string success;

  _MessageService_getSubject_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const MessageService_getSubject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getSubject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getSubject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getSubject_presult__isset {
  _MessageService_getSubject_presult__isset() : success(false) {}
  bool success;
} _MessageService_getSubject_presult__isset;

class MessageService_getSubject_presult {
 public:


  virtual ~MessageService_getSubject_presult() throw() {}

  std::string* success;

  _MessageService_getSubject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_setSubject_args__isset {
  _MessageService_setSubject_args__isset() : subject(false) {}
  bool subject;
} _MessageService_setSubject_args__isset;

class MessageService_setSubject_args {
 public:

  MessageService_setSubject_args() : subject() {
  }

  virtual ~MessageService_setSubject_args() throw() {}

  std::string subject;

  _MessageService_setSubject_args__isset __isset;

  void __set_subject(const std::string& val) {
    subject = val;
  }

  bool operator == (const MessageService_setSubject_args & rhs) const
  {
    if (!(subject == rhs.subject))
      return false;
    return true;
  }
  bool operator != (const MessageService_setSubject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setSubject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSubject_pargs {
 public:


  virtual ~MessageService_setSubject_pargs() throw() {}

  const std::string* subject;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSubject_result {
 public:

  MessageService_setSubject_result() {
  }

  virtual ~MessageService_setSubject_result() throw() {}


  bool operator == (const MessageService_setSubject_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_setSubject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setSubject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setSubject_presult {
 public:


  virtual ~MessageService_setSubject_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MessageService_getRecipients_args {
 public:

  MessageService_getRecipients_args() {
  }

  virtual ~MessageService_getRecipients_args() throw() {}


  bool operator == (const MessageService_getRecipients_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_getRecipients_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getRecipients_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getRecipients_pargs {
 public:


  virtual ~MessageService_getRecipients_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getRecipients_result__isset {
  _MessageService_getRecipients_result__isset() : success(false) {}
  bool success;
} _MessageService_getRecipients_result__isset;

class MessageService_getRecipients_result {
 public:

  MessageService_getRecipients_result() {
  }

  virtual ~MessageService_getRecipients_result() throw() {}

  std::vector<std::string>  success;

  _MessageService_getRecipients_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const MessageService_getRecipients_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getRecipients_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getRecipients_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getRecipients_presult__isset {
  _MessageService_getRecipients_presult__isset() : success(false) {}
  bool success;
} _MessageService_getRecipients_presult__isset;

class MessageService_getRecipients_presult {
 public:


  virtual ~MessageService_getRecipients_presult() throw() {}

  std::vector<std::string> * success;

  _MessageService_getRecipients_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_setRecipients_args__isset {
  _MessageService_setRecipients_args__isset() : recipients(false) {}
  bool recipients;
} _MessageService_setRecipients_args__isset;

class MessageService_setRecipients_args {
 public:

  MessageService_setRecipients_args() {
  }

  virtual ~MessageService_setRecipients_args() throw() {}

  std::vector<std::string>  recipients;

  _MessageService_setRecipients_args__isset __isset;

  void __set_recipients(const std::vector<std::string> & val) {
    recipients = val;
  }

  bool operator == (const MessageService_setRecipients_args & rhs) const
  {
    if (!(recipients == rhs.recipients))
      return false;
    return true;
  }
  bool operator != (const MessageService_setRecipients_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setRecipients_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setRecipients_pargs {
 public:


  virtual ~MessageService_setRecipients_pargs() throw() {}

  const std::vector<std::string> * recipients;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setRecipients_result {
 public:

  MessageService_setRecipients_result() {
  }

  virtual ~MessageService_setRecipients_result() throw() {}


  bool operator == (const MessageService_setRecipients_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_setRecipients_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setRecipients_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setRecipients_presult {
 public:


  virtual ~MessageService_setRecipients_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_addRecipient_args__isset {
  _MessageService_addRecipient_args__isset() : recipient(false) {}
  bool recipient;
} _MessageService_addRecipient_args__isset;

class MessageService_addRecipient_args {
 public:

  MessageService_addRecipient_args() : recipient() {
  }

  virtual ~MessageService_addRecipient_args() throw() {}

  std::string recipient;

  _MessageService_addRecipient_args__isset __isset;

  void __set_recipient(const std::string& val) {
    recipient = val;
  }

  bool operator == (const MessageService_addRecipient_args & rhs) const
  {
    if (!(recipient == rhs.recipient))
      return false;
    return true;
  }
  bool operator != (const MessageService_addRecipient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_addRecipient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addRecipient_pargs {
 public:


  virtual ~MessageService_addRecipient_pargs() throw() {}

  const std::string* recipient;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addRecipient_result {
 public:

  MessageService_addRecipient_result() {
  }

  virtual ~MessageService_addRecipient_result() throw() {}


  bool operator == (const MessageService_addRecipient_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_addRecipient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_addRecipient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addRecipient_presult {
 public:


  virtual ~MessageService_addRecipient_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MessageService_getCcRecipients_args {
 public:

  MessageService_getCcRecipients_args() {
  }

  virtual ~MessageService_getCcRecipients_args() throw() {}


  bool operator == (const MessageService_getCcRecipients_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_getCcRecipients_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getCcRecipients_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getCcRecipients_pargs {
 public:


  virtual ~MessageService_getCcRecipients_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getCcRecipients_result__isset {
  _MessageService_getCcRecipients_result__isset() : success(false) {}
  bool success;
} _MessageService_getCcRecipients_result__isset;

class MessageService_getCcRecipients_result {
 public:

  MessageService_getCcRecipients_result() {
  }

  virtual ~MessageService_getCcRecipients_result() throw() {}

  std::vector<std::string>  success;

  _MessageService_getCcRecipients_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const MessageService_getCcRecipients_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getCcRecipients_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getCcRecipients_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getCcRecipients_presult__isset {
  _MessageService_getCcRecipients_presult__isset() : success(false) {}
  bool success;
} _MessageService_getCcRecipients_presult__isset;

class MessageService_getCcRecipients_presult {
 public:


  virtual ~MessageService_getCcRecipients_presult() throw() {}

  std::vector<std::string> * success;

  _MessageService_getCcRecipients_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_setCcRecipients_args__isset {
  _MessageService_setCcRecipients_args__isset() : ccRecipients(false) {}
  bool ccRecipients;
} _MessageService_setCcRecipients_args__isset;

class MessageService_setCcRecipients_args {
 public:

  MessageService_setCcRecipients_args() {
  }

  virtual ~MessageService_setCcRecipients_args() throw() {}

  std::vector<std::string>  ccRecipients;

  _MessageService_setCcRecipients_args__isset __isset;

  void __set_ccRecipients(const std::vector<std::string> & val) {
    ccRecipients = val;
  }

  bool operator == (const MessageService_setCcRecipients_args & rhs) const
  {
    if (!(ccRecipients == rhs.ccRecipients))
      return false;
    return true;
  }
  bool operator != (const MessageService_setCcRecipients_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setCcRecipients_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setCcRecipients_pargs {
 public:


  virtual ~MessageService_setCcRecipients_pargs() throw() {}

  const std::vector<std::string> * ccRecipients;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setCcRecipients_result {
 public:

  MessageService_setCcRecipients_result() {
  }

  virtual ~MessageService_setCcRecipients_result() throw() {}


  bool operator == (const MessageService_setCcRecipients_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_setCcRecipients_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setCcRecipients_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setCcRecipients_presult {
 public:


  virtual ~MessageService_setCcRecipients_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_addCcRecipient_args__isset {
  _MessageService_addCcRecipient_args__isset() : ccRecipient(false) {}
  bool ccRecipient;
} _MessageService_addCcRecipient_args__isset;

class MessageService_addCcRecipient_args {
 public:

  MessageService_addCcRecipient_args() : ccRecipient() {
  }

  virtual ~MessageService_addCcRecipient_args() throw() {}

  std::string ccRecipient;

  _MessageService_addCcRecipient_args__isset __isset;

  void __set_ccRecipient(const std::string& val) {
    ccRecipient = val;
  }

  bool operator == (const MessageService_addCcRecipient_args & rhs) const
  {
    if (!(ccRecipient == rhs.ccRecipient))
      return false;
    return true;
  }
  bool operator != (const MessageService_addCcRecipient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_addCcRecipient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addCcRecipient_pargs {
 public:


  virtual ~MessageService_addCcRecipient_pargs() throw() {}

  const std::string* ccRecipient;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addCcRecipient_result {
 public:

  MessageService_addCcRecipient_result() {
  }

  virtual ~MessageService_addCcRecipient_result() throw() {}


  bool operator == (const MessageService_addCcRecipient_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_addCcRecipient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_addCcRecipient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addCcRecipient_presult {
 public:


  virtual ~MessageService_addCcRecipient_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MessageService_getBccRecipients_args {
 public:

  MessageService_getBccRecipients_args() {
  }

  virtual ~MessageService_getBccRecipients_args() throw() {}


  bool operator == (const MessageService_getBccRecipients_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_getBccRecipients_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getBccRecipients_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getBccRecipients_pargs {
 public:


  virtual ~MessageService_getBccRecipients_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getBccRecipients_result__isset {
  _MessageService_getBccRecipients_result__isset() : success(false) {}
  bool success;
} _MessageService_getBccRecipients_result__isset;

class MessageService_getBccRecipients_result {
 public:

  MessageService_getBccRecipients_result() {
  }

  virtual ~MessageService_getBccRecipients_result() throw() {}

  std::vector<std::string>  success;

  _MessageService_getBccRecipients_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const MessageService_getBccRecipients_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageService_getBccRecipients_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getBccRecipients_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getBccRecipients_presult__isset {
  _MessageService_getBccRecipients_presult__isset() : success(false) {}
  bool success;
} _MessageService_getBccRecipients_presult__isset;

class MessageService_getBccRecipients_presult {
 public:


  virtual ~MessageService_getBccRecipients_presult() throw() {}

  std::vector<std::string> * success;

  _MessageService_getBccRecipients_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_setBccRecipients_args__isset {
  _MessageService_setBccRecipients_args__isset() : bccRecipients(false) {}
  bool bccRecipients;
} _MessageService_setBccRecipients_args__isset;

class MessageService_setBccRecipients_args {
 public:

  MessageService_setBccRecipients_args() {
  }

  virtual ~MessageService_setBccRecipients_args() throw() {}

  std::vector<std::string>  bccRecipients;

  _MessageService_setBccRecipients_args__isset __isset;

  void __set_bccRecipients(const std::vector<std::string> & val) {
    bccRecipients = val;
  }

  bool operator == (const MessageService_setBccRecipients_args & rhs) const
  {
    if (!(bccRecipients == rhs.bccRecipients))
      return false;
    return true;
  }
  bool operator != (const MessageService_setBccRecipients_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setBccRecipients_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setBccRecipients_pargs {
 public:


  virtual ~MessageService_setBccRecipients_pargs() throw() {}

  const std::vector<std::string> * bccRecipients;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setBccRecipients_result {
 public:

  MessageService_setBccRecipients_result() {
  }

  virtual ~MessageService_setBccRecipients_result() throw() {}


  bool operator == (const MessageService_setBccRecipients_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_setBccRecipients_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_setBccRecipients_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_setBccRecipients_presult {
 public:


  virtual ~MessageService_setBccRecipients_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_addBccRecipient_args__isset {
  _MessageService_addBccRecipient_args__isset() : bccRecipient(false) {}
  bool bccRecipient;
} _MessageService_addBccRecipient_args__isset;

class MessageService_addBccRecipient_args {
 public:

  MessageService_addBccRecipient_args() : bccRecipient() {
  }

  virtual ~MessageService_addBccRecipient_args() throw() {}

  std::string bccRecipient;

  _MessageService_addBccRecipient_args__isset __isset;

  void __set_bccRecipient(const std::string& val) {
    bccRecipient = val;
  }

  bool operator == (const MessageService_addBccRecipient_args & rhs) const
  {
    if (!(bccRecipient == rhs.bccRecipient))
      return false;
    return true;
  }
  bool operator != (const MessageService_addBccRecipient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_addBccRecipient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addBccRecipient_pargs {
 public:


  virtual ~MessageService_addBccRecipient_pargs() throw() {}

  const std::string* bccRecipient;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addBccRecipient_result {
 public:

  MessageService_addBccRecipient_result() {
  }

  virtual ~MessageService_addBccRecipient_result() throw() {}


  bool operator == (const MessageService_addBccRecipient_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageService_addBccRecipient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_addBccRecipient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_addBccRecipient_presult {
 public:


  virtual ~MessageService_addBccRecipient_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MessageServiceClient : virtual public MessageServiceIf, public PassageServiceClient {
 public:
  MessageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    PassageServiceClient(prot, prot) {}
  MessageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    PassageServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getSender(std::string& _return);
  void send_getSender();
  void recv_getSender(std::string& _return);
  void setSender(const std::string& sender);
  void send_setSender(const std::string& sender);
  void recv_setSender();
  void getSentDate(std::string& _return);
  void send_getSentDate();
  void recv_getSentDate(std::string& _return);
  void setSentDate(const std::string& sentDate);
  void send_setSentDate(const std::string& sentDate);
  void recv_setSentDate();
  void getPriority(std::string& _return);
  void send_getPriority();
  void recv_getPriority(std::string& _return);
  void setPriority(const std::string& priority);
  void send_setPriority(const std::string& priority);
  void recv_setPriority();
  void getSubject(std::string& _return);
  void send_getSubject();
  void recv_getSubject(std::string& _return);
  void setSubject(const std::string& subject);
  void send_setSubject(const std::string& subject);
  void recv_setSubject();
  void getRecipients(std::vector<std::string> & _return);
  void send_getRecipients();
  void recv_getRecipients(std::vector<std::string> & _return);
  void setRecipients(const std::vector<std::string> & recipients);
  void send_setRecipients(const std::vector<std::string> & recipients);
  void recv_setRecipients();
  void addRecipient(const std::string& recipient);
  void send_addRecipient(const std::string& recipient);
  void recv_addRecipient();
  void getCcRecipients(std::vector<std::string> & _return);
  void send_getCcRecipients();
  void recv_getCcRecipients(std::vector<std::string> & _return);
  void setCcRecipients(const std::vector<std::string> & ccRecipients);
  void send_setCcRecipients(const std::vector<std::string> & ccRecipients);
  void recv_setCcRecipients();
  void addCcRecipient(const std::string& ccRecipient);
  void send_addCcRecipient(const std::string& ccRecipient);
  void recv_addCcRecipient();
  void getBccRecipients(std::vector<std::string> & _return);
  void send_getBccRecipients();
  void recv_getBccRecipients(std::vector<std::string> & _return);
  void setBccRecipients(const std::vector<std::string> & bccRecipients);
  void send_setBccRecipients(const std::vector<std::string> & bccRecipients);
  void recv_setBccRecipients();
  void addBccRecipient(const std::string& bccRecipient);
  void send_addBccRecipient(const std::string& bccRecipient);
  void recv_addBccRecipient();
};

class MessageServiceProcessor : public PassageServiceProcessor {
 protected:
  boost::shared_ptr<MessageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MessageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getSender(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSender(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSentDate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSentDate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSubject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSubject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRecipients(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setRecipients(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRecipient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCcRecipients(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCcRecipients(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCcRecipient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBccRecipients(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setBccRecipients(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addBccRecipient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MessageServiceProcessor(boost::shared_ptr<MessageServiceIf> iface) :
    PassageServiceProcessor(iface),
    iface_(iface) {
    processMap_["getSender"] = &MessageServiceProcessor::process_getSender;
    processMap_["setSender"] = &MessageServiceProcessor::process_setSender;
    processMap_["getSentDate"] = &MessageServiceProcessor::process_getSentDate;
    processMap_["setSentDate"] = &MessageServiceProcessor::process_setSentDate;
    processMap_["getPriority"] = &MessageServiceProcessor::process_getPriority;
    processMap_["setPriority"] = &MessageServiceProcessor::process_setPriority;
    processMap_["getSubject"] = &MessageServiceProcessor::process_getSubject;
    processMap_["setSubject"] = &MessageServiceProcessor::process_setSubject;
    processMap_["getRecipients"] = &MessageServiceProcessor::process_getRecipients;
    processMap_["setRecipients"] = &MessageServiceProcessor::process_setRecipients;
    processMap_["addRecipient"] = &MessageServiceProcessor::process_addRecipient;
    processMap_["getCcRecipients"] = &MessageServiceProcessor::process_getCcRecipients;
    processMap_["setCcRecipients"] = &MessageServiceProcessor::process_setCcRecipients;
    processMap_["addCcRecipient"] = &MessageServiceProcessor::process_addCcRecipient;
    processMap_["getBccRecipients"] = &MessageServiceProcessor::process_getBccRecipients;
    processMap_["setBccRecipients"] = &MessageServiceProcessor::process_setBccRecipients;
    processMap_["addBccRecipient"] = &MessageServiceProcessor::process_addBccRecipient;
  }

  virtual ~MessageServiceProcessor() {}
};

class MessageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MessageServiceProcessorFactory(const ::boost::shared_ptr< MessageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MessageServiceIfFactory > handlerFactory_;
};

class MessageServiceMultiface : virtual public MessageServiceIf, public PassageServiceMultiface {
 public:
  MessageServiceMultiface(std::vector<boost::shared_ptr<MessageServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<MessageServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      PassageServiceMultiface::add(*iter);
    }
  }
  virtual ~MessageServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MessageServiceIf> > ifaces_;
  MessageServiceMultiface() {}
  void add(boost::shared_ptr<MessageServiceIf> iface) {
    PassageServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getSender(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSender(_return);
    }
    ifaces_[i]->getSender(_return);
    return;
  }

  void setSender(const std::string& sender) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSender(sender);
    }
    ifaces_[i]->setSender(sender);
  }

  void getSentDate(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSentDate(_return);
    }
    ifaces_[i]->getSentDate(_return);
    return;
  }

  void setSentDate(const std::string& sentDate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSentDate(sentDate);
    }
    ifaces_[i]->setSentDate(sentDate);
  }

  void getPriority(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPriority(_return);
    }
    ifaces_[i]->getPriority(_return);
    return;
  }

  void setPriority(const std::string& priority) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPriority(priority);
    }
    ifaces_[i]->setPriority(priority);
  }

  void getSubject(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSubject(_return);
    }
    ifaces_[i]->getSubject(_return);
    return;
  }

  void setSubject(const std::string& subject) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setSubject(subject);
    }
    ifaces_[i]->setSubject(subject);
  }

  void getRecipients(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRecipients(_return);
    }
    ifaces_[i]->getRecipients(_return);
    return;
  }

  void setRecipients(const std::vector<std::string> & recipients) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setRecipients(recipients);
    }
    ifaces_[i]->setRecipients(recipients);
  }

  void addRecipient(const std::string& recipient) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRecipient(recipient);
    }
    ifaces_[i]->addRecipient(recipient);
  }

  void getCcRecipients(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCcRecipients(_return);
    }
    ifaces_[i]->getCcRecipients(_return);
    return;
  }

  void setCcRecipients(const std::vector<std::string> & ccRecipients) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCcRecipients(ccRecipients);
    }
    ifaces_[i]->setCcRecipients(ccRecipients);
  }

  void addCcRecipient(const std::string& ccRecipient) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCcRecipient(ccRecipient);
    }
    ifaces_[i]->addCcRecipient(ccRecipient);
  }

  void getBccRecipients(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBccRecipients(_return);
    }
    ifaces_[i]->getBccRecipients(_return);
    return;
  }

  void setBccRecipients(const std::vector<std::string> & bccRecipients) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setBccRecipients(bccRecipients);
    }
    ifaces_[i]->setBccRecipients(bccRecipients);
  }

  void addBccRecipient(const std::string& bccRecipient) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addBccRecipient(bccRecipient);
    }
    ifaces_[i]->addBccRecipient(bccRecipient);
  }

};

}}} // namespace

#endif
