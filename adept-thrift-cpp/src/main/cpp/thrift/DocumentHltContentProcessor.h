/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DocumentHltContentProcessor_H
#define DocumentHltContentProcessor_H

#include <thrift/TDispatchProcessor.h>
#include "module_types.h"

namespace thrift { namespace adept { namespace module {

class DocumentHltContentProcessorIf {
 public:
  virtual ~DocumentHltContentProcessorIf() {}
  virtual void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) = 0;
  virtual int64_t processAsync(const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) = 0;
  virtual bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents) = 0;
};

class DocumentHltContentProcessorIfFactory {
 public:
  typedef DocumentHltContentProcessorIf Handler;

  virtual ~DocumentHltContentProcessorIfFactory() {}

  virtual DocumentHltContentProcessorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DocumentHltContentProcessorIf* /* handler */) = 0;
};

class DocumentHltContentProcessorIfSingletonFactory : virtual public DocumentHltContentProcessorIfFactory {
 public:
  DocumentHltContentProcessorIfSingletonFactory(const boost::shared_ptr<DocumentHltContentProcessorIf>& iface) : iface_(iface) {}
  virtual ~DocumentHltContentProcessorIfSingletonFactory() {}

  virtual DocumentHltContentProcessorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DocumentHltContentProcessorIf* /* handler */) {}

 protected:
  boost::shared_ptr<DocumentHltContentProcessorIf> iface_;
};

class DocumentHltContentProcessorNull : virtual public DocumentHltContentProcessorIf {
 public:
  virtual ~DocumentHltContentProcessorNull() {}
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & /* _return */, const  ::thrift::adept::common::Document& /* document */, const  ::thrift::adept::common::HltContentContainer& /* hltContentContainer */) {
    return;
  }
  int64_t processAsync(const  ::thrift::adept::common::Document& /* document */, const  ::thrift::adept::common::HltContentContainer& /* hltContentContainer */) {
    int64_t _return = 0;
    return _return;
  }
  bool tryGetResult(const int64_t /* requestId */, const std::vector< ::thrift::adept::common::HltContentUnion> & /* hltContents */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _DocumentHltContentProcessor_process_args__isset {
  _DocumentHltContentProcessor_process_args__isset() : document(false), hltContentContainer(false) {}
  bool document;
  bool hltContentContainer;
} _DocumentHltContentProcessor_process_args__isset;

class DocumentHltContentProcessor_process_args {
 public:

  DocumentHltContentProcessor_process_args() {
  }

  virtual ~DocumentHltContentProcessor_process_args() throw() {}

   ::thrift::adept::common::Document document;
   ::thrift::adept::common::HltContentContainer hltContentContainer;

  _DocumentHltContentProcessor_process_args__isset __isset;

  void __set_document(const  ::thrift::adept::common::Document& val) {
    document = val;
  }

  void __set_hltContentContainer(const  ::thrift::adept::common::HltContentContainer& val) {
    hltContentContainer = val;
  }

  bool operator == (const DocumentHltContentProcessor_process_args & rhs) const
  {
    if (!(document == rhs.document))
      return false;
    if (!(hltContentContainer == rhs.hltContentContainer))
      return false;
    return true;
  }
  bool operator != (const DocumentHltContentProcessor_process_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentHltContentProcessor_process_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentHltContentProcessor_process_pargs {
 public:


  virtual ~DocumentHltContentProcessor_process_pargs() throw() {}

  const  ::thrift::adept::common::Document* document;
  const  ::thrift::adept::common::HltContentContainer* hltContentContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentHltContentProcessor_process_result__isset {
  _DocumentHltContentProcessor_process_result__isset() : success(false) {}
  bool success;
} _DocumentHltContentProcessor_process_result__isset;

class DocumentHltContentProcessor_process_result {
 public:

  DocumentHltContentProcessor_process_result() {
  }

  virtual ~DocumentHltContentProcessor_process_result() throw() {}

  std::vector< ::thrift::adept::common::HltContentUnion>  success;

  _DocumentHltContentProcessor_process_result__isset __isset;

  void __set_success(const std::vector< ::thrift::adept::common::HltContentUnion> & val) {
    success = val;
  }

  bool operator == (const DocumentHltContentProcessor_process_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentHltContentProcessor_process_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentHltContentProcessor_process_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentHltContentProcessor_process_presult__isset {
  _DocumentHltContentProcessor_process_presult__isset() : success(false) {}
  bool success;
} _DocumentHltContentProcessor_process_presult__isset;

class DocumentHltContentProcessor_process_presult {
 public:


  virtual ~DocumentHltContentProcessor_process_presult() throw() {}

  std::vector< ::thrift::adept::common::HltContentUnion> * success;

  _DocumentHltContentProcessor_process_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentHltContentProcessor_processAsync_args__isset {
  _DocumentHltContentProcessor_processAsync_args__isset() : document(false), hltContentContainer(false) {}
  bool document;
  bool hltContentContainer;
} _DocumentHltContentProcessor_processAsync_args__isset;

class DocumentHltContentProcessor_processAsync_args {
 public:

  DocumentHltContentProcessor_processAsync_args() {
  }

  virtual ~DocumentHltContentProcessor_processAsync_args() throw() {}

   ::thrift::adept::common::Document document;
   ::thrift::adept::common::HltContentContainer hltContentContainer;

  _DocumentHltContentProcessor_processAsync_args__isset __isset;

  void __set_document(const  ::thrift::adept::common::Document& val) {
    document = val;
  }

  void __set_hltContentContainer(const  ::thrift::adept::common::HltContentContainer& val) {
    hltContentContainer = val;
  }

  bool operator == (const DocumentHltContentProcessor_processAsync_args & rhs) const
  {
    if (!(document == rhs.document))
      return false;
    if (!(hltContentContainer == rhs.hltContentContainer))
      return false;
    return true;
  }
  bool operator != (const DocumentHltContentProcessor_processAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentHltContentProcessor_processAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentHltContentProcessor_processAsync_pargs {
 public:


  virtual ~DocumentHltContentProcessor_processAsync_pargs() throw() {}

  const  ::thrift::adept::common::Document* document;
  const  ::thrift::adept::common::HltContentContainer* hltContentContainer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentHltContentProcessor_processAsync_result__isset {
  _DocumentHltContentProcessor_processAsync_result__isset() : success(false) {}
  bool success;
} _DocumentHltContentProcessor_processAsync_result__isset;

class DocumentHltContentProcessor_processAsync_result {
 public:

  DocumentHltContentProcessor_processAsync_result() : success(0) {
  }

  virtual ~DocumentHltContentProcessor_processAsync_result() throw() {}

  int64_t success;

  _DocumentHltContentProcessor_processAsync_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const DocumentHltContentProcessor_processAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentHltContentProcessor_processAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentHltContentProcessor_processAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentHltContentProcessor_processAsync_presult__isset {
  _DocumentHltContentProcessor_processAsync_presult__isset() : success(false) {}
  bool success;
} _DocumentHltContentProcessor_processAsync_presult__isset;

class DocumentHltContentProcessor_processAsync_presult {
 public:


  virtual ~DocumentHltContentProcessor_processAsync_presult() throw() {}

  int64_t* success;

  _DocumentHltContentProcessor_processAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DocumentHltContentProcessor_tryGetResult_args__isset {
  _DocumentHltContentProcessor_tryGetResult_args__isset() : requestId(false), hltContents(false) {}
  bool requestId;
  bool hltContents;
} _DocumentHltContentProcessor_tryGetResult_args__isset;

class DocumentHltContentProcessor_tryGetResult_args {
 public:

  DocumentHltContentProcessor_tryGetResult_args() : requestId(0) {
  }

  virtual ~DocumentHltContentProcessor_tryGetResult_args() throw() {}

  int64_t requestId;
  std::vector< ::thrift::adept::common::HltContentUnion>  hltContents;

  _DocumentHltContentProcessor_tryGetResult_args__isset __isset;

  void __set_requestId(const int64_t val) {
    requestId = val;
  }

  void __set_hltContents(const std::vector< ::thrift::adept::common::HltContentUnion> & val) {
    hltContents = val;
  }

  bool operator == (const DocumentHltContentProcessor_tryGetResult_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(hltContents == rhs.hltContents))
      return false;
    return true;
  }
  bool operator != (const DocumentHltContentProcessor_tryGetResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentHltContentProcessor_tryGetResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DocumentHltContentProcessor_tryGetResult_pargs {
 public:


  virtual ~DocumentHltContentProcessor_tryGetResult_pargs() throw() {}

  const int64_t* requestId;
  const std::vector< ::thrift::adept::common::HltContentUnion> * hltContents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentHltContentProcessor_tryGetResult_result__isset {
  _DocumentHltContentProcessor_tryGetResult_result__isset() : success(false) {}
  bool success;
} _DocumentHltContentProcessor_tryGetResult_result__isset;

class DocumentHltContentProcessor_tryGetResult_result {
 public:

  DocumentHltContentProcessor_tryGetResult_result() : success(0) {
  }

  virtual ~DocumentHltContentProcessor_tryGetResult_result() throw() {}

  bool success;

  _DocumentHltContentProcessor_tryGetResult_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DocumentHltContentProcessor_tryGetResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DocumentHltContentProcessor_tryGetResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentHltContentProcessor_tryGetResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DocumentHltContentProcessor_tryGetResult_presult__isset {
  _DocumentHltContentProcessor_tryGetResult_presult__isset() : success(false) {}
  bool success;
} _DocumentHltContentProcessor_tryGetResult_presult__isset;

class DocumentHltContentProcessor_tryGetResult_presult {
 public:


  virtual ~DocumentHltContentProcessor_tryGetResult_presult() throw() {}

  bool* success;

  _DocumentHltContentProcessor_tryGetResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DocumentHltContentProcessorClient : virtual public DocumentHltContentProcessorIf {
 public:
  DocumentHltContentProcessorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DocumentHltContentProcessorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  void send_process(const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  void recv_process(std::vector< ::thrift::adept::common::HltContentUnion> & _return);
  int64_t processAsync(const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  void send_processAsync(const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer);
  int64_t recv_processAsync();
  bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents);
  void send_tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents);
  bool recv_tryGetResult();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DocumentHltContentProcessorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DocumentHltContentProcessorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DocumentHltContentProcessorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_process(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_processAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tryGetResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DocumentHltContentProcessorProcessor(boost::shared_ptr<DocumentHltContentProcessorIf> iface) :
    iface_(iface) {
    processMap_["process"] = &DocumentHltContentProcessorProcessor::process_process;
    processMap_["processAsync"] = &DocumentHltContentProcessorProcessor::process_processAsync;
    processMap_["tryGetResult"] = &DocumentHltContentProcessorProcessor::process_tryGetResult;
  }

  virtual ~DocumentHltContentProcessorProcessor() {}
};

class DocumentHltContentProcessorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DocumentHltContentProcessorProcessorFactory(const ::boost::shared_ptr< DocumentHltContentProcessorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DocumentHltContentProcessorIfFactory > handlerFactory_;
};

class DocumentHltContentProcessorMultiface : virtual public DocumentHltContentProcessorIf {
 public:
  DocumentHltContentProcessorMultiface(std::vector<boost::shared_ptr<DocumentHltContentProcessorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DocumentHltContentProcessorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DocumentHltContentProcessorIf> > ifaces_;
  DocumentHltContentProcessorMultiface() {}
  void add(boost::shared_ptr<DocumentHltContentProcessorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->process(_return, document, hltContentContainer);
    }
    ifaces_[i]->process(_return, document, hltContentContainer);
    return;
  }

  int64_t processAsync(const  ::thrift::adept::common::Document& document, const  ::thrift::adept::common::HltContentContainer& hltContentContainer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->processAsync(document, hltContentContainer);
    }
    return ifaces_[i]->processAsync(document, hltContentContainer);
  }

  bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tryGetResult(requestId, hltContents);
    }
    return ifaces_[i]->tryGetResult(requestId, hltContents);
  }

};

}}} // namespace

#endif
