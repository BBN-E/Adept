/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StoryService_H
#define StoryService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ChunkService.h"

namespace thrift { namespace adept { namespace common {

class StoryServiceIf : virtual public ChunkServiceIf {
 public:
  virtual ~StoryServiceIf() {}
  virtual int64_t getSequenceId() = 0;
  virtual void getTopicLabels(std::vector<std::string> & _return) = 0;
};

class StoryServiceIfFactory : virtual public ChunkServiceIfFactory {
 public:
  typedef StoryServiceIf Handler;

  virtual ~StoryServiceIfFactory() {}

  virtual StoryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class StoryServiceIfSingletonFactory : virtual public StoryServiceIfFactory {
 public:
  StoryServiceIfSingletonFactory(const boost::shared_ptr<StoryServiceIf>& iface) : iface_(iface) {}
  virtual ~StoryServiceIfSingletonFactory() {}

  virtual StoryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<StoryServiceIf> iface_;
};

class StoryServiceNull : virtual public StoryServiceIf , virtual public ChunkServiceNull {
 public:
  virtual ~StoryServiceNull() {}
  int64_t getSequenceId() {
    int64_t _return = 0;
    return _return;
  }
  void getTopicLabels(std::vector<std::string> & /* _return */) {
    return;
  }
};


class StoryService_getSequenceId_args {
 public:

  StoryService_getSequenceId_args() {
  }

  virtual ~StoryService_getSequenceId_args() throw() {}


  bool operator == (const StoryService_getSequenceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StoryService_getSequenceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoryService_getSequenceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoryService_getSequenceId_pargs {
 public:


  virtual ~StoryService_getSequenceId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoryService_getSequenceId_result__isset {
  _StoryService_getSequenceId_result__isset() : success(false) {}
  bool success;
} _StoryService_getSequenceId_result__isset;

class StoryService_getSequenceId_result {
 public:

  StoryService_getSequenceId_result() : success(0) {
  }

  virtual ~StoryService_getSequenceId_result() throw() {}

  int64_t success;

  _StoryService_getSequenceId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const StoryService_getSequenceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoryService_getSequenceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoryService_getSequenceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoryService_getSequenceId_presult__isset {
  _StoryService_getSequenceId_presult__isset() : success(false) {}
  bool success;
} _StoryService_getSequenceId_presult__isset;

class StoryService_getSequenceId_presult {
 public:


  virtual ~StoryService_getSequenceId_presult() throw() {}

  int64_t* success;

  _StoryService_getSequenceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StoryService_getTopicLabels_args {
 public:

  StoryService_getTopicLabels_args() {
  }

  virtual ~StoryService_getTopicLabels_args() throw() {}


  bool operator == (const StoryService_getTopicLabels_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StoryService_getTopicLabels_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoryService_getTopicLabels_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StoryService_getTopicLabels_pargs {
 public:


  virtual ~StoryService_getTopicLabels_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoryService_getTopicLabels_result__isset {
  _StoryService_getTopicLabels_result__isset() : success(false) {}
  bool success;
} _StoryService_getTopicLabels_result__isset;

class StoryService_getTopicLabels_result {
 public:

  StoryService_getTopicLabels_result() {
  }

  virtual ~StoryService_getTopicLabels_result() throw() {}

  std::vector<std::string>  success;

  _StoryService_getTopicLabels_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const StoryService_getTopicLabels_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StoryService_getTopicLabels_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoryService_getTopicLabels_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StoryService_getTopicLabels_presult__isset {
  _StoryService_getTopicLabels_presult__isset() : success(false) {}
  bool success;
} _StoryService_getTopicLabels_presult__isset;

class StoryService_getTopicLabels_presult {
 public:


  virtual ~StoryService_getTopicLabels_presult() throw() {}

  std::vector<std::string> * success;

  _StoryService_getTopicLabels_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StoryServiceClient : virtual public StoryServiceIf, public ChunkServiceClient {
 public:
  StoryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ChunkServiceClient(prot, prot) {}
  StoryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ChunkServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t getSequenceId();
  void send_getSequenceId();
  int64_t recv_getSequenceId();
  void getTopicLabels(std::vector<std::string> & _return);
  void send_getTopicLabels();
  void recv_getTopicLabels(std::vector<std::string> & _return);
};

class StoryServiceProcessor : public ChunkServiceProcessor {
 protected:
  boost::shared_ptr<StoryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StoryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getSequenceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTopicLabels(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StoryServiceProcessor(boost::shared_ptr<StoryServiceIf> iface) :
    ChunkServiceProcessor(iface),
    iface_(iface) {
    processMap_["getSequenceId"] = &StoryServiceProcessor::process_getSequenceId;
    processMap_["getTopicLabels"] = &StoryServiceProcessor::process_getTopicLabels;
  }

  virtual ~StoryServiceProcessor() {}
};

class StoryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StoryServiceProcessorFactory(const ::boost::shared_ptr< StoryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StoryServiceIfFactory > handlerFactory_;
};

class StoryServiceMultiface : virtual public StoryServiceIf, public ChunkServiceMultiface {
 public:
  StoryServiceMultiface(std::vector<boost::shared_ptr<StoryServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<StoryServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ChunkServiceMultiface::add(*iter);
    }
  }
  virtual ~StoryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StoryServiceIf> > ifaces_;
  StoryServiceMultiface() {}
  void add(boost::shared_ptr<StoryServiceIf> iface) {
    ChunkServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  int64_t getSequenceId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSequenceId();
    }
    return ifaces_[i]->getSequenceId();
  }

  void getTopicLabels(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTopicLabels(_return);
    }
    ifaces_[i]->getTopicLabels(_return);
    return;
  }

};

}}} // namespace

#endif