/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ModuleConfigService_H
#define ModuleConfigService_H

#include <thrift/TDispatchProcessor.h>
#include "module_types.h"

namespace thrift { namespace adept { namespace module {

class ModuleConfigServiceIf {
 public:
  virtual ~ModuleConfigServiceIf() {}
  virtual void loadModuleConfig(const std::string& configFilePath) = 0;
};

class ModuleConfigServiceIfFactory {
 public:
  typedef ModuleConfigServiceIf Handler;

  virtual ~ModuleConfigServiceIfFactory() {}

  virtual ModuleConfigServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ModuleConfigServiceIf* /* handler */) = 0;
};

class ModuleConfigServiceIfSingletonFactory : virtual public ModuleConfigServiceIfFactory {
 public:
  ModuleConfigServiceIfSingletonFactory(const boost::shared_ptr<ModuleConfigServiceIf>& iface) : iface_(iface) {}
  virtual ~ModuleConfigServiceIfSingletonFactory() {}

  virtual ModuleConfigServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ModuleConfigServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ModuleConfigServiceIf> iface_;
};

class ModuleConfigServiceNull : virtual public ModuleConfigServiceIf {
 public:
  virtual ~ModuleConfigServiceNull() {}
  void loadModuleConfig(const std::string& /* configFilePath */) {
    return;
  }
};

typedef struct _ModuleConfigService_loadModuleConfig_args__isset {
  _ModuleConfigService_loadModuleConfig_args__isset() : configFilePath(false) {}
  bool configFilePath;
} _ModuleConfigService_loadModuleConfig_args__isset;

class ModuleConfigService_loadModuleConfig_args {
 public:

  ModuleConfigService_loadModuleConfig_args() : configFilePath() {
  }

  virtual ~ModuleConfigService_loadModuleConfig_args() throw() {}

  std::string configFilePath;

  _ModuleConfigService_loadModuleConfig_args__isset __isset;

  void __set_configFilePath(const std::string& val) {
    configFilePath = val;
  }

  bool operator == (const ModuleConfigService_loadModuleConfig_args & rhs) const
  {
    if (!(configFilePath == rhs.configFilePath))
      return false;
    return true;
  }
  bool operator != (const ModuleConfigService_loadModuleConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModuleConfigService_loadModuleConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModuleConfigService_loadModuleConfig_pargs {
 public:


  virtual ~ModuleConfigService_loadModuleConfig_pargs() throw() {}

  const std::string* configFilePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModuleConfigService_loadModuleConfig_result {
 public:

  ModuleConfigService_loadModuleConfig_result() {
  }

  virtual ~ModuleConfigService_loadModuleConfig_result() throw() {}


  bool operator == (const ModuleConfigService_loadModuleConfig_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ModuleConfigService_loadModuleConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModuleConfigService_loadModuleConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModuleConfigService_loadModuleConfig_presult {
 public:


  virtual ~ModuleConfigService_loadModuleConfig_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ModuleConfigServiceClient : virtual public ModuleConfigServiceIf {
 public:
  ModuleConfigServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ModuleConfigServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void loadModuleConfig(const std::string& configFilePath);
  void send_loadModuleConfig(const std::string& configFilePath);
  void recv_loadModuleConfig();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ModuleConfigServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ModuleConfigServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ModuleConfigServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_loadModuleConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ModuleConfigServiceProcessor(boost::shared_ptr<ModuleConfigServiceIf> iface) :
    iface_(iface) {
    processMap_["loadModuleConfig"] = &ModuleConfigServiceProcessor::process_loadModuleConfig;
  }

  virtual ~ModuleConfigServiceProcessor() {}
};

class ModuleConfigServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ModuleConfigServiceProcessorFactory(const ::boost::shared_ptr< ModuleConfigServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ModuleConfigServiceIfFactory > handlerFactory_;
};

class ModuleConfigServiceMultiface : virtual public ModuleConfigServiceIf {
 public:
  ModuleConfigServiceMultiface(std::vector<boost::shared_ptr<ModuleConfigServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ModuleConfigServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ModuleConfigServiceIf> > ifaces_;
  ModuleConfigServiceMultiface() {}
  void add(boost::shared_ptr<ModuleConfigServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void loadModuleConfig(const std::string& configFilePath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadModuleConfig(configFilePath);
    }
    ifaces_[i]->loadModuleConfig(configFilePath);
  }

};

}}} // namespace

#endif