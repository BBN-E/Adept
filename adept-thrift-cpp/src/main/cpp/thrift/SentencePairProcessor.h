/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SentencePairProcessor_H
#define SentencePairProcessor_H

#include <thrift/TDispatchProcessor.h>
#include "module_types.h"

namespace thrift { namespace adept { namespace module {

class SentencePairProcessorIf {
 public:
  virtual ~SentencePairProcessorIf() {}
  virtual void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2) = 0;
  virtual int64_t processAsync(const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2) = 0;
  virtual bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents) = 0;
};

class SentencePairProcessorIfFactory {
 public:
  typedef SentencePairProcessorIf Handler;

  virtual ~SentencePairProcessorIfFactory() {}

  virtual SentencePairProcessorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SentencePairProcessorIf* /* handler */) = 0;
};

class SentencePairProcessorIfSingletonFactory : virtual public SentencePairProcessorIfFactory {
 public:
  SentencePairProcessorIfSingletonFactory(const boost::shared_ptr<SentencePairProcessorIf>& iface) : iface_(iface) {}
  virtual ~SentencePairProcessorIfSingletonFactory() {}

  virtual SentencePairProcessorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SentencePairProcessorIf* /* handler */) {}

 protected:
  boost::shared_ptr<SentencePairProcessorIf> iface_;
};

class SentencePairProcessorNull : virtual public SentencePairProcessorIf {
 public:
  virtual ~SentencePairProcessorNull() {}
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & /* _return */, const  ::thrift::adept::common::Sentence& /* sentence1 */, const  ::thrift::adept::common::Sentence& /* sentence2 */) {
    return;
  }
  int64_t processAsync(const  ::thrift::adept::common::Sentence& /* sentence1 */, const  ::thrift::adept::common::Sentence& /* sentence2 */) {
    int64_t _return = 0;
    return _return;
  }
  bool tryGetResult(const int64_t /* requestId */, const std::vector< ::thrift::adept::common::HltContentUnion> & /* hltContents */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SentencePairProcessor_process_args__isset {
  _SentencePairProcessor_process_args__isset() : sentence1(false), sentence2(false) {}
  bool sentence1;
  bool sentence2;
} _SentencePairProcessor_process_args__isset;

class SentencePairProcessor_process_args {
 public:

  SentencePairProcessor_process_args() {
  }

  virtual ~SentencePairProcessor_process_args() throw() {}

   ::thrift::adept::common::Sentence sentence1;
   ::thrift::adept::common::Sentence sentence2;

  _SentencePairProcessor_process_args__isset __isset;

  void __set_sentence1(const  ::thrift::adept::common::Sentence& val) {
    sentence1 = val;
  }

  void __set_sentence2(const  ::thrift::adept::common::Sentence& val) {
    sentence2 = val;
  }

  bool operator == (const SentencePairProcessor_process_args & rhs) const
  {
    if (!(sentence1 == rhs.sentence1))
      return false;
    if (!(sentence2 == rhs.sentence2))
      return false;
    return true;
  }
  bool operator != (const SentencePairProcessor_process_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentencePairProcessor_process_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SentencePairProcessor_process_pargs {
 public:


  virtual ~SentencePairProcessor_process_pargs() throw() {}

  const  ::thrift::adept::common::Sentence* sentence1;
  const  ::thrift::adept::common::Sentence* sentence2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentencePairProcessor_process_result__isset {
  _SentencePairProcessor_process_result__isset() : success(false) {}
  bool success;
} _SentencePairProcessor_process_result__isset;

class SentencePairProcessor_process_result {
 public:

  SentencePairProcessor_process_result() {
  }

  virtual ~SentencePairProcessor_process_result() throw() {}

  std::vector< ::thrift::adept::common::HltContentUnion>  success;

  _SentencePairProcessor_process_result__isset __isset;

  void __set_success(const std::vector< ::thrift::adept::common::HltContentUnion> & val) {
    success = val;
  }

  bool operator == (const SentencePairProcessor_process_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SentencePairProcessor_process_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentencePairProcessor_process_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentencePairProcessor_process_presult__isset {
  _SentencePairProcessor_process_presult__isset() : success(false) {}
  bool success;
} _SentencePairProcessor_process_presult__isset;

class SentencePairProcessor_process_presult {
 public:


  virtual ~SentencePairProcessor_process_presult() throw() {}

  std::vector< ::thrift::adept::common::HltContentUnion> * success;

  _SentencePairProcessor_process_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SentencePairProcessor_processAsync_args__isset {
  _SentencePairProcessor_processAsync_args__isset() : sentence1(false), sentence2(false) {}
  bool sentence1;
  bool sentence2;
} _SentencePairProcessor_processAsync_args__isset;

class SentencePairProcessor_processAsync_args {
 public:

  SentencePairProcessor_processAsync_args() {
  }

  virtual ~SentencePairProcessor_processAsync_args() throw() {}

   ::thrift::adept::common::Sentence sentence1;
   ::thrift::adept::common::Sentence sentence2;

  _SentencePairProcessor_processAsync_args__isset __isset;

  void __set_sentence1(const  ::thrift::adept::common::Sentence& val) {
    sentence1 = val;
  }

  void __set_sentence2(const  ::thrift::adept::common::Sentence& val) {
    sentence2 = val;
  }

  bool operator == (const SentencePairProcessor_processAsync_args & rhs) const
  {
    if (!(sentence1 == rhs.sentence1))
      return false;
    if (!(sentence2 == rhs.sentence2))
      return false;
    return true;
  }
  bool operator != (const SentencePairProcessor_processAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentencePairProcessor_processAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SentencePairProcessor_processAsync_pargs {
 public:


  virtual ~SentencePairProcessor_processAsync_pargs() throw() {}

  const  ::thrift::adept::common::Sentence* sentence1;
  const  ::thrift::adept::common::Sentence* sentence2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentencePairProcessor_processAsync_result__isset {
  _SentencePairProcessor_processAsync_result__isset() : success(false) {}
  bool success;
} _SentencePairProcessor_processAsync_result__isset;

class SentencePairProcessor_processAsync_result {
 public:

  SentencePairProcessor_processAsync_result() : success(0) {
  }

  virtual ~SentencePairProcessor_processAsync_result() throw() {}

  int64_t success;

  _SentencePairProcessor_processAsync_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const SentencePairProcessor_processAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SentencePairProcessor_processAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentencePairProcessor_processAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentencePairProcessor_processAsync_presult__isset {
  _SentencePairProcessor_processAsync_presult__isset() : success(false) {}
  bool success;
} _SentencePairProcessor_processAsync_presult__isset;

class SentencePairProcessor_processAsync_presult {
 public:


  virtual ~SentencePairProcessor_processAsync_presult() throw() {}

  int64_t* success;

  _SentencePairProcessor_processAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SentencePairProcessor_tryGetResult_args__isset {
  _SentencePairProcessor_tryGetResult_args__isset() : requestId(false), hltContents(false) {}
  bool requestId;
  bool hltContents;
} _SentencePairProcessor_tryGetResult_args__isset;

class SentencePairProcessor_tryGetResult_args {
 public:

  SentencePairProcessor_tryGetResult_args() : requestId(0) {
  }

  virtual ~SentencePairProcessor_tryGetResult_args() throw() {}

  int64_t requestId;
  std::vector< ::thrift::adept::common::HltContentUnion>  hltContents;

  _SentencePairProcessor_tryGetResult_args__isset __isset;

  void __set_requestId(const int64_t val) {
    requestId = val;
  }

  void __set_hltContents(const std::vector< ::thrift::adept::common::HltContentUnion> & val) {
    hltContents = val;
  }

  bool operator == (const SentencePairProcessor_tryGetResult_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(hltContents == rhs.hltContents))
      return false;
    return true;
  }
  bool operator != (const SentencePairProcessor_tryGetResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentencePairProcessor_tryGetResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SentencePairProcessor_tryGetResult_pargs {
 public:


  virtual ~SentencePairProcessor_tryGetResult_pargs() throw() {}

  const int64_t* requestId;
  const std::vector< ::thrift::adept::common::HltContentUnion> * hltContents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentencePairProcessor_tryGetResult_result__isset {
  _SentencePairProcessor_tryGetResult_result__isset() : success(false) {}
  bool success;
} _SentencePairProcessor_tryGetResult_result__isset;

class SentencePairProcessor_tryGetResult_result {
 public:

  SentencePairProcessor_tryGetResult_result() : success(0) {
  }

  virtual ~SentencePairProcessor_tryGetResult_result() throw() {}

  bool success;

  _SentencePairProcessor_tryGetResult_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const SentencePairProcessor_tryGetResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SentencePairProcessor_tryGetResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SentencePairProcessor_tryGetResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SentencePairProcessor_tryGetResult_presult__isset {
  _SentencePairProcessor_tryGetResult_presult__isset() : success(false) {}
  bool success;
} _SentencePairProcessor_tryGetResult_presult__isset;

class SentencePairProcessor_tryGetResult_presult {
 public:


  virtual ~SentencePairProcessor_tryGetResult_presult() throw() {}

  bool* success;

  _SentencePairProcessor_tryGetResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SentencePairProcessorClient : virtual public SentencePairProcessorIf {
 public:
  SentencePairProcessorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SentencePairProcessorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2);
  void send_process(const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2);
  void recv_process(std::vector< ::thrift::adept::common::HltContentUnion> & _return);
  int64_t processAsync(const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2);
  void send_processAsync(const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2);
  int64_t recv_processAsync();
  bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents);
  void send_tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents);
  bool recv_tryGetResult();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SentencePairProcessorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SentencePairProcessorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SentencePairProcessorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_process(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_processAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tryGetResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SentencePairProcessorProcessor(boost::shared_ptr<SentencePairProcessorIf> iface) :
    iface_(iface) {
    processMap_["process"] = &SentencePairProcessorProcessor::process_process;
    processMap_["processAsync"] = &SentencePairProcessorProcessor::process_processAsync;
    processMap_["tryGetResult"] = &SentencePairProcessorProcessor::process_tryGetResult;
  }

  virtual ~SentencePairProcessorProcessor() {}
};

class SentencePairProcessorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SentencePairProcessorProcessorFactory(const ::boost::shared_ptr< SentencePairProcessorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SentencePairProcessorIfFactory > handlerFactory_;
};

class SentencePairProcessorMultiface : virtual public SentencePairProcessorIf {
 public:
  SentencePairProcessorMultiface(std::vector<boost::shared_ptr<SentencePairProcessorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SentencePairProcessorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SentencePairProcessorIf> > ifaces_;
  SentencePairProcessorMultiface() {}
  void add(boost::shared_ptr<SentencePairProcessorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void process(std::vector< ::thrift::adept::common::HltContentUnion> & _return, const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->process(_return, sentence1, sentence2);
    }
    ifaces_[i]->process(_return, sentence1, sentence2);
    return;
  }

  int64_t processAsync(const  ::thrift::adept::common::Sentence& sentence1, const  ::thrift::adept::common::Sentence& sentence2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->processAsync(sentence1, sentence2);
    }
    return ifaces_[i]->processAsync(sentence1, sentence2);
  }

  bool tryGetResult(const int64_t requestId, const std::vector< ::thrift::adept::common::HltContentUnion> & hltContents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tryGetResult(requestId, hltContents);
    }
    return ifaces_[i]->tryGetResult(requestId, hltContents);
  }

};

}}} // namespace

#endif