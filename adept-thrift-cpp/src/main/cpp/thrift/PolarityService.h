/*******************************************************************************
 * Raytheon BBN Technologies Corp., December 2014
 * 
 * THIS CODE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Copyright 2014 Raytheon BBN Technologies Corp.  All Rights Reserved.
 ******************************************************************************/
/**
 * 
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PolarityService_H
#define PolarityService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class PolarityServiceIf {
 public:
  virtual ~PolarityServiceIf() {}
  virtual Polarity::type valueOf(const std::string& name) = 0;
  virtual Polarity::type values() = 0;
};

class PolarityServiceIfFactory {
 public:
  typedef PolarityServiceIf Handler;

  virtual ~PolarityServiceIfFactory() {}

  virtual PolarityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PolarityServiceIf* /* handler */) = 0;
};

class PolarityServiceIfSingletonFactory : virtual public PolarityServiceIfFactory {
 public:
  PolarityServiceIfSingletonFactory(const boost::shared_ptr<PolarityServiceIf>& iface) : iface_(iface) {}
  virtual ~PolarityServiceIfSingletonFactory() {}

  virtual PolarityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PolarityServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PolarityServiceIf> iface_;
};

class PolarityServiceNull : virtual public PolarityServiceIf {
 public:
  virtual ~PolarityServiceNull() {}
  Polarity::type valueOf(const std::string& /* name */) {
    Polarity::type _return = (Polarity::type)0;
    return _return;
  }
  Polarity::type values() {
    Polarity::type _return = (Polarity::type)0;
    return _return;
  }
};

typedef struct _PolarityService_valueOf_args__isset {
  _PolarityService_valueOf_args__isset() : name(false) {}
  bool name;
} _PolarityService_valueOf_args__isset;

class PolarityService_valueOf_args {
 public:

  PolarityService_valueOf_args() : name() {
  }

  virtual ~PolarityService_valueOf_args() throw() {}

  std::string name;

  _PolarityService_valueOf_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const PolarityService_valueOf_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const PolarityService_valueOf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PolarityService_valueOf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PolarityService_valueOf_pargs {
 public:


  virtual ~PolarityService_valueOf_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PolarityService_valueOf_result__isset {
  _PolarityService_valueOf_result__isset() : success(false) {}
  bool success;
} _PolarityService_valueOf_result__isset;

class PolarityService_valueOf_result {
 public:

  PolarityService_valueOf_result() : success((Polarity::type)0) {
  }

  virtual ~PolarityService_valueOf_result() throw() {}

  Polarity::type success;

  _PolarityService_valueOf_result__isset __isset;

  void __set_success(const Polarity::type val) {
    success = val;
  }

  bool operator == (const PolarityService_valueOf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PolarityService_valueOf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PolarityService_valueOf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PolarityService_valueOf_presult__isset {
  _PolarityService_valueOf_presult__isset() : success(false) {}
  bool success;
} _PolarityService_valueOf_presult__isset;

class PolarityService_valueOf_presult {
 public:


  virtual ~PolarityService_valueOf_presult() throw() {}

  Polarity::type* success;

  _PolarityService_valueOf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PolarityService_values_args {
 public:

  PolarityService_values_args() {
  }

  virtual ~PolarityService_values_args() throw() {}


  bool operator == (const PolarityService_values_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PolarityService_values_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PolarityService_values_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PolarityService_values_pargs {
 public:


  virtual ~PolarityService_values_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PolarityService_values_result__isset {
  _PolarityService_values_result__isset() : success(false) {}
  bool success;
} _PolarityService_values_result__isset;

class PolarityService_values_result {
 public:

  PolarityService_values_result() : success((Polarity::type)0) {
  }

  virtual ~PolarityService_values_result() throw() {}

  Polarity::type success;

  _PolarityService_values_result__isset __isset;

  void __set_success(const Polarity::type val) {
    success = val;
  }

  bool operator == (const PolarityService_values_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PolarityService_values_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PolarityService_values_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PolarityService_values_presult__isset {
  _PolarityService_values_presult__isset() : success(false) {}
  bool success;
} _PolarityService_values_presult__isset;

class PolarityService_values_presult {
 public:


  virtual ~PolarityService_values_presult() throw() {}

  Polarity::type* success;

  _PolarityService_values_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PolarityServiceClient : virtual public PolarityServiceIf {
 public:
  PolarityServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PolarityServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  Polarity::type valueOf(const std::string& name);
  void send_valueOf(const std::string& name);
  Polarity::type recv_valueOf();
  Polarity::type values();
  void send_values();
  Polarity::type recv_values();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PolarityServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PolarityServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PolarityServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_valueOf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_values(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PolarityServiceProcessor(boost::shared_ptr<PolarityServiceIf> iface) :
    iface_(iface) {
    processMap_["valueOf"] = &PolarityServiceProcessor::process_valueOf;
    processMap_["values"] = &PolarityServiceProcessor::process_values;
  }

  virtual ~PolarityServiceProcessor() {}
};

class PolarityServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PolarityServiceProcessorFactory(const ::boost::shared_ptr< PolarityServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PolarityServiceIfFactory > handlerFactory_;
};

class PolarityServiceMultiface : virtual public PolarityServiceIf {
 public:
  PolarityServiceMultiface(std::vector<boost::shared_ptr<PolarityServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PolarityServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PolarityServiceIf> > ifaces_;
  PolarityServiceMultiface() {}
  void add(boost::shared_ptr<PolarityServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  Polarity::type valueOf(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->valueOf(name);
    }
    return ifaces_[i]->valueOf(name);
  }

  Polarity::type values() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->values();
    }
    return ifaces_[i]->values();
  }

};

}}} // namespace

#endif
