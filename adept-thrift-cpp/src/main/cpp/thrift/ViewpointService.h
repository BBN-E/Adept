/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ViewpointService_H
#define ViewpointService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"

namespace thrift { namespace adept { namespace common {

class ViewpointServiceIf {
 public:
  virtual ~ViewpointServiceIf() {}
  virtual void getBelief(std::string& _return) = 0;
  virtual void getSpeakerId(std::string& _return) = 0;
};

class ViewpointServiceIfFactory {
 public:
  typedef ViewpointServiceIf Handler;

  virtual ~ViewpointServiceIfFactory() {}

  virtual ViewpointServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ViewpointServiceIf* /* handler */) = 0;
};

class ViewpointServiceIfSingletonFactory : virtual public ViewpointServiceIfFactory {
 public:
  ViewpointServiceIfSingletonFactory(const boost::shared_ptr<ViewpointServiceIf>& iface) : iface_(iface) {}
  virtual ~ViewpointServiceIfSingletonFactory() {}

  virtual ViewpointServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ViewpointServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ViewpointServiceIf> iface_;
};

class ViewpointServiceNull : virtual public ViewpointServiceIf {
 public:
  virtual ~ViewpointServiceNull() {}
  void getBelief(std::string& /* _return */) {
    return;
  }
  void getSpeakerId(std::string& /* _return */) {
    return;
  }
};


class ViewpointService_getBelief_args {
 public:

  ViewpointService_getBelief_args() {
  }

  virtual ~ViewpointService_getBelief_args() throw() {}


  bool operator == (const ViewpointService_getBelief_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ViewpointService_getBelief_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewpointService_getBelief_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ViewpointService_getBelief_pargs {
 public:


  virtual ~ViewpointService_getBelief_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ViewpointService_getBelief_result__isset {
  _ViewpointService_getBelief_result__isset() : success(false) {}
  bool success;
} _ViewpointService_getBelief_result__isset;

class ViewpointService_getBelief_result {
 public:

  ViewpointService_getBelief_result() : success() {
  }

  virtual ~ViewpointService_getBelief_result() throw() {}

  std::string success;

  _ViewpointService_getBelief_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ViewpointService_getBelief_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ViewpointService_getBelief_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewpointService_getBelief_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ViewpointService_getBelief_presult__isset {
  _ViewpointService_getBelief_presult__isset() : success(false) {}
  bool success;
} _ViewpointService_getBelief_presult__isset;

class ViewpointService_getBelief_presult {
 public:


  virtual ~ViewpointService_getBelief_presult() throw() {}

  std::string* success;

  _ViewpointService_getBelief_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ViewpointService_getSpeakerId_args {
 public:

  ViewpointService_getSpeakerId_args() {
  }

  virtual ~ViewpointService_getSpeakerId_args() throw() {}


  bool operator == (const ViewpointService_getSpeakerId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ViewpointService_getSpeakerId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewpointService_getSpeakerId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ViewpointService_getSpeakerId_pargs {
 public:


  virtual ~ViewpointService_getSpeakerId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ViewpointService_getSpeakerId_result__isset {
  _ViewpointService_getSpeakerId_result__isset() : success(false) {}
  bool success;
} _ViewpointService_getSpeakerId_result__isset;

class ViewpointService_getSpeakerId_result {
 public:

  ViewpointService_getSpeakerId_result() : success() {
  }

  virtual ~ViewpointService_getSpeakerId_result() throw() {}

  std::string success;

  _ViewpointService_getSpeakerId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ViewpointService_getSpeakerId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ViewpointService_getSpeakerId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ViewpointService_getSpeakerId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ViewpointService_getSpeakerId_presult__isset {
  _ViewpointService_getSpeakerId_presult__isset() : success(false) {}
  bool success;
} _ViewpointService_getSpeakerId_presult__isset;

class ViewpointService_getSpeakerId_presult {
 public:


  virtual ~ViewpointService_getSpeakerId_presult() throw() {}

  std::string* success;

  _ViewpointService_getSpeakerId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ViewpointServiceClient : virtual public ViewpointServiceIf {
 public:
  ViewpointServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ViewpointServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getBelief(std::string& _return);
  void send_getBelief();
  void recv_getBelief(std::string& _return);
  void getSpeakerId(std::string& _return);
  void send_getSpeakerId();
  void recv_getSpeakerId(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ViewpointServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ViewpointServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ViewpointServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getBelief(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSpeakerId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ViewpointServiceProcessor(boost::shared_ptr<ViewpointServiceIf> iface) :
    iface_(iface) {
    processMap_["getBelief"] = &ViewpointServiceProcessor::process_getBelief;
    processMap_["getSpeakerId"] = &ViewpointServiceProcessor::process_getSpeakerId;
  }

  virtual ~ViewpointServiceProcessor() {}
};

class ViewpointServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ViewpointServiceProcessorFactory(const ::boost::shared_ptr< ViewpointServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ViewpointServiceIfFactory > handlerFactory_;
};

class ViewpointServiceMultiface : virtual public ViewpointServiceIf {
 public:
  ViewpointServiceMultiface(std::vector<boost::shared_ptr<ViewpointServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ViewpointServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ViewpointServiceIf> > ifaces_;
  ViewpointServiceMultiface() {}
  void add(boost::shared_ptr<ViewpointServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getBelief(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBelief(_return);
    }
    ifaces_[i]->getBelief(_return);
    return;
  }

  void getSpeakerId(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSpeakerId(_return);
    }
    ifaces_[i]->getSpeakerId(_return);
    return;
  }

};

}}} // namespace

#endif