/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EntityMentionService_H
#define EntityMentionService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ChunkService.h"

namespace thrift { namespace adept { namespace common {

class EntityMentionServiceIf : virtual public ChunkServiceIf {
 public:
  virtual ~EntityMentionServiceIf() {}
  virtual void addEntityConfidencePair(const int64_t entityId, const double confidence) = 0;
  virtual bool equals(const EntityMention& obj) = 0;
  virtual double getConfidence(const int64_t entityId) = 0;
  virtual void getEntityIdDistribution(std::map<int64_t, double> & _return) = 0;
  virtual void getEntityType(Type& _return) = 0;
  virtual void getMentionType(Type& _return) = 0;
  virtual int64_t getSequenceId() = 0;
  virtual void setEntityIdDistribution(const std::map<int64_t, double> & entityIdDistribution) = 0;
  virtual void setEntityType(const Type& entityType) = 0;
  virtual void setMentionType(const Type& mentionType) = 0;
};

class EntityMentionServiceIfFactory : virtual public ChunkServiceIfFactory {
 public:
  typedef EntityMentionServiceIf Handler;

  virtual ~EntityMentionServiceIfFactory() {}

  virtual EntityMentionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class EntityMentionServiceIfSingletonFactory : virtual public EntityMentionServiceIfFactory {
 public:
  EntityMentionServiceIfSingletonFactory(const boost::shared_ptr<EntityMentionServiceIf>& iface) : iface_(iface) {}
  virtual ~EntityMentionServiceIfSingletonFactory() {}

  virtual EntityMentionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<EntityMentionServiceIf> iface_;
};

class EntityMentionServiceNull : virtual public EntityMentionServiceIf , virtual public ChunkServiceNull {
 public:
  virtual ~EntityMentionServiceNull() {}
  void addEntityConfidencePair(const int64_t /* entityId */, const double /* confidence */) {
    return;
  }
  bool equals(const EntityMention& /* obj */) {
    bool _return = false;
    return _return;
  }
  double getConfidence(const int64_t /* entityId */) {
    double _return = (double)0;
    return _return;
  }
  void getEntityIdDistribution(std::map<int64_t, double> & /* _return */) {
    return;
  }
  void getEntityType(Type& /* _return */) {
    return;
  }
  void getMentionType(Type& /* _return */) {
    return;
  }
  int64_t getSequenceId() {
    int64_t _return = 0;
    return _return;
  }
  void setEntityIdDistribution(const std::map<int64_t, double> & /* entityIdDistribution */) {
    return;
  }
  void setEntityType(const Type& /* entityType */) {
    return;
  }
  void setMentionType(const Type& /* mentionType */) {
    return;
  }
};

typedef struct _EntityMentionService_addEntityConfidencePair_args__isset {
  _EntityMentionService_addEntityConfidencePair_args__isset() : entityId(false), confidence(false) {}
  bool entityId;
  bool confidence;
} _EntityMentionService_addEntityConfidencePair_args__isset;

class EntityMentionService_addEntityConfidencePair_args {
 public:

  EntityMentionService_addEntityConfidencePair_args() : entityId(0), confidence(0) {
  }

  virtual ~EntityMentionService_addEntityConfidencePair_args() throw() {}

  int64_t entityId;
  double confidence;

  _EntityMentionService_addEntityConfidencePair_args__isset __isset;

  void __set_entityId(const int64_t val) {
    entityId = val;
  }

  void __set_confidence(const double val) {
    confidence = val;
  }

  bool operator == (const EntityMentionService_addEntityConfidencePair_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(confidence == rhs.confidence))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_addEntityConfidencePair_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_addEntityConfidencePair_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_addEntityConfidencePair_pargs {
 public:


  virtual ~EntityMentionService_addEntityConfidencePair_pargs() throw() {}

  const int64_t* entityId;
  const double* confidence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_addEntityConfidencePair_result {
 public:

  EntityMentionService_addEntityConfidencePair_result() {
  }

  virtual ~EntityMentionService_addEntityConfidencePair_result() throw() {}


  bool operator == (const EntityMentionService_addEntityConfidencePair_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_addEntityConfidencePair_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_addEntityConfidencePair_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_addEntityConfidencePair_presult {
 public:


  virtual ~EntityMentionService_addEntityConfidencePair_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntityMentionService_equals_args__isset {
  _EntityMentionService_equals_args__isset() : obj(false) {}
  bool obj;
} _EntityMentionService_equals_args__isset;

class EntityMentionService_equals_args {
 public:

  EntityMentionService_equals_args() {
  }

  virtual ~EntityMentionService_equals_args() throw() {}

  EntityMention obj;

  _EntityMentionService_equals_args__isset __isset;

  void __set_obj(const EntityMention& val) {
    obj = val;
  }

  bool operator == (const EntityMentionService_equals_args & rhs) const
  {
    if (!(obj == rhs.obj))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_equals_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_equals_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_equals_pargs {
 public:


  virtual ~EntityMentionService_equals_pargs() throw() {}

  const EntityMention* obj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_equals_result__isset {
  _EntityMentionService_equals_result__isset() : success(false) {}
  bool success;
} _EntityMentionService_equals_result__isset;

class EntityMentionService_equals_result {
 public:

  EntityMentionService_equals_result() : success(0) {
  }

  virtual ~EntityMentionService_equals_result() throw() {}

  bool success;

  _EntityMentionService_equals_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const EntityMentionService_equals_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_equals_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_equals_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_equals_presult__isset {
  _EntityMentionService_equals_presult__isset() : success(false) {}
  bool success;
} _EntityMentionService_equals_presult__isset;

class EntityMentionService_equals_presult {
 public:


  virtual ~EntityMentionService_equals_presult() throw() {}

  bool* success;

  _EntityMentionService_equals_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntityMentionService_getConfidence_args__isset {
  _EntityMentionService_getConfidence_args__isset() : entityId(false) {}
  bool entityId;
} _EntityMentionService_getConfidence_args__isset;

class EntityMentionService_getConfidence_args {
 public:

  EntityMentionService_getConfidence_args() : entityId(0) {
  }

  virtual ~EntityMentionService_getConfidence_args() throw() {}

  int64_t entityId;

  _EntityMentionService_getConfidence_args__isset __isset;

  void __set_entityId(const int64_t val) {
    entityId = val;
  }

  bool operator == (const EntityMentionService_getConfidence_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_getConfidence_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getConfidence_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_getConfidence_pargs {
 public:


  virtual ~EntityMentionService_getConfidence_pargs() throw() {}

  const int64_t* entityId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getConfidence_result__isset {
  _EntityMentionService_getConfidence_result__isset() : success(false) {}
  bool success;
} _EntityMentionService_getConfidence_result__isset;

class EntityMentionService_getConfidence_result {
 public:

  EntityMentionService_getConfidence_result() : success(0) {
  }

  virtual ~EntityMentionService_getConfidence_result() throw() {}

  double success;

  _EntityMentionService_getConfidence_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const EntityMentionService_getConfidence_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_getConfidence_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getConfidence_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getConfidence_presult__isset {
  _EntityMentionService_getConfidence_presult__isset() : success(false) {}
  bool success;
} _EntityMentionService_getConfidence_presult__isset;

class EntityMentionService_getConfidence_presult {
 public:


  virtual ~EntityMentionService_getConfidence_presult() throw() {}

  double* success;

  _EntityMentionService_getConfidence_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityMentionService_getEntityIdDistribution_args {
 public:

  EntityMentionService_getEntityIdDistribution_args() {
  }

  virtual ~EntityMentionService_getEntityIdDistribution_args() throw() {}


  bool operator == (const EntityMentionService_getEntityIdDistribution_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_getEntityIdDistribution_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getEntityIdDistribution_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_getEntityIdDistribution_pargs {
 public:


  virtual ~EntityMentionService_getEntityIdDistribution_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getEntityIdDistribution_result__isset {
  _EntityMentionService_getEntityIdDistribution_result__isset() : success(false) {}
  bool success;
} _EntityMentionService_getEntityIdDistribution_result__isset;

class EntityMentionService_getEntityIdDistribution_result {
 public:

  EntityMentionService_getEntityIdDistribution_result() {
  }

  virtual ~EntityMentionService_getEntityIdDistribution_result() throw() {}

  std::map<int64_t, double>  success;

  _EntityMentionService_getEntityIdDistribution_result__isset __isset;

  void __set_success(const std::map<int64_t, double> & val) {
    success = val;
  }

  bool operator == (const EntityMentionService_getEntityIdDistribution_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_getEntityIdDistribution_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getEntityIdDistribution_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getEntityIdDistribution_presult__isset {
  _EntityMentionService_getEntityIdDistribution_presult__isset() : success(false) {}
  bool success;
} _EntityMentionService_getEntityIdDistribution_presult__isset;

class EntityMentionService_getEntityIdDistribution_presult {
 public:


  virtual ~EntityMentionService_getEntityIdDistribution_presult() throw() {}

  std::map<int64_t, double> * success;

  _EntityMentionService_getEntityIdDistribution_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityMentionService_getEntityType_args {
 public:

  EntityMentionService_getEntityType_args() {
  }

  virtual ~EntityMentionService_getEntityType_args() throw() {}


  bool operator == (const EntityMentionService_getEntityType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_getEntityType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getEntityType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_getEntityType_pargs {
 public:


  virtual ~EntityMentionService_getEntityType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getEntityType_result__isset {
  _EntityMentionService_getEntityType_result__isset() : success(false) {}
  bool success;
} _EntityMentionService_getEntityType_result__isset;

class EntityMentionService_getEntityType_result {
 public:

  EntityMentionService_getEntityType_result() {
  }

  virtual ~EntityMentionService_getEntityType_result() throw() {}

  Type success;

  _EntityMentionService_getEntityType_result__isset __isset;

  void __set_success(const Type& val) {
    success = val;
  }

  bool operator == (const EntityMentionService_getEntityType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_getEntityType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getEntityType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getEntityType_presult__isset {
  _EntityMentionService_getEntityType_presult__isset() : success(false) {}
  bool success;
} _EntityMentionService_getEntityType_presult__isset;

class EntityMentionService_getEntityType_presult {
 public:


  virtual ~EntityMentionService_getEntityType_presult() throw() {}

  Type* success;

  _EntityMentionService_getEntityType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityMentionService_getMentionType_args {
 public:

  EntityMentionService_getMentionType_args() {
  }

  virtual ~EntityMentionService_getMentionType_args() throw() {}


  bool operator == (const EntityMentionService_getMentionType_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_getMentionType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getMentionType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_getMentionType_pargs {
 public:


  virtual ~EntityMentionService_getMentionType_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getMentionType_result__isset {
  _EntityMentionService_getMentionType_result__isset() : success(false) {}
  bool success;
} _EntityMentionService_getMentionType_result__isset;

class EntityMentionService_getMentionType_result {
 public:

  EntityMentionService_getMentionType_result() {
  }

  virtual ~EntityMentionService_getMentionType_result() throw() {}

  Type success;

  _EntityMentionService_getMentionType_result__isset __isset;

  void __set_success(const Type& val) {
    success = val;
  }

  bool operator == (const EntityMentionService_getMentionType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_getMentionType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getMentionType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getMentionType_presult__isset {
  _EntityMentionService_getMentionType_presult__isset() : success(false) {}
  bool success;
} _EntityMentionService_getMentionType_presult__isset;

class EntityMentionService_getMentionType_presult {
 public:


  virtual ~EntityMentionService_getMentionType_presult() throw() {}

  Type* success;

  _EntityMentionService_getMentionType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntityMentionService_getSequenceId_args {
 public:

  EntityMentionService_getSequenceId_args() {
  }

  virtual ~EntityMentionService_getSequenceId_args() throw() {}


  bool operator == (const EntityMentionService_getSequenceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_getSequenceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getSequenceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_getSequenceId_pargs {
 public:


  virtual ~EntityMentionService_getSequenceId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getSequenceId_result__isset {
  _EntityMentionService_getSequenceId_result__isset() : success(false) {}
  bool success;
} _EntityMentionService_getSequenceId_result__isset;

class EntityMentionService_getSequenceId_result {
 public:

  EntityMentionService_getSequenceId_result() : success(0) {
  }

  virtual ~EntityMentionService_getSequenceId_result() throw() {}

  int64_t success;

  _EntityMentionService_getSequenceId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const EntityMentionService_getSequenceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_getSequenceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_getSequenceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntityMentionService_getSequenceId_presult__isset {
  _EntityMentionService_getSequenceId_presult__isset() : success(false) {}
  bool success;
} _EntityMentionService_getSequenceId_presult__isset;

class EntityMentionService_getSequenceId_presult {
 public:


  virtual ~EntityMentionService_getSequenceId_presult() throw() {}

  int64_t* success;

  _EntityMentionService_getSequenceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntityMentionService_setEntityIdDistribution_args__isset {
  _EntityMentionService_setEntityIdDistribution_args__isset() : entityIdDistribution(false) {}
  bool entityIdDistribution;
} _EntityMentionService_setEntityIdDistribution_args__isset;

class EntityMentionService_setEntityIdDistribution_args {
 public:

  EntityMentionService_setEntityIdDistribution_args() {
  }

  virtual ~EntityMentionService_setEntityIdDistribution_args() throw() {}

  std::map<int64_t, double>  entityIdDistribution;

  _EntityMentionService_setEntityIdDistribution_args__isset __isset;

  void __set_entityIdDistribution(const std::map<int64_t, double> & val) {
    entityIdDistribution = val;
  }

  bool operator == (const EntityMentionService_setEntityIdDistribution_args & rhs) const
  {
    if (!(entityIdDistribution == rhs.entityIdDistribution))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_setEntityIdDistribution_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_setEntityIdDistribution_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setEntityIdDistribution_pargs {
 public:


  virtual ~EntityMentionService_setEntityIdDistribution_pargs() throw() {}

  const std::map<int64_t, double> * entityIdDistribution;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setEntityIdDistribution_result {
 public:

  EntityMentionService_setEntityIdDistribution_result() {
  }

  virtual ~EntityMentionService_setEntityIdDistribution_result() throw() {}


  bool operator == (const EntityMentionService_setEntityIdDistribution_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_setEntityIdDistribution_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_setEntityIdDistribution_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setEntityIdDistribution_presult {
 public:


  virtual ~EntityMentionService_setEntityIdDistribution_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntityMentionService_setEntityType_args__isset {
  _EntityMentionService_setEntityType_args__isset() : entityType(false) {}
  bool entityType;
} _EntityMentionService_setEntityType_args__isset;

class EntityMentionService_setEntityType_args {
 public:

  EntityMentionService_setEntityType_args() {
  }

  virtual ~EntityMentionService_setEntityType_args() throw() {}

  Type entityType;

  _EntityMentionService_setEntityType_args__isset __isset;

  void __set_entityType(const Type& val) {
    entityType = val;
  }

  bool operator == (const EntityMentionService_setEntityType_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_setEntityType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_setEntityType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setEntityType_pargs {
 public:


  virtual ~EntityMentionService_setEntityType_pargs() throw() {}

  const Type* entityType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setEntityType_result {
 public:

  EntityMentionService_setEntityType_result() {
  }

  virtual ~EntityMentionService_setEntityType_result() throw() {}


  bool operator == (const EntityMentionService_setEntityType_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_setEntityType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_setEntityType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setEntityType_presult {
 public:


  virtual ~EntityMentionService_setEntityType_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntityMentionService_setMentionType_args__isset {
  _EntityMentionService_setMentionType_args__isset() : mentionType(false) {}
  bool mentionType;
} _EntityMentionService_setMentionType_args__isset;

class EntityMentionService_setMentionType_args {
 public:

  EntityMentionService_setMentionType_args() {
  }

  virtual ~EntityMentionService_setMentionType_args() throw() {}

  Type mentionType;

  _EntityMentionService_setMentionType_args__isset __isset;

  void __set_mentionType(const Type& val) {
    mentionType = val;
  }

  bool operator == (const EntityMentionService_setMentionType_args & rhs) const
  {
    if (!(mentionType == rhs.mentionType))
      return false;
    return true;
  }
  bool operator != (const EntityMentionService_setMentionType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_setMentionType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setMentionType_pargs {
 public:


  virtual ~EntityMentionService_setMentionType_pargs() throw() {}

  const Type* mentionType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setMentionType_result {
 public:

  EntityMentionService_setMentionType_result() {
  }

  virtual ~EntityMentionService_setMentionType_result() throw() {}


  bool operator == (const EntityMentionService_setMentionType_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntityMentionService_setMentionType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityMentionService_setMentionType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntityMentionService_setMentionType_presult {
 public:


  virtual ~EntityMentionService_setMentionType_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EntityMentionServiceClient : virtual public EntityMentionServiceIf, public ChunkServiceClient {
 public:
  EntityMentionServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ChunkServiceClient(prot, prot) {}
  EntityMentionServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ChunkServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void addEntityConfidencePair(const int64_t entityId, const double confidence);
  void send_addEntityConfidencePair(const int64_t entityId, const double confidence);
  void recv_addEntityConfidencePair();
  bool equals(const EntityMention& obj);
  void send_equals(const EntityMention& obj);
  bool recv_equals();
  double getConfidence(const int64_t entityId);
  void send_getConfidence(const int64_t entityId);
  double recv_getConfidence();
  void getEntityIdDistribution(std::map<int64_t, double> & _return);
  void send_getEntityIdDistribution();
  void recv_getEntityIdDistribution(std::map<int64_t, double> & _return);
  void getEntityType(Type& _return);
  void send_getEntityType();
  void recv_getEntityType(Type& _return);
  void getMentionType(Type& _return);
  void send_getMentionType();
  void recv_getMentionType(Type& _return);
  int64_t getSequenceId();
  void send_getSequenceId();
  int64_t recv_getSequenceId();
  void setEntityIdDistribution(const std::map<int64_t, double> & entityIdDistribution);
  void send_setEntityIdDistribution(const std::map<int64_t, double> & entityIdDistribution);
  void recv_setEntityIdDistribution();
  void setEntityType(const Type& entityType);
  void send_setEntityType(const Type& entityType);
  void recv_setEntityType();
  void setMentionType(const Type& mentionType);
  void send_setMentionType(const Type& mentionType);
  void recv_setMentionType();
};

class EntityMentionServiceProcessor : public ChunkServiceProcessor {
 protected:
  boost::shared_ptr<EntityMentionServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EntityMentionServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addEntityConfidencePair(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_equals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getConfidence(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntityIdDistribution(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntityType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMentionType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSequenceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setEntityIdDistribution(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setEntityType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setMentionType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EntityMentionServiceProcessor(boost::shared_ptr<EntityMentionServiceIf> iface) :
    ChunkServiceProcessor(iface),
    iface_(iface) {
    processMap_["addEntityConfidencePair"] = &EntityMentionServiceProcessor::process_addEntityConfidencePair;
    processMap_["equals"] = &EntityMentionServiceProcessor::process_equals;
    processMap_["getConfidence"] = &EntityMentionServiceProcessor::process_getConfidence;
    processMap_["getEntityIdDistribution"] = &EntityMentionServiceProcessor::process_getEntityIdDistribution;
    processMap_["getEntityType"] = &EntityMentionServiceProcessor::process_getEntityType;
    processMap_["getMentionType"] = &EntityMentionServiceProcessor::process_getMentionType;
    processMap_["getSequenceId"] = &EntityMentionServiceProcessor::process_getSequenceId;
    processMap_["setEntityIdDistribution"] = &EntityMentionServiceProcessor::process_setEntityIdDistribution;
    processMap_["setEntityType"] = &EntityMentionServiceProcessor::process_setEntityType;
    processMap_["setMentionType"] = &EntityMentionServiceProcessor::process_setMentionType;
  }

  virtual ~EntityMentionServiceProcessor() {}
};

class EntityMentionServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EntityMentionServiceProcessorFactory(const ::boost::shared_ptr< EntityMentionServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EntityMentionServiceIfFactory > handlerFactory_;
};

class EntityMentionServiceMultiface : virtual public EntityMentionServiceIf, public ChunkServiceMultiface {
 public:
  EntityMentionServiceMultiface(std::vector<boost::shared_ptr<EntityMentionServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<EntityMentionServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ChunkServiceMultiface::add(*iter);
    }
  }
  virtual ~EntityMentionServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EntityMentionServiceIf> > ifaces_;
  EntityMentionServiceMultiface() {}
  void add(boost::shared_ptr<EntityMentionServiceIf> iface) {
    ChunkServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void addEntityConfidencePair(const int64_t entityId, const double confidence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addEntityConfidencePair(entityId, confidence);
    }
    ifaces_[i]->addEntityConfidencePair(entityId, confidence);
  }

  bool equals(const EntityMention& obj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->equals(obj);
    }
    return ifaces_[i]->equals(obj);
  }

  double getConfidence(const int64_t entityId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getConfidence(entityId);
    }
    return ifaces_[i]->getConfidence(entityId);
  }

  void getEntityIdDistribution(std::map<int64_t, double> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntityIdDistribution(_return);
    }
    ifaces_[i]->getEntityIdDistribution(_return);
    return;
  }

  void getEntityType(Type& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntityType(_return);
    }
    ifaces_[i]->getEntityType(_return);
    return;
  }

  void getMentionType(Type& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMentionType(_return);
    }
    ifaces_[i]->getMentionType(_return);
    return;
  }

  int64_t getSequenceId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSequenceId();
    }
    return ifaces_[i]->getSequenceId();
  }

  void setEntityIdDistribution(const std::map<int64_t, double> & entityIdDistribution) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setEntityIdDistribution(entityIdDistribution);
    }
    ifaces_[i]->setEntityIdDistribution(entityIdDistribution);
  }

  void setEntityType(const Type& entityType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setEntityType(entityType);
    }
    ifaces_[i]->setEntityType(entityType);
  }

  void setMentionType(const Type& mentionType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setMentionType(mentionType);
    }
    ifaces_[i]->setMentionType(mentionType);
  }

};

}}} // namespace

#endif