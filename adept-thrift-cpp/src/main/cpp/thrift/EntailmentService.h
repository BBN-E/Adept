/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EntailmentService_H
#define EntailmentService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"
#include "ItemService.h"

namespace thrift { namespace adept { namespace common {

class EntailmentServiceIf : virtual public ItemServiceIf {
 public:
  virtual ~EntailmentServiceIf() {}
  virtual bool addJudgmentConfidencePair(const EntailmentJudgment::type judgment, const double confidence) = 0;
  virtual void getBestJudgment(ChunkUnion& _return) = 0;
  virtual int64_t getEntailmentId() = 0;
  virtual void getHypothesis(Passage& _return) = 0;
  virtual void getJudgmentDistribution(std::map<EntailmentJudgment::type, double> & _return) = 0;
  virtual void getText(Passage& _return) = 0;
  virtual void setHypothesis(const Passage& hypothesis) = 0;
  virtual void setJudgmentDistribution(const std::map<EntailmentJudgment::type, double> & judgmentDistribution) = 0;
  virtual void setText(const Passage& text) = 0;
};

class EntailmentServiceIfFactory : virtual public ItemServiceIfFactory {
 public:
  typedef EntailmentServiceIf Handler;

  virtual ~EntailmentServiceIfFactory() {}

  virtual EntailmentServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ItemServiceIf* /* handler */) = 0;
};

class EntailmentServiceIfSingletonFactory : virtual public EntailmentServiceIfFactory {
 public:
  EntailmentServiceIfSingletonFactory(const boost::shared_ptr<EntailmentServiceIf>& iface) : iface_(iface) {}
  virtual ~EntailmentServiceIfSingletonFactory() {}

  virtual EntailmentServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ItemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<EntailmentServiceIf> iface_;
};

class EntailmentServiceNull : virtual public EntailmentServiceIf , virtual public ItemServiceNull {
 public:
  virtual ~EntailmentServiceNull() {}
  bool addJudgmentConfidencePair(const EntailmentJudgment::type /* judgment */, const double /* confidence */) {
    bool _return = false;
    return _return;
  }
  void getBestJudgment(ChunkUnion& /* _return */) {
    return;
  }
  int64_t getEntailmentId() {
    int64_t _return = 0;
    return _return;
  }
  void getHypothesis(Passage& /* _return */) {
    return;
  }
  void getJudgmentDistribution(std::map<EntailmentJudgment::type, double> & /* _return */) {
    return;
  }
  void getText(Passage& /* _return */) {
    return;
  }
  void setHypothesis(const Passage& /* hypothesis */) {
    return;
  }
  void setJudgmentDistribution(const std::map<EntailmentJudgment::type, double> & /* judgmentDistribution */) {
    return;
  }
  void setText(const Passage& /* text */) {
    return;
  }
};

typedef struct _EntailmentService_addJudgmentConfidencePair_args__isset {
  _EntailmentService_addJudgmentConfidencePair_args__isset() : judgment(false), confidence(false) {}
  bool judgment;
  bool confidence;
} _EntailmentService_addJudgmentConfidencePair_args__isset;

class EntailmentService_addJudgmentConfidencePair_args {
 public:

  EntailmentService_addJudgmentConfidencePair_args() : judgment((EntailmentJudgment::type)0), confidence(0) {
  }

  virtual ~EntailmentService_addJudgmentConfidencePair_args() throw() {}

  EntailmentJudgment::type judgment;
  double confidence;

  _EntailmentService_addJudgmentConfidencePair_args__isset __isset;

  void __set_judgment(const EntailmentJudgment::type val) {
    judgment = val;
  }

  void __set_confidence(const double val) {
    confidence = val;
  }

  bool operator == (const EntailmentService_addJudgmentConfidencePair_args & rhs) const
  {
    if (!(judgment == rhs.judgment))
      return false;
    if (!(confidence == rhs.confidence))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_addJudgmentConfidencePair_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_addJudgmentConfidencePair_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_addJudgmentConfidencePair_pargs {
 public:


  virtual ~EntailmentService_addJudgmentConfidencePair_pargs() throw() {}

  const EntailmentJudgment::type* judgment;
  const double* confidence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_addJudgmentConfidencePair_result__isset {
  _EntailmentService_addJudgmentConfidencePair_result__isset() : success(false) {}
  bool success;
} _EntailmentService_addJudgmentConfidencePair_result__isset;

class EntailmentService_addJudgmentConfidencePair_result {
 public:

  EntailmentService_addJudgmentConfidencePair_result() : success(0) {
  }

  virtual ~EntailmentService_addJudgmentConfidencePair_result() throw() {}

  bool success;

  _EntailmentService_addJudgmentConfidencePair_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const EntailmentService_addJudgmentConfidencePair_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_addJudgmentConfidencePair_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_addJudgmentConfidencePair_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_addJudgmentConfidencePair_presult__isset {
  _EntailmentService_addJudgmentConfidencePair_presult__isset() : success(false) {}
  bool success;
} _EntailmentService_addJudgmentConfidencePair_presult__isset;

class EntailmentService_addJudgmentConfidencePair_presult {
 public:


  virtual ~EntailmentService_addJudgmentConfidencePair_presult() throw() {}

  bool* success;

  _EntailmentService_addJudgmentConfidencePair_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntailmentService_getBestJudgment_args {
 public:

  EntailmentService_getBestJudgment_args() {
  }

  virtual ~EntailmentService_getBestJudgment_args() throw() {}


  bool operator == (const EntailmentService_getBestJudgment_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_getBestJudgment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getBestJudgment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_getBestJudgment_pargs {
 public:


  virtual ~EntailmentService_getBestJudgment_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getBestJudgment_result__isset {
  _EntailmentService_getBestJudgment_result__isset() : success(false) {}
  bool success;
} _EntailmentService_getBestJudgment_result__isset;

class EntailmentService_getBestJudgment_result {
 public:

  EntailmentService_getBestJudgment_result() {
  }

  virtual ~EntailmentService_getBestJudgment_result() throw() {}

  ChunkUnion success;

  _EntailmentService_getBestJudgment_result__isset __isset;

  void __set_success(const ChunkUnion& val) {
    success = val;
  }

  bool operator == (const EntailmentService_getBestJudgment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_getBestJudgment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getBestJudgment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getBestJudgment_presult__isset {
  _EntailmentService_getBestJudgment_presult__isset() : success(false) {}
  bool success;
} _EntailmentService_getBestJudgment_presult__isset;

class EntailmentService_getBestJudgment_presult {
 public:


  virtual ~EntailmentService_getBestJudgment_presult() throw() {}

  ChunkUnion* success;

  _EntailmentService_getBestJudgment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntailmentService_getEntailmentId_args {
 public:

  EntailmentService_getEntailmentId_args() {
  }

  virtual ~EntailmentService_getEntailmentId_args() throw() {}


  bool operator == (const EntailmentService_getEntailmentId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_getEntailmentId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getEntailmentId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_getEntailmentId_pargs {
 public:


  virtual ~EntailmentService_getEntailmentId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getEntailmentId_result__isset {
  _EntailmentService_getEntailmentId_result__isset() : success(false) {}
  bool success;
} _EntailmentService_getEntailmentId_result__isset;

class EntailmentService_getEntailmentId_result {
 public:

  EntailmentService_getEntailmentId_result() : success(0) {
  }

  virtual ~EntailmentService_getEntailmentId_result() throw() {}

  int64_t success;

  _EntailmentService_getEntailmentId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const EntailmentService_getEntailmentId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_getEntailmentId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getEntailmentId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getEntailmentId_presult__isset {
  _EntailmentService_getEntailmentId_presult__isset() : success(false) {}
  bool success;
} _EntailmentService_getEntailmentId_presult__isset;

class EntailmentService_getEntailmentId_presult {
 public:


  virtual ~EntailmentService_getEntailmentId_presult() throw() {}

  int64_t* success;

  _EntailmentService_getEntailmentId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntailmentService_getHypothesis_args {
 public:

  EntailmentService_getHypothesis_args() {
  }

  virtual ~EntailmentService_getHypothesis_args() throw() {}


  bool operator == (const EntailmentService_getHypothesis_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_getHypothesis_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getHypothesis_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_getHypothesis_pargs {
 public:


  virtual ~EntailmentService_getHypothesis_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getHypothesis_result__isset {
  _EntailmentService_getHypothesis_result__isset() : success(false) {}
  bool success;
} _EntailmentService_getHypothesis_result__isset;

class EntailmentService_getHypothesis_result {
 public:

  EntailmentService_getHypothesis_result() {
  }

  virtual ~EntailmentService_getHypothesis_result() throw() {}

  Passage success;

  _EntailmentService_getHypothesis_result__isset __isset;

  void __set_success(const Passage& val) {
    success = val;
  }

  bool operator == (const EntailmentService_getHypothesis_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_getHypothesis_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getHypothesis_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getHypothesis_presult__isset {
  _EntailmentService_getHypothesis_presult__isset() : success(false) {}
  bool success;
} _EntailmentService_getHypothesis_presult__isset;

class EntailmentService_getHypothesis_presult {
 public:


  virtual ~EntailmentService_getHypothesis_presult() throw() {}

  Passage* success;

  _EntailmentService_getHypothesis_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntailmentService_getJudgmentDistribution_args {
 public:

  EntailmentService_getJudgmentDistribution_args() {
  }

  virtual ~EntailmentService_getJudgmentDistribution_args() throw() {}


  bool operator == (const EntailmentService_getJudgmentDistribution_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_getJudgmentDistribution_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getJudgmentDistribution_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_getJudgmentDistribution_pargs {
 public:


  virtual ~EntailmentService_getJudgmentDistribution_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getJudgmentDistribution_result__isset {
  _EntailmentService_getJudgmentDistribution_result__isset() : success(false) {}
  bool success;
} _EntailmentService_getJudgmentDistribution_result__isset;

class EntailmentService_getJudgmentDistribution_result {
 public:

  EntailmentService_getJudgmentDistribution_result() {
  }

  virtual ~EntailmentService_getJudgmentDistribution_result() throw() {}

  std::map<EntailmentJudgment::type, double>  success;

  _EntailmentService_getJudgmentDistribution_result__isset __isset;

  void __set_success(const std::map<EntailmentJudgment::type, double> & val) {
    success = val;
  }

  bool operator == (const EntailmentService_getJudgmentDistribution_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_getJudgmentDistribution_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getJudgmentDistribution_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getJudgmentDistribution_presult__isset {
  _EntailmentService_getJudgmentDistribution_presult__isset() : success(false) {}
  bool success;
} _EntailmentService_getJudgmentDistribution_presult__isset;

class EntailmentService_getJudgmentDistribution_presult {
 public:


  virtual ~EntailmentService_getJudgmentDistribution_presult() throw() {}

  std::map<EntailmentJudgment::type, double> * success;

  _EntailmentService_getJudgmentDistribution_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EntailmentService_getText_args {
 public:

  EntailmentService_getText_args() {
  }

  virtual ~EntailmentService_getText_args() throw() {}


  bool operator == (const EntailmentService_getText_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_getText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_getText_pargs {
 public:


  virtual ~EntailmentService_getText_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getText_result__isset {
  _EntailmentService_getText_result__isset() : success(false) {}
  bool success;
} _EntailmentService_getText_result__isset;

class EntailmentService_getText_result {
 public:

  EntailmentService_getText_result() {
  }

  virtual ~EntailmentService_getText_result() throw() {}

  Passage success;

  _EntailmentService_getText_result__isset __isset;

  void __set_success(const Passage& val) {
    success = val;
  }

  bool operator == (const EntailmentService_getText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_getText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_getText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntailmentService_getText_presult__isset {
  _EntailmentService_getText_presult__isset() : success(false) {}
  bool success;
} _EntailmentService_getText_presult__isset;

class EntailmentService_getText_presult {
 public:


  virtual ~EntailmentService_getText_presult() throw() {}

  Passage* success;

  _EntailmentService_getText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntailmentService_setHypothesis_args__isset {
  _EntailmentService_setHypothesis_args__isset() : hypothesis(false) {}
  bool hypothesis;
} _EntailmentService_setHypothesis_args__isset;

class EntailmentService_setHypothesis_args {
 public:

  EntailmentService_setHypothesis_args() {
  }

  virtual ~EntailmentService_setHypothesis_args() throw() {}

  Passage hypothesis;

  _EntailmentService_setHypothesis_args__isset __isset;

  void __set_hypothesis(const Passage& val) {
    hypothesis = val;
  }

  bool operator == (const EntailmentService_setHypothesis_args & rhs) const
  {
    if (!(hypothesis == rhs.hypothesis))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_setHypothesis_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_setHypothesis_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setHypothesis_pargs {
 public:


  virtual ~EntailmentService_setHypothesis_pargs() throw() {}

  const Passage* hypothesis;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setHypothesis_result {
 public:

  EntailmentService_setHypothesis_result() {
  }

  virtual ~EntailmentService_setHypothesis_result() throw() {}


  bool operator == (const EntailmentService_setHypothesis_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_setHypothesis_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_setHypothesis_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setHypothesis_presult {
 public:


  virtual ~EntailmentService_setHypothesis_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntailmentService_setJudgmentDistribution_args__isset {
  _EntailmentService_setJudgmentDistribution_args__isset() : judgmentDistribution(false) {}
  bool judgmentDistribution;
} _EntailmentService_setJudgmentDistribution_args__isset;

class EntailmentService_setJudgmentDistribution_args {
 public:

  EntailmentService_setJudgmentDistribution_args() {
  }

  virtual ~EntailmentService_setJudgmentDistribution_args() throw() {}

  std::map<EntailmentJudgment::type, double>  judgmentDistribution;

  _EntailmentService_setJudgmentDistribution_args__isset __isset;

  void __set_judgmentDistribution(const std::map<EntailmentJudgment::type, double> & val) {
    judgmentDistribution = val;
  }

  bool operator == (const EntailmentService_setJudgmentDistribution_args & rhs) const
  {
    if (!(judgmentDistribution == rhs.judgmentDistribution))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_setJudgmentDistribution_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_setJudgmentDistribution_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setJudgmentDistribution_pargs {
 public:


  virtual ~EntailmentService_setJudgmentDistribution_pargs() throw() {}

  const std::map<EntailmentJudgment::type, double> * judgmentDistribution;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setJudgmentDistribution_result {
 public:

  EntailmentService_setJudgmentDistribution_result() {
  }

  virtual ~EntailmentService_setJudgmentDistribution_result() throw() {}


  bool operator == (const EntailmentService_setJudgmentDistribution_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_setJudgmentDistribution_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_setJudgmentDistribution_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setJudgmentDistribution_presult {
 public:


  virtual ~EntailmentService_setJudgmentDistribution_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EntailmentService_setText_args__isset {
  _EntailmentService_setText_args__isset() : text(false) {}
  bool text;
} _EntailmentService_setText_args__isset;

class EntailmentService_setText_args {
 public:

  EntailmentService_setText_args() {
  }

  virtual ~EntailmentService_setText_args() throw() {}

  Passage text;

  _EntailmentService_setText_args__isset __isset;

  void __set_text(const Passage& val) {
    text = val;
  }

  bool operator == (const EntailmentService_setText_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const EntailmentService_setText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_setText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setText_pargs {
 public:


  virtual ~EntailmentService_setText_pargs() throw() {}

  const Passage* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setText_result {
 public:

  EntailmentService_setText_result() {
  }

  virtual ~EntailmentService_setText_result() throw() {}


  bool operator == (const EntailmentService_setText_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EntailmentService_setText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntailmentService_setText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntailmentService_setText_presult {
 public:


  virtual ~EntailmentService_setText_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EntailmentServiceClient : virtual public EntailmentServiceIf, public ItemServiceClient {
 public:
  EntailmentServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    ItemServiceClient(prot, prot) {}
  EntailmentServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    ItemServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool addJudgmentConfidencePair(const EntailmentJudgment::type judgment, const double confidence);
  void send_addJudgmentConfidencePair(const EntailmentJudgment::type judgment, const double confidence);
  bool recv_addJudgmentConfidencePair();
  void getBestJudgment(ChunkUnion& _return);
  void send_getBestJudgment();
  void recv_getBestJudgment(ChunkUnion& _return);
  int64_t getEntailmentId();
  void send_getEntailmentId();
  int64_t recv_getEntailmentId();
  void getHypothesis(Passage& _return);
  void send_getHypothesis();
  void recv_getHypothesis(Passage& _return);
  void getJudgmentDistribution(std::map<EntailmentJudgment::type, double> & _return);
  void send_getJudgmentDistribution();
  void recv_getJudgmentDistribution(std::map<EntailmentJudgment::type, double> & _return);
  void getText(Passage& _return);
  void send_getText();
  void recv_getText(Passage& _return);
  void setHypothesis(const Passage& hypothesis);
  void send_setHypothesis(const Passage& hypothesis);
  void recv_setHypothesis();
  void setJudgmentDistribution(const std::map<EntailmentJudgment::type, double> & judgmentDistribution);
  void send_setJudgmentDistribution(const std::map<EntailmentJudgment::type, double> & judgmentDistribution);
  void recv_setJudgmentDistribution();
  void setText(const Passage& text);
  void send_setText(const Passage& text);
  void recv_setText();
};

class EntailmentServiceProcessor : public ItemServiceProcessor {
 protected:
  boost::shared_ptr<EntailmentServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EntailmentServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addJudgmentConfidencePair(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBestJudgment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEntailmentId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHypothesis(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJudgmentDistribution(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setHypothesis(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setJudgmentDistribution(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EntailmentServiceProcessor(boost::shared_ptr<EntailmentServiceIf> iface) :
    ItemServiceProcessor(iface),
    iface_(iface) {
    processMap_["addJudgmentConfidencePair"] = &EntailmentServiceProcessor::process_addJudgmentConfidencePair;
    processMap_["getBestJudgment"] = &EntailmentServiceProcessor::process_getBestJudgment;
    processMap_["getEntailmentId"] = &EntailmentServiceProcessor::process_getEntailmentId;
    processMap_["getHypothesis"] = &EntailmentServiceProcessor::process_getHypothesis;
    processMap_["getJudgmentDistribution"] = &EntailmentServiceProcessor::process_getJudgmentDistribution;
    processMap_["getText"] = &EntailmentServiceProcessor::process_getText;
    processMap_["setHypothesis"] = &EntailmentServiceProcessor::process_setHypothesis;
    processMap_["setJudgmentDistribution"] = &EntailmentServiceProcessor::process_setJudgmentDistribution;
    processMap_["setText"] = &EntailmentServiceProcessor::process_setText;
  }

  virtual ~EntailmentServiceProcessor() {}
};

class EntailmentServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EntailmentServiceProcessorFactory(const ::boost::shared_ptr< EntailmentServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EntailmentServiceIfFactory > handlerFactory_;
};

class EntailmentServiceMultiface : virtual public EntailmentServiceIf, public ItemServiceMultiface {
 public:
  EntailmentServiceMultiface(std::vector<boost::shared_ptr<EntailmentServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<EntailmentServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      ItemServiceMultiface::add(*iter);
    }
  }
  virtual ~EntailmentServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EntailmentServiceIf> > ifaces_;
  EntailmentServiceMultiface() {}
  void add(boost::shared_ptr<EntailmentServiceIf> iface) {
    ItemServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool addJudgmentConfidencePair(const EntailmentJudgment::type judgment, const double confidence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addJudgmentConfidencePair(judgment, confidence);
    }
    return ifaces_[i]->addJudgmentConfidencePair(judgment, confidence);
  }

  void getBestJudgment(ChunkUnion& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBestJudgment(_return);
    }
    ifaces_[i]->getBestJudgment(_return);
    return;
  }

  int64_t getEntailmentId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEntailmentId();
    }
    return ifaces_[i]->getEntailmentId();
  }

  void getHypothesis(Passage& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHypothesis(_return);
    }
    ifaces_[i]->getHypothesis(_return);
    return;
  }

  void getJudgmentDistribution(std::map<EntailmentJudgment::type, double> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJudgmentDistribution(_return);
    }
    ifaces_[i]->getJudgmentDistribution(_return);
    return;
  }

  void getText(Passage& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getText(_return);
    }
    ifaces_[i]->getText(_return);
    return;
  }

  void setHypothesis(const Passage& hypothesis) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setHypothesis(hypothesis);
    }
    ifaces_[i]->setHypothesis(hypothesis);
  }

  void setJudgmentDistribution(const std::map<EntailmentJudgment::type, double> & judgmentDistribution) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setJudgmentDistribution(judgmentDistribution);
    }
    ifaces_[i]->setJudgmentDistribution(judgmentDistribution);
  }

  void setText(const Passage& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setText(text);
    }
    ifaces_[i]->setText(text);
  }

};

}}} // namespace

#endif