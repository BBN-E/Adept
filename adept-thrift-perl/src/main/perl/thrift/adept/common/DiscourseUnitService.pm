#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ChunkService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::DiscourseUnitService_getDiscourceType_args;
use base qw(Class::Accessor);

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getDiscourceType_args';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getDiscourceType_args');
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_getDiscourceType_result;
use base qw(Class::Accessor);
thrift::adept::common::DiscourseUnitService_getDiscourceType_result->mk_accessors( qw( success ) );

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              $self->{success} = undef;
                                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                if (defined $vals->{success}) {
                                                                                  $self->{success} = $vals->{success};
                                                                                }
                                                                              }
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getDiscourceType_result';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                  /^0$/ && do{                                                                                  if ($ftype == TType::STRING) {
                                                                                    $xfer += $input->readString(\$self->{success});
                                                                                  } else {
                                                                                    $xfer += $input->skip($ftype);
                                                                                  }
                                                                                  last; };
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getDiscourceType_result');
                                                                              if (defined $self->{success}) {
                                                                                $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                                                $xfer += $output->writeString($self->{success});
                                                                                $xfer += $output->writeFieldEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_getNoveltyConfidence_args;
use base qw(Class::Accessor);

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getNoveltyConfidence_args';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getNoveltyConfidence_args');
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_getNoveltyConfidence_result;
use base qw(Class::Accessor);
thrift::adept::common::DiscourseUnitService_getNoveltyConfidence_result->mk_accessors( qw( success ) );

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              $self->{success} = undef;
                                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                if (defined $vals->{success}) {
                                                                                  $self->{success} = $vals->{success};
                                                                                }
                                                                              }
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getNoveltyConfidence_result';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                  /^0$/ && do{                                                                                  if ($ftype == TType::DOUBLE) {
                                                                                    $xfer += $input->readDouble(\$self->{success});
                                                                                  } else {
                                                                                    $xfer += $input->skip($ftype);
                                                                                  }
                                                                                  last; };
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getNoveltyConfidence_result');
                                                                              if (defined $self->{success}) {
                                                                                $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                                                                $xfer += $output->writeDouble($self->{success});
                                                                                $xfer += $output->writeFieldEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_getSequenceId_args;
use base qw(Class::Accessor);

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getSequenceId_args';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getSequenceId_args');
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_getSequenceId_result;
use base qw(Class::Accessor);
thrift::adept::common::DiscourseUnitService_getSequenceId_result->mk_accessors( qw( success ) );

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              $self->{success} = undef;
                                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                if (defined $vals->{success}) {
                                                                                  $self->{success} = $vals->{success};
                                                                                }
                                                                              }
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getSequenceId_result';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                  /^0$/ && do{                                                                                  if ($ftype == TType::I64) {
                                                                                    $xfer += $input->readI64(\$self->{success});
                                                                                  } else {
                                                                                    $xfer += $input->skip($ftype);
                                                                                  }
                                                                                  last; };
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getSequenceId_result');
                                                                              if (defined $self->{success}) {
                                                                                $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                                                                                $xfer += $output->writeI64($self->{success});
                                                                                $xfer += $output->writeFieldEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_getUncertaintyConfidence_args;
use base qw(Class::Accessor);

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getUncertaintyConfidence_args';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getUncertaintyConfidence_args');
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_getUncertaintyConfidence_result;
use base qw(Class::Accessor);
thrift::adept::common::DiscourseUnitService_getUncertaintyConfidence_result->mk_accessors( qw( success ) );

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              $self->{success} = undef;
                                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                if (defined $vals->{success}) {
                                                                                  $self->{success} = $vals->{success};
                                                                                }
                                                                              }
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_getUncertaintyConfidence_result';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                  /^0$/ && do{                                                                                  if ($ftype == TType::DOUBLE) {
                                                                                    $xfer += $input->readDouble(\$self->{success});
                                                                                  } else {
                                                                                    $xfer += $input->skip($ftype);
                                                                                  }
                                                                                  last; };
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_getUncertaintyConfidence_result');
                                                                              if (defined $self->{success}) {
                                                                                $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                                                                $xfer += $output->writeDouble($self->{success});
                                                                                $xfer += $output->writeFieldEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_setDiscourceType_args;
use base qw(Class::Accessor);
thrift::adept::common::DiscourseUnitService_setDiscourceType_args->mk_accessors( qw( discourceType ) );

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              $self->{discourceType} = undef;
                                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                if (defined $vals->{discourceType}) {
                                                                                  $self->{discourceType} = $vals->{discourceType};
                                                                                }
                                                                              }
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_setDiscourceType_args';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                  /^1$/ && do{                                                                                  if ($ftype == TType::STRING) {
                                                                                    $xfer += $input->readString(\$self->{discourceType});
                                                                                  } else {
                                                                                    $xfer += $input->skip($ftype);
                                                                                  }
                                                                                  last; };
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_setDiscourceType_args');
                                                                              if (defined $self->{discourceType}) {
                                                                                $xfer += $output->writeFieldBegin('discourceType', TType::STRING, 1);
                                                                                $xfer += $output->writeString($self->{discourceType});
                                                                                $xfer += $output->writeFieldEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_setDiscourceType_result;
use base qw(Class::Accessor);

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_setDiscourceType_result';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_setDiscourceType_result');
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_setNoveltyConfidence_args;
use base qw(Class::Accessor);
thrift::adept::common::DiscourseUnitService_setNoveltyConfidence_args->mk_accessors( qw( noveltyConfidence ) );

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              $self->{noveltyConfidence} = undef;
                                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                if (defined $vals->{noveltyConfidence}) {
                                                                                  $self->{noveltyConfidence} = $vals->{noveltyConfidence};
                                                                                }
                                                                              }
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_setNoveltyConfidence_args';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                  /^1$/ && do{                                                                                  if ($ftype == TType::DOUBLE) {
                                                                                    $xfer += $input->readDouble(\$self->{noveltyConfidence});
                                                                                  } else {
                                                                                    $xfer += $input->skip($ftype);
                                                                                  }
                                                                                  last; };
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_setNoveltyConfidence_args');
                                                                              if (defined $self->{noveltyConfidence}) {
                                                                                $xfer += $output->writeFieldBegin('noveltyConfidence', TType::DOUBLE, 1);
                                                                                $xfer += $output->writeDouble($self->{noveltyConfidence});
                                                                                $xfer += $output->writeFieldEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_setNoveltyConfidence_result;
use base qw(Class::Accessor);

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_setNoveltyConfidence_result';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_setNoveltyConfidence_result');
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_setUncertaintyConfidence_args;
use base qw(Class::Accessor);
thrift::adept::common::DiscourseUnitService_setUncertaintyConfidence_args->mk_accessors( qw( uncertaintyConfidence ) );

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              $self->{uncertaintyConfidence} = undef;
                                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                if (defined $vals->{uncertaintyConfidence}) {
                                                                                  $self->{uncertaintyConfidence} = $vals->{uncertaintyConfidence};
                                                                                }
                                                                              }
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_setUncertaintyConfidence_args';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                  /^1$/ && do{                                                                                  if ($ftype == TType::DOUBLE) {
                                                                                    $xfer += $input->readDouble(\$self->{uncertaintyConfidence});
                                                                                  } else {
                                                                                    $xfer += $input->skip($ftype);
                                                                                  }
                                                                                  last; };
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_setUncertaintyConfidence_args');
                                                                              if (defined $self->{uncertaintyConfidence}) {
                                                                                $xfer += $output->writeFieldBegin('uncertaintyConfidence', TType::DOUBLE, 1);
                                                                                $xfer += $output->writeDouble($self->{uncertaintyConfidence});
                                                                                $xfer += $output->writeFieldEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitService_setUncertaintyConfidence_result;
use base qw(Class::Accessor);

sub new {
                                                                              my $classname = shift;
                                                                              my $self      = {};
                                                                              my $vals      = shift || {};
                                                                              return bless ($self, $classname);
}

sub getName {
                                                                              return 'DiscourseUnitService_setUncertaintyConfidence_result';
                                                                            }

sub read {
                                                                              my ($self, $input) = @_;
                                                                              my $xfer  = 0;
                                                                              my $fname;
                                                                              my $ftype = 0;
                                                                              my $fid   = 0;
                                                                              $xfer += $input->readStructBegin(\$fname);
                                                                              while (1) 
                                                                              {
                                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                if ($ftype == TType::STOP) {
                                                                                  last;
                                                                                }
                                                                                SWITCH: for($fid)
                                                                                {
                                                                                    $xfer += $input->skip($ftype);
                                                                                }
                                                                                $xfer += $input->readFieldEnd();
                                                                              }
                                                                              $xfer += $input->readStructEnd();
                                                                              return $xfer;
                                                                            }

sub write {
                                                                              my ($self, $output) = @_;
                                                                              my $xfer   = 0;
                                                                              $xfer += $output->writeStructBegin('DiscourseUnitService_setUncertaintyConfidence_result');
                                                                              $xfer += $output->writeFieldStop();
                                                                              $xfer += $output->writeStructEnd();
                                                                              return $xfer;
                                                                            }

package thrift::adept::common::DiscourseUnitServiceIf;

use strict;
use base qw(thrift::adept::common::ChunkServiceIf);

sub getDiscourceType{
  my $self = shift;

  die 'implement interface';
}

sub getNoveltyConfidence{
  my $self = shift;

  die 'implement interface';
}

sub getSequenceId{
  my $self = shift;

  die 'implement interface';
}

sub getUncertaintyConfidence{
  my $self = shift;

  die 'implement interface';
}

sub setDiscourceType{
  my $self = shift;
  my $discourceType = shift;

  die 'implement interface';
}

sub setNoveltyConfidence{
  my $self = shift;
  my $noveltyConfidence = shift;

  die 'implement interface';
}

sub setUncertaintyConfidence{
  my $self = shift;
  my $uncertaintyConfidence = shift;

  die 'implement interface';
}

package thrift::adept::common::DiscourseUnitServiceRest;

use strict;
use base qw(thrift::adept::common::ChunkServiceRest);

sub getDiscourceType{
                                                                              my ($self, $request) = @_;

                                                                              return $self->{impl}->getDiscourceType();
                                                                            }

sub getNoveltyConfidence{
                                                                              my ($self, $request) = @_;

                                                                              return $self->{impl}->getNoveltyConfidence();
                                                                            }

sub getSequenceId{
                                                                              my ($self, $request) = @_;

                                                                              return $self->{impl}->getSequenceId();
                                                                            }

sub getUncertaintyConfidence{
                                                                              my ($self, $request) = @_;

                                                                              return $self->{impl}->getUncertaintyConfidence();
                                                                            }

sub setDiscourceType{
                                                                              my ($self, $request) = @_;

                                                                              my $discourceType = ($request->{'discourceType'}) ? $request->{'discourceType'} : undef;
                                                                              return $self->{impl}->setDiscourceType($discourceType);
                                                                            }

sub setNoveltyConfidence{
                                                                              my ($self, $request) = @_;

                                                                              my $noveltyConfidence = ($request->{'noveltyConfidence'}) ? $request->{'noveltyConfidence'} : undef;
                                                                              return $self->{impl}->setNoveltyConfidence($noveltyConfidence);
                                                                            }

sub setUncertaintyConfidence{
                                                                              my ($self, $request) = @_;

                                                                              my $uncertaintyConfidence = ($request->{'uncertaintyConfidence'}) ? $request->{'uncertaintyConfidence'} : undef;
                                                                              return $self->{impl}->setUncertaintyConfidence($uncertaintyConfidence);
                                                                            }

package thrift::adept::common::DiscourseUnitServiceClient;

use base qw(thrift::adept::common::ChunkServiceClient);
use base qw(thrift::adept::common::DiscourseUnitServiceIf);
sub new {
                                                                              my ($classname, $input, $output) = @_;
                                                                              my $self      = {};
                                                                              $self = $classname->SUPER::new($input, $output);
                                                                              return bless($self,$classname);
}

sub getDiscourceType{
  my $self = shift;

                                                                                                                                                            $self->send_getDiscourceType();
                                                                              return $self->recv_getDiscourceType();
}

sub send_getDiscourceType{
  my $self = shift;

                                                                              $self->{output}->writeMessageBegin('getDiscourceType', TMessageType::CALL, $self->{seqid});
                                                                              my $args = new thrift::adept::common::DiscourseUnitService_getDiscourceType_args();
                                                                              $args->write($self->{output});
                                                                              $self->{output}->writeMessageEnd();
                                                                              $self->{output}->getTransport()->flush();
}

sub recv_getDiscourceType{
  my $self = shift;

                                                                              my $rseqid = 0;
                                                                              my $fname;
                                                                              my $mtype = 0;

                                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                                my $x = new TApplicationException();
                                                                                $x->read($self->{input});
                                                                                $self->{input}->readMessageEnd();
                                                                                die $x;
                                                                              }
                                                                              my $result = new thrift::adept::common::DiscourseUnitService_getDiscourceType_result();
                                                                              $result->read($self->{input});
                                                                              $self->{input}->readMessageEnd();

                                                                              if (defined $result->{success} ) {
                                                                                return $result->{success};
                                                                              }
                                                                              die "getDiscourceType failed: unknown result";
}
sub getNoveltyConfidence{
  my $self = shift;

                                                                                                                                                            $self->send_getNoveltyConfidence();
                                                                              return $self->recv_getNoveltyConfidence();
}

sub send_getNoveltyConfidence{
  my $self = shift;

                                                                              $self->{output}->writeMessageBegin('getNoveltyConfidence', TMessageType::CALL, $self->{seqid});
                                                                              my $args = new thrift::adept::common::DiscourseUnitService_getNoveltyConfidence_args();
                                                                              $args->write($self->{output});
                                                                              $self->{output}->writeMessageEnd();
                                                                              $self->{output}->getTransport()->flush();
}

sub recv_getNoveltyConfidence{
  my $self = shift;

                                                                              my $rseqid = 0;
                                                                              my $fname;
                                                                              my $mtype = 0;

                                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                                my $x = new TApplicationException();
                                                                                $x->read($self->{input});
                                                                                $self->{input}->readMessageEnd();
                                                                                die $x;
                                                                              }
                                                                              my $result = new thrift::adept::common::DiscourseUnitService_getNoveltyConfidence_result();
                                                                              $result->read($self->{input});
                                                                              $self->{input}->readMessageEnd();

                                                                              if (defined $result->{success} ) {
                                                                                return $result->{success};
                                                                              }
                                                                              die "getNoveltyConfidence failed: unknown result";
}
sub getSequenceId{
  my $self = shift;

                                                                                                                                                            $self->send_getSequenceId();
                                                                              return $self->recv_getSequenceId();
}

sub send_getSequenceId{
  my $self = shift;

                                                                              $self->{output}->writeMessageBegin('getSequenceId', TMessageType::CALL, $self->{seqid});
                                                                              my $args = new thrift::adept::common::DiscourseUnitService_getSequenceId_args();
                                                                              $args->write($self->{output});
                                                                              $self->{output}->writeMessageEnd();
                                                                              $self->{output}->getTransport()->flush();
}

sub recv_getSequenceId{
  my $self = shift;

                                                                              my $rseqid = 0;
                                                                              my $fname;
                                                                              my $mtype = 0;

                                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                                my $x = new TApplicationException();
                                                                                $x->read($self->{input});
                                                                                $self->{input}->readMessageEnd();
                                                                                die $x;
                                                                              }
                                                                              my $result = new thrift::adept::common::DiscourseUnitService_getSequenceId_result();
                                                                              $result->read($self->{input});
                                                                              $self->{input}->readMessageEnd();

                                                                              if (defined $result->{success} ) {
                                                                                return $result->{success};
                                                                              }
                                                                              die "getSequenceId failed: unknown result";
}
sub getUncertaintyConfidence{
  my $self = shift;

                                                                                                                                                            $self->send_getUncertaintyConfidence();
                                                                              return $self->recv_getUncertaintyConfidence();
}

sub send_getUncertaintyConfidence{
  my $self = shift;

                                                                              $self->{output}->writeMessageBegin('getUncertaintyConfidence', TMessageType::CALL, $self->{seqid});
                                                                              my $args = new thrift::adept::common::DiscourseUnitService_getUncertaintyConfidence_args();
                                                                              $args->write($self->{output});
                                                                              $self->{output}->writeMessageEnd();
                                                                              $self->{output}->getTransport()->flush();
}

sub recv_getUncertaintyConfidence{
  my $self = shift;

                                                                              my $rseqid = 0;
                                                                              my $fname;
                                                                              my $mtype = 0;

                                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                                my $x = new TApplicationException();
                                                                                $x->read($self->{input});
                                                                                $self->{input}->readMessageEnd();
                                                                                die $x;
                                                                              }
                                                                              my $result = new thrift::adept::common::DiscourseUnitService_getUncertaintyConfidence_result();
                                                                              $result->read($self->{input});
                                                                              $self->{input}->readMessageEnd();

                                                                              if (defined $result->{success} ) {
                                                                                return $result->{success};
                                                                              }
                                                                              die "getUncertaintyConfidence failed: unknown result";
}
sub setDiscourceType{
  my $self = shift;
  my $discourceType = shift;

                                                                                                                                                            $self->send_setDiscourceType($discourceType);
                                                                              $self->recv_setDiscourceType();
}

sub send_setDiscourceType{
  my $self = shift;
  my $discourceType = shift;

                                                                              $self->{output}->writeMessageBegin('setDiscourceType', TMessageType::CALL, $self->{seqid});
                                                                              my $args = new thrift::adept::common::DiscourseUnitService_setDiscourceType_args();
                                                                              $args->{discourceType} = $discourceType;
                                                                              $args->write($self->{output});
                                                                              $self->{output}->writeMessageEnd();
                                                                              $self->{output}->getTransport()->flush();
}

sub recv_setDiscourceType{
  my $self = shift;

                                                                              my $rseqid = 0;
                                                                              my $fname;
                                                                              my $mtype = 0;

                                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                                my $x = new TApplicationException();
                                                                                $x->read($self->{input});
                                                                                $self->{input}->readMessageEnd();
                                                                                die $x;
                                                                              }
                                                                              my $result = new thrift::adept::common::DiscourseUnitService_setDiscourceType_result();
                                                                              $result->read($self->{input});
                                                                              $self->{input}->readMessageEnd();

                                                                              return;
}
sub setNoveltyConfidence{
  my $self = shift;
  my $noveltyConfidence = shift;

                                                                                                                                                            $self->send_setNoveltyConfidence($noveltyConfidence);
                                                                              $self->recv_setNoveltyConfidence();
}

sub send_setNoveltyConfidence{
  my $self = shift;
  my $noveltyConfidence = shift;

                                                                              $self->{output}->writeMessageBegin('setNoveltyConfidence', TMessageType::CALL, $self->{seqid});
                                                                              my $args = new thrift::adept::common::DiscourseUnitService_setNoveltyConfidence_args();
                                                                              $args->{noveltyConfidence} = $noveltyConfidence;
                                                                              $args->write($self->{output});
                                                                              $self->{output}->writeMessageEnd();
                                                                              $self->{output}->getTransport()->flush();
}

sub recv_setNoveltyConfidence{
  my $self = shift;

                                                                              my $rseqid = 0;
                                                                              my $fname;
                                                                              my $mtype = 0;

                                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                                my $x = new TApplicationException();
                                                                                $x->read($self->{input});
                                                                                $self->{input}->readMessageEnd();
                                                                                die $x;
                                                                              }
                                                                              my $result = new thrift::adept::common::DiscourseUnitService_setNoveltyConfidence_result();
                                                                              $result->read($self->{input});
                                                                              $self->{input}->readMessageEnd();

                                                                              return;
}
sub setUncertaintyConfidence{
  my $self = shift;
  my $uncertaintyConfidence = shift;

                                                                                                                                                            $self->send_setUncertaintyConfidence($uncertaintyConfidence);
                                                                              $self->recv_setUncertaintyConfidence();
}

sub send_setUncertaintyConfidence{
  my $self = shift;
  my $uncertaintyConfidence = shift;

                                                                              $self->{output}->writeMessageBegin('setUncertaintyConfidence', TMessageType::CALL, $self->{seqid});
                                                                              my $args = new thrift::adept::common::DiscourseUnitService_setUncertaintyConfidence_args();
                                                                              $args->{uncertaintyConfidence} = $uncertaintyConfidence;
                                                                              $args->write($self->{output});
                                                                              $self->{output}->writeMessageEnd();
                                                                              $self->{output}->getTransport()->flush();
}

sub recv_setUncertaintyConfidence{
  my $self = shift;

                                                                              my $rseqid = 0;
                                                                              my $fname;
                                                                              my $mtype = 0;

                                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                                my $x = new TApplicationException();
                                                                                $x->read($self->{input});
                                                                                $self->{input}->readMessageEnd();
                                                                                die $x;
                                                                              }
                                                                              my $result = new thrift::adept::common::DiscourseUnitService_setUncertaintyConfidence_result();
                                                                              $result->read($self->{input});
                                                                              $self->{input}->readMessageEnd();

                                                                              return;
}
package thrift::adept::common::DiscourseUnitServiceProcessor;

use strict;
use base qw(thrift::adept::common::ChunkServiceProcessor);

sub process {
                                                                                my ($self, $input, $output) = @_;
                                                                                my $rseqid = 0;
                                                                                my $fname  = undef;
                                                                                my $mtype  = 0;

                                                                                $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                my $methodname = 'process_'.$fname;
                                                                                if (!$self->can($methodname)) {
                                                                                  $input->skip(TType::STRUCT);
                                                                                  $input->readMessageEnd();
                                                                                  my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                                  $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                                  $x->write($output);
                                                                                  $output->writeMessageEnd();
                                                                                  $output->getTransport()->flush();
                                                                                  return;
                                                                                }
                                                                                $self->$methodname($rseqid, $input, $output);
                                                                                return 1;
}

sub process_getDiscourceType {
                                                                                my ($self, $seqid, $input, $output) = @_;
                                                                                my $args = new thrift::adept::common::DiscourseUnitService_getDiscourceType_args();
                                                                                $args->read($input);
                                                                                $input->readMessageEnd();
                                                                                my $result = new thrift::adept::common::DiscourseUnitService_getDiscourceType_result();
                                                                                $result->{success} = $self->{handler}->getDiscourceType();
                                                                                $output->writeMessageBegin('getDiscourceType', TMessageType::REPLY, $seqid);
                                                                                $result->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
}

sub process_getNoveltyConfidence {
                                                                                my ($self, $seqid, $input, $output) = @_;
                                                                                my $args = new thrift::adept::common::DiscourseUnitService_getNoveltyConfidence_args();
                                                                                $args->read($input);
                                                                                $input->readMessageEnd();
                                                                                my $result = new thrift::adept::common::DiscourseUnitService_getNoveltyConfidence_result();
                                                                                $result->{success} = $self->{handler}->getNoveltyConfidence();
                                                                                $output->writeMessageBegin('getNoveltyConfidence', TMessageType::REPLY, $seqid);
                                                                                $result->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
}

sub process_getSequenceId {
                                                                                my ($self, $seqid, $input, $output) = @_;
                                                                                my $args = new thrift::adept::common::DiscourseUnitService_getSequenceId_args();
                                                                                $args->read($input);
                                                                                $input->readMessageEnd();
                                                                                my $result = new thrift::adept::common::DiscourseUnitService_getSequenceId_result();
                                                                                $result->{success} = $self->{handler}->getSequenceId();
                                                                                $output->writeMessageBegin('getSequenceId', TMessageType::REPLY, $seqid);
                                                                                $result->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
}

sub process_getUncertaintyConfidence {
                                                                                my ($self, $seqid, $input, $output) = @_;
                                                                                my $args = new thrift::adept::common::DiscourseUnitService_getUncertaintyConfidence_args();
                                                                                $args->read($input);
                                                                                $input->readMessageEnd();
                                                                                my $result = new thrift::adept::common::DiscourseUnitService_getUncertaintyConfidence_result();
                                                                                $result->{success} = $self->{handler}->getUncertaintyConfidence();
                                                                                $output->writeMessageBegin('getUncertaintyConfidence', TMessageType::REPLY, $seqid);
                                                                                $result->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
}

sub process_setDiscourceType {
                                                                                my ($self, $seqid, $input, $output) = @_;
                                                                                my $args = new thrift::adept::common::DiscourseUnitService_setDiscourceType_args();
                                                                                $args->read($input);
                                                                                $input->readMessageEnd();
                                                                                my $result = new thrift::adept::common::DiscourseUnitService_setDiscourceType_result();
                                                                                $self->{handler}->setDiscourceType($args->discourceType);
                                                                                $output->writeMessageBegin('setDiscourceType', TMessageType::REPLY, $seqid);
                                                                                $result->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
}

sub process_setNoveltyConfidence {
                                                                                my ($self, $seqid, $input, $output) = @_;
                                                                                my $args = new thrift::adept::common::DiscourseUnitService_setNoveltyConfidence_args();
                                                                                $args->read($input);
                                                                                $input->readMessageEnd();
                                                                                my $result = new thrift::adept::common::DiscourseUnitService_setNoveltyConfidence_result();
                                                                                $self->{handler}->setNoveltyConfidence($args->noveltyConfidence);
                                                                                $output->writeMessageBegin('setNoveltyConfidence', TMessageType::REPLY, $seqid);
                                                                                $result->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
}

sub process_setUncertaintyConfidence {
                                                                                my ($self, $seqid, $input, $output) = @_;
                                                                                my $args = new thrift::adept::common::DiscourseUnitService_setUncertaintyConfidence_args();
                                                                                $args->read($input);
                                                                                $input->readMessageEnd();
                                                                                my $result = new thrift::adept::common::DiscourseUnitService_setUncertaintyConfidence_result();
                                                                                $self->{handler}->setUncertaintyConfidence($args->uncertaintyConfidence);
                                                                                $output->writeMessageBegin('setUncertaintyConfidence', TMessageType::REPLY, $seqid);
                                                                                $result->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
}

1;
