#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::AudioOffsetService_getBegin_args;
use base qw(Class::Accessor);

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          return bless ($self, $classname);
}

sub getName {
          return 'AudioOffsetService_getBegin_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1) 
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('AudioOffsetService_getBegin_args');
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package thrift::adept::common::AudioOffsetService_getBegin_result;
use base qw(Class::Accessor);
thrift::adept::common::AudioOffsetService_getBegin_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'AudioOffsetService_getBegin_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1) 
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == TType::DOUBLE) {
                $xfer += $input->readDouble(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('AudioOffsetService_getBegin_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
            $xfer += $output->writeDouble($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package thrift::adept::common::AudioOffsetService_getEnd_args;
use base qw(Class::Accessor);

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          return bless ($self, $classname);
}

sub getName {
          return 'AudioOffsetService_getEnd_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1) 
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('AudioOffsetService_getEnd_args');
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package thrift::adept::common::AudioOffsetService_getEnd_result;
use base qw(Class::Accessor);
thrift::adept::common::AudioOffsetService_getEnd_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'AudioOffsetService_getEnd_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1) 
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == TType::DOUBLE) {
                $xfer += $input->readDouble(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('AudioOffsetService_getEnd_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
            $xfer += $output->writeDouble($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package thrift::adept::common::AudioOffsetServiceIf;

use strict;


sub getBegin{
  my $self = shift;

  die 'implement interface';
}

sub getEnd{
  my $self = shift;

  die 'implement interface';
}

package thrift::adept::common::AudioOffsetServiceRest;

use strict;


sub new {
          my ($classname, $impl) = @_;
          my $self     ={ impl => $impl };

          return bless($self,$classname);
}

sub getBegin{
          my ($self, $request) = @_;

          return $self->{impl}->getBegin();
        }

sub getEnd{
          my ($self, $request) = @_;

          return $self->{impl}->getEnd();
        }

package thrift::adept::common::AudioOffsetServiceClient;


use base qw(thrift::adept::common::AudioOffsetServiceIf);
sub new {
          my ($classname, $input, $output) = @_;
          my $self      = {};
          $self->{input}  = $input;
          $self->{output} = defined $output ? $output : $input;
          $self->{seqid}  = 0;
          return bless($self,$classname);
}

sub getBegin{
  my $self = shift;

                    $self->send_getBegin();
          return $self->recv_getBegin();
}

sub send_getBegin{
  my $self = shift;

          $self->{output}->writeMessageBegin('getBegin', TMessageType::CALL, $self->{seqid});
          my $args = new thrift::adept::common::AudioOffsetService_getBegin_args();
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getBegin{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == TMessageType::EXCEPTION) {
            my $x = new TApplicationException();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = new thrift::adept::common::AudioOffsetService_getBegin_result();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          die "getBegin failed: unknown result";
}
sub getEnd{
  my $self = shift;

                    $self->send_getEnd();
          return $self->recv_getEnd();
}

sub send_getEnd{
  my $self = shift;

          $self->{output}->writeMessageBegin('getEnd', TMessageType::CALL, $self->{seqid});
          my $args = new thrift::adept::common::AudioOffsetService_getEnd_args();
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getEnd{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == TMessageType::EXCEPTION) {
            my $x = new TApplicationException();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = new thrift::adept::common::AudioOffsetService_getEnd_result();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          die "getEnd failed: unknown result";
}
package thrift::adept::common::AudioOffsetServiceProcessor;

use strict;


sub new {
            my ($classname, $handler) = @_;
            my $self      = {};
            $self->{handler} = $handler;
            return bless ($self, $classname);
}

sub process {
            my ($self, $input, $output) = @_;
            my $rseqid = 0;
            my $fname  = undef;
            my $mtype  = 0;

            $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
            my $methodname = 'process_'.$fname;
            if (!$self->can($methodname)) {
              $input->skip(TType::STRUCT);
              $input->readMessageEnd();
              my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
              $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
              $x->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              return;
            }
            $self->$methodname($rseqid, $input, $output);
            return 1;
}

sub process_getBegin {
            my ($self, $seqid, $input, $output) = @_;
            my $args = new thrift::adept::common::AudioOffsetService_getBegin_args();
            $args->read($input);
            $input->readMessageEnd();
            my $result = new thrift::adept::common::AudioOffsetService_getBegin_result();
            $result->{success} = $self->{handler}->getBegin();
            $output->writeMessageBegin('getBegin', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getEnd {
            my ($self, $seqid, $input, $output) = @_;
            my $args = new thrift::adept::common::AudioOffsetService_getEnd_args();
            $args->read($input);
            $input->readMessageEnd();
            my $result = new thrift::adept::common::AudioOffsetService_getEnd_result();
            $result->{success} = $self->{handler}->getEnd();
            $output->writeMessageBegin('getEnd', TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

1;