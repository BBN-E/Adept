#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ItemService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::DocumentService_addTokenStream_args;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_addTokenStream_args->mk_accessors( qw( tokenStream ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{tokenStream} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{tokenStream}) {
                                                $self->{tokenStream} = $vals->{tokenStream};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_addTokenStream_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^1$/ && do{                                                if ($ftype == TType::STRUCT) {
                                                  $self->{tokenStream} = new thrift::adept::common::TokenStream();
                                                  $xfer += $self->{tokenStream}->read($input);
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_addTokenStream_args');
                                            if (defined $self->{tokenStream}) {
                                              $xfer += $output->writeFieldBegin('tokenStream', TType::STRUCT, 1);
                                              $xfer += $self->{tokenStream}->write($output);
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_addTokenStream_result;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_addTokenStream_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_addTokenStream_result');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getAudioUri_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getAudioUri_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getAudioUri_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getAudioUri_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getAudioUri_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getAudioUri_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{success});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getAudioUri_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                              $xfer += $output->writeString($self->{success});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getCorpus_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getCorpus_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getCorpus_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getCorpus_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getCorpus_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getCorpus_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRUCT) {
                                                  $self->{success} = new thrift::adept::common::Corpus();
                                                  $xfer += $self->{success}->read($input);
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getCorpus_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                              $xfer += $self->{success}->write($output);
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getDocId_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getDocId_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getDocId_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getDocId_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getDocId_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getDocId_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{success});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getDocId_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                              $xfer += $output->writeString($self->{success});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getDocType_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getDocType_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getDocType_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getDocType_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getDocType_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getDocType_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{success});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getDocType_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                              $xfer += $output->writeString($self->{success});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getGenre_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getGenre_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getGenre_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getGenre_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getGenre_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getGenre_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{success});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getGenre_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                              $xfer += $output->writeString($self->{success});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getHeadline_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getHeadline_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getHeadline_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getHeadline_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getHeadline_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getHeadline_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{success});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getHeadline_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                              $xfer += $output->writeString($self->{success});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getLanguage_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getLanguage_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getLanguage_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getLanguage_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getLanguage_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getLanguage_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{success});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getLanguage_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                              $xfer += $output->writeString($self->{success});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getTokenStream_args;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getTokenStream_args->mk_accessors( qw( tokenizerType ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{tokenizerType} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{tokenizerType}) {
                                                $self->{tokenizerType} = $vals->{tokenizerType};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getTokenStream_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^1$/ && do{                                                if ($ftype == TType::I32) {
                                                  $xfer += $input->readI32(\$self->{tokenizerType});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getTokenStream_args');
                                            if (defined $self->{tokenizerType}) {
                                              $xfer += $output->writeFieldBegin('tokenizerType', TType::I32, 1);
                                              $xfer += $output->writeI32($self->{tokenizerType});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getTokenStream_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getTokenStream_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getTokenStream_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRUCT) {
                                                  $self->{success} = new thrift::adept::common::TokenStream();
                                                  $xfer += $self->{success}->read($input);
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getTokenStream_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                              $xfer += $self->{success}->write($output);
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getTokenStreamList_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getTokenStreamList_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getTokenStreamList_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getTokenStreamList_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getTokenStreamList_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getTokenStreamList_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::LIST) {
                                                  {
                                                    my $_size429 = 0;
                                                    $self->{success} = [];
                                                    my $_etype432 = 0;
                                                    $xfer += $input->readListBegin(\$_etype432, \$_size429);
                                                    for (my $_i433 = 0; $_i433 < $_size429; ++$_i433)
                                                    {
                                                      my $elem434 = undef;
                                                      $elem434 = new thrift::adept::common::TokenStream();
                                                      $xfer += $elem434->read($input);
                                                      push(@{$self->{success}},$elem434);
                                                    }
                                                    $xfer += $input->readListEnd();
                                                  }
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getTokenStreamList_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                              {
                                                $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
                                                {
                                                  foreach my $iter435 (@{$self->{success}}) 
                                                  {
                                                    $xfer += ${iter435}->write($output);
                                                  }
                                                }
                                                $xfer += $output->writeListEnd();
                                              }
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getUri_args;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getUri_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getUri_args');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_getUri_result;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_getUri_result->mk_accessors( qw( success ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{success} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{success}) {
                                                $self->{success} = $vals->{success};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_getUri_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^0$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{success});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_getUri_result');
                                            if (defined $self->{success}) {
                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                              $xfer += $output->writeString($self->{success});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setAudioUri_args;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_setAudioUri_args->mk_accessors( qw( audioUri ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{audioUri} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{audioUri}) {
                                                $self->{audioUri} = $vals->{audioUri};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setAudioUri_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^1$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{audioUri});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setAudioUri_args');
                                            if (defined $self->{audioUri}) {
                                              $xfer += $output->writeFieldBegin('audioUri', TType::STRING, 1);
                                              $xfer += $output->writeString($self->{audioUri});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setAudioUri_result;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setAudioUri_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setAudioUri_result');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setGenre_args;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_setGenre_args->mk_accessors( qw( genre ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{genre} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{genre}) {
                                                $self->{genre} = $vals->{genre};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setGenre_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^1$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{genre});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setGenre_args');
                                            if (defined $self->{genre}) {
                                              $xfer += $output->writeFieldBegin('genre', TType::STRING, 1);
                                              $xfer += $output->writeString($self->{genre});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setGenre_result;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setGenre_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setGenre_result');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setHeadline_args;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_setHeadline_args->mk_accessors( qw( headline ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{headline} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{headline}) {
                                                $self->{headline} = $vals->{headline};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setHeadline_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^1$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{headline});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setHeadline_args');
                                            if (defined $self->{headline}) {
                                              $xfer += $output->writeFieldBegin('headline', TType::STRING, 1);
                                              $xfer += $output->writeString($self->{headline});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setHeadline_result;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setHeadline_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setHeadline_result');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setTokenStreamList_args;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_setTokenStreamList_args->mk_accessors( qw( tokenStreamList ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{tokenStreamList} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{tokenStreamList}) {
                                                $self->{tokenStreamList} = $vals->{tokenStreamList};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setTokenStreamList_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^1$/ && do{                                                if ($ftype == TType::LIST) {
                                                  {
                                                    my $_size436 = 0;
                                                    $self->{tokenStreamList} = [];
                                                    my $_etype439 = 0;
                                                    $xfer += $input->readListBegin(\$_etype439, \$_size436);
                                                    for (my $_i440 = 0; $_i440 < $_size436; ++$_i440)
                                                    {
                                                      my $elem441 = undef;
                                                      $elem441 = new thrift::adept::common::TokenStream();
                                                      $xfer += $elem441->read($input);
                                                      push(@{$self->{tokenStreamList}},$elem441);
                                                    }
                                                    $xfer += $input->readListEnd();
                                                  }
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setTokenStreamList_args');
                                            if (defined $self->{tokenStreamList}) {
                                              $xfer += $output->writeFieldBegin('tokenStreamList', TType::LIST, 1);
                                              {
                                                $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{tokenStreamList}}));
                                                {
                                                  foreach my $iter442 (@{$self->{tokenStreamList}}) 
                                                  {
                                                    $xfer += ${iter442}->write($output);
                                                  }
                                                }
                                                $xfer += $output->writeListEnd();
                                              }
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setTokenStreamList_result;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setTokenStreamList_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setTokenStreamList_result');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setValue_args;
use base qw(Class::Accessor);
thrift::adept::common::DocumentService_setValue_args->mk_accessors( qw( value ) );

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            $self->{value} = undef;
                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                              if (defined $vals->{value}) {
                                                $self->{value} = $vals->{value};
                                              }
                                            }
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setValue_args';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                /^1$/ && do{                                                if ($ftype == TType::STRING) {
                                                  $xfer += $input->readString(\$self->{value});
                                                } else {
                                                  $xfer += $input->skip($ftype);
                                                }
                                                last; };
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setValue_args');
                                            if (defined $self->{value}) {
                                              $xfer += $output->writeFieldBegin('value', TType::STRING, 1);
                                              $xfer += $output->writeString($self->{value});
                                              $xfer += $output->writeFieldEnd();
                                            }
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentService_setValue_result;
use base qw(Class::Accessor);

sub new {
                                            my $classname = shift;
                                            my $self      = {};
                                            my $vals      = shift || {};
                                            return bless ($self, $classname);
}

sub getName {
                                            return 'DocumentService_setValue_result';
                                          }

sub read {
                                            my ($self, $input) = @_;
                                            my $xfer  = 0;
                                            my $fname;
                                            my $ftype = 0;
                                            my $fid   = 0;
                                            $xfer += $input->readStructBegin(\$fname);
                                            while (1) 
                                            {
                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                              if ($ftype == TType::STOP) {
                                                last;
                                              }
                                              SWITCH: for($fid)
                                              {
                                                  $xfer += $input->skip($ftype);
                                              }
                                              $xfer += $input->readFieldEnd();
                                            }
                                            $xfer += $input->readStructEnd();
                                            return $xfer;
                                          }

sub write {
                                            my ($self, $output) = @_;
                                            my $xfer   = 0;
                                            $xfer += $output->writeStructBegin('DocumentService_setValue_result');
                                            $xfer += $output->writeFieldStop();
                                            $xfer += $output->writeStructEnd();
                                            return $xfer;
                                          }

package thrift::adept::common::DocumentServiceIf;

use strict;
use base qw(thrift::adept::common::ItemServiceIf);

sub addTokenStream{
  my $self = shift;
  my $tokenStream = shift;

  die 'implement interface';
}

sub getAudioUri{
  my $self = shift;

  die 'implement interface';
}

sub getCorpus{
  my $self = shift;

  die 'implement interface';
}

sub getDocId{
  my $self = shift;

  die 'implement interface';
}

sub getDocType{
  my $self = shift;

  die 'implement interface';
}

sub getGenre{
  my $self = shift;

  die 'implement interface';
}

sub getHeadline{
  my $self = shift;

  die 'implement interface';
}

sub getLanguage{
  my $self = shift;

  die 'implement interface';
}

sub getTokenStream{
  my $self = shift;
  my $tokenizerType = shift;

  die 'implement interface';
}

sub getTokenStreamList{
  my $self = shift;

  die 'implement interface';
}

sub getUri{
  my $self = shift;

  die 'implement interface';
}

sub setAudioUri{
  my $self = shift;
  my $audioUri = shift;

  die 'implement interface';
}

sub setGenre{
  my $self = shift;
  my $genre = shift;

  die 'implement interface';
}

sub setHeadline{
  my $self = shift;
  my $headline = shift;

  die 'implement interface';
}

sub setTokenStreamList{
  my $self = shift;
  my $tokenStreamList = shift;

  die 'implement interface';
}

sub setValue{
  my $self = shift;
  my $value = shift;

  die 'implement interface';
}

package thrift::adept::common::DocumentServiceRest;

use strict;
use base qw(thrift::adept::common::ItemServiceRest);

sub addTokenStream{
                                            my ($self, $request) = @_;

                                            my $tokenStream = ($request->{'tokenStream'}) ? $request->{'tokenStream'} : undef;
                                            return $self->{impl}->addTokenStream($tokenStream);
                                          }

sub getAudioUri{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getAudioUri();
                                          }

sub getCorpus{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getCorpus();
                                          }

sub getDocId{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getDocId();
                                          }

sub getDocType{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getDocType();
                                          }

sub getGenre{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getGenre();
                                          }

sub getHeadline{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getHeadline();
                                          }

sub getLanguage{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getLanguage();
                                          }

sub getTokenStream{
                                            my ($self, $request) = @_;

                                            my $tokenizerType = ($request->{'tokenizerType'}) ? $request->{'tokenizerType'} : undef;
                                            return $self->{impl}->getTokenStream($tokenizerType);
                                          }

sub getTokenStreamList{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getTokenStreamList();
                                          }

sub getUri{
                                            my ($self, $request) = @_;

                                            return $self->{impl}->getUri();
                                          }

sub setAudioUri{
                                            my ($self, $request) = @_;

                                            my $audioUri = ($request->{'audioUri'}) ? $request->{'audioUri'} : undef;
                                            return $self->{impl}->setAudioUri($audioUri);
                                          }

sub setGenre{
                                            my ($self, $request) = @_;

                                            my $genre = ($request->{'genre'}) ? $request->{'genre'} : undef;
                                            return $self->{impl}->setGenre($genre);
                                          }

sub setHeadline{
                                            my ($self, $request) = @_;

                                            my $headline = ($request->{'headline'}) ? $request->{'headline'} : undef;
                                            return $self->{impl}->setHeadline($headline);
                                          }

sub setTokenStreamList{
                                            my ($self, $request) = @_;

                                            my $tokenStreamList = ($request->{'tokenStreamList'}) ? $request->{'tokenStreamList'} : undef;
                                            return $self->{impl}->setTokenStreamList($tokenStreamList);
                                          }

sub setValue{
                                            my ($self, $request) = @_;

                                            my $value = ($request->{'value'}) ? $request->{'value'} : undef;
                                            return $self->{impl}->setValue($value);
                                          }

package thrift::adept::common::DocumentServiceClient;

use base qw(thrift::adept::common::ItemServiceClient);
use base qw(thrift::adept::common::DocumentServiceIf);
sub new {
                                            my ($classname, $input, $output) = @_;
                                            my $self      = {};
                                            $self = $classname->SUPER::new($input, $output);
                                            return bless($self,$classname);
}

sub addTokenStream{
  my $self = shift;
  my $tokenStream = shift;

                                                                                        $self->send_addTokenStream($tokenStream);
                                            $self->recv_addTokenStream();
}

sub send_addTokenStream{
  my $self = shift;
  my $tokenStream = shift;

                                            $self->{output}->writeMessageBegin('addTokenStream', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_addTokenStream_args();
                                            $args->{tokenStream} = $tokenStream;
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_addTokenStream{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_addTokenStream_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            return;
}
sub getAudioUri{
  my $self = shift;

                                                                                        $self->send_getAudioUri();
                                            return $self->recv_getAudioUri();
}

sub send_getAudioUri{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getAudioUri', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getAudioUri_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getAudioUri{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getAudioUri_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getAudioUri failed: unknown result";
}
sub getCorpus{
  my $self = shift;

                                                                                        $self->send_getCorpus();
                                            return $self->recv_getCorpus();
}

sub send_getCorpus{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getCorpus', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getCorpus_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getCorpus{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getCorpus_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getCorpus failed: unknown result";
}
sub getDocId{
  my $self = shift;

                                                                                        $self->send_getDocId();
                                            return $self->recv_getDocId();
}

sub send_getDocId{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getDocId', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getDocId_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getDocId{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getDocId_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getDocId failed: unknown result";
}
sub getDocType{
  my $self = shift;

                                                                                        $self->send_getDocType();
                                            return $self->recv_getDocType();
}

sub send_getDocType{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getDocType', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getDocType_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getDocType{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getDocType_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getDocType failed: unknown result";
}
sub getGenre{
  my $self = shift;

                                                                                        $self->send_getGenre();
                                            return $self->recv_getGenre();
}

sub send_getGenre{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getGenre', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getGenre_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getGenre{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getGenre_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getGenre failed: unknown result";
}
sub getHeadline{
  my $self = shift;

                                                                                        $self->send_getHeadline();
                                            return $self->recv_getHeadline();
}

sub send_getHeadline{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getHeadline', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getHeadline_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getHeadline{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getHeadline_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getHeadline failed: unknown result";
}
sub getLanguage{
  my $self = shift;

                                                                                        $self->send_getLanguage();
                                            return $self->recv_getLanguage();
}

sub send_getLanguage{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getLanguage', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getLanguage_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getLanguage{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getLanguage_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getLanguage failed: unknown result";
}
sub getTokenStream{
  my $self = shift;
  my $tokenizerType = shift;

                                                                                        $self->send_getTokenStream($tokenizerType);
                                            return $self->recv_getTokenStream();
}

sub send_getTokenStream{
  my $self = shift;
  my $tokenizerType = shift;

                                            $self->{output}->writeMessageBegin('getTokenStream', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getTokenStream_args();
                                            $args->{tokenizerType} = $tokenizerType;
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getTokenStream{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getTokenStream_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getTokenStream failed: unknown result";
}
sub getTokenStreamList{
  my $self = shift;

                                                                                        $self->send_getTokenStreamList();
                                            return $self->recv_getTokenStreamList();
}

sub send_getTokenStreamList{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getTokenStreamList', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getTokenStreamList_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getTokenStreamList{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getTokenStreamList_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getTokenStreamList failed: unknown result";
}
sub getUri{
  my $self = shift;

                                                                                        $self->send_getUri();
                                            return $self->recv_getUri();
}

sub send_getUri{
  my $self = shift;

                                            $self->{output}->writeMessageBegin('getUri', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_getUri_args();
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_getUri{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_getUri_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            if (defined $result->{success} ) {
                                              return $result->{success};
                                            }
                                            die "getUri failed: unknown result";
}
sub setAudioUri{
  my $self = shift;
  my $audioUri = shift;

                                                                                        $self->send_setAudioUri($audioUri);
                                            $self->recv_setAudioUri();
}

sub send_setAudioUri{
  my $self = shift;
  my $audioUri = shift;

                                            $self->{output}->writeMessageBegin('setAudioUri', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_setAudioUri_args();
                                            $args->{audioUri} = $audioUri;
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_setAudioUri{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_setAudioUri_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            return;
}
sub setGenre{
  my $self = shift;
  my $genre = shift;

                                                                                        $self->send_setGenre($genre);
                                            $self->recv_setGenre();
}

sub send_setGenre{
  my $self = shift;
  my $genre = shift;

                                            $self->{output}->writeMessageBegin('setGenre', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_setGenre_args();
                                            $args->{genre} = $genre;
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_setGenre{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_setGenre_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            return;
}
sub setHeadline{
  my $self = shift;
  my $headline = shift;

                                                                                        $self->send_setHeadline($headline);
                                            $self->recv_setHeadline();
}

sub send_setHeadline{
  my $self = shift;
  my $headline = shift;

                                            $self->{output}->writeMessageBegin('setHeadline', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_setHeadline_args();
                                            $args->{headline} = $headline;
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_setHeadline{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_setHeadline_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            return;
}
sub setTokenStreamList{
  my $self = shift;
  my $tokenStreamList = shift;

                                                                                        $self->send_setTokenStreamList($tokenStreamList);
                                            $self->recv_setTokenStreamList();
}

sub send_setTokenStreamList{
  my $self = shift;
  my $tokenStreamList = shift;

                                            $self->{output}->writeMessageBegin('setTokenStreamList', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_setTokenStreamList_args();
                                            $args->{tokenStreamList} = $tokenStreamList;
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_setTokenStreamList{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_setTokenStreamList_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            return;
}
sub setValue{
  my $self = shift;
  my $value = shift;

                                                                                        $self->send_setValue($value);
                                            $self->recv_setValue();
}

sub send_setValue{
  my $self = shift;
  my $value = shift;

                                            $self->{output}->writeMessageBegin('setValue', TMessageType::CALL, $self->{seqid});
                                            my $args = new thrift::adept::common::DocumentService_setValue_args();
                                            $args->{value} = $value;
                                            $args->write($self->{output});
                                            $self->{output}->writeMessageEnd();
                                            $self->{output}->getTransport()->flush();
}

sub recv_setValue{
  my $self = shift;

                                            my $rseqid = 0;
                                            my $fname;
                                            my $mtype = 0;

                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                            if ($mtype == TMessageType::EXCEPTION) {
                                              my $x = new TApplicationException();
                                              $x->read($self->{input});
                                              $self->{input}->readMessageEnd();
                                              die $x;
                                            }
                                            my $result = new thrift::adept::common::DocumentService_setValue_result();
                                            $result->read($self->{input});
                                            $self->{input}->readMessageEnd();

                                            return;
}
package thrift::adept::common::DocumentServiceProcessor;

use strict;
use base qw(thrift::adept::common::ItemServiceProcessor);

sub process {
                                              my ($self, $input, $output) = @_;
                                              my $rseqid = 0;
                                              my $fname  = undef;
                                              my $mtype  = 0;

                                              $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                              my $methodname = 'process_'.$fname;
                                              if (!$self->can($methodname)) {
                                                $input->skip(TType::STRUCT);
                                                $input->readMessageEnd();
                                                my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                $x->write($output);
                                                $output->writeMessageEnd();
                                                $output->getTransport()->flush();
                                                return;
                                              }
                                              $self->$methodname($rseqid, $input, $output);
                                              return 1;
}

sub process_addTokenStream {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_addTokenStream_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_addTokenStream_result();
                                              $self->{handler}->addTokenStream($args->tokenStream);
                                              $output->writeMessageBegin('addTokenStream', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getAudioUri {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getAudioUri_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getAudioUri_result();
                                              $result->{success} = $self->{handler}->getAudioUri();
                                              $output->writeMessageBegin('getAudioUri', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getCorpus {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getCorpus_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getCorpus_result();
                                              $result->{success} = $self->{handler}->getCorpus();
                                              $output->writeMessageBegin('getCorpus', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getDocId {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getDocId_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getDocId_result();
                                              $result->{success} = $self->{handler}->getDocId();
                                              $output->writeMessageBegin('getDocId', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getDocType {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getDocType_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getDocType_result();
                                              $result->{success} = $self->{handler}->getDocType();
                                              $output->writeMessageBegin('getDocType', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getGenre {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getGenre_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getGenre_result();
                                              $result->{success} = $self->{handler}->getGenre();
                                              $output->writeMessageBegin('getGenre', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getHeadline {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getHeadline_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getHeadline_result();
                                              $result->{success} = $self->{handler}->getHeadline();
                                              $output->writeMessageBegin('getHeadline', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getLanguage {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getLanguage_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getLanguage_result();
                                              $result->{success} = $self->{handler}->getLanguage();
                                              $output->writeMessageBegin('getLanguage', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getTokenStream {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getTokenStream_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getTokenStream_result();
                                              $result->{success} = $self->{handler}->getTokenStream($args->tokenizerType);
                                              $output->writeMessageBegin('getTokenStream', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getTokenStreamList {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getTokenStreamList_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getTokenStreamList_result();
                                              $result->{success} = $self->{handler}->getTokenStreamList();
                                              $output->writeMessageBegin('getTokenStreamList', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_getUri {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_getUri_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_getUri_result();
                                              $result->{success} = $self->{handler}->getUri();
                                              $output->writeMessageBegin('getUri', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_setAudioUri {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_setAudioUri_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_setAudioUri_result();
                                              $self->{handler}->setAudioUri($args->audioUri);
                                              $output->writeMessageBegin('setAudioUri', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_setGenre {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_setGenre_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_setGenre_result();
                                              $self->{handler}->setGenre($args->genre);
                                              $output->writeMessageBegin('setGenre', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_setHeadline {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_setHeadline_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_setHeadline_result();
                                              $self->{handler}->setHeadline($args->headline);
                                              $output->writeMessageBegin('setHeadline', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_setTokenStreamList {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_setTokenStreamList_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_setTokenStreamList_result();
                                              $self->{handler}->setTokenStreamList($args->tokenStreamList);
                                              $output->writeMessageBegin('setTokenStreamList', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

sub process_setValue {
                                              my ($self, $seqid, $input, $output) = @_;
                                              my $args = new thrift::adept::common::DocumentService_setValue_args();
                                              $args->read($input);
                                              $input->readMessageEnd();
                                              my $result = new thrift::adept::common::DocumentService_setValue_result();
                                              $self->{handler}->setValue($args->value);
                                              $output->writeMessageBegin('setValue', TMessageType::REPLY, $seqid);
                                              $result->write($output);
                                              $output->writeMessageEnd();
                                              $output->getTransport()->flush();
}

1;