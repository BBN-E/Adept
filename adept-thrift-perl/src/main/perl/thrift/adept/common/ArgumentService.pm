#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::ArgumentService_addArgumentConfidencePair_args;
use base qw(Class::Accessor);
thrift::adept::common::ArgumentService_addArgumentConfidencePair_args->mk_accessors( qw( argument confidence ) );

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          $self->{argument} = undef;
                                                          $self->{confidence} = undef;
                                                          if (UNIVERSAL::isa($vals,'HASH')) {
                                                            if (defined $vals->{argument}) {
                                                              $self->{argument} = $vals->{argument};
                                                            }
                                                            if (defined $vals->{confidence}) {
                                                              $self->{confidence} = $vals->{confidence};
                                                            }
                                                          }
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_addArgumentConfidencePair_args';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                              /^1$/ && do{                                                              if ($ftype == TType::STRUCT) {
                                                                $self->{argument} = new thrift::adept::common::ChunkUnion();
                                                                $xfer += $self->{argument}->read($input);
                                                              } else {
                                                                $xfer += $input->skip($ftype);
                                                              }
                                                              last; };
                                                              /^2$/ && do{                                                              if ($ftype == TType::DOUBLE) {
                                                                $xfer += $input->readDouble(\$self->{confidence});
                                                              } else {
                                                                $xfer += $input->skip($ftype);
                                                              }
                                                              last; };
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_addArgumentConfidencePair_args');
                                                          if (defined $self->{argument}) {
                                                            $xfer += $output->writeFieldBegin('argument', TType::STRUCT, 1);
                                                            $xfer += $self->{argument}->write($output);
                                                            $xfer += $output->writeFieldEnd();
                                                          }
                                                          if (defined $self->{confidence}) {
                                                            $xfer += $output->writeFieldBegin('confidence', TType::DOUBLE, 2);
                                                            $xfer += $output->writeDouble($self->{confidence});
                                                            $xfer += $output->writeFieldEnd();
                                                          }
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_addArgumentConfidencePair_result;
use base qw(Class::Accessor);
thrift::adept::common::ArgumentService_addArgumentConfidencePair_result->mk_accessors( qw( success ) );

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          $self->{success} = undef;
                                                          if (UNIVERSAL::isa($vals,'HASH')) {
                                                            if (defined $vals->{success}) {
                                                              $self->{success} = $vals->{success};
                                                            }
                                                          }
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_addArgumentConfidencePair_result';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                              /^0$/ && do{                                                              if ($ftype == TType::BOOL) {
                                                                $xfer += $input->readBool(\$self->{success});
                                                              } else {
                                                                $xfer += $input->skip($ftype);
                                                              }
                                                              last; };
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_addArgumentConfidencePair_result');
                                                          if (defined $self->{success}) {
                                                            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
                                                            $xfer += $output->writeBool($self->{success});
                                                            $xfer += $output->writeFieldEnd();
                                                          }
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_getArgumentDistribution_args;
use base qw(Class::Accessor);

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_getArgumentDistribution_args';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_getArgumentDistribution_args');
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_getArgumentDistribution_result;
use base qw(Class::Accessor);
thrift::adept::common::ArgumentService_getArgumentDistribution_result->mk_accessors( qw( success ) );

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          $self->{success} = undef;
                                                          if (UNIVERSAL::isa($vals,'HASH')) {
                                                            if (defined $vals->{success}) {
                                                              $self->{success} = $vals->{success};
                                                            }
                                                          }
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_getArgumentDistribution_result';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                              /^0$/ && do{                                                              if ($ftype == TType::MAP) {
                                                                {
                                                                  my $_size485 = 0;
                                                                  $self->{success} = {};
                                                                  my $_ktype486 = 0;
                                                                  my $_vtype487 = 0;
                                                                  $xfer += $input->readMapBegin(\$_ktype486, \$_vtype487, \$_size485);
                                                                  for (my $_i489 = 0; $_i489 < $_size485; ++$_i489)
                                                                  {
                                                                    my $key490 = new thrift::adept::common::ChunkUnion();
                                                                    my $val491 = 0.0;
                                                                    $key490 = new thrift::adept::common::ChunkUnion();
                                                                    $xfer += $key490->read($input);
                                                                    $xfer += $input->readDouble(\$val491);
                                                                    $self->{success}->{$key490} = $val491;
                                                                  }
                                                                  $xfer += $input->readMapEnd();
                                                                }
                                                              } else {
                                                                $xfer += $input->skip($ftype);
                                                              }
                                                              last; };
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_getArgumentDistribution_result');
                                                          if (defined $self->{success}) {
                                                            $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
                                                            {
                                                              $xfer += $output->writeMapBegin(TType::STRUCT, TType::DOUBLE, scalar(keys %{$self->{success}}));
                                                              {
                                                                while( my ($kiter492,$viter493) = each %{$self->{success}}) 
                                                                {
                                                                  $xfer += ${kiter492}->write($output);
                                                                  $xfer += $output->writeDouble($viter493);
                                                                }
                                                              }
                                                              $xfer += $output->writeMapEnd();
                                                            }
                                                            $xfer += $output->writeFieldEnd();
                                                          }
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_getArgumentType_args;
use base qw(Class::Accessor);

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_getArgumentType_args';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_getArgumentType_args');
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_getArgumentType_result;
use base qw(Class::Accessor);
thrift::adept::common::ArgumentService_getArgumentType_result->mk_accessors( qw( success ) );

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          $self->{success} = undef;
                                                          if (UNIVERSAL::isa($vals,'HASH')) {
                                                            if (defined $vals->{success}) {
                                                              $self->{success} = $vals->{success};
                                                            }
                                                          }
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_getArgumentType_result';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                              /^0$/ && do{                                                              if ($ftype == TType::STRING) {
                                                                $xfer += $input->readString(\$self->{success});
                                                              } else {
                                                                $xfer += $input->skip($ftype);
                                                              }
                                                              last; };
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_getArgumentType_result');
                                                          if (defined $self->{success}) {
                                                            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                            $xfer += $output->writeString($self->{success});
                                                            $xfer += $output->writeFieldEnd();
                                                          }
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_getBestArgument_args;
use base qw(Class::Accessor);

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_getBestArgument_args';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_getBestArgument_args');
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_getBestArgument_result;
use base qw(Class::Accessor);
thrift::adept::common::ArgumentService_getBestArgument_result->mk_accessors( qw( success ) );

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          $self->{success} = undef;
                                                          if (UNIVERSAL::isa($vals,'HASH')) {
                                                            if (defined $vals->{success}) {
                                                              $self->{success} = $vals->{success};
                                                            }
                                                          }
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_getBestArgument_result';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                              /^0$/ && do{                                                              if ($ftype == TType::STRUCT) {
                                                                $self->{success} = new thrift::adept::common::ChunkUnion();
                                                                $xfer += $self->{success}->read($input);
                                                              } else {
                                                                $xfer += $input->skip($ftype);
                                                              }
                                                              last; };
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_getBestArgument_result');
                                                          if (defined $self->{success}) {
                                                            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                                            $xfer += $self->{success}->write($output);
                                                            $xfer += $output->writeFieldEnd();
                                                          }
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_setArgumentDistribution_args;
use base qw(Class::Accessor);
thrift::adept::common::ArgumentService_setArgumentDistribution_args->mk_accessors( qw( argumentDistribution ) );

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          $self->{argumentDistribution} = undef;
                                                          if (UNIVERSAL::isa($vals,'HASH')) {
                                                            if (defined $vals->{argumentDistribution}) {
                                                              $self->{argumentDistribution} = $vals->{argumentDistribution};
                                                            }
                                                          }
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_setArgumentDistribution_args';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                              /^1$/ && do{                                                              if ($ftype == TType::MAP) {
                                                                {
                                                                  my $_size494 = 0;
                                                                  $self->{argumentDistribution} = {};
                                                                  my $_ktype495 = 0;
                                                                  my $_vtype496 = 0;
                                                                  $xfer += $input->readMapBegin(\$_ktype495, \$_vtype496, \$_size494);
                                                                  for (my $_i498 = 0; $_i498 < $_size494; ++$_i498)
                                                                  {
                                                                    my $key499 = new thrift::adept::common::ChunkUnion();
                                                                    my $val500 = 0.0;
                                                                    $key499 = new thrift::adept::common::ChunkUnion();
                                                                    $xfer += $key499->read($input);
                                                                    $xfer += $input->readDouble(\$val500);
                                                                    $self->{argumentDistribution}->{$key499} = $val500;
                                                                  }
                                                                  $xfer += $input->readMapEnd();
                                                                }
                                                              } else {
                                                                $xfer += $input->skip($ftype);
                                                              }
                                                              last; };
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_setArgumentDistribution_args');
                                                          if (defined $self->{argumentDistribution}) {
                                                            $xfer += $output->writeFieldBegin('argumentDistribution', TType::MAP, 1);
                                                            {
                                                              $xfer += $output->writeMapBegin(TType::STRUCT, TType::DOUBLE, scalar(keys %{$self->{argumentDistribution}}));
                                                              {
                                                                while( my ($kiter501,$viter502) = each %{$self->{argumentDistribution}}) 
                                                                {
                                                                  $xfer += ${kiter501}->write($output);
                                                                  $xfer += $output->writeDouble($viter502);
                                                                }
                                                              }
                                                              $xfer += $output->writeMapEnd();
                                                            }
                                                            $xfer += $output->writeFieldEnd();
                                                          }
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentService_setArgumentDistribution_result;
use base qw(Class::Accessor);

sub new {
                                                          my $classname = shift;
                                                          my $self      = {};
                                                          my $vals      = shift || {};
                                                          return bless ($self, $classname);
}

sub getName {
                                                          return 'ArgumentService_setArgumentDistribution_result';
                                                        }

sub read {
                                                          my ($self, $input) = @_;
                                                          my $xfer  = 0;
                                                          my $fname;
                                                          my $ftype = 0;
                                                          my $fid   = 0;
                                                          $xfer += $input->readStructBegin(\$fname);
                                                          while (1) 
                                                          {
                                                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                            if ($ftype == TType::STOP) {
                                                              last;
                                                            }
                                                            SWITCH: for($fid)
                                                            {
                                                                $xfer += $input->skip($ftype);
                                                            }
                                                            $xfer += $input->readFieldEnd();
                                                          }
                                                          $xfer += $input->readStructEnd();
                                                          return $xfer;
                                                        }

sub write {
                                                          my ($self, $output) = @_;
                                                          my $xfer   = 0;
                                                          $xfer += $output->writeStructBegin('ArgumentService_setArgumentDistribution_result');
                                                          $xfer += $output->writeFieldStop();
                                                          $xfer += $output->writeStructEnd();
                                                          return $xfer;
                                                        }

package thrift::adept::common::ArgumentServiceIf;

use strict;


sub addArgumentConfidencePair{
  my $self = shift;
  my $argument = shift;
  my $confidence = shift;

  die 'implement interface';
}

sub getArgumentDistribution{
  my $self = shift;

  die 'implement interface';
}

sub getArgumentType{
  my $self = shift;

  die 'implement interface';
}

sub getBestArgument{
  my $self = shift;

  die 'implement interface';
}

sub setArgumentDistribution{
  my $self = shift;
  my $argumentDistribution = shift;

  die 'implement interface';
}

package thrift::adept::common::ArgumentServiceRest;

use strict;


sub new {
                                                          my ($classname, $impl) = @_;
                                                          my $self     ={ impl => $impl };

                                                          return bless($self,$classname);
}

sub addArgumentConfidencePair{
                                                          my ($self, $request) = @_;

                                                          my $argument = ($request->{'argument'}) ? $request->{'argument'} : undef;
                                                          my $confidence = ($request->{'confidence'}) ? $request->{'confidence'} : undef;
                                                          return $self->{impl}->addArgumentConfidencePair($argument, $confidence);
                                                        }

sub getArgumentDistribution{
                                                          my ($self, $request) = @_;

                                                          return $self->{impl}->getArgumentDistribution();
                                                        }

sub getArgumentType{
                                                          my ($self, $request) = @_;

                                                          return $self->{impl}->getArgumentType();
                                                        }

sub getBestArgument{
                                                          my ($self, $request) = @_;

                                                          return $self->{impl}->getBestArgument();
                                                        }

sub setArgumentDistribution{
                                                          my ($self, $request) = @_;

                                                          my $argumentDistribution = ($request->{'argumentDistribution'}) ? $request->{'argumentDistribution'} : undef;
                                                          return $self->{impl}->setArgumentDistribution($argumentDistribution);
                                                        }

package thrift::adept::common::ArgumentServiceClient;


use base qw(thrift::adept::common::ArgumentServiceIf);
sub new {
                                                          my ($classname, $input, $output) = @_;
                                                          my $self      = {};
                                                          $self->{input}  = $input;
                                                          $self->{output} = defined $output ? $output : $input;
                                                          $self->{seqid}  = 0;
                                                          return bless($self,$classname);
}

sub addArgumentConfidencePair{
  my $self = shift;
  my $argument = shift;
  my $confidence = shift;

                                                                                                                    $self->send_addArgumentConfidencePair($argument, $confidence);
                                                          return $self->recv_addArgumentConfidencePair();
}

sub send_addArgumentConfidencePair{
  my $self = shift;
  my $argument = shift;
  my $confidence = shift;

                                                          $self->{output}->writeMessageBegin('addArgumentConfidencePair', TMessageType::CALL, $self->{seqid});
                                                          my $args = new thrift::adept::common::ArgumentService_addArgumentConfidencePair_args();
                                                          $args->{argument} = $argument;
                                                          $args->{confidence} = $confidence;
                                                          $args->write($self->{output});
                                                          $self->{output}->writeMessageEnd();
                                                          $self->{output}->getTransport()->flush();
}

sub recv_addArgumentConfidencePair{
  my $self = shift;

                                                          my $rseqid = 0;
                                                          my $fname;
                                                          my $mtype = 0;

                                                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                          if ($mtype == TMessageType::EXCEPTION) {
                                                            my $x = new TApplicationException();
                                                            $x->read($self->{input});
                                                            $self->{input}->readMessageEnd();
                                                            die $x;
                                                          }
                                                          my $result = new thrift::adept::common::ArgumentService_addArgumentConfidencePair_result();
                                                          $result->read($self->{input});
                                                          $self->{input}->readMessageEnd();

                                                          if (defined $result->{success} ) {
                                                            return $result->{success};
                                                          }
                                                          die "addArgumentConfidencePair failed: unknown result";
}
sub getArgumentDistribution{
  my $self = shift;

                                                                                                                    $self->send_getArgumentDistribution();
                                                          return $self->recv_getArgumentDistribution();
}

sub send_getArgumentDistribution{
  my $self = shift;

                                                          $self->{output}->writeMessageBegin('getArgumentDistribution', TMessageType::CALL, $self->{seqid});
                                                          my $args = new thrift::adept::common::ArgumentService_getArgumentDistribution_args();
                                                          $args->write($self->{output});
                                                          $self->{output}->writeMessageEnd();
                                                          $self->{output}->getTransport()->flush();
}

sub recv_getArgumentDistribution{
  my $self = shift;

                                                          my $rseqid = 0;
                                                          my $fname;
                                                          my $mtype = 0;

                                                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                          if ($mtype == TMessageType::EXCEPTION) {
                                                            my $x = new TApplicationException();
                                                            $x->read($self->{input});
                                                            $self->{input}->readMessageEnd();
                                                            die $x;
                                                          }
                                                          my $result = new thrift::adept::common::ArgumentService_getArgumentDistribution_result();
                                                          $result->read($self->{input});
                                                          $self->{input}->readMessageEnd();

                                                          if (defined $result->{success} ) {
                                                            return $result->{success};
                                                          }
                                                          die "getArgumentDistribution failed: unknown result";
}
sub getArgumentType{
  my $self = shift;

                                                                                                                    $self->send_getArgumentType();
                                                          return $self->recv_getArgumentType();
}

sub send_getArgumentType{
  my $self = shift;

                                                          $self->{output}->writeMessageBegin('getArgumentType', TMessageType::CALL, $self->{seqid});
                                                          my $args = new thrift::adept::common::ArgumentService_getArgumentType_args();
                                                          $args->write($self->{output});
                                                          $self->{output}->writeMessageEnd();
                                                          $self->{output}->getTransport()->flush();
}

sub recv_getArgumentType{
  my $self = shift;

                                                          my $rseqid = 0;
                                                          my $fname;
                                                          my $mtype = 0;

                                                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                          if ($mtype == TMessageType::EXCEPTION) {
                                                            my $x = new TApplicationException();
                                                            $x->read($self->{input});
                                                            $self->{input}->readMessageEnd();
                                                            die $x;
                                                          }
                                                          my $result = new thrift::adept::common::ArgumentService_getArgumentType_result();
                                                          $result->read($self->{input});
                                                          $self->{input}->readMessageEnd();

                                                          if (defined $result->{success} ) {
                                                            return $result->{success};
                                                          }
                                                          die "getArgumentType failed: unknown result";
}
sub getBestArgument{
  my $self = shift;

                                                                                                                    $self->send_getBestArgument();
                                                          return $self->recv_getBestArgument();
}

sub send_getBestArgument{
  my $self = shift;

                                                          $self->{output}->writeMessageBegin('getBestArgument', TMessageType::CALL, $self->{seqid});
                                                          my $args = new thrift::adept::common::ArgumentService_getBestArgument_args();
                                                          $args->write($self->{output});
                                                          $self->{output}->writeMessageEnd();
                                                          $self->{output}->getTransport()->flush();
}

sub recv_getBestArgument{
  my $self = shift;

                                                          my $rseqid = 0;
                                                          my $fname;
                                                          my $mtype = 0;

                                                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                          if ($mtype == TMessageType::EXCEPTION) {
                                                            my $x = new TApplicationException();
                                                            $x->read($self->{input});
                                                            $self->{input}->readMessageEnd();
                                                            die $x;
                                                          }
                                                          my $result = new thrift::adept::common::ArgumentService_getBestArgument_result();
                                                          $result->read($self->{input});
                                                          $self->{input}->readMessageEnd();

                                                          if (defined $result->{success} ) {
                                                            return $result->{success};
                                                          }
                                                          die "getBestArgument failed: unknown result";
}
sub setArgumentDistribution{
  my $self = shift;
  my $argumentDistribution = shift;

                                                                                                                    $self->send_setArgumentDistribution($argumentDistribution);
                                                          $self->recv_setArgumentDistribution();
}

sub send_setArgumentDistribution{
  my $self = shift;
  my $argumentDistribution = shift;

                                                          $self->{output}->writeMessageBegin('setArgumentDistribution', TMessageType::CALL, $self->{seqid});
                                                          my $args = new thrift::adept::common::ArgumentService_setArgumentDistribution_args();
                                                          $args->{argumentDistribution} = $argumentDistribution;
                                                          $args->write($self->{output});
                                                          $self->{output}->writeMessageEnd();
                                                          $self->{output}->getTransport()->flush();
}

sub recv_setArgumentDistribution{
  my $self = shift;

                                                          my $rseqid = 0;
                                                          my $fname;
                                                          my $mtype = 0;

                                                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                          if ($mtype == TMessageType::EXCEPTION) {
                                                            my $x = new TApplicationException();
                                                            $x->read($self->{input});
                                                            $self->{input}->readMessageEnd();
                                                            die $x;
                                                          }
                                                          my $result = new thrift::adept::common::ArgumentService_setArgumentDistribution_result();
                                                          $result->read($self->{input});
                                                          $self->{input}->readMessageEnd();

                                                          return;
}
package thrift::adept::common::ArgumentServiceProcessor;

use strict;


sub new {
                                                            my ($classname, $handler) = @_;
                                                            my $self      = {};
                                                            $self->{handler} = $handler;
                                                            return bless ($self, $classname);
}

sub process {
                                                            my ($self, $input, $output) = @_;
                                                            my $rseqid = 0;
                                                            my $fname  = undef;
                                                            my $mtype  = 0;

                                                            $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                            my $methodname = 'process_'.$fname;
                                                            if (!$self->can($methodname)) {
                                                              $input->skip(TType::STRUCT);
                                                              $input->readMessageEnd();
                                                              my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                              $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                              $x->write($output);
                                                              $output->writeMessageEnd();
                                                              $output->getTransport()->flush();
                                                              return;
                                                            }
                                                            $self->$methodname($rseqid, $input, $output);
                                                            return 1;
}

sub process_addArgumentConfidencePair {
                                                            my ($self, $seqid, $input, $output) = @_;
                                                            my $args = new thrift::adept::common::ArgumentService_addArgumentConfidencePair_args();
                                                            $args->read($input);
                                                            $input->readMessageEnd();
                                                            my $result = new thrift::adept::common::ArgumentService_addArgumentConfidencePair_result();
                                                            $result->{success} = $self->{handler}->addArgumentConfidencePair($args->argument, $args->confidence);
                                                            $output->writeMessageBegin('addArgumentConfidencePair', TMessageType::REPLY, $seqid);
                                                            $result->write($output);
                                                            $output->writeMessageEnd();
                                                            $output->getTransport()->flush();
}

sub process_getArgumentDistribution {
                                                            my ($self, $seqid, $input, $output) = @_;
                                                            my $args = new thrift::adept::common::ArgumentService_getArgumentDistribution_args();
                                                            $args->read($input);
                                                            $input->readMessageEnd();
                                                            my $result = new thrift::adept::common::ArgumentService_getArgumentDistribution_result();
                                                            $result->{success} = $self->{handler}->getArgumentDistribution();
                                                            $output->writeMessageBegin('getArgumentDistribution', TMessageType::REPLY, $seqid);
                                                            $result->write($output);
                                                            $output->writeMessageEnd();
                                                            $output->getTransport()->flush();
}

sub process_getArgumentType {
                                                            my ($self, $seqid, $input, $output) = @_;
                                                            my $args = new thrift::adept::common::ArgumentService_getArgumentType_args();
                                                            $args->read($input);
                                                            $input->readMessageEnd();
                                                            my $result = new thrift::adept::common::ArgumentService_getArgumentType_result();
                                                            $result->{success} = $self->{handler}->getArgumentType();
                                                            $output->writeMessageBegin('getArgumentType', TMessageType::REPLY, $seqid);
                                                            $result->write($output);
                                                            $output->writeMessageEnd();
                                                            $output->getTransport()->flush();
}

sub process_getBestArgument {
                                                            my ($self, $seqid, $input, $output) = @_;
                                                            my $args = new thrift::adept::common::ArgumentService_getBestArgument_args();
                                                            $args->read($input);
                                                            $input->readMessageEnd();
                                                            my $result = new thrift::adept::common::ArgumentService_getBestArgument_result();
                                                            $result->{success} = $self->{handler}->getBestArgument();
                                                            $output->writeMessageBegin('getBestArgument', TMessageType::REPLY, $seqid);
                                                            $result->write($output);
                                                            $output->writeMessageEnd();
                                                            $output->getTransport()->flush();
}

sub process_setArgumentDistribution {
                                                            my ($self, $seqid, $input, $output) = @_;
                                                            my $args = new thrift::adept::common::ArgumentService_setArgumentDistribution_args();
                                                            $args->read($input);
                                                            $input->readMessageEnd();
                                                            my $result = new thrift::adept::common::ArgumentService_setArgumentDistribution_result();
                                                            $self->{handler}->setArgumentDistribution($args->argumentDistribution);
                                                            $output->writeMessageBegin('setArgumentDistribution', TMessageType::REPLY, $seqid);
                                                            $result->write($output);
                                                            $output->writeMessageEnd();
                                                            $output->getTransport()->flush();
}

1;