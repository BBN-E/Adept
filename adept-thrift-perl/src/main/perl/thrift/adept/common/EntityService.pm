#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ItemService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::EntityService_equals_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_equals_args->mk_accessors( qw( obj ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{obj} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{obj}) {
                          $self->{obj} = $vals->{obj};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_equals_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^1$/ && do{                          if ($ftype == TType::STRUCT) {
                            $self->{obj} = new thrift::adept::common::EntityObject();
                            $xfer += $self->{obj}->read($input);
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_equals_args');
                      if (defined $self->{obj}) {
                        $xfer += $output->writeFieldBegin('obj', TType::STRUCT, 1);
                        $xfer += $self->{obj}->write($output);
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_equals_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_equals_result->mk_accessors( qw( success ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{success} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{success}) {
                          $self->{success} = $vals->{success};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_equals_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^0$/ && do{                          if ($ftype == TType::BOOL) {
                            $xfer += $input->readBool(\$self->{success});
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_equals_result');
                      if (defined $self->{success}) {
                        $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
                        $xfer += $output->writeBool($self->{success});
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getCanonicalMention_args;
use base qw(Class::Accessor);

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getCanonicalMention_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getCanonicalMention_args');
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getCanonicalMention_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_getCanonicalMention_result->mk_accessors( qw( success ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{success} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{success}) {
                          $self->{success} = $vals->{success};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getCanonicalMention_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^0$/ && do{                          if ($ftype == TType::STRUCT) {
                            $self->{success} = new thrift::adept::common::EntityMention();
                            $xfer += $self->{success}->read($input);
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getCanonicalMention_result');
                      if (defined $self->{success}) {
                        $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                        $xfer += $self->{success}->write($output);
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getEntity_args;
use base qw(Class::Accessor);

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getEntity_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getEntity_args');
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getEntity_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_getEntity_result->mk_accessors( qw( success ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{success} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{success}) {
                          $self->{success} = $vals->{success};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getEntity_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^0$/ && do{                          if ($ftype == TType::STRING) {
                            $xfer += $input->readString(\$self->{success});
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getEntity_result');
                      if (defined $self->{success}) {
                        $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                        $xfer += $output->writeString($self->{success});
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getEntityId_args;
use base qw(Class::Accessor);

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getEntityId_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getEntityId_args');
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getEntityId_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_getEntityId_result->mk_accessors( qw( success ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{success} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{success}) {
                          $self->{success} = $vals->{success};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getEntityId_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^0$/ && do{                          if ($ftype == TType::I64) {
                            $xfer += $input->readI64(\$self->{success});
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getEntityId_result');
                      if (defined $self->{success}) {
                        $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                        $xfer += $output->writeI64($self->{success});
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getEntityType_args;
use base qw(Class::Accessor);

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getEntityType_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getEntityType_args');
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_getEntityType_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_getEntityType_result->mk_accessors( qw( success ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{success} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{success}) {
                          $self->{success} = $vals->{success};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_getEntityType_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^0$/ && do{                          if ($ftype == TType::STRUCT) {
                            $self->{success} = new thrift::adept::common::Type();
                            $xfer += $self->{success}->read($input);
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_getEntityType_result');
                      if (defined $self->{success}) {
                        $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                        $xfer += $self->{success}->write($output);
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_hashCode_args;
use base qw(Class::Accessor);

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_hashCode_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_hashCode_args');
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_hashCode_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_hashCode_result->mk_accessors( qw( success ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{success} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{success}) {
                          $self->{success} = $vals->{success};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_hashCode_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^0$/ && do{                          if ($ftype == TType::I32) {
                            $xfer += $input->readI32(\$self->{success});
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_hashCode_result');
                      if (defined $self->{success}) {
                        $xfer += $output->writeFieldBegin('success', TType::I32, 0);
                        $xfer += $output->writeI32($self->{success});
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_setCanonicalMentions_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityService_setCanonicalMentions_args->mk_accessors( qw( canonicalMention ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{canonicalMention} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{canonicalMention}) {
                          $self->{canonicalMention} = $vals->{canonicalMention};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_setCanonicalMentions_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^1$/ && do{                          if ($ftype == TType::STRUCT) {
                            $self->{canonicalMention} = new thrift::adept::common::EntityMention();
                            $xfer += $self->{canonicalMention}->read($input);
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_setCanonicalMentions_args');
                      if (defined $self->{canonicalMention}) {
                        $xfer += $output->writeFieldBegin('canonicalMention', TType::STRUCT, 1);
                        $xfer += $self->{canonicalMention}->write($output);
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityService_setCanonicalMentions_result;
use base qw(Class::Accessor);

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      return bless ($self, $classname);
}

sub getName {
                      return 'EntityService_setCanonicalMentions_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('EntityService_setCanonicalMentions_result');
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::common::EntityServiceIf;

use strict;
use base qw(thrift::adept::common::ItemServiceIf);

sub equals{
  my $self = shift;
  my $obj = shift;

  die 'implement interface';
}

sub getCanonicalMention{
  my $self = shift;

  die 'implement interface';
}

sub getEntity{
  my $self = shift;

  die 'implement interface';
}

sub getEntityId{
  my $self = shift;

  die 'implement interface';
}

sub getEntityType{
  my $self = shift;

  die 'implement interface';
}

sub hashCode{
  my $self = shift;

  die 'implement interface';
}

sub setCanonicalMentions{
  my $self = shift;
  my $canonicalMention = shift;

  die 'implement interface';
}

package thrift::adept::common::EntityServiceRest;

use strict;
use base qw(thrift::adept::common::ItemServiceRest);

sub equals{
                      my ($self, $request) = @_;

                      my $obj = ($request->{'obj'}) ? $request->{'obj'} : undef;
                      return $self->{impl}->equals($obj);
                    }

sub getCanonicalMention{
                      my ($self, $request) = @_;

                      return $self->{impl}->getCanonicalMention();
                    }

sub getEntity{
                      my ($self, $request) = @_;

                      return $self->{impl}->getEntity();
                    }

sub getEntityId{
                      my ($self, $request) = @_;

                      return $self->{impl}->getEntityId();
                    }

sub getEntityType{
                      my ($self, $request) = @_;

                      return $self->{impl}->getEntityType();
                    }

sub hashCode{
                      my ($self, $request) = @_;

                      return $self->{impl}->hashCode();
                    }

sub setCanonicalMentions{
                      my ($self, $request) = @_;

                      my $canonicalMention = ($request->{'canonicalMention'}) ? $request->{'canonicalMention'} : undef;
                      return $self->{impl}->setCanonicalMentions($canonicalMention);
                    }

package thrift::adept::common::EntityServiceClient;

use base qw(thrift::adept::common::ItemServiceClient);
use base qw(thrift::adept::common::EntityServiceIf);
sub new {
                      my ($classname, $input, $output) = @_;
                      my $self      = {};
                      $self = $classname->SUPER::new($input, $output);
                      return bless($self,$classname);
}

sub equals{
  my $self = shift;
  my $obj = shift;

                                            $self->send_equals($obj);
                      return $self->recv_equals();
}

sub send_equals{
  my $self = shift;
  my $obj = shift;

                      $self->{output}->writeMessageBegin('equals', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::common::EntityService_equals_args();
                      $args->{obj} = $obj;
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_equals{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::common::EntityService_equals_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      if (defined $result->{success} ) {
                        return $result->{success};
                      }
                      die "equals failed: unknown result";
}
sub getCanonicalMention{
  my $self = shift;

                                            $self->send_getCanonicalMention();
                      return $self->recv_getCanonicalMention();
}

sub send_getCanonicalMention{
  my $self = shift;

                      $self->{output}->writeMessageBegin('getCanonicalMention', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::common::EntityService_getCanonicalMention_args();
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_getCanonicalMention{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::common::EntityService_getCanonicalMention_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      if (defined $result->{success} ) {
                        return $result->{success};
                      }
                      die "getCanonicalMention failed: unknown result";
}
sub getEntity{
  my $self = shift;

                                            $self->send_getEntity();
                      return $self->recv_getEntity();
}

sub send_getEntity{
  my $self = shift;

                      $self->{output}->writeMessageBegin('getEntity', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::common::EntityService_getEntity_args();
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_getEntity{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::common::EntityService_getEntity_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      if (defined $result->{success} ) {
                        return $result->{success};
                      }
                      die "getEntity failed: unknown result";
}
sub getEntityId{
  my $self = shift;

                                            $self->send_getEntityId();
                      return $self->recv_getEntityId();
}

sub send_getEntityId{
  my $self = shift;

                      $self->{output}->writeMessageBegin('getEntityId', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::common::EntityService_getEntityId_args();
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_getEntityId{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::common::EntityService_getEntityId_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      if (defined $result->{success} ) {
                        return $result->{success};
                      }
                      die "getEntityId failed: unknown result";
}
sub getEntityType{
  my $self = shift;

                                            $self->send_getEntityType();
                      return $self->recv_getEntityType();
}

sub send_getEntityType{
  my $self = shift;

                      $self->{output}->writeMessageBegin('getEntityType', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::common::EntityService_getEntityType_args();
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_getEntityType{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::common::EntityService_getEntityType_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      if (defined $result->{success} ) {
                        return $result->{success};
                      }
                      die "getEntityType failed: unknown result";
}
sub hashCode{
  my $self = shift;

                                            $self->send_hashCode();
                      return $self->recv_hashCode();
}

sub send_hashCode{
  my $self = shift;

                      $self->{output}->writeMessageBegin('hashCode', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::common::EntityService_hashCode_args();
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_hashCode{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::common::EntityService_hashCode_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      if (defined $result->{success} ) {
                        return $result->{success};
                      }
                      die "hashCode failed: unknown result";
}
sub setCanonicalMentions{
  my $self = shift;
  my $canonicalMention = shift;

                                            $self->send_setCanonicalMentions($canonicalMention);
                      $self->recv_setCanonicalMentions();
}

sub send_setCanonicalMentions{
  my $self = shift;
  my $canonicalMention = shift;

                      $self->{output}->writeMessageBegin('setCanonicalMentions', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::common::EntityService_setCanonicalMentions_args();
                      $args->{canonicalMention} = $canonicalMention;
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_setCanonicalMentions{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::common::EntityService_setCanonicalMentions_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      return;
}
package thrift::adept::common::EntityServiceProcessor;

use strict;
use base qw(thrift::adept::common::ItemServiceProcessor);

sub process {
                        my ($self, $input, $output) = @_;
                        my $rseqid = 0;
                        my $fname  = undef;
                        my $mtype  = 0;

                        $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        my $methodname = 'process_'.$fname;
                        if (!$self->can($methodname)) {
                          $input->skip(TType::STRUCT);
                          $input->readMessageEnd();
                          my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                          $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                          $x->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
                          return;
                        }
                        $self->$methodname($rseqid, $input, $output);
                        return 1;
}

sub process_equals {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::common::EntityService_equals_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::common::EntityService_equals_result();
                        $result->{success} = $self->{handler}->equals($args->obj);
                        $output->writeMessageBegin('equals', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

sub process_getCanonicalMention {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::common::EntityService_getCanonicalMention_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::common::EntityService_getCanonicalMention_result();
                        $result->{success} = $self->{handler}->getCanonicalMention();
                        $output->writeMessageBegin('getCanonicalMention', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

sub process_getEntity {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::common::EntityService_getEntity_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::common::EntityService_getEntity_result();
                        $result->{success} = $self->{handler}->getEntity();
                        $output->writeMessageBegin('getEntity', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

sub process_getEntityId {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::common::EntityService_getEntityId_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::common::EntityService_getEntityId_result();
                        $result->{success} = $self->{handler}->getEntityId();
                        $output->writeMessageBegin('getEntityId', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

sub process_getEntityType {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::common::EntityService_getEntityType_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::common::EntityService_getEntityType_result();
                        $result->{success} = $self->{handler}->getEntityType();
                        $output->writeMessageBegin('getEntityType', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

sub process_hashCode {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::common::EntityService_hashCode_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::common::EntityService_hashCode_result();
                        $result->{success} = $self->{handler}->hashCode();
                        $output->writeMessageBegin('hashCode', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

sub process_setCanonicalMentions {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::common::EntityService_setCanonicalMentions_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::common::EntityService_setCanonicalMentions_result();
                        $self->{handler}->setCanonicalMentions($args->canonicalMention);
                        $output->writeMessageBegin('setCanonicalMentions', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

1;
