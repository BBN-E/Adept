#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ItemService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::ConversationService_addTopic_args;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_addTopic_args->mk_accessors( qw( topic ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{topic} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{topic}) {
                                                            $self->{topic} = $vals->{topic};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_addTopic_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^1$/ && do{                                                            if ($ftype == TType::STRUCT) {
                                                              $self->{topic} = new thrift::adept::common::Topic();
                                                              $xfer += $self->{topic}->read($input);
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_addTopic_args');
                                                        if (defined $self->{topic}) {
                                                          $xfer += $output->writeFieldBegin('topic', TType::STRUCT, 1);
                                                          $xfer += $self->{topic}->write($output);
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_addTopic_result;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_addTopic_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_addTopic_result');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_addUtterance_args;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_addUtterance_args->mk_accessors( qw( utterance ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{utterance} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{utterance}) {
                                                            $self->{utterance} = $vals->{utterance};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_addUtterance_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^1$/ && do{                                                            if ($ftype == TType::STRUCT) {
                                                              $self->{utterance} = new thrift::adept::common::Utterance();
                                                              $xfer += $self->{utterance}->read($input);
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_addUtterance_args');
                                                        if (defined $self->{utterance}) {
                                                          $xfer += $output->writeFieldBegin('utterance', TType::STRUCT, 1);
                                                          $xfer += $self->{utterance}->write($output);
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_addUtterance_result;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_addUtterance_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_addUtterance_result');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getConversationId_args;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getConversationId_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getConversationId_args');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getConversationId_result;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_getConversationId_result->mk_accessors( qw( success ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{success} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{success}) {
                                                            $self->{success} = $vals->{success};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getConversationId_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^0$/ && do{                                                            if ($ftype == TType::I64) {
                                                              $xfer += $input->readI64(\$self->{success});
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getConversationId_result');
                                                        if (defined $self->{success}) {
                                                          $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                                                          $xfer += $output->writeI64($self->{success});
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getName_args;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getName_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getName_args');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getName_result;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_getName_result->mk_accessors( qw( success ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{success} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{success}) {
                                                            $self->{success} = $vals->{success};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getName_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^0$/ && do{                                                            if ($ftype == TType::STRING) {
                                                              $xfer += $input->readString(\$self->{success});
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getName_result');
                                                        if (defined $self->{success}) {
                                                          $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                          $xfer += $output->writeString($self->{success});
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getTopics_args;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getTopics_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getTopics_args');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getTopics_result;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_getTopics_result->mk_accessors( qw( success ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{success} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{success}) {
                                                            $self->{success} = $vals->{success};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getTopics_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^0$/ && do{                                                            if ($ftype == TType::LIST) {
                                                              {
                                                                my $_size457 = 0;
                                                                $self->{success} = [];
                                                                my $_etype460 = 0;
                                                                $xfer += $input->readListBegin(\$_etype460, \$_size457);
                                                                for (my $_i461 = 0; $_i461 < $_size457; ++$_i461)
                                                                {
                                                                  my $elem462 = undef;
                                                                  $elem462 = new thrift::adept::common::Topic();
                                                                  $xfer += $elem462->read($input);
                                                                  push(@{$self->{success}},$elem462);
                                                                }
                                                                $xfer += $input->readListEnd();
                                                              }
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getTopics_result');
                                                        if (defined $self->{success}) {
                                                          $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                          {
                                                            $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
                                                            {
                                                              foreach my $iter463 (@{$self->{success}}) 
                                                              {
                                                                $xfer += ${iter463}->write($output);
                                                              }
                                                            }
                                                            $xfer += $output->writeListEnd();
                                                          }
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getUtterances_args;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getUtterances_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getUtterances_args');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_getUtterances_result;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_getUtterances_result->mk_accessors( qw( success ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{success} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{success}) {
                                                            $self->{success} = $vals->{success};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_getUtterances_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^0$/ && do{                                                            if ($ftype == TType::LIST) {
                                                              {
                                                                my $_size464 = 0;
                                                                $self->{success} = [];
                                                                my $_etype467 = 0;
                                                                $xfer += $input->readListBegin(\$_etype467, \$_size464);
                                                                for (my $_i468 = 0; $_i468 < $_size464; ++$_i468)
                                                                {
                                                                  my $elem469 = undef;
                                                                  $elem469 = new thrift::adept::common::Utterance();
                                                                  $xfer += $elem469->read($input);
                                                                  push(@{$self->{success}},$elem469);
                                                                }
                                                                $xfer += $input->readListEnd();
                                                              }
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_getUtterances_result');
                                                        if (defined $self->{success}) {
                                                          $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                          {
                                                            $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
                                                            {
                                                              foreach my $iter470 (@{$self->{success}}) 
                                                              {
                                                                $xfer += ${iter470}->write($output);
                                                              }
                                                            }
                                                            $xfer += $output->writeListEnd();
                                                          }
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_isOneSided_args;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_isOneSided_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_isOneSided_args');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_isOneSided_result;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_isOneSided_result->mk_accessors( qw( success ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{success} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{success}) {
                                                            $self->{success} = $vals->{success};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_isOneSided_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^0$/ && do{                                                            if ($ftype == TType::BOOL) {
                                                              $xfer += $input->readBool(\$self->{success});
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_isOneSided_result');
                                                        if (defined $self->{success}) {
                                                          $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
                                                          $xfer += $output->writeBool($self->{success});
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_setOneSided_args;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_setOneSided_args->mk_accessors( qw( oneSided ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{oneSided} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{oneSided}) {
                                                            $self->{oneSided} = $vals->{oneSided};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_setOneSided_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^1$/ && do{                                                            if ($ftype == TType::BOOL) {
                                                              $xfer += $input->readBool(\$self->{oneSided});
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_setOneSided_args');
                                                        if (defined $self->{oneSided}) {
                                                          $xfer += $output->writeFieldBegin('oneSided', TType::BOOL, 1);
                                                          $xfer += $output->writeBool($self->{oneSided});
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_setOneSided_result;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_setOneSided_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_setOneSided_result');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_setTopics_args;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_setTopics_args->mk_accessors( qw( topics ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{topics} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{topics}) {
                                                            $self->{topics} = $vals->{topics};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_setTopics_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^1$/ && do{                                                            if ($ftype == TType::LIST) {
                                                              {
                                                                my $_size471 = 0;
                                                                $self->{topics} = [];
                                                                my $_etype474 = 0;
                                                                $xfer += $input->readListBegin(\$_etype474, \$_size471);
                                                                for (my $_i475 = 0; $_i475 < $_size471; ++$_i475)
                                                                {
                                                                  my $elem476 = undef;
                                                                  $elem476 = new thrift::adept::common::Topic();
                                                                  $xfer += $elem476->read($input);
                                                                  push(@{$self->{topics}},$elem476);
                                                                }
                                                                $xfer += $input->readListEnd();
                                                              }
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_setTopics_args');
                                                        if (defined $self->{topics}) {
                                                          $xfer += $output->writeFieldBegin('topics', TType::LIST, 1);
                                                          {
                                                            $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{topics}}));
                                                            {
                                                              foreach my $iter477 (@{$self->{topics}}) 
                                                              {
                                                                $xfer += ${iter477}->write($output);
                                                              }
                                                            }
                                                            $xfer += $output->writeListEnd();
                                                          }
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_setTopics_result;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_setTopics_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_setTopics_result');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_setUtterances_args;
use base qw(Class::Accessor);
thrift::adept::common::ConversationService_setUtterances_args->mk_accessors( qw( utterances ) );

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        $self->{utterances} = undef;
                                                        if (UNIVERSAL::isa($vals,'HASH')) {
                                                          if (defined $vals->{utterances}) {
                                                            $self->{utterances} = $vals->{utterances};
                                                          }
                                                        }
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_setUtterances_args';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                            /^1$/ && do{                                                            if ($ftype == TType::LIST) {
                                                              {
                                                                my $_size478 = 0;
                                                                $self->{utterances} = [];
                                                                my $_etype481 = 0;
                                                                $xfer += $input->readListBegin(\$_etype481, \$_size478);
                                                                for (my $_i482 = 0; $_i482 < $_size478; ++$_i482)
                                                                {
                                                                  my $elem483 = undef;
                                                                  $elem483 = new thrift::adept::common::Utterance();
                                                                  $xfer += $elem483->read($input);
                                                                  push(@{$self->{utterances}},$elem483);
                                                                }
                                                                $xfer += $input->readListEnd();
                                                              }
                                                            } else {
                                                              $xfer += $input->skip($ftype);
                                                            }
                                                            last; };
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_setUtterances_args');
                                                        if (defined $self->{utterances}) {
                                                          $xfer += $output->writeFieldBegin('utterances', TType::LIST, 1);
                                                          {
                                                            $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{utterances}}));
                                                            {
                                                              foreach my $iter484 (@{$self->{utterances}}) 
                                                              {
                                                                $xfer += ${iter484}->write($output);
                                                              }
                                                            }
                                                            $xfer += $output->writeListEnd();
                                                          }
                                                          $xfer += $output->writeFieldEnd();
                                                        }
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationService_setUtterances_result;
use base qw(Class::Accessor);

sub new {
                                                        my $classname = shift;
                                                        my $self      = {};
                                                        my $vals      = shift || {};
                                                        return bless ($self, $classname);
}

sub getName {
                                                        return 'ConversationService_setUtterances_result';
                                                      }

sub read {
                                                        my ($self, $input) = @_;
                                                        my $xfer  = 0;
                                                        my $fname;
                                                        my $ftype = 0;
                                                        my $fid   = 0;
                                                        $xfer += $input->readStructBegin(\$fname);
                                                        while (1) 
                                                        {
                                                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                          if ($ftype == TType::STOP) {
                                                            last;
                                                          }
                                                          SWITCH: for($fid)
                                                          {
                                                              $xfer += $input->skip($ftype);
                                                          }
                                                          $xfer += $input->readFieldEnd();
                                                        }
                                                        $xfer += $input->readStructEnd();
                                                        return $xfer;
                                                      }

sub write {
                                                        my ($self, $output) = @_;
                                                        my $xfer   = 0;
                                                        $xfer += $output->writeStructBegin('ConversationService_setUtterances_result');
                                                        $xfer += $output->writeFieldStop();
                                                        $xfer += $output->writeStructEnd();
                                                        return $xfer;
                                                      }

package thrift::adept::common::ConversationServiceIf;

use strict;
use base qw(thrift::adept::common::ItemServiceIf);

sub addTopic{
  my $self = shift;
  my $topic = shift;

  die 'implement interface';
}

sub addUtterance{
  my $self = shift;
  my $utterance = shift;

  die 'implement interface';
}

sub getConversationId{
  my $self = shift;

  die 'implement interface';
}

sub getName{
  my $self = shift;

  die 'implement interface';
}

sub getTopics{
  my $self = shift;

  die 'implement interface';
}

sub getUtterances{
  my $self = shift;

  die 'implement interface';
}

sub isOneSided{
  my $self = shift;

  die 'implement interface';
}

sub setOneSided{
  my $self = shift;
  my $oneSided = shift;

  die 'implement interface';
}

sub setTopics{
  my $self = shift;
  my $topics = shift;

  die 'implement interface';
}

sub setUtterances{
  my $self = shift;
  my $utterances = shift;

  die 'implement interface';
}

package thrift::adept::common::ConversationServiceRest;

use strict;
use base qw(thrift::adept::common::ItemServiceRest);

sub addTopic{
                                                        my ($self, $request) = @_;

                                                        my $topic = ($request->{'topic'}) ? $request->{'topic'} : undef;
                                                        return $self->{impl}->addTopic($topic);
                                                      }

sub addUtterance{
                                                        my ($self, $request) = @_;

                                                        my $utterance = ($request->{'utterance'}) ? $request->{'utterance'} : undef;
                                                        return $self->{impl}->addUtterance($utterance);
                                                      }

sub getConversationId{
                                                        my ($self, $request) = @_;

                                                        return $self->{impl}->getConversationId();
                                                      }

sub getName{
                                                        my ($self, $request) = @_;

                                                        return $self->{impl}->getName();
                                                      }

sub getTopics{
                                                        my ($self, $request) = @_;

                                                        return $self->{impl}->getTopics();
                                                      }

sub getUtterances{
                                                        my ($self, $request) = @_;

                                                        return $self->{impl}->getUtterances();
                                                      }

sub isOneSided{
                                                        my ($self, $request) = @_;

                                                        return $self->{impl}->isOneSided();
                                                      }

sub setOneSided{
                                                        my ($self, $request) = @_;

                                                        my $oneSided = ($request->{'oneSided'}) ? $request->{'oneSided'} : undef;
                                                        return $self->{impl}->setOneSided($oneSided);
                                                      }

sub setTopics{
                                                        my ($self, $request) = @_;

                                                        my $topics = ($request->{'topics'}) ? $request->{'topics'} : undef;
                                                        return $self->{impl}->setTopics($topics);
                                                      }

sub setUtterances{
                                                        my ($self, $request) = @_;

                                                        my $utterances = ($request->{'utterances'}) ? $request->{'utterances'} : undef;
                                                        return $self->{impl}->setUtterances($utterances);
                                                      }

package thrift::adept::common::ConversationServiceClient;

use base qw(thrift::adept::common::ItemServiceClient);
use base qw(thrift::adept::common::ConversationServiceIf);
sub new {
                                                        my ($classname, $input, $output) = @_;
                                                        my $self      = {};
                                                        $self = $classname->SUPER::new($input, $output);
                                                        return bless($self,$classname);
}

sub addTopic{
  my $self = shift;
  my $topic = shift;

                                                                                                                $self->send_addTopic($topic);
                                                        $self->recv_addTopic();
}

sub send_addTopic{
  my $self = shift;
  my $topic = shift;

                                                        $self->{output}->writeMessageBegin('addTopic', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_addTopic_args();
                                                        $args->{topic} = $topic;
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_addTopic{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_addTopic_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        return;
}
sub addUtterance{
  my $self = shift;
  my $utterance = shift;

                                                                                                                $self->send_addUtterance($utterance);
                                                        $self->recv_addUtterance();
}

sub send_addUtterance{
  my $self = shift;
  my $utterance = shift;

                                                        $self->{output}->writeMessageBegin('addUtterance', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_addUtterance_args();
                                                        $args->{utterance} = $utterance;
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_addUtterance{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_addUtterance_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        return;
}
sub getConversationId{
  my $self = shift;

                                                                                                                $self->send_getConversationId();
                                                        return $self->recv_getConversationId();
}

sub send_getConversationId{
  my $self = shift;

                                                        $self->{output}->writeMessageBegin('getConversationId', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_getConversationId_args();
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_getConversationId{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_getConversationId_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        if (defined $result->{success} ) {
                                                          return $result->{success};
                                                        }
                                                        die "getConversationId failed: unknown result";
}
sub getName{
  my $self = shift;

                                                                                                                $self->send_getName();
                                                        return $self->recv_getName();
}

sub send_getName{
  my $self = shift;

                                                        $self->{output}->writeMessageBegin('getName', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_getName_args();
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_getName{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_getName_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        if (defined $result->{success} ) {
                                                          return $result->{success};
                                                        }
                                                        die "getName failed: unknown result";
}
sub getTopics{
  my $self = shift;

                                                                                                                $self->send_getTopics();
                                                        return $self->recv_getTopics();
}

sub send_getTopics{
  my $self = shift;

                                                        $self->{output}->writeMessageBegin('getTopics', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_getTopics_args();
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_getTopics{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_getTopics_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        if (defined $result->{success} ) {
                                                          return $result->{success};
                                                        }
                                                        die "getTopics failed: unknown result";
}
sub getUtterances{
  my $self = shift;

                                                                                                                $self->send_getUtterances();
                                                        return $self->recv_getUtterances();
}

sub send_getUtterances{
  my $self = shift;

                                                        $self->{output}->writeMessageBegin('getUtterances', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_getUtterances_args();
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_getUtterances{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_getUtterances_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        if (defined $result->{success} ) {
                                                          return $result->{success};
                                                        }
                                                        die "getUtterances failed: unknown result";
}
sub isOneSided{
  my $self = shift;

                                                                                                                $self->send_isOneSided();
                                                        return $self->recv_isOneSided();
}

sub send_isOneSided{
  my $self = shift;

                                                        $self->{output}->writeMessageBegin('isOneSided', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_isOneSided_args();
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_isOneSided{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_isOneSided_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        if (defined $result->{success} ) {
                                                          return $result->{success};
                                                        }
                                                        die "isOneSided failed: unknown result";
}
sub setOneSided{
  my $self = shift;
  my $oneSided = shift;

                                                                                                                $self->send_setOneSided($oneSided);
                                                        $self->recv_setOneSided();
}

sub send_setOneSided{
  my $self = shift;
  my $oneSided = shift;

                                                        $self->{output}->writeMessageBegin('setOneSided', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_setOneSided_args();
                                                        $args->{oneSided} = $oneSided;
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_setOneSided{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_setOneSided_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        return;
}
sub setTopics{
  my $self = shift;
  my $topics = shift;

                                                                                                                $self->send_setTopics($topics);
                                                        $self->recv_setTopics();
}

sub send_setTopics{
  my $self = shift;
  my $topics = shift;

                                                        $self->{output}->writeMessageBegin('setTopics', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_setTopics_args();
                                                        $args->{topics} = $topics;
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_setTopics{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_setTopics_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        return;
}
sub setUtterances{
  my $self = shift;
  my $utterances = shift;

                                                                                                                $self->send_setUtterances($utterances);
                                                        $self->recv_setUtterances();
}

sub send_setUtterances{
  my $self = shift;
  my $utterances = shift;

                                                        $self->{output}->writeMessageBegin('setUtterances', TMessageType::CALL, $self->{seqid});
                                                        my $args = new thrift::adept::common::ConversationService_setUtterances_args();
                                                        $args->{utterances} = $utterances;
                                                        $args->write($self->{output});
                                                        $self->{output}->writeMessageEnd();
                                                        $self->{output}->getTransport()->flush();
}

sub recv_setUtterances{
  my $self = shift;

                                                        my $rseqid = 0;
                                                        my $fname;
                                                        my $mtype = 0;

                                                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                        if ($mtype == TMessageType::EXCEPTION) {
                                                          my $x = new TApplicationException();
                                                          $x->read($self->{input});
                                                          $self->{input}->readMessageEnd();
                                                          die $x;
                                                        }
                                                        my $result = new thrift::adept::common::ConversationService_setUtterances_result();
                                                        $result->read($self->{input});
                                                        $self->{input}->readMessageEnd();

                                                        return;
}
package thrift::adept::common::ConversationServiceProcessor;

use strict;
use base qw(thrift::adept::common::ItemServiceProcessor);

sub process {
                                                          my ($self, $input, $output) = @_;
                                                          my $rseqid = 0;
                                                          my $fname  = undef;
                                                          my $mtype  = 0;

                                                          $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                          my $methodname = 'process_'.$fname;
                                                          if (!$self->can($methodname)) {
                                                            $input->skip(TType::STRUCT);
                                                            $input->readMessageEnd();
                                                            my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                            $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                            $x->write($output);
                                                            $output->writeMessageEnd();
                                                            $output->getTransport()->flush();
                                                            return;
                                                          }
                                                          $self->$methodname($rseqid, $input, $output);
                                                          return 1;
}

sub process_addTopic {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_addTopic_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_addTopic_result();
                                                          $self->{handler}->addTopic($args->topic);
                                                          $output->writeMessageBegin('addTopic', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_addUtterance {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_addUtterance_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_addUtterance_result();
                                                          $self->{handler}->addUtterance($args->utterance);
                                                          $output->writeMessageBegin('addUtterance', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_getConversationId {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_getConversationId_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_getConversationId_result();
                                                          $result->{success} = $self->{handler}->getConversationId();
                                                          $output->writeMessageBegin('getConversationId', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_getName {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_getName_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_getName_result();
                                                          $result->{success} = $self->{handler}->getName();
                                                          $output->writeMessageBegin('getName', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_getTopics {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_getTopics_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_getTopics_result();
                                                          $result->{success} = $self->{handler}->getTopics();
                                                          $output->writeMessageBegin('getTopics', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_getUtterances {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_getUtterances_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_getUtterances_result();
                                                          $result->{success} = $self->{handler}->getUtterances();
                                                          $output->writeMessageBegin('getUtterances', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_isOneSided {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_isOneSided_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_isOneSided_result();
                                                          $result->{success} = $self->{handler}->isOneSided();
                                                          $output->writeMessageBegin('isOneSided', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_setOneSided {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_setOneSided_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_setOneSided_result();
                                                          $self->{handler}->setOneSided($args->oneSided);
                                                          $output->writeMessageBegin('setOneSided', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_setTopics {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_setTopics_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_setTopics_result();
                                                          $self->{handler}->setTopics($args->topics);
                                                          $output->writeMessageBegin('setTopics', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

sub process_setUtterances {
                                                          my ($self, $seqid, $input, $output) = @_;
                                                          my $args = new thrift::adept::common::ConversationService_setUtterances_args();
                                                          $args->read($input);
                                                          $input->readMessageEnd();
                                                          my $result = new thrift::adept::common::ConversationService_setUtterances_result();
                                                          $self->{handler}->setUtterances($args->utterances);
                                                          $output->writeMessageBegin('setUtterances', TMessageType::REPLY, $seqid);
                                                          $result->write($output);
                                                          $output->writeMessageEnd();
                                                          $output->getTransport()->flush();
}

1;