#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::TokenOffsetService_equals_args;
use base qw(Class::Accessor);
thrift::adept::common::TokenOffsetService_equals_args->mk_accessors( qw( obj ) );

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      $self->{obj} = undef;
      if (UNIVERSAL::isa($vals,'HASH')) {
        if (defined $vals->{obj}) {
          $self->{obj} = $vals->{obj};
        }
      }
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_equals_args';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
          /^1$/ && do{          if ($ftype == TType::STRUCT) {
            $self->{obj} = new thrift::adept::common::TokenOffsetObject();
            $xfer += $self->{obj}->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          last; };
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_equals_args');
      if (defined $self->{obj}) {
        $xfer += $output->writeFieldBegin('obj', TType::STRUCT, 1);
        $xfer += $self->{obj}->write($output);
        $xfer += $output->writeFieldEnd();
      }
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetService_equals_result;
use base qw(Class::Accessor);
thrift::adept::common::TokenOffsetService_equals_result->mk_accessors( qw( success ) );

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      $self->{success} = undef;
      if (UNIVERSAL::isa($vals,'HASH')) {
        if (defined $vals->{success}) {
          $self->{success} = $vals->{success};
        }
      }
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_equals_result';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
          /^0$/ && do{          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool(\$self->{success});
          } else {
            $xfer += $input->skip($ftype);
          }
          last; };
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_equals_result');
      if (defined $self->{success}) {
        $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
        $xfer += $output->writeBool($self->{success});
        $xfer += $output->writeFieldEnd();
      }
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetService_getBegin_args;
use base qw(Class::Accessor);

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_getBegin_args';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_getBegin_args');
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetService_getBegin_result;
use base qw(Class::Accessor);
thrift::adept::common::TokenOffsetService_getBegin_result->mk_accessors( qw( success ) );

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      $self->{success} = undef;
      if (UNIVERSAL::isa($vals,'HASH')) {
        if (defined $vals->{success}) {
          $self->{success} = $vals->{success};
        }
      }
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_getBegin_result';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
          /^0$/ && do{          if ($ftype == TType::I64) {
            $xfer += $input->readI64(\$self->{success});
          } else {
            $xfer += $input->skip($ftype);
          }
          last; };
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_getBegin_result');
      if (defined $self->{success}) {
        $xfer += $output->writeFieldBegin('success', TType::I64, 0);
        $xfer += $output->writeI64($self->{success});
        $xfer += $output->writeFieldEnd();
      }
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetService_getEnd_args;
use base qw(Class::Accessor);

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_getEnd_args';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_getEnd_args');
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetService_getEnd_result;
use base qw(Class::Accessor);
thrift::adept::common::TokenOffsetService_getEnd_result->mk_accessors( qw( success ) );

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      $self->{success} = undef;
      if (UNIVERSAL::isa($vals,'HASH')) {
        if (defined $vals->{success}) {
          $self->{success} = $vals->{success};
        }
      }
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_getEnd_result';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
          /^0$/ && do{          if ($ftype == TType::I64) {
            $xfer += $input->readI64(\$self->{success});
          } else {
            $xfer += $input->skip($ftype);
          }
          last; };
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_getEnd_result');
      if (defined $self->{success}) {
        $xfer += $output->writeFieldBegin('success', TType::I64, 0);
        $xfer += $output->writeI64($self->{success});
        $xfer += $output->writeFieldEnd();
      }
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetService_hashCode_args;
use base qw(Class::Accessor);

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_hashCode_args';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_hashCode_args');
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetService_hashCode_result;
use base qw(Class::Accessor);
thrift::adept::common::TokenOffsetService_hashCode_result->mk_accessors( qw( success ) );

sub new {
      my $classname = shift;
      my $self      = {};
      my $vals      = shift || {};
      $self->{success} = undef;
      if (UNIVERSAL::isa($vals,'HASH')) {
        if (defined $vals->{success}) {
          $self->{success} = $vals->{success};
        }
      }
      return bless ($self, $classname);
}

sub getName {
      return 'TokenOffsetService_hashCode_result';
    }

sub read {
      my ($self, $input) = @_;
      my $xfer  = 0;
      my $fname;
      my $ftype = 0;
      my $fid   = 0;
      $xfer += $input->readStructBegin(\$fname);
      while (1) 
      {
        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
        if ($ftype == TType::STOP) {
          last;
        }
        SWITCH: for($fid)
        {
          /^0$/ && do{          if ($ftype == TType::I32) {
            $xfer += $input->readI32(\$self->{success});
          } else {
            $xfer += $input->skip($ftype);
          }
          last; };
            $xfer += $input->skip($ftype);
        }
        $xfer += $input->readFieldEnd();
      }
      $xfer += $input->readStructEnd();
      return $xfer;
    }

sub write {
      my ($self, $output) = @_;
      my $xfer   = 0;
      $xfer += $output->writeStructBegin('TokenOffsetService_hashCode_result');
      if (defined $self->{success}) {
        $xfer += $output->writeFieldBegin('success', TType::I32, 0);
        $xfer += $output->writeI32($self->{success});
        $xfer += $output->writeFieldEnd();
      }
      $xfer += $output->writeFieldStop();
      $xfer += $output->writeStructEnd();
      return $xfer;
    }

package thrift::adept::common::TokenOffsetServiceIf;

use strict;


sub equals{
  my $self = shift;
  my $obj = shift;

  die 'implement interface';
}

sub getBegin{
  my $self = shift;

  die 'implement interface';
}

sub getEnd{
  my $self = shift;

  die 'implement interface';
}

sub hashCode{
  my $self = shift;

  die 'implement interface';
}

package thrift::adept::common::TokenOffsetServiceRest;

use strict;


sub new {
      my ($classname, $impl) = @_;
      my $self     ={ impl => $impl };

      return bless($self,$classname);
}

sub equals{
      my ($self, $request) = @_;

      my $obj = ($request->{'obj'}) ? $request->{'obj'} : undef;
      return $self->{impl}->equals($obj);
    }

sub getBegin{
      my ($self, $request) = @_;

      return $self->{impl}->getBegin();
    }

sub getEnd{
      my ($self, $request) = @_;

      return $self->{impl}->getEnd();
    }

sub hashCode{
      my ($self, $request) = @_;

      return $self->{impl}->hashCode();
    }

package thrift::adept::common::TokenOffsetServiceClient;


use base qw(thrift::adept::common::TokenOffsetServiceIf);
sub new {
      my ($classname, $input, $output) = @_;
      my $self      = {};
      $self->{input}  = $input;
      $self->{output} = defined $output ? $output : $input;
      $self->{seqid}  = 0;
      return bless($self,$classname);
}

sub equals{
  my $self = shift;
  my $obj = shift;

            $self->send_equals($obj);
      return $self->recv_equals();
}

sub send_equals{
  my $self = shift;
  my $obj = shift;

      $self->{output}->writeMessageBegin('equals', TMessageType::CALL, $self->{seqid});
      my $args = new thrift::adept::common::TokenOffsetService_equals_args();
      $args->{obj} = $obj;
      $args->write($self->{output});
      $self->{output}->writeMessageEnd();
      $self->{output}->getTransport()->flush();
}

sub recv_equals{
  my $self = shift;

      my $rseqid = 0;
      my $fname;
      my $mtype = 0;

      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        my $x = new TApplicationException();
        $x->read($self->{input});
        $self->{input}->readMessageEnd();
        die $x;
      }
      my $result = new thrift::adept::common::TokenOffsetService_equals_result();
      $result->read($self->{input});
      $self->{input}->readMessageEnd();

      if (defined $result->{success} ) {
        return $result->{success};
      }
      die "equals failed: unknown result";
}
sub getBegin{
  my $self = shift;

            $self->send_getBegin();
      return $self->recv_getBegin();
}

sub send_getBegin{
  my $self = shift;

      $self->{output}->writeMessageBegin('getBegin', TMessageType::CALL, $self->{seqid});
      my $args = new thrift::adept::common::TokenOffsetService_getBegin_args();
      $args->write($self->{output});
      $self->{output}->writeMessageEnd();
      $self->{output}->getTransport()->flush();
}

sub recv_getBegin{
  my $self = shift;

      my $rseqid = 0;
      my $fname;
      my $mtype = 0;

      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        my $x = new TApplicationException();
        $x->read($self->{input});
        $self->{input}->readMessageEnd();
        die $x;
      }
      my $result = new thrift::adept::common::TokenOffsetService_getBegin_result();
      $result->read($self->{input});
      $self->{input}->readMessageEnd();

      if (defined $result->{success} ) {
        return $result->{success};
      }
      die "getBegin failed: unknown result";
}
sub getEnd{
  my $self = shift;

            $self->send_getEnd();
      return $self->recv_getEnd();
}

sub send_getEnd{
  my $self = shift;

      $self->{output}->writeMessageBegin('getEnd', TMessageType::CALL, $self->{seqid});
      my $args = new thrift::adept::common::TokenOffsetService_getEnd_args();
      $args->write($self->{output});
      $self->{output}->writeMessageEnd();
      $self->{output}->getTransport()->flush();
}

sub recv_getEnd{
  my $self = shift;

      my $rseqid = 0;
      my $fname;
      my $mtype = 0;

      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        my $x = new TApplicationException();
        $x->read($self->{input});
        $self->{input}->readMessageEnd();
        die $x;
      }
      my $result = new thrift::adept::common::TokenOffsetService_getEnd_result();
      $result->read($self->{input});
      $self->{input}->readMessageEnd();

      if (defined $result->{success} ) {
        return $result->{success};
      }
      die "getEnd failed: unknown result";
}
sub hashCode{
  my $self = shift;

            $self->send_hashCode();
      return $self->recv_hashCode();
}

sub send_hashCode{
  my $self = shift;

      $self->{output}->writeMessageBegin('hashCode', TMessageType::CALL, $self->{seqid});
      my $args = new thrift::adept::common::TokenOffsetService_hashCode_args();
      $args->write($self->{output});
      $self->{output}->writeMessageEnd();
      $self->{output}->getTransport()->flush();
}

sub recv_hashCode{
  my $self = shift;

      my $rseqid = 0;
      my $fname;
      my $mtype = 0;

      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        my $x = new TApplicationException();
        $x->read($self->{input});
        $self->{input}->readMessageEnd();
        die $x;
      }
      my $result = new thrift::adept::common::TokenOffsetService_hashCode_result();
      $result->read($self->{input});
      $self->{input}->readMessageEnd();

      if (defined $result->{success} ) {
        return $result->{success};
      }
      die "hashCode failed: unknown result";
}
package thrift::adept::common::TokenOffsetServiceProcessor;

use strict;


sub new {
        my ($classname, $handler) = @_;
        my $self      = {};
        $self->{handler} = $handler;
        return bless ($self, $classname);
}

sub process {
        my ($self, $input, $output) = @_;
        my $rseqid = 0;
        my $fname  = undef;
        my $mtype  = 0;

        $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
        my $methodname = 'process_'.$fname;
        if (!$self->can($methodname)) {
          $input->skip(TType::STRUCT);
          $input->readMessageEnd();
          my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
          $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
          $x->write($output);
          $output->writeMessageEnd();
          $output->getTransport()->flush();
          return;
        }
        $self->$methodname($rseqid, $input, $output);
        return 1;
}

sub process_equals {
        my ($self, $seqid, $input, $output) = @_;
        my $args = new thrift::adept::common::TokenOffsetService_equals_args();
        $args->read($input);
        $input->readMessageEnd();
        my $result = new thrift::adept::common::TokenOffsetService_equals_result();
        $result->{success} = $self->{handler}->equals($args->obj);
        $output->writeMessageBegin('equals', TMessageType::REPLY, $seqid);
        $result->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
}

sub process_getBegin {
        my ($self, $seqid, $input, $output) = @_;
        my $args = new thrift::adept::common::TokenOffsetService_getBegin_args();
        $args->read($input);
        $input->readMessageEnd();
        my $result = new thrift::adept::common::TokenOffsetService_getBegin_result();
        $result->{success} = $self->{handler}->getBegin();
        $output->writeMessageBegin('getBegin', TMessageType::REPLY, $seqid);
        $result->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
}

sub process_getEnd {
        my ($self, $seqid, $input, $output) = @_;
        my $args = new thrift::adept::common::TokenOffsetService_getEnd_args();
        $args->read($input);
        $input->readMessageEnd();
        my $result = new thrift::adept::common::TokenOffsetService_getEnd_result();
        $result->{success} = $self->{handler}->getEnd();
        $output->writeMessageBegin('getEnd', TMessageType::REPLY, $seqid);
        $result->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
}

sub process_hashCode {
        my ($self, $seqid, $input, $output) = @_;
        my $args = new thrift::adept::common::TokenOffsetService_hashCode_args();
        $args->read($input);
        $input->readMessageEnd();
        my $result = new thrift::adept::common::TokenOffsetService_hashCode_result();
        $result->{success} = $self->{handler}->hashCode();
        $output->writeMessageBegin('hashCode', TMessageType::REPLY, $seqid);
        $result->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
}

1;
