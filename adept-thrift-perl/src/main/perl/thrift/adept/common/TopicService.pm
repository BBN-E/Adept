#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::TopicService_addViewpoint_args;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_addViewpoint_args->mk_accessors( qw( viewpoint ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{viewpoint} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{viewpoint}) {
                                                    $self->{viewpoint} = $vals->{viewpoint};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_addViewpoint_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^1$/ && do{                                                    if ($ftype == TType::STRUCT) {
                                                      $self->{viewpoint} = new thrift::adept::common::Viewpoint();
                                                      $xfer += $self->{viewpoint}->read($input);
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_addViewpoint_args');
                                                if (defined $self->{viewpoint}) {
                                                  $xfer += $output->writeFieldBegin('viewpoint', TType::STRUCT, 1);
                                                  $xfer += $self->{viewpoint}->write($output);
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_addViewpoint_result;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_addViewpoint_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_addViewpoint_result');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getBelief_args;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getBelief_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getBelief_args');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getBelief_result;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_getBelief_result->mk_accessors( qw( success ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{success} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{success}) {
                                                    $self->{success} = $vals->{success};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getBelief_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^0$/ && do{                                                    if ($ftype == TType::STRING) {
                                                      $xfer += $input->readString(\$self->{success});
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getBelief_result');
                                                if (defined $self->{success}) {
                                                  $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                  $xfer += $output->writeString($self->{success});
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getName_args;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getName_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getName_args');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getName_result;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_getName_result->mk_accessors( qw( success ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{success} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{success}) {
                                                    $self->{success} = $vals->{success};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getName_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^0$/ && do{                                                    if ($ftype == TType::STRING) {
                                                      $xfer += $input->readString(\$self->{success});
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getName_result');
                                                if (defined $self->{success}) {
                                                  $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                  $xfer += $output->writeString($self->{success});
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getPolarity_args;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getPolarity_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getPolarity_args');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getPolarity_result;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_getPolarity_result->mk_accessors( qw( success ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{success} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{success}) {
                                                    $self->{success} = $vals->{success};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getPolarity_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^0$/ && do{                                                    if ($ftype == TType::I32) {
                                                      $xfer += $input->readI32(\$self->{success});
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getPolarity_result');
                                                if (defined $self->{success}) {
                                                  $xfer += $output->writeFieldBegin('success', TType::I32, 0);
                                                  $xfer += $output->writeI32($self->{success});
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getTopicId_args;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getTopicId_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getTopicId_args');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getTopicId_result;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_getTopicId_result->mk_accessors( qw( success ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{success} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{success}) {
                                                    $self->{success} = $vals->{success};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getTopicId_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^0$/ && do{                                                    if ($ftype == TType::I64) {
                                                      $xfer += $input->readI64(\$self->{success});
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getTopicId_result');
                                                if (defined $self->{success}) {
                                                  $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                                                  $xfer += $output->writeI64($self->{success});
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getViewpoints_args;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getViewpoints_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getViewpoints_args');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_getViewpoints_result;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_getViewpoints_result->mk_accessors( qw( success ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{success} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{success}) {
                                                    $self->{success} = $vals->{success};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_getViewpoints_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^0$/ && do{                                                    if ($ftype == TType::LIST) {
                                                      {
                                                        my $_size443 = 0;
                                                        $self->{success} = [];
                                                        my $_etype446 = 0;
                                                        $xfer += $input->readListBegin(\$_etype446, \$_size443);
                                                        for (my $_i447 = 0; $_i447 < $_size443; ++$_i447)
                                                        {
                                                          my $elem448 = undef;
                                                          $elem448 = new thrift::adept::common::Viewpoint();
                                                          $xfer += $elem448->read($input);
                                                          push(@{$self->{success}},$elem448);
                                                        }
                                                        $xfer += $input->readListEnd();
                                                      }
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_getViewpoints_result');
                                                if (defined $self->{success}) {
                                                  $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                  {
                                                    $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
                                                    {
                                                      foreach my $iter449 (@{$self->{success}}) 
                                                      {
                                                        $xfer += ${iter449}->write($output);
                                                      }
                                                    }
                                                    $xfer += $output->writeListEnd();
                                                  }
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_setBelief_args;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_setBelief_args->mk_accessors( qw( belief ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{belief} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{belief}) {
                                                    $self->{belief} = $vals->{belief};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_setBelief_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^1$/ && do{                                                    if ($ftype == TType::STRING) {
                                                      $xfer += $input->readString(\$self->{belief});
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_setBelief_args');
                                                if (defined $self->{belief}) {
                                                  $xfer += $output->writeFieldBegin('belief', TType::STRING, 1);
                                                  $xfer += $output->writeString($self->{belief});
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_setBelief_result;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_setBelief_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_setBelief_result');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_setPolarity_args;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_setPolarity_args->mk_accessors( qw( polarity ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{polarity} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{polarity}) {
                                                    $self->{polarity} = $vals->{polarity};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_setPolarity_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^1$/ && do{                                                    if ($ftype == TType::I32) {
                                                      $xfer += $input->readI32(\$self->{polarity});
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_setPolarity_args');
                                                if (defined $self->{polarity}) {
                                                  $xfer += $output->writeFieldBegin('polarity', TType::I32, 1);
                                                  $xfer += $output->writeI32($self->{polarity});
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_setPolarity_result;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_setPolarity_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_setPolarity_result');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_setViewpoints_args;
use base qw(Class::Accessor);
thrift::adept::common::TopicService_setViewpoints_args->mk_accessors( qw( viewpoints ) );

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                $self->{viewpoints} = undef;
                                                if (UNIVERSAL::isa($vals,'HASH')) {
                                                  if (defined $vals->{viewpoints}) {
                                                    $self->{viewpoints} = $vals->{viewpoints};
                                                  }
                                                }
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_setViewpoints_args';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                    /^1$/ && do{                                                    if ($ftype == TType::LIST) {
                                                      {
                                                        my $_size450 = 0;
                                                        $self->{viewpoints} = [];
                                                        my $_etype453 = 0;
                                                        $xfer += $input->readListBegin(\$_etype453, \$_size450);
                                                        for (my $_i454 = 0; $_i454 < $_size450; ++$_i454)
                                                        {
                                                          my $elem455 = undef;
                                                          $elem455 = new thrift::adept::common::Viewpoint();
                                                          $xfer += $elem455->read($input);
                                                          push(@{$self->{viewpoints}},$elem455);
                                                        }
                                                        $xfer += $input->readListEnd();
                                                      }
                                                    } else {
                                                      $xfer += $input->skip($ftype);
                                                    }
                                                    last; };
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_setViewpoints_args');
                                                if (defined $self->{viewpoints}) {
                                                  $xfer += $output->writeFieldBegin('viewpoints', TType::LIST, 1);
                                                  {
                                                    $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{viewpoints}}));
                                                    {
                                                      foreach my $iter456 (@{$self->{viewpoints}}) 
                                                      {
                                                        $xfer += ${iter456}->write($output);
                                                      }
                                                    }
                                                    $xfer += $output->writeListEnd();
                                                  }
                                                  $xfer += $output->writeFieldEnd();
                                                }
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicService_setViewpoints_result;
use base qw(Class::Accessor);

sub new {
                                                my $classname = shift;
                                                my $self      = {};
                                                my $vals      = shift || {};
                                                return bless ($self, $classname);
}

sub getName {
                                                return 'TopicService_setViewpoints_result';
                                              }

sub read {
                                                my ($self, $input) = @_;
                                                my $xfer  = 0;
                                                my $fname;
                                                my $ftype = 0;
                                                my $fid   = 0;
                                                $xfer += $input->readStructBegin(\$fname);
                                                while (1) 
                                                {
                                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                  if ($ftype == TType::STOP) {
                                                    last;
                                                  }
                                                  SWITCH: for($fid)
                                                  {
                                                      $xfer += $input->skip($ftype);
                                                  }
                                                  $xfer += $input->readFieldEnd();
                                                }
                                                $xfer += $input->readStructEnd();
                                                return $xfer;
                                              }

sub write {
                                                my ($self, $output) = @_;
                                                my $xfer   = 0;
                                                $xfer += $output->writeStructBegin('TopicService_setViewpoints_result');
                                                $xfer += $output->writeFieldStop();
                                                $xfer += $output->writeStructEnd();
                                                return $xfer;
                                              }

package thrift::adept::common::TopicServiceIf;

use strict;


sub addViewpoint{
  my $self = shift;
  my $viewpoint = shift;

  die 'implement interface';
}

sub getBelief{
  my $self = shift;

  die 'implement interface';
}

sub getName{
  my $self = shift;

  die 'implement interface';
}

sub getPolarity{
  my $self = shift;

  die 'implement interface';
}

sub getTopicId{
  my $self = shift;

  die 'implement interface';
}

sub getViewpoints{
  my $self = shift;

  die 'implement interface';
}

sub setBelief{
  my $self = shift;
  my $belief = shift;

  die 'implement interface';
}

sub setPolarity{
  my $self = shift;
  my $polarity = shift;

  die 'implement interface';
}

sub setViewpoints{
  my $self = shift;
  my $viewpoints = shift;

  die 'implement interface';
}

package thrift::adept::common::TopicServiceRest;

use strict;


sub new {
                                                my ($classname, $impl) = @_;
                                                my $self     ={ impl => $impl };

                                                return bless($self,$classname);
}

sub addViewpoint{
                                                my ($self, $request) = @_;

                                                my $viewpoint = ($request->{'viewpoint'}) ? $request->{'viewpoint'} : undef;
                                                return $self->{impl}->addViewpoint($viewpoint);
                                              }

sub getBelief{
                                                my ($self, $request) = @_;

                                                return $self->{impl}->getBelief();
                                              }

sub getName{
                                                my ($self, $request) = @_;

                                                return $self->{impl}->getName();
                                              }

sub getPolarity{
                                                my ($self, $request) = @_;

                                                return $self->{impl}->getPolarity();
                                              }

sub getTopicId{
                                                my ($self, $request) = @_;

                                                return $self->{impl}->getTopicId();
                                              }

sub getViewpoints{
                                                my ($self, $request) = @_;

                                                return $self->{impl}->getViewpoints();
                                              }

sub setBelief{
                                                my ($self, $request) = @_;

                                                my $belief = ($request->{'belief'}) ? $request->{'belief'} : undef;
                                                return $self->{impl}->setBelief($belief);
                                              }

sub setPolarity{
                                                my ($self, $request) = @_;

                                                my $polarity = ($request->{'polarity'}) ? $request->{'polarity'} : undef;
                                                return $self->{impl}->setPolarity($polarity);
                                              }

sub setViewpoints{
                                                my ($self, $request) = @_;

                                                my $viewpoints = ($request->{'viewpoints'}) ? $request->{'viewpoints'} : undef;
                                                return $self->{impl}->setViewpoints($viewpoints);
                                              }

package thrift::adept::common::TopicServiceClient;


use base qw(thrift::adept::common::TopicServiceIf);
sub new {
                                                my ($classname, $input, $output) = @_;
                                                my $self      = {};
                                                $self->{input}  = $input;
                                                $self->{output} = defined $output ? $output : $input;
                                                $self->{seqid}  = 0;
                                                return bless($self,$classname);
}

sub addViewpoint{
  my $self = shift;
  my $viewpoint = shift;

                                                                                                $self->send_addViewpoint($viewpoint);
                                                $self->recv_addViewpoint();
}

sub send_addViewpoint{
  my $self = shift;
  my $viewpoint = shift;

                                                $self->{output}->writeMessageBegin('addViewpoint', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_addViewpoint_args();
                                                $args->{viewpoint} = $viewpoint;
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_addViewpoint{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_addViewpoint_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                return;
}
sub getBelief{
  my $self = shift;

                                                                                                $self->send_getBelief();
                                                return $self->recv_getBelief();
}

sub send_getBelief{
  my $self = shift;

                                                $self->{output}->writeMessageBegin('getBelief', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_getBelief_args();
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_getBelief{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_getBelief_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                if (defined $result->{success} ) {
                                                  return $result->{success};
                                                }
                                                die "getBelief failed: unknown result";
}
sub getName{
  my $self = shift;

                                                                                                $self->send_getName();
                                                return $self->recv_getName();
}

sub send_getName{
  my $self = shift;

                                                $self->{output}->writeMessageBegin('getName', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_getName_args();
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_getName{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_getName_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                if (defined $result->{success} ) {
                                                  return $result->{success};
                                                }
                                                die "getName failed: unknown result";
}
sub getPolarity{
  my $self = shift;

                                                                                                $self->send_getPolarity();
                                                return $self->recv_getPolarity();
}

sub send_getPolarity{
  my $self = shift;

                                                $self->{output}->writeMessageBegin('getPolarity', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_getPolarity_args();
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_getPolarity{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_getPolarity_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                if (defined $result->{success} ) {
                                                  return $result->{success};
                                                }
                                                die "getPolarity failed: unknown result";
}
sub getTopicId{
  my $self = shift;

                                                                                                $self->send_getTopicId();
                                                return $self->recv_getTopicId();
}

sub send_getTopicId{
  my $self = shift;

                                                $self->{output}->writeMessageBegin('getTopicId', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_getTopicId_args();
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_getTopicId{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_getTopicId_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                if (defined $result->{success} ) {
                                                  return $result->{success};
                                                }
                                                die "getTopicId failed: unknown result";
}
sub getViewpoints{
  my $self = shift;

                                                                                                $self->send_getViewpoints();
                                                return $self->recv_getViewpoints();
}

sub send_getViewpoints{
  my $self = shift;

                                                $self->{output}->writeMessageBegin('getViewpoints', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_getViewpoints_args();
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_getViewpoints{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_getViewpoints_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                if (defined $result->{success} ) {
                                                  return $result->{success};
                                                }
                                                die "getViewpoints failed: unknown result";
}
sub setBelief{
  my $self = shift;
  my $belief = shift;

                                                                                                $self->send_setBelief($belief);
                                                $self->recv_setBelief();
}

sub send_setBelief{
  my $self = shift;
  my $belief = shift;

                                                $self->{output}->writeMessageBegin('setBelief', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_setBelief_args();
                                                $args->{belief} = $belief;
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_setBelief{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_setBelief_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                return;
}
sub setPolarity{
  my $self = shift;
  my $polarity = shift;

                                                                                                $self->send_setPolarity($polarity);
                                                $self->recv_setPolarity();
}

sub send_setPolarity{
  my $self = shift;
  my $polarity = shift;

                                                $self->{output}->writeMessageBegin('setPolarity', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_setPolarity_args();
                                                $args->{polarity} = $polarity;
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_setPolarity{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_setPolarity_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                return;
}
sub setViewpoints{
  my $self = shift;
  my $viewpoints = shift;

                                                                                                $self->send_setViewpoints($viewpoints);
                                                $self->recv_setViewpoints();
}

sub send_setViewpoints{
  my $self = shift;
  my $viewpoints = shift;

                                                $self->{output}->writeMessageBegin('setViewpoints', TMessageType::CALL, $self->{seqid});
                                                my $args = new thrift::adept::common::TopicService_setViewpoints_args();
                                                $args->{viewpoints} = $viewpoints;
                                                $args->write($self->{output});
                                                $self->{output}->writeMessageEnd();
                                                $self->{output}->getTransport()->flush();
}

sub recv_setViewpoints{
  my $self = shift;

                                                my $rseqid = 0;
                                                my $fname;
                                                my $mtype = 0;

                                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                if ($mtype == TMessageType::EXCEPTION) {
                                                  my $x = new TApplicationException();
                                                  $x->read($self->{input});
                                                  $self->{input}->readMessageEnd();
                                                  die $x;
                                                }
                                                my $result = new thrift::adept::common::TopicService_setViewpoints_result();
                                                $result->read($self->{input});
                                                $self->{input}->readMessageEnd();

                                                return;
}
package thrift::adept::common::TopicServiceProcessor;

use strict;


sub new {
                                                  my ($classname, $handler) = @_;
                                                  my $self      = {};
                                                  $self->{handler} = $handler;
                                                  return bless ($self, $classname);
}

sub process {
                                                  my ($self, $input, $output) = @_;
                                                  my $rseqid = 0;
                                                  my $fname  = undef;
                                                  my $mtype  = 0;

                                                  $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                  my $methodname = 'process_'.$fname;
                                                  if (!$self->can($methodname)) {
                                                    $input->skip(TType::STRUCT);
                                                    $input->readMessageEnd();
                                                    my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                    $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                    $x->write($output);
                                                    $output->writeMessageEnd();
                                                    $output->getTransport()->flush();
                                                    return;
                                                  }
                                                  $self->$methodname($rseqid, $input, $output);
                                                  return 1;
}

sub process_addViewpoint {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_addViewpoint_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_addViewpoint_result();
                                                  $self->{handler}->addViewpoint($args->viewpoint);
                                                  $output->writeMessageBegin('addViewpoint', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_getBelief {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_getBelief_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_getBelief_result();
                                                  $result->{success} = $self->{handler}->getBelief();
                                                  $output->writeMessageBegin('getBelief', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_getName {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_getName_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_getName_result();
                                                  $result->{success} = $self->{handler}->getName();
                                                  $output->writeMessageBegin('getName', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_getPolarity {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_getPolarity_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_getPolarity_result();
                                                  $result->{success} = $self->{handler}->getPolarity();
                                                  $output->writeMessageBegin('getPolarity', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_getTopicId {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_getTopicId_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_getTopicId_result();
                                                  $result->{success} = $self->{handler}->getTopicId();
                                                  $output->writeMessageBegin('getTopicId', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_getViewpoints {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_getViewpoints_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_getViewpoints_result();
                                                  $result->{success} = $self->{handler}->getViewpoints();
                                                  $output->writeMessageBegin('getViewpoints', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_setBelief {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_setBelief_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_setBelief_result();
                                                  $self->{handler}->setBelief($args->belief);
                                                  $output->writeMessageBegin('setBelief', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_setPolarity {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_setPolarity_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_setPolarity_result();
                                                  $self->{handler}->setPolarity($args->polarity);
                                                  $output->writeMessageBegin('setPolarity', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

sub process_setViewpoints {
                                                  my ($self, $seqid, $input, $output) = @_;
                                                  my $args = new thrift::adept::common::TopicService_setViewpoints_args();
                                                  $args->read($input);
                                                  $input->readMessageEnd();
                                                  my $result = new thrift::adept::common::TopicService_setViewpoints_result();
                                                  $self->{handler}->setViewpoints($args->viewpoints);
                                                  $output->writeMessageBegin('setViewpoints', TMessageType::REPLY, $seqid);
                                                  $result->write($output);
                                                  $output->writeMessageEnd();
                                                  $output->getTransport()->flush();
}

1;
