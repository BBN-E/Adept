#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ChunkService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::UtteranceService_getAnnotation_args;
use base qw(Class::Accessor);

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_getAnnotation_args';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_getAnnotation_args');
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceService_getAnnotation_result;
use base qw(Class::Accessor);
thrift::adept::common::UtteranceService_getAnnotation_result->mk_accessors( qw( success ) );

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  $self->{success} = undef;
                                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                                    if (defined $vals->{success}) {
                                                                                                      $self->{success} = $vals->{success};
                                                                                                    }
                                                                                                  }
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_getAnnotation_result';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                      /^0$/ && do{                                                                                                      if ($ftype == TType::STRING) {
                                                                                                        $xfer += $input->readString(\$self->{success});
                                                                                                      } else {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                      }
                                                                                                      last; };
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_getAnnotation_result');
                                                                                                  if (defined $self->{success}) {
                                                                                                    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                                                                    $xfer += $output->writeString($self->{success});
                                                                                                    $xfer += $output->writeFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceService_getSpeakerId_args;
use base qw(Class::Accessor);

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_getSpeakerId_args';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_getSpeakerId_args');
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceService_getSpeakerId_result;
use base qw(Class::Accessor);
thrift::adept::common::UtteranceService_getSpeakerId_result->mk_accessors( qw( success ) );

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  $self->{success} = undef;
                                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                                    if (defined $vals->{success}) {
                                                                                                      $self->{success} = $vals->{success};
                                                                                                    }
                                                                                                  }
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_getSpeakerId_result';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                      /^0$/ && do{                                                                                                      if ($ftype == TType::I64) {
                                                                                                        $xfer += $input->readI64(\$self->{success});
                                                                                                      } else {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                      }
                                                                                                      last; };
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_getSpeakerId_result');
                                                                                                  if (defined $self->{success}) {
                                                                                                    $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                                                                                                    $xfer += $output->writeI64($self->{success});
                                                                                                    $xfer += $output->writeFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceService_getUtteranceId_args;
use base qw(Class::Accessor);

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_getUtteranceId_args';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_getUtteranceId_args');
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceService_getUtteranceId_result;
use base qw(Class::Accessor);
thrift::adept::common::UtteranceService_getUtteranceId_result->mk_accessors( qw( success ) );

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  $self->{success} = undef;
                                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                                    if (defined $vals->{success}) {
                                                                                                      $self->{success} = $vals->{success};
                                                                                                    }
                                                                                                  }
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_getUtteranceId_result';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                      /^0$/ && do{                                                                                                      if ($ftype == TType::I64) {
                                                                                                        $xfer += $input->readI64(\$self->{success});
                                                                                                      } else {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                      }
                                                                                                      last; };
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_getUtteranceId_result');
                                                                                                  if (defined $self->{success}) {
                                                                                                    $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                                                                                                    $xfer += $output->writeI64($self->{success});
                                                                                                    $xfer += $output->writeFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceService_setAnnotation_args;
use base qw(Class::Accessor);
thrift::adept::common::UtteranceService_setAnnotation_args->mk_accessors( qw( annotation ) );

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  $self->{annotation} = undef;
                                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                                    if (defined $vals->{annotation}) {
                                                                                                      $self->{annotation} = $vals->{annotation};
                                                                                                    }
                                                                                                  }
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_setAnnotation_args';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                      /^1$/ && do{                                                                                                      if ($ftype == TType::STRING) {
                                                                                                        $xfer += $input->readString(\$self->{annotation});
                                                                                                      } else {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                      }
                                                                                                      last; };
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_setAnnotation_args');
                                                                                                  if (defined $self->{annotation}) {
                                                                                                    $xfer += $output->writeFieldBegin('annotation', TType::STRING, 1);
                                                                                                    $xfer += $output->writeString($self->{annotation});
                                                                                                    $xfer += $output->writeFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceService_setAnnotation_result;
use base qw(Class::Accessor);

sub new {
                                                                                                  my $classname = shift;
                                                                                                  my $self      = {};
                                                                                                  my $vals      = shift || {};
                                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                                  return 'UtteranceService_setAnnotation_result';
                                                                                                }

sub read {
                                                                                                  my ($self, $input) = @_;
                                                                                                  my $xfer  = 0;
                                                                                                  my $fname;
                                                                                                  my $ftype = 0;
                                                                                                  my $fid   = 0;
                                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                                  while (1) 
                                                                                                  {
                                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                                    if ($ftype == TType::STOP) {
                                                                                                      last;
                                                                                                    }
                                                                                                    SWITCH: for($fid)
                                                                                                    {
                                                                                                        $xfer += $input->skip($ftype);
                                                                                                    }
                                                                                                    $xfer += $input->readFieldEnd();
                                                                                                  }
                                                                                                  $xfer += $input->readStructEnd();
                                                                                                  return $xfer;
                                                                                                }

sub write {
                                                                                                  my ($self, $output) = @_;
                                                                                                  my $xfer   = 0;
                                                                                                  $xfer += $output->writeStructBegin('UtteranceService_setAnnotation_result');
                                                                                                  $xfer += $output->writeFieldStop();
                                                                                                  $xfer += $output->writeStructEnd();
                                                                                                  return $xfer;
                                                                                                }

package thrift::adept::common::UtteranceServiceIf;

use strict;
use base qw(thrift::adept::common::ChunkServiceIf);

sub getAnnotation{
  my $self = shift;

  die 'implement interface';
}

sub getSpeakerId{
  my $self = shift;

  die 'implement interface';
}

sub getUtteranceId{
  my $self = shift;

  die 'implement interface';
}

sub setAnnotation{
  my $self = shift;
  my $annotation = shift;

  die 'implement interface';
}

package thrift::adept::common::UtteranceServiceRest;

use strict;
use base qw(thrift::adept::common::ChunkServiceRest);

sub getAnnotation{
                                                                                                  my ($self, $request) = @_;

                                                                                                  return $self->{impl}->getAnnotation();
                                                                                                }

sub getSpeakerId{
                                                                                                  my ($self, $request) = @_;

                                                                                                  return $self->{impl}->getSpeakerId();
                                                                                                }

sub getUtteranceId{
                                                                                                  my ($self, $request) = @_;

                                                                                                  return $self->{impl}->getUtteranceId();
                                                                                                }

sub setAnnotation{
                                                                                                  my ($self, $request) = @_;

                                                                                                  my $annotation = ($request->{'annotation'}) ? $request->{'annotation'} : undef;
                                                                                                  return $self->{impl}->setAnnotation($annotation);
                                                                                                }

package thrift::adept::common::UtteranceServiceClient;

use base qw(thrift::adept::common::ChunkServiceClient);
use base qw(thrift::adept::common::UtteranceServiceIf);
sub new {
                                                                                                  my ($classname, $input, $output) = @_;
                                                                                                  my $self      = {};
                                                                                                  $self = $classname->SUPER::new($input, $output);
                                                                                                  return bless($self,$classname);
}

sub getAnnotation{
  my $self = shift;

                                                                                                                                                                                                    $self->send_getAnnotation();
                                                                                                  return $self->recv_getAnnotation();
}

sub send_getAnnotation{
  my $self = shift;

                                                                                                  $self->{output}->writeMessageBegin('getAnnotation', TMessageType::CALL, $self->{seqid});
                                                                                                  my $args = new thrift::adept::common::UtteranceService_getAnnotation_args();
                                                                                                  $args->write($self->{output});
                                                                                                  $self->{output}->writeMessageEnd();
                                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getAnnotation{
  my $self = shift;

                                                                                                  my $rseqid = 0;
                                                                                                  my $fname;
                                                                                                  my $mtype = 0;

                                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                                    my $x = new TApplicationException();
                                                                                                    $x->read($self->{input});
                                                                                                    $self->{input}->readMessageEnd();
                                                                                                    die $x;
                                                                                                  }
                                                                                                  my $result = new thrift::adept::common::UtteranceService_getAnnotation_result();
                                                                                                  $result->read($self->{input});
                                                                                                  $self->{input}->readMessageEnd();

                                                                                                  if (defined $result->{success} ) {
                                                                                                    return $result->{success};
                                                                                                  }
                                                                                                  die "getAnnotation failed: unknown result";
}
sub getSpeakerId{
  my $self = shift;

                                                                                                                                                                                                    $self->send_getSpeakerId();
                                                                                                  return $self->recv_getSpeakerId();
}

sub send_getSpeakerId{
  my $self = shift;

                                                                                                  $self->{output}->writeMessageBegin('getSpeakerId', TMessageType::CALL, $self->{seqid});
                                                                                                  my $args = new thrift::adept::common::UtteranceService_getSpeakerId_args();
                                                                                                  $args->write($self->{output});
                                                                                                  $self->{output}->writeMessageEnd();
                                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getSpeakerId{
  my $self = shift;

                                                                                                  my $rseqid = 0;
                                                                                                  my $fname;
                                                                                                  my $mtype = 0;

                                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                                    my $x = new TApplicationException();
                                                                                                    $x->read($self->{input});
                                                                                                    $self->{input}->readMessageEnd();
                                                                                                    die $x;
                                                                                                  }
                                                                                                  my $result = new thrift::adept::common::UtteranceService_getSpeakerId_result();
                                                                                                  $result->read($self->{input});
                                                                                                  $self->{input}->readMessageEnd();

                                                                                                  if (defined $result->{success} ) {
                                                                                                    return $result->{success};
                                                                                                  }
                                                                                                  die "getSpeakerId failed: unknown result";
}
sub getUtteranceId{
  my $self = shift;

                                                                                                                                                                                                    $self->send_getUtteranceId();
                                                                                                  return $self->recv_getUtteranceId();
}

sub send_getUtteranceId{
  my $self = shift;

                                                                                                  $self->{output}->writeMessageBegin('getUtteranceId', TMessageType::CALL, $self->{seqid});
                                                                                                  my $args = new thrift::adept::common::UtteranceService_getUtteranceId_args();
                                                                                                  $args->write($self->{output});
                                                                                                  $self->{output}->writeMessageEnd();
                                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getUtteranceId{
  my $self = shift;

                                                                                                  my $rseqid = 0;
                                                                                                  my $fname;
                                                                                                  my $mtype = 0;

                                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                                    my $x = new TApplicationException();
                                                                                                    $x->read($self->{input});
                                                                                                    $self->{input}->readMessageEnd();
                                                                                                    die $x;
                                                                                                  }
                                                                                                  my $result = new thrift::adept::common::UtteranceService_getUtteranceId_result();
                                                                                                  $result->read($self->{input});
                                                                                                  $self->{input}->readMessageEnd();

                                                                                                  if (defined $result->{success} ) {
                                                                                                    return $result->{success};
                                                                                                  }
                                                                                                  die "getUtteranceId failed: unknown result";
}
sub setAnnotation{
  my $self = shift;
  my $annotation = shift;

                                                                                                                                                                                                    $self->send_setAnnotation($annotation);
                                                                                                  $self->recv_setAnnotation();
}

sub send_setAnnotation{
  my $self = shift;
  my $annotation = shift;

                                                                                                  $self->{output}->writeMessageBegin('setAnnotation', TMessageType::CALL, $self->{seqid});
                                                                                                  my $args = new thrift::adept::common::UtteranceService_setAnnotation_args();
                                                                                                  $args->{annotation} = $annotation;
                                                                                                  $args->write($self->{output});
                                                                                                  $self->{output}->writeMessageEnd();
                                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setAnnotation{
  my $self = shift;

                                                                                                  my $rseqid = 0;
                                                                                                  my $fname;
                                                                                                  my $mtype = 0;

                                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                                    my $x = new TApplicationException();
                                                                                                    $x->read($self->{input});
                                                                                                    $self->{input}->readMessageEnd();
                                                                                                    die $x;
                                                                                                  }
                                                                                                  my $result = new thrift::adept::common::UtteranceService_setAnnotation_result();
                                                                                                  $result->read($self->{input});
                                                                                                  $self->{input}->readMessageEnd();

                                                                                                  return;
}
package thrift::adept::common::UtteranceServiceProcessor;

use strict;
use base qw(thrift::adept::common::ChunkServiceProcessor);

sub process {
                                                                                                    my ($self, $input, $output) = @_;
                                                                                                    my $rseqid = 0;
                                                                                                    my $fname  = undef;
                                                                                                    my $mtype  = 0;

                                                                                                    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                                    my $methodname = 'process_'.$fname;
                                                                                                    if (!$self->can($methodname)) {
                                                                                                      $input->skip(TType::STRUCT);
                                                                                                      $input->readMessageEnd();
                                                                                                      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                                                      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                                                      $x->write($output);
                                                                                                      $output->writeMessageEnd();
                                                                                                      $output->getTransport()->flush();
                                                                                                      return;
                                                                                                    }
                                                                                                    $self->$methodname($rseqid, $input, $output);
                                                                                                    return 1;
}

sub process_getAnnotation {
                                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                                    my $args = new thrift::adept::common::UtteranceService_getAnnotation_args();
                                                                                                    $args->read($input);
                                                                                                    $input->readMessageEnd();
                                                                                                    my $result = new thrift::adept::common::UtteranceService_getAnnotation_result();
                                                                                                    $result->{success} = $self->{handler}->getAnnotation();
                                                                                                    $output->writeMessageBegin('getAnnotation', TMessageType::REPLY, $seqid);
                                                                                                    $result->write($output);
                                                                                                    $output->writeMessageEnd();
                                                                                                    $output->getTransport()->flush();
}

sub process_getSpeakerId {
                                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                                    my $args = new thrift::adept::common::UtteranceService_getSpeakerId_args();
                                                                                                    $args->read($input);
                                                                                                    $input->readMessageEnd();
                                                                                                    my $result = new thrift::adept::common::UtteranceService_getSpeakerId_result();
                                                                                                    $result->{success} = $self->{handler}->getSpeakerId();
                                                                                                    $output->writeMessageBegin('getSpeakerId', TMessageType::REPLY, $seqid);
                                                                                                    $result->write($output);
                                                                                                    $output->writeMessageEnd();
                                                                                                    $output->getTransport()->flush();
}

sub process_getUtteranceId {
                                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                                    my $args = new thrift::adept::common::UtteranceService_getUtteranceId_args();
                                                                                                    $args->read($input);
                                                                                                    $input->readMessageEnd();
                                                                                                    my $result = new thrift::adept::common::UtteranceService_getUtteranceId_result();
                                                                                                    $result->{success} = $self->{handler}->getUtteranceId();
                                                                                                    $output->writeMessageBegin('getUtteranceId', TMessageType::REPLY, $seqid);
                                                                                                    $result->write($output);
                                                                                                    $output->writeMessageEnd();
                                                                                                    $output->getTransport()->flush();
}

sub process_setAnnotation {
                                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                                    my $args = new thrift::adept::common::UtteranceService_setAnnotation_args();
                                                                                                    $args->read($input);
                                                                                                    $input->readMessageEnd();
                                                                                                    my $result = new thrift::adept::common::UtteranceService_setAnnotation_result();
                                                                                                    $self->{handler}->setAnnotation($args->annotation);
                                                                                                    $output->writeMessageBegin('setAnnotation', TMessageType::REPLY, $seqid);
                                                                                                    $result->write($output);
                                                                                                    $output->writeMessageEnd();
                                                                                                    $output->getTransport()->flush();
}

1;