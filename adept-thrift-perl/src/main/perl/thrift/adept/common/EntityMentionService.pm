#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ChunkService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::EntityMentionService_addEntityConfidencePair_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_addEntityConfidencePair_args->mk_accessors( qw( entityId confidence ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{entityId} = undef;
                                                                            $self->{confidence} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{entityId}) {
                                                                                $self->{entityId} = $vals->{entityId};
                                                                              }
                                                                              if (defined $vals->{confidence}) {
                                                                                $self->{confidence} = $vals->{confidence};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_addEntityConfidencePair_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^1$/ && do{                                                                                if ($ftype == TType::I64) {
                                                                                  $xfer += $input->readI64(\$self->{entityId});
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                /^2$/ && do{                                                                                if ($ftype == TType::DOUBLE) {
                                                                                  $xfer += $input->readDouble(\$self->{confidence});
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_addEntityConfidencePair_args');
                                                                            if (defined $self->{entityId}) {
                                                                              $xfer += $output->writeFieldBegin('entityId', TType::I64, 1);
                                                                              $xfer += $output->writeI64($self->{entityId});
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            if (defined $self->{confidence}) {
                                                                              $xfer += $output->writeFieldBegin('confidence', TType::DOUBLE, 2);
                                                                              $xfer += $output->writeDouble($self->{confidence});
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_addEntityConfidencePair_result;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_addEntityConfidencePair_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_addEntityConfidencePair_result');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_equals_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_equals_args->mk_accessors( qw( obj ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{obj} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{obj}) {
                                                                                $self->{obj} = $vals->{obj};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_equals_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^1$/ && do{                                                                                if ($ftype == TType::STRUCT) {
                                                                                  $self->{obj} = new thrift::adept::common::EntityMention();
                                                                                  $xfer += $self->{obj}->read($input);
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_equals_args');
                                                                            if (defined $self->{obj}) {
                                                                              $xfer += $output->writeFieldBegin('obj', TType::STRUCT, 1);
                                                                              $xfer += $self->{obj}->write($output);
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_equals_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_equals_result->mk_accessors( qw( success ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{success} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{success}) {
                                                                                $self->{success} = $vals->{success};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_equals_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^0$/ && do{                                                                                if ($ftype == TType::BOOL) {
                                                                                  $xfer += $input->readBool(\$self->{success});
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_equals_result');
                                                                            if (defined $self->{success}) {
                                                                              $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
                                                                              $xfer += $output->writeBool($self->{success});
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getConfidence_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_getConfidence_args->mk_accessors( qw( entityId ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{entityId} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{entityId}) {
                                                                                $self->{entityId} = $vals->{entityId};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getConfidence_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^1$/ && do{                                                                                if ($ftype == TType::I64) {
                                                                                  $xfer += $input->readI64(\$self->{entityId});
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getConfidence_args');
                                                                            if (defined $self->{entityId}) {
                                                                              $xfer += $output->writeFieldBegin('entityId', TType::I64, 1);
                                                                              $xfer += $output->writeI64($self->{entityId});
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getConfidence_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_getConfidence_result->mk_accessors( qw( success ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{success} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{success}) {
                                                                                $self->{success} = $vals->{success};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getConfidence_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^0$/ && do{                                                                                if ($ftype == TType::DOUBLE) {
                                                                                  $xfer += $input->readDouble(\$self->{success});
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getConfidence_result');
                                                                            if (defined $self->{success}) {
                                                                              $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                                                              $xfer += $output->writeDouble($self->{success});
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getEntityIdDistribution_args;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getEntityIdDistribution_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getEntityIdDistribution_args');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getEntityIdDistribution_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_getEntityIdDistribution_result->mk_accessors( qw( success ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{success} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{success}) {
                                                                                $self->{success} = $vals->{success};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getEntityIdDistribution_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^0$/ && do{                                                                                if ($ftype == TType::MAP) {
                                                                                  {
                                                                                    my $_size766 = 0;
                                                                                    $self->{success} = {};
                                                                                    my $_ktype767 = 0;
                                                                                    my $_vtype768 = 0;
                                                                                    $xfer += $input->readMapBegin(\$_ktype767, \$_vtype768, \$_size766);
                                                                                    for (my $_i770 = 0; $_i770 < $_size766; ++$_i770)
                                                                                    {
                                                                                      my $key771 = 0;
                                                                                      my $val772 = 0.0;
                                                                                      $xfer += $input->readI64(\$key771);
                                                                                      $xfer += $input->readDouble(\$val772);
                                                                                      $self->{success}->{$key771} = $val772;
                                                                                    }
                                                                                    $xfer += $input->readMapEnd();
                                                                                  }
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getEntityIdDistribution_result');
                                                                            if (defined $self->{success}) {
                                                                              $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
                                                                              {
                                                                                $xfer += $output->writeMapBegin(TType::I64, TType::DOUBLE, scalar(keys %{$self->{success}}));
                                                                                {
                                                                                  while( my ($kiter773,$viter774) = each %{$self->{success}}) 
                                                                                  {
                                                                                    $xfer += $output->writeI64($kiter773);
                                                                                    $xfer += $output->writeDouble($viter774);
                                                                                  }
                                                                                }
                                                                                $xfer += $output->writeMapEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getEntityType_args;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getEntityType_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getEntityType_args');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getEntityType_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_getEntityType_result->mk_accessors( qw( success ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{success} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{success}) {
                                                                                $self->{success} = $vals->{success};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getEntityType_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^0$/ && do{                                                                                if ($ftype == TType::STRUCT) {
                                                                                  $self->{success} = new thrift::adept::common::Type();
                                                                                  $xfer += $self->{success}->read($input);
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getEntityType_result');
                                                                            if (defined $self->{success}) {
                                                                              $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                                                              $xfer += $self->{success}->write($output);
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getMentionType_args;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getMentionType_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getMentionType_args');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getMentionType_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_getMentionType_result->mk_accessors( qw( success ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{success} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{success}) {
                                                                                $self->{success} = $vals->{success};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getMentionType_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^0$/ && do{                                                                                if ($ftype == TType::STRUCT) {
                                                                                  $self->{success} = new thrift::adept::common::Type();
                                                                                  $xfer += $self->{success}->read($input);
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getMentionType_result');
                                                                            if (defined $self->{success}) {
                                                                              $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                                                              $xfer += $self->{success}->write($output);
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getSequenceId_args;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getSequenceId_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getSequenceId_args');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_getSequenceId_result;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_getSequenceId_result->mk_accessors( qw( success ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{success} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{success}) {
                                                                                $self->{success} = $vals->{success};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_getSequenceId_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^0$/ && do{                                                                                if ($ftype == TType::I64) {
                                                                                  $xfer += $input->readI64(\$self->{success});
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_getSequenceId_result');
                                                                            if (defined $self->{success}) {
                                                                              $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                                                                              $xfer += $output->writeI64($self->{success});
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_setEntityIdDistribution_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_setEntityIdDistribution_args->mk_accessors( qw( entityIdDistribution ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{entityIdDistribution} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{entityIdDistribution}) {
                                                                                $self->{entityIdDistribution} = $vals->{entityIdDistribution};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_setEntityIdDistribution_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^1$/ && do{                                                                                if ($ftype == TType::MAP) {
                                                                                  {
                                                                                    my $_size775 = 0;
                                                                                    $self->{entityIdDistribution} = {};
                                                                                    my $_ktype776 = 0;
                                                                                    my $_vtype777 = 0;
                                                                                    $xfer += $input->readMapBegin(\$_ktype776, \$_vtype777, \$_size775);
                                                                                    for (my $_i779 = 0; $_i779 < $_size775; ++$_i779)
                                                                                    {
                                                                                      my $key780 = 0;
                                                                                      my $val781 = 0.0;
                                                                                      $xfer += $input->readI64(\$key780);
                                                                                      $xfer += $input->readDouble(\$val781);
                                                                                      $self->{entityIdDistribution}->{$key780} = $val781;
                                                                                    }
                                                                                    $xfer += $input->readMapEnd();
                                                                                  }
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_setEntityIdDistribution_args');
                                                                            if (defined $self->{entityIdDistribution}) {
                                                                              $xfer += $output->writeFieldBegin('entityIdDistribution', TType::MAP, 1);
                                                                              {
                                                                                $xfer += $output->writeMapBegin(TType::I64, TType::DOUBLE, scalar(keys %{$self->{entityIdDistribution}}));
                                                                                {
                                                                                  while( my ($kiter782,$viter783) = each %{$self->{entityIdDistribution}}) 
                                                                                  {
                                                                                    $xfer += $output->writeI64($kiter782);
                                                                                    $xfer += $output->writeDouble($viter783);
                                                                                  }
                                                                                }
                                                                                $xfer += $output->writeMapEnd();
                                                                              }
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_setEntityIdDistribution_result;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_setEntityIdDistribution_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_setEntityIdDistribution_result');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_setEntityType_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_setEntityType_args->mk_accessors( qw( entityType ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{entityType} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{entityType}) {
                                                                                $self->{entityType} = $vals->{entityType};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_setEntityType_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^1$/ && do{                                                                                if ($ftype == TType::STRUCT) {
                                                                                  $self->{entityType} = new thrift::adept::common::Type();
                                                                                  $xfer += $self->{entityType}->read($input);
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_setEntityType_args');
                                                                            if (defined $self->{entityType}) {
                                                                              $xfer += $output->writeFieldBegin('entityType', TType::STRUCT, 1);
                                                                              $xfer += $self->{entityType}->write($output);
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_setEntityType_result;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_setEntityType_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_setEntityType_result');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_setMentionType_args;
use base qw(Class::Accessor);
thrift::adept::common::EntityMentionService_setMentionType_args->mk_accessors( qw( mentionType ) );

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            $self->{mentionType} = undef;
                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                              if (defined $vals->{mentionType}) {
                                                                                $self->{mentionType} = $vals->{mentionType};
                                                                              }
                                                                            }
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_setMentionType_args';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                /^1$/ && do{                                                                                if ($ftype == TType::STRUCT) {
                                                                                  $self->{mentionType} = new thrift::adept::common::Type();
                                                                                  $xfer += $self->{mentionType}->read($input);
                                                                                } else {
                                                                                  $xfer += $input->skip($ftype);
                                                                                }
                                                                                last; };
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_setMentionType_args');
                                                                            if (defined $self->{mentionType}) {
                                                                              $xfer += $output->writeFieldBegin('mentionType', TType::STRUCT, 1);
                                                                              $xfer += $self->{mentionType}->write($output);
                                                                              $xfer += $output->writeFieldEnd();
                                                                            }
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionService_setMentionType_result;
use base qw(Class::Accessor);

sub new {
                                                                            my $classname = shift;
                                                                            my $self      = {};
                                                                            my $vals      = shift || {};
                                                                            return bless ($self, $classname);
}

sub getName {
                                                                            return 'EntityMentionService_setMentionType_result';
                                                                          }

sub read {
                                                                            my ($self, $input) = @_;
                                                                            my $xfer  = 0;
                                                                            my $fname;
                                                                            my $ftype = 0;
                                                                            my $fid   = 0;
                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                            while (1) 
                                                                            {
                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                              if ($ftype == TType::STOP) {
                                                                                last;
                                                                              }
                                                                              SWITCH: for($fid)
                                                                              {
                                                                                  $xfer += $input->skip($ftype);
                                                                              }
                                                                              $xfer += $input->readFieldEnd();
                                                                            }
                                                                            $xfer += $input->readStructEnd();
                                                                            return $xfer;
                                                                          }

sub write {
                                                                            my ($self, $output) = @_;
                                                                            my $xfer   = 0;
                                                                            $xfer += $output->writeStructBegin('EntityMentionService_setMentionType_result');
                                                                            $xfer += $output->writeFieldStop();
                                                                            $xfer += $output->writeStructEnd();
                                                                            return $xfer;
                                                                          }

package thrift::adept::common::EntityMentionServiceIf;

use strict;
use base qw(thrift::adept::common::ChunkServiceIf);

sub addEntityConfidencePair{
  my $self = shift;
  my $entityId = shift;
  my $confidence = shift;

  die 'implement interface';
}

sub equals{
  my $self = shift;
  my $obj = shift;

  die 'implement interface';
}

sub getConfidence{
  my $self = shift;
  my $entityId = shift;

  die 'implement interface';
}

sub getEntityIdDistribution{
  my $self = shift;

  die 'implement interface';
}

sub getEntityType{
  my $self = shift;

  die 'implement interface';
}

sub getMentionType{
  my $self = shift;

  die 'implement interface';
}

sub getSequenceId{
  my $self = shift;

  die 'implement interface';
}

sub setEntityIdDistribution{
  my $self = shift;
  my $entityIdDistribution = shift;

  die 'implement interface';
}

sub setEntityType{
  my $self = shift;
  my $entityType = shift;

  die 'implement interface';
}

sub setMentionType{
  my $self = shift;
  my $mentionType = shift;

  die 'implement interface';
}

package thrift::adept::common::EntityMentionServiceRest;

use strict;
use base qw(thrift::adept::common::ChunkServiceRest);

sub addEntityConfidencePair{
                                                                            my ($self, $request) = @_;

                                                                            my $entityId = ($request->{'entityId'}) ? $request->{'entityId'} : undef;
                                                                            my $confidence = ($request->{'confidence'}) ? $request->{'confidence'} : undef;
                                                                            return $self->{impl}->addEntityConfidencePair($entityId, $confidence);
                                                                          }

sub equals{
                                                                            my ($self, $request) = @_;

                                                                            my $obj = ($request->{'obj'}) ? $request->{'obj'} : undef;
                                                                            return $self->{impl}->equals($obj);
                                                                          }

sub getConfidence{
                                                                            my ($self, $request) = @_;

                                                                            my $entityId = ($request->{'entityId'}) ? $request->{'entityId'} : undef;
                                                                            return $self->{impl}->getConfidence($entityId);
                                                                          }

sub getEntityIdDistribution{
                                                                            my ($self, $request) = @_;

                                                                            return $self->{impl}->getEntityIdDistribution();
                                                                          }

sub getEntityType{
                                                                            my ($self, $request) = @_;

                                                                            return $self->{impl}->getEntityType();
                                                                          }

sub getMentionType{
                                                                            my ($self, $request) = @_;

                                                                            return $self->{impl}->getMentionType();
                                                                          }

sub getSequenceId{
                                                                            my ($self, $request) = @_;

                                                                            return $self->{impl}->getSequenceId();
                                                                          }

sub setEntityIdDistribution{
                                                                            my ($self, $request) = @_;

                                                                            my $entityIdDistribution = ($request->{'entityIdDistribution'}) ? $request->{'entityIdDistribution'} : undef;
                                                                            return $self->{impl}->setEntityIdDistribution($entityIdDistribution);
                                                                          }

sub setEntityType{
                                                                            my ($self, $request) = @_;

                                                                            my $entityType = ($request->{'entityType'}) ? $request->{'entityType'} : undef;
                                                                            return $self->{impl}->setEntityType($entityType);
                                                                          }

sub setMentionType{
                                                                            my ($self, $request) = @_;

                                                                            my $mentionType = ($request->{'mentionType'}) ? $request->{'mentionType'} : undef;
                                                                            return $self->{impl}->setMentionType($mentionType);
                                                                          }

package thrift::adept::common::EntityMentionServiceClient;

use base qw(thrift::adept::common::ChunkServiceClient);
use base qw(thrift::adept::common::EntityMentionServiceIf);
sub new {
                                                                            my ($classname, $input, $output) = @_;
                                                                            my $self      = {};
                                                                            $self = $classname->SUPER::new($input, $output);
                                                                            return bless($self,$classname);
}

sub addEntityConfidencePair{
  my $self = shift;
  my $entityId = shift;
  my $confidence = shift;

                                                                                                                                                        $self->send_addEntityConfidencePair($entityId, $confidence);
                                                                            $self->recv_addEntityConfidencePair();
}

sub send_addEntityConfidencePair{
  my $self = shift;
  my $entityId = shift;
  my $confidence = shift;

                                                                            $self->{output}->writeMessageBegin('addEntityConfidencePair', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_addEntityConfidencePair_args();
                                                                            $args->{entityId} = $entityId;
                                                                            $args->{confidence} = $confidence;
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_addEntityConfidencePair{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_addEntityConfidencePair_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            return;
}
sub equals{
  my $self = shift;
  my $obj = shift;

                                                                                                                                                        $self->send_equals($obj);
                                                                            return $self->recv_equals();
}

sub send_equals{
  my $self = shift;
  my $obj = shift;

                                                                            $self->{output}->writeMessageBegin('equals', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_equals_args();
                                                                            $args->{obj} = $obj;
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_equals{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_equals_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            if (defined $result->{success} ) {
                                                                              return $result->{success};
                                                                            }
                                                                            die "equals failed: unknown result";
}
sub getConfidence{
  my $self = shift;
  my $entityId = shift;

                                                                                                                                                        $self->send_getConfidence($entityId);
                                                                            return $self->recv_getConfidence();
}

sub send_getConfidence{
  my $self = shift;
  my $entityId = shift;

                                                                            $self->{output}->writeMessageBegin('getConfidence', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_getConfidence_args();
                                                                            $args->{entityId} = $entityId;
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getConfidence{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_getConfidence_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            if (defined $result->{success} ) {
                                                                              return $result->{success};
                                                                            }
                                                                            die "getConfidence failed: unknown result";
}
sub getEntityIdDistribution{
  my $self = shift;

                                                                                                                                                        $self->send_getEntityIdDistribution();
                                                                            return $self->recv_getEntityIdDistribution();
}

sub send_getEntityIdDistribution{
  my $self = shift;

                                                                            $self->{output}->writeMessageBegin('getEntityIdDistribution', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_getEntityIdDistribution_args();
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getEntityIdDistribution{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_getEntityIdDistribution_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            if (defined $result->{success} ) {
                                                                              return $result->{success};
                                                                            }
                                                                            die "getEntityIdDistribution failed: unknown result";
}
sub getEntityType{
  my $self = shift;

                                                                                                                                                        $self->send_getEntityType();
                                                                            return $self->recv_getEntityType();
}

sub send_getEntityType{
  my $self = shift;

                                                                            $self->{output}->writeMessageBegin('getEntityType', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_getEntityType_args();
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getEntityType{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_getEntityType_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            if (defined $result->{success} ) {
                                                                              return $result->{success};
                                                                            }
                                                                            die "getEntityType failed: unknown result";
}
sub getMentionType{
  my $self = shift;

                                                                                                                                                        $self->send_getMentionType();
                                                                            return $self->recv_getMentionType();
}

sub send_getMentionType{
  my $self = shift;

                                                                            $self->{output}->writeMessageBegin('getMentionType', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_getMentionType_args();
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getMentionType{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_getMentionType_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            if (defined $result->{success} ) {
                                                                              return $result->{success};
                                                                            }
                                                                            die "getMentionType failed: unknown result";
}
sub getSequenceId{
  my $self = shift;

                                                                                                                                                        $self->send_getSequenceId();
                                                                            return $self->recv_getSequenceId();
}

sub send_getSequenceId{
  my $self = shift;

                                                                            $self->{output}->writeMessageBegin('getSequenceId', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_getSequenceId_args();
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getSequenceId{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_getSequenceId_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            if (defined $result->{success} ) {
                                                                              return $result->{success};
                                                                            }
                                                                            die "getSequenceId failed: unknown result";
}
sub setEntityIdDistribution{
  my $self = shift;
  my $entityIdDistribution = shift;

                                                                                                                                                        $self->send_setEntityIdDistribution($entityIdDistribution);
                                                                            $self->recv_setEntityIdDistribution();
}

sub send_setEntityIdDistribution{
  my $self = shift;
  my $entityIdDistribution = shift;

                                                                            $self->{output}->writeMessageBegin('setEntityIdDistribution', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_setEntityIdDistribution_args();
                                                                            $args->{entityIdDistribution} = $entityIdDistribution;
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_setEntityIdDistribution{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_setEntityIdDistribution_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            return;
}
sub setEntityType{
  my $self = shift;
  my $entityType = shift;

                                                                                                                                                        $self->send_setEntityType($entityType);
                                                                            $self->recv_setEntityType();
}

sub send_setEntityType{
  my $self = shift;
  my $entityType = shift;

                                                                            $self->{output}->writeMessageBegin('setEntityType', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_setEntityType_args();
                                                                            $args->{entityType} = $entityType;
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_setEntityType{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_setEntityType_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            return;
}
sub setMentionType{
  my $self = shift;
  my $mentionType = shift;

                                                                                                                                                        $self->send_setMentionType($mentionType);
                                                                            $self->recv_setMentionType();
}

sub send_setMentionType{
  my $self = shift;
  my $mentionType = shift;

                                                                            $self->{output}->writeMessageBegin('setMentionType', TMessageType::CALL, $self->{seqid});
                                                                            my $args = new thrift::adept::common::EntityMentionService_setMentionType_args();
                                                                            $args->{mentionType} = $mentionType;
                                                                            $args->write($self->{output});
                                                                            $self->{output}->writeMessageEnd();
                                                                            $self->{output}->getTransport()->flush();
}

sub recv_setMentionType{
  my $self = shift;

                                                                            my $rseqid = 0;
                                                                            my $fname;
                                                                            my $mtype = 0;

                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                              my $x = new TApplicationException();
                                                                              $x->read($self->{input});
                                                                              $self->{input}->readMessageEnd();
                                                                              die $x;
                                                                            }
                                                                            my $result = new thrift::adept::common::EntityMentionService_setMentionType_result();
                                                                            $result->read($self->{input});
                                                                            $self->{input}->readMessageEnd();

                                                                            return;
}
package thrift::adept::common::EntityMentionServiceProcessor;

use strict;
use base qw(thrift::adept::common::ChunkServiceProcessor);

sub process {
                                                                              my ($self, $input, $output) = @_;
                                                                              my $rseqid = 0;
                                                                              my $fname  = undef;
                                                                              my $mtype  = 0;

                                                                              $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                              my $methodname = 'process_'.$fname;
                                                                              if (!$self->can($methodname)) {
                                                                                $input->skip(TType::STRUCT);
                                                                                $input->readMessageEnd();
                                                                                my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                                $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                                $x->write($output);
                                                                                $output->writeMessageEnd();
                                                                                $output->getTransport()->flush();
                                                                                return;
                                                                              }
                                                                              $self->$methodname($rseqid, $input, $output);
                                                                              return 1;
}

sub process_addEntityConfidencePair {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_addEntityConfidencePair_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_addEntityConfidencePair_result();
                                                                              $self->{handler}->addEntityConfidencePair($args->entityId, $args->confidence);
                                                                              $output->writeMessageBegin('addEntityConfidencePair', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_equals {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_equals_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_equals_result();
                                                                              $result->{success} = $self->{handler}->equals($args->obj);
                                                                              $output->writeMessageBegin('equals', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_getConfidence {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_getConfidence_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_getConfidence_result();
                                                                              $result->{success} = $self->{handler}->getConfidence($args->entityId);
                                                                              $output->writeMessageBegin('getConfidence', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_getEntityIdDistribution {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_getEntityIdDistribution_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_getEntityIdDistribution_result();
                                                                              $result->{success} = $self->{handler}->getEntityIdDistribution();
                                                                              $output->writeMessageBegin('getEntityIdDistribution', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_getEntityType {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_getEntityType_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_getEntityType_result();
                                                                              $result->{success} = $self->{handler}->getEntityType();
                                                                              $output->writeMessageBegin('getEntityType', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_getMentionType {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_getMentionType_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_getMentionType_result();
                                                                              $result->{success} = $self->{handler}->getMentionType();
                                                                              $output->writeMessageBegin('getMentionType', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_getSequenceId {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_getSequenceId_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_getSequenceId_result();
                                                                              $result->{success} = $self->{handler}->getSequenceId();
                                                                              $output->writeMessageBegin('getSequenceId', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_setEntityIdDistribution {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_setEntityIdDistribution_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_setEntityIdDistribution_result();
                                                                              $self->{handler}->setEntityIdDistribution($args->entityIdDistribution);
                                                                              $output->writeMessageBegin('setEntityIdDistribution', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_setEntityType {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_setEntityType_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_setEntityType_result();
                                                                              $self->{handler}->setEntityType($args->entityType);
                                                                              $output->writeMessageBegin('setEntityType', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

sub process_setMentionType {
                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                              my $args = new thrift::adept::common::EntityMentionService_setMentionType_args();
                                                                              $args->read($input);
                                                                              $input->readMessageEnd();
                                                                              my $result = new thrift::adept::common::EntityMentionService_setMentionType_result();
                                                                              $self->{handler}->setMentionType($args->mentionType);
                                                                              $output->writeMessageBegin('setMentionType', TMessageType::REPLY, $seqid);
                                                                              $result->write($output);
                                                                              $output->writeMessageEnd();
                                                                              $output->getTransport()->flush();
}

1;