#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ItemService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::SentenceSimilarityService_getSentence1_args;
use base qw(Class::Accessor);

sub new {
                                      my $classname = shift;
                                      my $self      = {};
                                      my $vals      = shift || {};
                                      return bless ($self, $classname);
}

sub getName {
                                      return 'SentenceSimilarityService_getSentence1_args';
                                    }

sub read {
                                      my ($self, $input) = @_;
                                      my $xfer  = 0;
                                      my $fname;
                                      my $ftype = 0;
                                      my $fid   = 0;
                                      $xfer += $input->readStructBegin(\$fname);
                                      while (1) 
                                      {
                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                        if ($ftype == TType::STOP) {
                                          last;
                                        }
                                        SWITCH: for($fid)
                                        {
                                            $xfer += $input->skip($ftype);
                                        }
                                        $xfer += $input->readFieldEnd();
                                      }
                                      $xfer += $input->readStructEnd();
                                      return $xfer;
                                    }

sub write {
                                      my ($self, $output) = @_;
                                      my $xfer   = 0;
                                      $xfer += $output->writeStructBegin('SentenceSimilarityService_getSentence1_args');
                                      $xfer += $output->writeFieldStop();
                                      $xfer += $output->writeStructEnd();
                                      return $xfer;
                                    }

package thrift::adept::common::SentenceSimilarityService_getSentence1_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceSimilarityService_getSentence1_result->mk_accessors( qw( success ) );

sub new {
                                      my $classname = shift;
                                      my $self      = {};
                                      my $vals      = shift || {};
                                      $self->{success} = undef;
                                      if (UNIVERSAL::isa($vals,'HASH')) {
                                        if (defined $vals->{success}) {
                                          $self->{success} = $vals->{success};
                                        }
                                      }
                                      return bless ($self, $classname);
}

sub getName {
                                      return 'SentenceSimilarityService_getSentence1_result';
                                    }

sub read {
                                      my ($self, $input) = @_;
                                      my $xfer  = 0;
                                      my $fname;
                                      my $ftype = 0;
                                      my $fid   = 0;
                                      $xfer += $input->readStructBegin(\$fname);
                                      while (1) 
                                      {
                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                        if ($ftype == TType::STOP) {
                                          last;
                                        }
                                        SWITCH: for($fid)
                                        {
                                          /^0$/ && do{                                          if ($ftype == TType::STRUCT) {
                                            $self->{success} = new thrift::adept::common::Sentence();
                                            $xfer += $self->{success}->read($input);
                                          } else {
                                            $xfer += $input->skip($ftype);
                                          }
                                          last; };
                                            $xfer += $input->skip($ftype);
                                        }
                                        $xfer += $input->readFieldEnd();
                                      }
                                      $xfer += $input->readStructEnd();
                                      return $xfer;
                                    }

sub write {
                                      my ($self, $output) = @_;
                                      my $xfer   = 0;
                                      $xfer += $output->writeStructBegin('SentenceSimilarityService_getSentence1_result');
                                      if (defined $self->{success}) {
                                        $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                        $xfer += $self->{success}->write($output);
                                        $xfer += $output->writeFieldEnd();
                                      }
                                      $xfer += $output->writeFieldStop();
                                      $xfer += $output->writeStructEnd();
                                      return $xfer;
                                    }

package thrift::adept::common::SentenceSimilarityService_getSentence2_args;
use base qw(Class::Accessor);

sub new {
                                      my $classname = shift;
                                      my $self      = {};
                                      my $vals      = shift || {};
                                      return bless ($self, $classname);
}

sub getName {
                                      return 'SentenceSimilarityService_getSentence2_args';
                                    }

sub read {
                                      my ($self, $input) = @_;
                                      my $xfer  = 0;
                                      my $fname;
                                      my $ftype = 0;
                                      my $fid   = 0;
                                      $xfer += $input->readStructBegin(\$fname);
                                      while (1) 
                                      {
                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                        if ($ftype == TType::STOP) {
                                          last;
                                        }
                                        SWITCH: for($fid)
                                        {
                                            $xfer += $input->skip($ftype);
                                        }
                                        $xfer += $input->readFieldEnd();
                                      }
                                      $xfer += $input->readStructEnd();
                                      return $xfer;
                                    }

sub write {
                                      my ($self, $output) = @_;
                                      my $xfer   = 0;
                                      $xfer += $output->writeStructBegin('SentenceSimilarityService_getSentence2_args');
                                      $xfer += $output->writeFieldStop();
                                      $xfer += $output->writeStructEnd();
                                      return $xfer;
                                    }

package thrift::adept::common::SentenceSimilarityService_getSentence2_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceSimilarityService_getSentence2_result->mk_accessors( qw( success ) );

sub new {
                                      my $classname = shift;
                                      my $self      = {};
                                      my $vals      = shift || {};
                                      $self->{success} = undef;
                                      if (UNIVERSAL::isa($vals,'HASH')) {
                                        if (defined $vals->{success}) {
                                          $self->{success} = $vals->{success};
                                        }
                                      }
                                      return bless ($self, $classname);
}

sub getName {
                                      return 'SentenceSimilarityService_getSentence2_result';
                                    }

sub read {
                                      my ($self, $input) = @_;
                                      my $xfer  = 0;
                                      my $fname;
                                      my $ftype = 0;
                                      my $fid   = 0;
                                      $xfer += $input->readStructBegin(\$fname);
                                      while (1) 
                                      {
                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                        if ($ftype == TType::STOP) {
                                          last;
                                        }
                                        SWITCH: for($fid)
                                        {
                                          /^0$/ && do{                                          if ($ftype == TType::STRUCT) {
                                            $self->{success} = new thrift::adept::common::Sentence();
                                            $xfer += $self->{success}->read($input);
                                          } else {
                                            $xfer += $input->skip($ftype);
                                          }
                                          last; };
                                            $xfer += $input->skip($ftype);
                                        }
                                        $xfer += $input->readFieldEnd();
                                      }
                                      $xfer += $input->readStructEnd();
                                      return $xfer;
                                    }

sub write {
                                      my ($self, $output) = @_;
                                      my $xfer   = 0;
                                      $xfer += $output->writeStructBegin('SentenceSimilarityService_getSentence2_result');
                                      if (defined $self->{success}) {
                                        $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                        $xfer += $self->{success}->write($output);
                                        $xfer += $output->writeFieldEnd();
                                      }
                                      $xfer += $output->writeFieldStop();
                                      $xfer += $output->writeStructEnd();
                                      return $xfer;
                                    }

package thrift::adept::common::SentenceSimilarityService_getSimilarity_args;
use base qw(Class::Accessor);

sub new {
                                      my $classname = shift;
                                      my $self      = {};
                                      my $vals      = shift || {};
                                      return bless ($self, $classname);
}

sub getName {
                                      return 'SentenceSimilarityService_getSimilarity_args';
                                    }

sub read {
                                      my ($self, $input) = @_;
                                      my $xfer  = 0;
                                      my $fname;
                                      my $ftype = 0;
                                      my $fid   = 0;
                                      $xfer += $input->readStructBegin(\$fname);
                                      while (1) 
                                      {
                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                        if ($ftype == TType::STOP) {
                                          last;
                                        }
                                        SWITCH: for($fid)
                                        {
                                            $xfer += $input->skip($ftype);
                                        }
                                        $xfer += $input->readFieldEnd();
                                      }
                                      $xfer += $input->readStructEnd();
                                      return $xfer;
                                    }

sub write {
                                      my ($self, $output) = @_;
                                      my $xfer   = 0;
                                      $xfer += $output->writeStructBegin('SentenceSimilarityService_getSimilarity_args');
                                      $xfer += $output->writeFieldStop();
                                      $xfer += $output->writeStructEnd();
                                      return $xfer;
                                    }

package thrift::adept::common::SentenceSimilarityService_getSimilarity_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceSimilarityService_getSimilarity_result->mk_accessors( qw( success ) );

sub new {
                                      my $classname = shift;
                                      my $self      = {};
                                      my $vals      = shift || {};
                                      $self->{success} = undef;
                                      if (UNIVERSAL::isa($vals,'HASH')) {
                                        if (defined $vals->{success}) {
                                          $self->{success} = $vals->{success};
                                        }
                                      }
                                      return bless ($self, $classname);
}

sub getName {
                                      return 'SentenceSimilarityService_getSimilarity_result';
                                    }

sub read {
                                      my ($self, $input) = @_;
                                      my $xfer  = 0;
                                      my $fname;
                                      my $ftype = 0;
                                      my $fid   = 0;
                                      $xfer += $input->readStructBegin(\$fname);
                                      while (1) 
                                      {
                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                        if ($ftype == TType::STOP) {
                                          last;
                                        }
                                        SWITCH: for($fid)
                                        {
                                          /^0$/ && do{                                          if ($ftype == TType::DOUBLE) {
                                            $xfer += $input->readDouble(\$self->{success});
                                          } else {
                                            $xfer += $input->skip($ftype);
                                          }
                                          last; };
                                            $xfer += $input->skip($ftype);
                                        }
                                        $xfer += $input->readFieldEnd();
                                      }
                                      $xfer += $input->readStructEnd();
                                      return $xfer;
                                    }

sub write {
                                      my ($self, $output) = @_;
                                      my $xfer   = 0;
                                      $xfer += $output->writeStructBegin('SentenceSimilarityService_getSimilarity_result');
                                      if (defined $self->{success}) {
                                        $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                        $xfer += $output->writeDouble($self->{success});
                                        $xfer += $output->writeFieldEnd();
                                      }
                                      $xfer += $output->writeFieldStop();
                                      $xfer += $output->writeStructEnd();
                                      return $xfer;
                                    }

package thrift::adept::common::SentenceSimilarityServiceIf;

use strict;
use base qw(thrift::adept::common::ItemServiceIf);

sub getSentence1{
  my $self = shift;

  die 'implement interface';
}

sub getSentence2{
  my $self = shift;

  die 'implement interface';
}

sub getSimilarity{
  my $self = shift;

  die 'implement interface';
}

package thrift::adept::common::SentenceSimilarityServiceRest;

use strict;
use base qw(thrift::adept::common::ItemServiceRest);

sub getSentence1{
                                      my ($self, $request) = @_;

                                      return $self->{impl}->getSentence1();
                                    }

sub getSentence2{
                                      my ($self, $request) = @_;

                                      return $self->{impl}->getSentence2();
                                    }

sub getSimilarity{
                                      my ($self, $request) = @_;

                                      return $self->{impl}->getSimilarity();
                                    }

package thrift::adept::common::SentenceSimilarityServiceClient;

use base qw(thrift::adept::common::ItemServiceClient);
use base qw(thrift::adept::common::SentenceSimilarityServiceIf);
sub new {
                                      my ($classname, $input, $output) = @_;
                                      my $self      = {};
                                      $self = $classname->SUPER::new($input, $output);
                                      return bless($self,$classname);
}

sub getSentence1{
  my $self = shift;

                                                                            $self->send_getSentence1();
                                      return $self->recv_getSentence1();
}

sub send_getSentence1{
  my $self = shift;

                                      $self->{output}->writeMessageBegin('getSentence1', TMessageType::CALL, $self->{seqid});
                                      my $args = new thrift::adept::common::SentenceSimilarityService_getSentence1_args();
                                      $args->write($self->{output});
                                      $self->{output}->writeMessageEnd();
                                      $self->{output}->getTransport()->flush();
}

sub recv_getSentence1{
  my $self = shift;

                                      my $rseqid = 0;
                                      my $fname;
                                      my $mtype = 0;

                                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                      if ($mtype == TMessageType::EXCEPTION) {
                                        my $x = new TApplicationException();
                                        $x->read($self->{input});
                                        $self->{input}->readMessageEnd();
                                        die $x;
                                      }
                                      my $result = new thrift::adept::common::SentenceSimilarityService_getSentence1_result();
                                      $result->read($self->{input});
                                      $self->{input}->readMessageEnd();

                                      if (defined $result->{success} ) {
                                        return $result->{success};
                                      }
                                      die "getSentence1 failed: unknown result";
}
sub getSentence2{
  my $self = shift;

                                                                            $self->send_getSentence2();
                                      return $self->recv_getSentence2();
}

sub send_getSentence2{
  my $self = shift;

                                      $self->{output}->writeMessageBegin('getSentence2', TMessageType::CALL, $self->{seqid});
                                      my $args = new thrift::adept::common::SentenceSimilarityService_getSentence2_args();
                                      $args->write($self->{output});
                                      $self->{output}->writeMessageEnd();
                                      $self->{output}->getTransport()->flush();
}

sub recv_getSentence2{
  my $self = shift;

                                      my $rseqid = 0;
                                      my $fname;
                                      my $mtype = 0;

                                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                      if ($mtype == TMessageType::EXCEPTION) {
                                        my $x = new TApplicationException();
                                        $x->read($self->{input});
                                        $self->{input}->readMessageEnd();
                                        die $x;
                                      }
                                      my $result = new thrift::adept::common::SentenceSimilarityService_getSentence2_result();
                                      $result->read($self->{input});
                                      $self->{input}->readMessageEnd();

                                      if (defined $result->{success} ) {
                                        return $result->{success};
                                      }
                                      die "getSentence2 failed: unknown result";
}
sub getSimilarity{
  my $self = shift;

                                                                            $self->send_getSimilarity();
                                      return $self->recv_getSimilarity();
}

sub send_getSimilarity{
  my $self = shift;

                                      $self->{output}->writeMessageBegin('getSimilarity', TMessageType::CALL, $self->{seqid});
                                      my $args = new thrift::adept::common::SentenceSimilarityService_getSimilarity_args();
                                      $args->write($self->{output});
                                      $self->{output}->writeMessageEnd();
                                      $self->{output}->getTransport()->flush();
}

sub recv_getSimilarity{
  my $self = shift;

                                      my $rseqid = 0;
                                      my $fname;
                                      my $mtype = 0;

                                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                      if ($mtype == TMessageType::EXCEPTION) {
                                        my $x = new TApplicationException();
                                        $x->read($self->{input});
                                        $self->{input}->readMessageEnd();
                                        die $x;
                                      }
                                      my $result = new thrift::adept::common::SentenceSimilarityService_getSimilarity_result();
                                      $result->read($self->{input});
                                      $self->{input}->readMessageEnd();

                                      if (defined $result->{success} ) {
                                        return $result->{success};
                                      }
                                      die "getSimilarity failed: unknown result";
}
package thrift::adept::common::SentenceSimilarityServiceProcessor;

use strict;
use base qw(thrift::adept::common::ItemServiceProcessor);

sub process {
                                        my ($self, $input, $output) = @_;
                                        my $rseqid = 0;
                                        my $fname  = undef;
                                        my $mtype  = 0;

                                        $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                        my $methodname = 'process_'.$fname;
                                        if (!$self->can($methodname)) {
                                          $input->skip(TType::STRUCT);
                                          $input->readMessageEnd();
                                          my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                          $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                          $x->write($output);
                                          $output->writeMessageEnd();
                                          $output->getTransport()->flush();
                                          return;
                                        }
                                        $self->$methodname($rseqid, $input, $output);
                                        return 1;
}

sub process_getSentence1 {
                                        my ($self, $seqid, $input, $output) = @_;
                                        my $args = new thrift::adept::common::SentenceSimilarityService_getSentence1_args();
                                        $args->read($input);
                                        $input->readMessageEnd();
                                        my $result = new thrift::adept::common::SentenceSimilarityService_getSentence1_result();
                                        $result->{success} = $self->{handler}->getSentence1();
                                        $output->writeMessageBegin('getSentence1', TMessageType::REPLY, $seqid);
                                        $result->write($output);
                                        $output->writeMessageEnd();
                                        $output->getTransport()->flush();
}

sub process_getSentence2 {
                                        my ($self, $seqid, $input, $output) = @_;
                                        my $args = new thrift::adept::common::SentenceSimilarityService_getSentence2_args();
                                        $args->read($input);
                                        $input->readMessageEnd();
                                        my $result = new thrift::adept::common::SentenceSimilarityService_getSentence2_result();
                                        $result->{success} = $self->{handler}->getSentence2();
                                        $output->writeMessageBegin('getSentence2', TMessageType::REPLY, $seqid);
                                        $result->write($output);
                                        $output->writeMessageEnd();
                                        $output->getTransport()->flush();
}

sub process_getSimilarity {
                                        my ($self, $seqid, $input, $output) = @_;
                                        my $args = new thrift::adept::common::SentenceSimilarityService_getSimilarity_args();
                                        $args->read($input);
                                        $input->readMessageEnd();
                                        my $result = new thrift::adept::common::SentenceSimilarityService_getSimilarity_result();
                                        $result->{success} = $self->{handler}->getSimilarity();
                                        $output->writeMessageBegin('getSimilarity', TMessageType::REPLY, $seqid);
                                        $result->write($output);
                                        $output->writeMessageEnd();
                                        $output->getTransport()->flush();
}

1;