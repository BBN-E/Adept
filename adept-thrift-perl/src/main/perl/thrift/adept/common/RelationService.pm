#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ItemService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::RelationService_addArgument_args;
use base qw(Class::Accessor);
thrift::adept::common::RelationService_addArgument_args->mk_accessors( qw( argument ) );

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            $self->{argument} = undef;
                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                              if (defined $vals->{argument}) {
                                                                $self->{argument} = $vals->{argument};
                                                              }
                                                            }
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_addArgument_args';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                /^1$/ && do{                                                                if ($ftype == TType::STRUCT) {
                                                                  $self->{argument} = new thrift::adept::common::Argument();
                                                                  $xfer += $self->{argument}->read($input);
                                                                } else {
                                                                  $xfer += $input->skip($ftype);
                                                                }
                                                                last; };
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_addArgument_args');
                                                            if (defined $self->{argument}) {
                                                              $xfer += $output->writeFieldBegin('argument', TType::STRUCT, 1);
                                                              $xfer += $self->{argument}->write($output);
                                                              $xfer += $output->writeFieldEnd();
                                                            }
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_addArgument_result;
use base qw(Class::Accessor);
thrift::adept::common::RelationService_addArgument_result->mk_accessors( qw( success ) );

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            $self->{success} = undef;
                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                              if (defined $vals->{success}) {
                                                                $self->{success} = $vals->{success};
                                                              }
                                                            }
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_addArgument_result';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                /^0$/ && do{                                                                if ($ftype == TType::BOOL) {
                                                                  $xfer += $input->readBool(\$self->{success});
                                                                } else {
                                                                  $xfer += $input->skip($ftype);
                                                                }
                                                                last; };
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_addArgument_result');
                                                            if (defined $self->{success}) {
                                                              $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
                                                              $xfer += $output->writeBool($self->{success});
                                                              $xfer += $output->writeFieldEnd();
                                                            }
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_getArguments_args;
use base qw(Class::Accessor);

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_getArguments_args';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_getArguments_args');
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_getArguments_result;
use base qw(Class::Accessor);
thrift::adept::common::RelationService_getArguments_result->mk_accessors( qw( success ) );

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            $self->{success} = undef;
                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                              if (defined $vals->{success}) {
                                                                $self->{success} = $vals->{success};
                                                              }
                                                            }
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_getArguments_result';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                /^0$/ && do{                                                                if ($ftype == TType::LIST) {
                                                                  {
                                                                    my $_size503 = 0;
                                                                    $self->{success} = [];
                                                                    my $_etype506 = 0;
                                                                    $xfer += $input->readListBegin(\$_etype506, \$_size503);
                                                                    for (my $_i507 = 0; $_i507 < $_size503; ++$_i507)
                                                                    {
                                                                      my $elem508 = undef;
                                                                      $elem508 = new thrift::adept::common::Argument();
                                                                      $xfer += $elem508->read($input);
                                                                      push(@{$self->{success}},$elem508);
                                                                    }
                                                                    $xfer += $input->readListEnd();
                                                                  }
                                                                } else {
                                                                  $xfer += $input->skip($ftype);
                                                                }
                                                                last; };
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_getArguments_result');
                                                            if (defined $self->{success}) {
                                                              $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                              {
                                                                $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
                                                                {
                                                                  foreach my $iter509 (@{$self->{success}}) 
                                                                  {
                                                                    $xfer += ${iter509}->write($output);
                                                                  }
                                                                }
                                                                $xfer += $output->writeListEnd();
                                                              }
                                                              $xfer += $output->writeFieldEnd();
                                                            }
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_getConfidence_args;
use base qw(Class::Accessor);

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_getConfidence_args';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_getConfidence_args');
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_getConfidence_result;
use base qw(Class::Accessor);
thrift::adept::common::RelationService_getConfidence_result->mk_accessors( qw( success ) );

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            $self->{success} = undef;
                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                              if (defined $vals->{success}) {
                                                                $self->{success} = $vals->{success};
                                                              }
                                                            }
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_getConfidence_result';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                /^0$/ && do{                                                                if ($ftype == TType::DOUBLE) {
                                                                  $xfer += $input->readDouble(\$self->{success});
                                                                } else {
                                                                  $xfer += $input->skip($ftype);
                                                                }
                                                                last; };
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_getConfidence_result');
                                                            if (defined $self->{success}) {
                                                              $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                                              $xfer += $output->writeDouble($self->{success});
                                                              $xfer += $output->writeFieldEnd();
                                                            }
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_getRelationType_args;
use base qw(Class::Accessor);

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_getRelationType_args';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_getRelationType_args');
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_getRelationType_result;
use base qw(Class::Accessor);
thrift::adept::common::RelationService_getRelationType_result->mk_accessors( qw( success ) );

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            $self->{success} = undef;
                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                              if (defined $vals->{success}) {
                                                                $self->{success} = $vals->{success};
                                                              }
                                                            }
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_getRelationType_result';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                /^0$/ && do{                                                                if ($ftype == TType::STRING) {
                                                                  $xfer += $input->readString(\$self->{success});
                                                                } else {
                                                                  $xfer += $input->skip($ftype);
                                                                }
                                                                last; };
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_getRelationType_result');
                                                            if (defined $self->{success}) {
                                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                              $xfer += $output->writeString($self->{success});
                                                              $xfer += $output->writeFieldEnd();
                                                            }
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_setConfidence_args;
use base qw(Class::Accessor);
thrift::adept::common::RelationService_setConfidence_args->mk_accessors( qw( confidence ) );

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            $self->{confidence} = undef;
                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                              if (defined $vals->{confidence}) {
                                                                $self->{confidence} = $vals->{confidence};
                                                              }
                                                            }
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_setConfidence_args';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                /^1$/ && do{                                                                if ($ftype == TType::DOUBLE) {
                                                                  $xfer += $input->readDouble(\$self->{confidence});
                                                                } else {
                                                                  $xfer += $input->skip($ftype);
                                                                }
                                                                last; };
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_setConfidence_args');
                                                            if (defined $self->{confidence}) {
                                                              $xfer += $output->writeFieldBegin('confidence', TType::DOUBLE, 1);
                                                              $xfer += $output->writeDouble($self->{confidence});
                                                              $xfer += $output->writeFieldEnd();
                                                            }
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationService_setConfidence_result;
use base qw(Class::Accessor);

sub new {
                                                            my $classname = shift;
                                                            my $self      = {};
                                                            my $vals      = shift || {};
                                                            return bless ($self, $classname);
}

sub getName {
                                                            return 'RelationService_setConfidence_result';
                                                          }

sub read {
                                                            my ($self, $input) = @_;
                                                            my $xfer  = 0;
                                                            my $fname;
                                                            my $ftype = 0;
                                                            my $fid   = 0;
                                                            $xfer += $input->readStructBegin(\$fname);
                                                            while (1) 
                                                            {
                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                              if ($ftype == TType::STOP) {
                                                                last;
                                                              }
                                                              SWITCH: for($fid)
                                                              {
                                                                  $xfer += $input->skip($ftype);
                                                              }
                                                              $xfer += $input->readFieldEnd();
                                                            }
                                                            $xfer += $input->readStructEnd();
                                                            return $xfer;
                                                          }

sub write {
                                                            my ($self, $output) = @_;
                                                            my $xfer   = 0;
                                                            $xfer += $output->writeStructBegin('RelationService_setConfidence_result');
                                                            $xfer += $output->writeFieldStop();
                                                            $xfer += $output->writeStructEnd();
                                                            return $xfer;
                                                          }

package thrift::adept::common::RelationServiceIf;

use strict;
use base qw(thrift::adept::common::ItemServiceIf);

sub addArgument{
  my $self = shift;
  my $argument = shift;

  die 'implement interface';
}

sub getArguments{
  my $self = shift;

  die 'implement interface';
}

sub getConfidence{
  my $self = shift;

  die 'implement interface';
}

sub getRelationType{
  my $self = shift;

  die 'implement interface';
}

sub setConfidence{
  my $self = shift;
  my $confidence = shift;

  die 'implement interface';
}

package thrift::adept::common::RelationServiceRest;

use strict;
use base qw(thrift::adept::common::ItemServiceRest);

sub addArgument{
                                                            my ($self, $request) = @_;

                                                            my $argument = ($request->{'argument'}) ? $request->{'argument'} : undef;
                                                            return $self->{impl}->addArgument($argument);
                                                          }

sub getArguments{
                                                            my ($self, $request) = @_;

                                                            return $self->{impl}->getArguments();
                                                          }

sub getConfidence{
                                                            my ($self, $request) = @_;

                                                            return $self->{impl}->getConfidence();
                                                          }

sub getRelationType{
                                                            my ($self, $request) = @_;

                                                            return $self->{impl}->getRelationType();
                                                          }

sub setConfidence{
                                                            my ($self, $request) = @_;

                                                            my $confidence = ($request->{'confidence'}) ? $request->{'confidence'} : undef;
                                                            return $self->{impl}->setConfidence($confidence);
                                                          }

package thrift::adept::common::RelationServiceClient;

use base qw(thrift::adept::common::ItemServiceClient);
use base qw(thrift::adept::common::RelationServiceIf);
sub new {
                                                            my ($classname, $input, $output) = @_;
                                                            my $self      = {};
                                                            $self = $classname->SUPER::new($input, $output);
                                                            return bless($self,$classname);
}

sub addArgument{
  my $self = shift;
  my $argument = shift;

                                                                                                                        $self->send_addArgument($argument);
                                                            return $self->recv_addArgument();
}

sub send_addArgument{
  my $self = shift;
  my $argument = shift;

                                                            $self->{output}->writeMessageBegin('addArgument', TMessageType::CALL, $self->{seqid});
                                                            my $args = new thrift::adept::common::RelationService_addArgument_args();
                                                            $args->{argument} = $argument;
                                                            $args->write($self->{output});
                                                            $self->{output}->writeMessageEnd();
                                                            $self->{output}->getTransport()->flush();
}

sub recv_addArgument{
  my $self = shift;

                                                            my $rseqid = 0;
                                                            my $fname;
                                                            my $mtype = 0;

                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                              my $x = new TApplicationException();
                                                              $x->read($self->{input});
                                                              $self->{input}->readMessageEnd();
                                                              die $x;
                                                            }
                                                            my $result = new thrift::adept::common::RelationService_addArgument_result();
                                                            $result->read($self->{input});
                                                            $self->{input}->readMessageEnd();

                                                            if (defined $result->{success} ) {
                                                              return $result->{success};
                                                            }
                                                            die "addArgument failed: unknown result";
}
sub getArguments{
  my $self = shift;

                                                                                                                        $self->send_getArguments();
                                                            return $self->recv_getArguments();
}

sub send_getArguments{
  my $self = shift;

                                                            $self->{output}->writeMessageBegin('getArguments', TMessageType::CALL, $self->{seqid});
                                                            my $args = new thrift::adept::common::RelationService_getArguments_args();
                                                            $args->write($self->{output});
                                                            $self->{output}->writeMessageEnd();
                                                            $self->{output}->getTransport()->flush();
}

sub recv_getArguments{
  my $self = shift;

                                                            my $rseqid = 0;
                                                            my $fname;
                                                            my $mtype = 0;

                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                              my $x = new TApplicationException();
                                                              $x->read($self->{input});
                                                              $self->{input}->readMessageEnd();
                                                              die $x;
                                                            }
                                                            my $result = new thrift::adept::common::RelationService_getArguments_result();
                                                            $result->read($self->{input});
                                                            $self->{input}->readMessageEnd();

                                                            if (defined $result->{success} ) {
                                                              return $result->{success};
                                                            }
                                                            die "getArguments failed: unknown result";
}
sub getConfidence{
  my $self = shift;

                                                                                                                        $self->send_getConfidence();
                                                            return $self->recv_getConfidence();
}

sub send_getConfidence{
  my $self = shift;

                                                            $self->{output}->writeMessageBegin('getConfidence', TMessageType::CALL, $self->{seqid});
                                                            my $args = new thrift::adept::common::RelationService_getConfidence_args();
                                                            $args->write($self->{output});
                                                            $self->{output}->writeMessageEnd();
                                                            $self->{output}->getTransport()->flush();
}

sub recv_getConfidence{
  my $self = shift;

                                                            my $rseqid = 0;
                                                            my $fname;
                                                            my $mtype = 0;

                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                              my $x = new TApplicationException();
                                                              $x->read($self->{input});
                                                              $self->{input}->readMessageEnd();
                                                              die $x;
                                                            }
                                                            my $result = new thrift::adept::common::RelationService_getConfidence_result();
                                                            $result->read($self->{input});
                                                            $self->{input}->readMessageEnd();

                                                            if (defined $result->{success} ) {
                                                              return $result->{success};
                                                            }
                                                            die "getConfidence failed: unknown result";
}
sub getRelationType{
  my $self = shift;

                                                                                                                        $self->send_getRelationType();
                                                            return $self->recv_getRelationType();
}

sub send_getRelationType{
  my $self = shift;

                                                            $self->{output}->writeMessageBegin('getRelationType', TMessageType::CALL, $self->{seqid});
                                                            my $args = new thrift::adept::common::RelationService_getRelationType_args();
                                                            $args->write($self->{output});
                                                            $self->{output}->writeMessageEnd();
                                                            $self->{output}->getTransport()->flush();
}

sub recv_getRelationType{
  my $self = shift;

                                                            my $rseqid = 0;
                                                            my $fname;
                                                            my $mtype = 0;

                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                              my $x = new TApplicationException();
                                                              $x->read($self->{input});
                                                              $self->{input}->readMessageEnd();
                                                              die $x;
                                                            }
                                                            my $result = new thrift::adept::common::RelationService_getRelationType_result();
                                                            $result->read($self->{input});
                                                            $self->{input}->readMessageEnd();

                                                            if (defined $result->{success} ) {
                                                              return $result->{success};
                                                            }
                                                            die "getRelationType failed: unknown result";
}
sub setConfidence{
  my $self = shift;
  my $confidence = shift;

                                                                                                                        $self->send_setConfidence($confidence);
                                                            $self->recv_setConfidence();
}

sub send_setConfidence{
  my $self = shift;
  my $confidence = shift;

                                                            $self->{output}->writeMessageBegin('setConfidence', TMessageType::CALL, $self->{seqid});
                                                            my $args = new thrift::adept::common::RelationService_setConfidence_args();
                                                            $args->{confidence} = $confidence;
                                                            $args->write($self->{output});
                                                            $self->{output}->writeMessageEnd();
                                                            $self->{output}->getTransport()->flush();
}

sub recv_setConfidence{
  my $self = shift;

                                                            my $rseqid = 0;
                                                            my $fname;
                                                            my $mtype = 0;

                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                              my $x = new TApplicationException();
                                                              $x->read($self->{input});
                                                              $self->{input}->readMessageEnd();
                                                              die $x;
                                                            }
                                                            my $result = new thrift::adept::common::RelationService_setConfidence_result();
                                                            $result->read($self->{input});
                                                            $self->{input}->readMessageEnd();

                                                            return;
}
package thrift::adept::common::RelationServiceProcessor;

use strict;
use base qw(thrift::adept::common::ItemServiceProcessor);

sub process {
                                                              my ($self, $input, $output) = @_;
                                                              my $rseqid = 0;
                                                              my $fname  = undef;
                                                              my $mtype  = 0;

                                                              $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                              my $methodname = 'process_'.$fname;
                                                              if (!$self->can($methodname)) {
                                                                $input->skip(TType::STRUCT);
                                                                $input->readMessageEnd();
                                                                my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                $x->write($output);
                                                                $output->writeMessageEnd();
                                                                $output->getTransport()->flush();
                                                                return;
                                                              }
                                                              $self->$methodname($rseqid, $input, $output);
                                                              return 1;
}

sub process_addArgument {
                                                              my ($self, $seqid, $input, $output) = @_;
                                                              my $args = new thrift::adept::common::RelationService_addArgument_args();
                                                              $args->read($input);
                                                              $input->readMessageEnd();
                                                              my $result = new thrift::adept::common::RelationService_addArgument_result();
                                                              $result->{success} = $self->{handler}->addArgument($args->argument);
                                                              $output->writeMessageBegin('addArgument', TMessageType::REPLY, $seqid);
                                                              $result->write($output);
                                                              $output->writeMessageEnd();
                                                              $output->getTransport()->flush();
}

sub process_getArguments {
                                                              my ($self, $seqid, $input, $output) = @_;
                                                              my $args = new thrift::adept::common::RelationService_getArguments_args();
                                                              $args->read($input);
                                                              $input->readMessageEnd();
                                                              my $result = new thrift::adept::common::RelationService_getArguments_result();
                                                              $result->{success} = $self->{handler}->getArguments();
                                                              $output->writeMessageBegin('getArguments', TMessageType::REPLY, $seqid);
                                                              $result->write($output);
                                                              $output->writeMessageEnd();
                                                              $output->getTransport()->flush();
}

sub process_getConfidence {
                                                              my ($self, $seqid, $input, $output) = @_;
                                                              my $args = new thrift::adept::common::RelationService_getConfidence_args();
                                                              $args->read($input);
                                                              $input->readMessageEnd();
                                                              my $result = new thrift::adept::common::RelationService_getConfidence_result();
                                                              $result->{success} = $self->{handler}->getConfidence();
                                                              $output->writeMessageBegin('getConfidence', TMessageType::REPLY, $seqid);
                                                              $result->write($output);
                                                              $output->writeMessageEnd();
                                                              $output->getTransport()->flush();
}

sub process_getRelationType {
                                                              my ($self, $seqid, $input, $output) = @_;
                                                              my $args = new thrift::adept::common::RelationService_getRelationType_args();
                                                              $args->read($input);
                                                              $input->readMessageEnd();
                                                              my $result = new thrift::adept::common::RelationService_getRelationType_result();
                                                              $result->{success} = $self->{handler}->getRelationType();
                                                              $output->writeMessageBegin('getRelationType', TMessageType::REPLY, $seqid);
                                                              $result->write($output);
                                                              $output->writeMessageEnd();
                                                              $output->getTransport()->flush();
}

sub process_setConfidence {
                                                              my ($self, $seqid, $input, $output) = @_;
                                                              my $args = new thrift::adept::common::RelationService_setConfidence_args();
                                                              $args->read($input);
                                                              $input->readMessageEnd();
                                                              my $result = new thrift::adept::common::RelationService_setConfidence_result();
                                                              $self->{handler}->setConfidence($args->confidence);
                                                              $output->writeMessageBegin('setConfidence', TMessageType::REPLY, $seqid);
                                                              $result->write($output);
                                                              $output->writeMessageEnd();
                                                              $output->getTransport()->flush();
}

1;