#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ChunkService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::SentenceService_getNoveltyConfidence_args;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getNoveltyConfidence_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getNoveltyConfidence_args');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getNoveltyConfidence_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_getNoveltyConfidence_result->mk_accessors( qw( success ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{success} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{success}) {
                                                                                                $self->{success} = $vals->{success};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getNoveltyConfidence_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^0$/ && do{                                                                                                if ($ftype == TType::DOUBLE) {
                                                                                                  $xfer += $input->readDouble(\$self->{success});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getNoveltyConfidence_result');
                                                                                            if (defined $self->{success}) {
                                                                                              $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                                                                              $xfer += $output->writeDouble($self->{success});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getPunctuation_args;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getPunctuation_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getPunctuation_args');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getPunctuation_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_getPunctuation_result->mk_accessors( qw( success ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{success} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{success}) {
                                                                                                $self->{success} = $vals->{success};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getPunctuation_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^0$/ && do{                                                                                                if ($ftype == TType::STRING) {
                                                                                                  $xfer += $input->readString(\$self->{success});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getPunctuation_result');
                                                                                            if (defined $self->{success}) {
                                                                                              $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                                                              $xfer += $output->writeString($self->{success});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getSequenceId_args;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getSequenceId_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getSequenceId_args');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getSequenceId_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_getSequenceId_result->mk_accessors( qw( success ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{success} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{success}) {
                                                                                                $self->{success} = $vals->{success};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getSequenceId_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^0$/ && do{                                                                                                if ($ftype == TType::I64) {
                                                                                                  $xfer += $input->readI64(\$self->{success});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getSequenceId_result');
                                                                                            if (defined $self->{success}) {
                                                                                              $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                                                                                              $xfer += $output->writeI64($self->{success});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getType_args;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getType_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getType_args');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getType_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_getType_result->mk_accessors( qw( success ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{success} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{success}) {
                                                                                                $self->{success} = $vals->{success};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getType_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^0$/ && do{                                                                                                if ($ftype == TType::I32) {
                                                                                                  $xfer += $input->readI32(\$self->{success});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getType_result');
                                                                                            if (defined $self->{success}) {
                                                                                              $xfer += $output->writeFieldBegin('success', TType::I32, 0);
                                                                                              $xfer += $output->writeI32($self->{success});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getUncertaintyConfidence_args;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getUncertaintyConfidence_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getUncertaintyConfidence_args');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_getUncertaintyConfidence_result;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_getUncertaintyConfidence_result->mk_accessors( qw( success ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{success} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{success}) {
                                                                                                $self->{success} = $vals->{success};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_getUncertaintyConfidence_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^0$/ && do{                                                                                                if ($ftype == TType::DOUBLE) {
                                                                                                  $xfer += $input->readDouble(\$self->{success});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_getUncertaintyConfidence_result');
                                                                                            if (defined $self->{success}) {
                                                                                              $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                                                                              $xfer += $output->writeDouble($self->{success});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setNoveltyConfidence_args;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_setNoveltyConfidence_args->mk_accessors( qw( noveltyConfidence ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{noveltyConfidence} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{noveltyConfidence}) {
                                                                                                $self->{noveltyConfidence} = $vals->{noveltyConfidence};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setNoveltyConfidence_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^1$/ && do{                                                                                                if ($ftype == TType::DOUBLE) {
                                                                                                  $xfer += $input->readDouble(\$self->{noveltyConfidence});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setNoveltyConfidence_args');
                                                                                            if (defined $self->{noveltyConfidence}) {
                                                                                              $xfer += $output->writeFieldBegin('noveltyConfidence', TType::DOUBLE, 1);
                                                                                              $xfer += $output->writeDouble($self->{noveltyConfidence});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setNoveltyConfidence_result;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setNoveltyConfidence_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setNoveltyConfidence_result');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setPunctuation_args;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_setPunctuation_args->mk_accessors( qw( punctuation ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{punctuation} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{punctuation}) {
                                                                                                $self->{punctuation} = $vals->{punctuation};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setPunctuation_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^1$/ && do{                                                                                                if ($ftype == TType::STRING) {
                                                                                                  $xfer += $input->readString(\$self->{punctuation});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setPunctuation_args');
                                                                                            if (defined $self->{punctuation}) {
                                                                                              $xfer += $output->writeFieldBegin('punctuation', TType::STRING, 1);
                                                                                              $xfer += $output->writeString($self->{punctuation});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setPunctuation_result;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setPunctuation_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setPunctuation_result');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setType_args;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_setType_args->mk_accessors( qw( type ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{type} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{type}) {
                                                                                                $self->{type} = $vals->{type};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setType_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^1$/ && do{                                                                                                if ($ftype == TType::I32) {
                                                                                                  $xfer += $input->readI32(\$self->{type});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setType_args');
                                                                                            if (defined $self->{type}) {
                                                                                              $xfer += $output->writeFieldBegin('type', TType::I32, 1);
                                                                                              $xfer += $output->writeI32($self->{type});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setType_result;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setType_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setType_result');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setUncertaintyConfidence_args;
use base qw(Class::Accessor);
thrift::adept::common::SentenceService_setUncertaintyConfidence_args->mk_accessors( qw( uncertaintyConfidence ) );

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            $self->{uncertaintyConfidence} = undef;
                                                                                            if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                              if (defined $vals->{uncertaintyConfidence}) {
                                                                                                $self->{uncertaintyConfidence} = $vals->{uncertaintyConfidence};
                                                                                              }
                                                                                            }
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setUncertaintyConfidence_args';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                /^1$/ && do{                                                                                                if ($ftype == TType::DOUBLE) {
                                                                                                  $xfer += $input->readDouble(\$self->{uncertaintyConfidence});
                                                                                                } else {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                                }
                                                                                                last; };
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setUncertaintyConfidence_args');
                                                                                            if (defined $self->{uncertaintyConfidence}) {
                                                                                              $xfer += $output->writeFieldBegin('uncertaintyConfidence', TType::DOUBLE, 1);
                                                                                              $xfer += $output->writeDouble($self->{uncertaintyConfidence});
                                                                                              $xfer += $output->writeFieldEnd();
                                                                                            }
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceService_setUncertaintyConfidence_result;
use base qw(Class::Accessor);

sub new {
                                                                                            my $classname = shift;
                                                                                            my $self      = {};
                                                                                            my $vals      = shift || {};
                                                                                            return bless ($self, $classname);
}

sub getName {
                                                                                            return 'SentenceService_setUncertaintyConfidence_result';
                                                                                          }

sub read {
                                                                                            my ($self, $input) = @_;
                                                                                            my $xfer  = 0;
                                                                                            my $fname;
                                                                                            my $ftype = 0;
                                                                                            my $fid   = 0;
                                                                                            $xfer += $input->readStructBegin(\$fname);
                                                                                            while (1) 
                                                                                            {
                                                                                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                              if ($ftype == TType::STOP) {
                                                                                                last;
                                                                                              }
                                                                                              SWITCH: for($fid)
                                                                                              {
                                                                                                  $xfer += $input->skip($ftype);
                                                                                              }
                                                                                              $xfer += $input->readFieldEnd();
                                                                                            }
                                                                                            $xfer += $input->readStructEnd();
                                                                                            return $xfer;
                                                                                          }

sub write {
                                                                                            my ($self, $output) = @_;
                                                                                            my $xfer   = 0;
                                                                                            $xfer += $output->writeStructBegin('SentenceService_setUncertaintyConfidence_result');
                                                                                            $xfer += $output->writeFieldStop();
                                                                                            $xfer += $output->writeStructEnd();
                                                                                            return $xfer;
                                                                                          }

package thrift::adept::common::SentenceServiceIf;

use strict;
use base qw(thrift::adept::common::ChunkServiceIf);

sub getNoveltyConfidence{
  my $self = shift;

  die 'implement interface';
}

sub getPunctuation{
  my $self = shift;

  die 'implement interface';
}

sub getSequenceId{
  my $self = shift;

  die 'implement interface';
}

sub getType{
  my $self = shift;

  die 'implement interface';
}

sub getUncertaintyConfidence{
  my $self = shift;

  die 'implement interface';
}

sub setNoveltyConfidence{
  my $self = shift;
  my $noveltyConfidence = shift;

  die 'implement interface';
}

sub setPunctuation{
  my $self = shift;
  my $punctuation = shift;

  die 'implement interface';
}

sub setType{
  my $self = shift;
  my $type = shift;

  die 'implement interface';
}

sub setUncertaintyConfidence{
  my $self = shift;
  my $uncertaintyConfidence = shift;

  die 'implement interface';
}

package thrift::adept::common::SentenceServiceRest;

use strict;
use base qw(thrift::adept::common::ChunkServiceRest);

sub getNoveltyConfidence{
                                                                                            my ($self, $request) = @_;

                                                                                            return $self->{impl}->getNoveltyConfidence();
                                                                                          }

sub getPunctuation{
                                                                                            my ($self, $request) = @_;

                                                                                            return $self->{impl}->getPunctuation();
                                                                                          }

sub getSequenceId{
                                                                                            my ($self, $request) = @_;

                                                                                            return $self->{impl}->getSequenceId();
                                                                                          }

sub getType{
                                                                                            my ($self, $request) = @_;

                                                                                            return $self->{impl}->getType();
                                                                                          }

sub getUncertaintyConfidence{
                                                                                            my ($self, $request) = @_;

                                                                                            return $self->{impl}->getUncertaintyConfidence();
                                                                                          }

sub setNoveltyConfidence{
                                                                                            my ($self, $request) = @_;

                                                                                            my $noveltyConfidence = ($request->{'noveltyConfidence'}) ? $request->{'noveltyConfidence'} : undef;
                                                                                            return $self->{impl}->setNoveltyConfidence($noveltyConfidence);
                                                                                          }

sub setPunctuation{
                                                                                            my ($self, $request) = @_;

                                                                                            my $punctuation = ($request->{'punctuation'}) ? $request->{'punctuation'} : undef;
                                                                                            return $self->{impl}->setPunctuation($punctuation);
                                                                                          }

sub setType{
                                                                                            my ($self, $request) = @_;

                                                                                            my $type = ($request->{'type'}) ? $request->{'type'} : undef;
                                                                                            return $self->{impl}->setType($type);
                                                                                          }

sub setUncertaintyConfidence{
                                                                                            my ($self, $request) = @_;

                                                                                            my $uncertaintyConfidence = ($request->{'uncertaintyConfidence'}) ? $request->{'uncertaintyConfidence'} : undef;
                                                                                            return $self->{impl}->setUncertaintyConfidence($uncertaintyConfidence);
                                                                                          }

package thrift::adept::common::SentenceServiceClient;

use base qw(thrift::adept::common::ChunkServiceClient);
use base qw(thrift::adept::common::SentenceServiceIf);
sub new {
                                                                                            my ($classname, $input, $output) = @_;
                                                                                            my $self      = {};
                                                                                            $self = $classname->SUPER::new($input, $output);
                                                                                            return bless($self,$classname);
}

sub getNoveltyConfidence{
  my $self = shift;

                                                                                                                                                                                        $self->send_getNoveltyConfidence();
                                                                                            return $self->recv_getNoveltyConfidence();
}

sub send_getNoveltyConfidence{
  my $self = shift;

                                                                                            $self->{output}->writeMessageBegin('getNoveltyConfidence', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_getNoveltyConfidence_args();
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getNoveltyConfidence{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_getNoveltyConfidence_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            if (defined $result->{success} ) {
                                                                                              return $result->{success};
                                                                                            }
                                                                                            die "getNoveltyConfidence failed: unknown result";
}
sub getPunctuation{
  my $self = shift;

                                                                                                                                                                                        $self->send_getPunctuation();
                                                                                            return $self->recv_getPunctuation();
}

sub send_getPunctuation{
  my $self = shift;

                                                                                            $self->{output}->writeMessageBegin('getPunctuation', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_getPunctuation_args();
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getPunctuation{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_getPunctuation_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            if (defined $result->{success} ) {
                                                                                              return $result->{success};
                                                                                            }
                                                                                            die "getPunctuation failed: unknown result";
}
sub getSequenceId{
  my $self = shift;

                                                                                                                                                                                        $self->send_getSequenceId();
                                                                                            return $self->recv_getSequenceId();
}

sub send_getSequenceId{
  my $self = shift;

                                                                                            $self->{output}->writeMessageBegin('getSequenceId', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_getSequenceId_args();
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getSequenceId{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_getSequenceId_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            if (defined $result->{success} ) {
                                                                                              return $result->{success};
                                                                                            }
                                                                                            die "getSequenceId failed: unknown result";
}
sub getType{
  my $self = shift;

                                                                                                                                                                                        $self->send_getType();
                                                                                            return $self->recv_getType();
}

sub send_getType{
  my $self = shift;

                                                                                            $self->{output}->writeMessageBegin('getType', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_getType_args();
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getType{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_getType_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            if (defined $result->{success} ) {
                                                                                              return $result->{success};
                                                                                            }
                                                                                            die "getType failed: unknown result";
}
sub getUncertaintyConfidence{
  my $self = shift;

                                                                                                                                                                                        $self->send_getUncertaintyConfidence();
                                                                                            return $self->recv_getUncertaintyConfidence();
}

sub send_getUncertaintyConfidence{
  my $self = shift;

                                                                                            $self->{output}->writeMessageBegin('getUncertaintyConfidence', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_getUncertaintyConfidence_args();
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_getUncertaintyConfidence{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_getUncertaintyConfidence_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            if (defined $result->{success} ) {
                                                                                              return $result->{success};
                                                                                            }
                                                                                            die "getUncertaintyConfidence failed: unknown result";
}
sub setNoveltyConfidence{
  my $self = shift;
  my $noveltyConfidence = shift;

                                                                                                                                                                                        $self->send_setNoveltyConfidence($noveltyConfidence);
                                                                                            $self->recv_setNoveltyConfidence();
}

sub send_setNoveltyConfidence{
  my $self = shift;
  my $noveltyConfidence = shift;

                                                                                            $self->{output}->writeMessageBegin('setNoveltyConfidence', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_setNoveltyConfidence_args();
                                                                                            $args->{noveltyConfidence} = $noveltyConfidence;
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_setNoveltyConfidence{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_setNoveltyConfidence_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            return;
}
sub setPunctuation{
  my $self = shift;
  my $punctuation = shift;

                                                                                                                                                                                        $self->send_setPunctuation($punctuation);
                                                                                            $self->recv_setPunctuation();
}

sub send_setPunctuation{
  my $self = shift;
  my $punctuation = shift;

                                                                                            $self->{output}->writeMessageBegin('setPunctuation', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_setPunctuation_args();
                                                                                            $args->{punctuation} = $punctuation;
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_setPunctuation{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_setPunctuation_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            return;
}
sub setType{
  my $self = shift;
  my $type = shift;

                                                                                                                                                                                        $self->send_setType($type);
                                                                                            $self->recv_setType();
}

sub send_setType{
  my $self = shift;
  my $type = shift;

                                                                                            $self->{output}->writeMessageBegin('setType', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_setType_args();
                                                                                            $args->{type} = $type;
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_setType{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_setType_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            return;
}
sub setUncertaintyConfidence{
  my $self = shift;
  my $uncertaintyConfidence = shift;

                                                                                                                                                                                        $self->send_setUncertaintyConfidence($uncertaintyConfidence);
                                                                                            $self->recv_setUncertaintyConfidence();
}

sub send_setUncertaintyConfidence{
  my $self = shift;
  my $uncertaintyConfidence = shift;

                                                                                            $self->{output}->writeMessageBegin('setUncertaintyConfidence', TMessageType::CALL, $self->{seqid});
                                                                                            my $args = new thrift::adept::common::SentenceService_setUncertaintyConfidence_args();
                                                                                            $args->{uncertaintyConfidence} = $uncertaintyConfidence;
                                                                                            $args->write($self->{output});
                                                                                            $self->{output}->writeMessageEnd();
                                                                                            $self->{output}->getTransport()->flush();
}

sub recv_setUncertaintyConfidence{
  my $self = shift;

                                                                                            my $rseqid = 0;
                                                                                            my $fname;
                                                                                            my $mtype = 0;

                                                                                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                            if ($mtype == TMessageType::EXCEPTION) {
                                                                                              my $x = new TApplicationException();
                                                                                              $x->read($self->{input});
                                                                                              $self->{input}->readMessageEnd();
                                                                                              die $x;
                                                                                            }
                                                                                            my $result = new thrift::adept::common::SentenceService_setUncertaintyConfidence_result();
                                                                                            $result->read($self->{input});
                                                                                            $self->{input}->readMessageEnd();

                                                                                            return;
}
package thrift::adept::common::SentenceServiceProcessor;

use strict;
use base qw(thrift::adept::common::ChunkServiceProcessor);

sub process {
                                                                                              my ($self, $input, $output) = @_;
                                                                                              my $rseqid = 0;
                                                                                              my $fname  = undef;
                                                                                              my $mtype  = 0;

                                                                                              $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                              my $methodname = 'process_'.$fname;
                                                                                              if (!$self->can($methodname)) {
                                                                                                $input->skip(TType::STRUCT);
                                                                                                $input->readMessageEnd();
                                                                                                my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                                                $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                                                $x->write($output);
                                                                                                $output->writeMessageEnd();
                                                                                                $output->getTransport()->flush();
                                                                                                return;
                                                                                              }
                                                                                              $self->$methodname($rseqid, $input, $output);
                                                                                              return 1;
}

sub process_getNoveltyConfidence {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_getNoveltyConfidence_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_getNoveltyConfidence_result();
                                                                                              $result->{success} = $self->{handler}->getNoveltyConfidence();
                                                                                              $output->writeMessageBegin('getNoveltyConfidence', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_getPunctuation {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_getPunctuation_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_getPunctuation_result();
                                                                                              $result->{success} = $self->{handler}->getPunctuation();
                                                                                              $output->writeMessageBegin('getPunctuation', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_getSequenceId {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_getSequenceId_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_getSequenceId_result();
                                                                                              $result->{success} = $self->{handler}->getSequenceId();
                                                                                              $output->writeMessageBegin('getSequenceId', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_getType {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_getType_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_getType_result();
                                                                                              $result->{success} = $self->{handler}->getType();
                                                                                              $output->writeMessageBegin('getType', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_getUncertaintyConfidence {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_getUncertaintyConfidence_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_getUncertaintyConfidence_result();
                                                                                              $result->{success} = $self->{handler}->getUncertaintyConfidence();
                                                                                              $output->writeMessageBegin('getUncertaintyConfidence', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_setNoveltyConfidence {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_setNoveltyConfidence_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_setNoveltyConfidence_result();
                                                                                              $self->{handler}->setNoveltyConfidence($args->noveltyConfidence);
                                                                                              $output->writeMessageBegin('setNoveltyConfidence', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_setPunctuation {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_setPunctuation_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_setPunctuation_result();
                                                                                              $self->{handler}->setPunctuation($args->punctuation);
                                                                                              $output->writeMessageBegin('setPunctuation', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_setType {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_setType_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_setType_result();
                                                                                              $self->{handler}->setType($args->type);
                                                                                              $output->writeMessageBegin('setType', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

sub process_setUncertaintyConfidence {
                                                                                              my ($self, $seqid, $input, $output) = @_;
                                                                                              my $args = new thrift::adept::common::SentenceService_setUncertaintyConfidence_args();
                                                                                              $args->read($input);
                                                                                              $input->readMessageEnd();
                                                                                              my $result = new thrift::adept::common::SentenceService_setUncertaintyConfidence_result();
                                                                                              $self->{handler}->setUncertaintyConfidence($args->uncertaintyConfidence);
                                                                                              $output->writeMessageBegin('setUncertaintyConfidence', TMessageType::REPLY, $seqid);
                                                                                              $result->write($output);
                                                                                              $output->writeMessageEnd();
                                                                                              $output->getTransport()->flush();
}

1;