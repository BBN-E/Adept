#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ItemService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::ParaphraseService_getConfidence_args;
use base qw(Class::Accessor);

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                return bless ($self, $classname);
}

sub getName {
                                return 'ParaphraseService_getConfidence_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1) 
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('ParaphraseService_getConfidence_args');
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package thrift::adept::common::ParaphraseService_getConfidence_result;
use base qw(Class::Accessor);
thrift::adept::common::ParaphraseService_getConfidence_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'ParaphraseService_getConfidence_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1) 
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == TType::DOUBLE) {
                                      $xfer += $input->readDouble(\$self->{success});
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('ParaphraseService_getConfidence_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
                                  $xfer += $output->writeDouble($self->{success});
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package thrift::adept::common::ParaphraseService_getPosTag_args;
use base qw(Class::Accessor);

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                return bless ($self, $classname);
}

sub getName {
                                return 'ParaphraseService_getPosTag_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1) 
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('ParaphraseService_getPosTag_args');
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package thrift::adept::common::ParaphraseService_getPosTag_result;
use base qw(Class::Accessor);
thrift::adept::common::ParaphraseService_getPosTag_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'ParaphraseService_getPosTag_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1) 
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == TType::STRING) {
                                      $xfer += $input->readString(\$self->{success});
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('ParaphraseService_getPosTag_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                  $xfer += $output->writeString($self->{success});
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package thrift::adept::common::ParaphraseService_setPosTag_args;
use base qw(Class::Accessor);
thrift::adept::common::ParaphraseService_setPosTag_args->mk_accessors( qw( posTag ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{posTag} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{posTag}) {
                                    $self->{posTag} = $vals->{posTag};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'ParaphraseService_setPosTag_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1) 
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == TType::STRUCT) {
                                      $self->{posTag} = new thrift::adept::common::Type();
                                      $xfer += $self->{posTag}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('ParaphraseService_setPosTag_args');
                                if (defined $self->{posTag}) {
                                  $xfer += $output->writeFieldBegin('posTag', TType::STRUCT, 1);
                                  $xfer += $self->{posTag}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package thrift::adept::common::ParaphraseService_setPosTag_result;
use base qw(Class::Accessor);

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                return bless ($self, $classname);
}

sub getName {
                                return 'ParaphraseService_setPosTag_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1) 
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('ParaphraseService_setPosTag_result');
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package thrift::adept::common::ParaphraseServiceIf;

use strict;
use base qw(thrift::adept::common::ItemServiceIf);

sub getConfidence{
  my $self = shift;

  die 'implement interface';
}

sub getPosTag{
  my $self = shift;

  die 'implement interface';
}

sub setPosTag{
  my $self = shift;
  my $posTag = shift;

  die 'implement interface';
}

package thrift::adept::common::ParaphraseServiceRest;

use strict;
use base qw(thrift::adept::common::ItemServiceRest);

sub getConfidence{
                                my ($self, $request) = @_;

                                return $self->{impl}->getConfidence();
                              }

sub getPosTag{
                                my ($self, $request) = @_;

                                return $self->{impl}->getPosTag();
                              }

sub setPosTag{
                                my ($self, $request) = @_;

                                my $posTag = ($request->{'posTag'}) ? $request->{'posTag'} : undef;
                                return $self->{impl}->setPosTag($posTag);
                              }

package thrift::adept::common::ParaphraseServiceClient;

use base qw(thrift::adept::common::ItemServiceClient);
use base qw(thrift::adept::common::ParaphraseServiceIf);
sub new {
                                my ($classname, $input, $output) = @_;
                                my $self      = {};
                                $self = $classname->SUPER::new($input, $output);
                                return bless($self,$classname);
}

sub getConfidence{
  my $self = shift;

                                                                $self->send_getConfidence();
                                return $self->recv_getConfidence();
}

sub send_getConfidence{
  my $self = shift;

                                $self->{output}->writeMessageBegin('getConfidence', TMessageType::CALL, $self->{seqid});
                                my $args = new thrift::adept::common::ParaphraseService_getConfidence_args();
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getConfidence{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == TMessageType::EXCEPTION) {
                                  my $x = new TApplicationException();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = new thrift::adept::common::ParaphraseService_getConfidence_result();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                die "getConfidence failed: unknown result";
}
sub getPosTag{
  my $self = shift;

                                                                $self->send_getPosTag();
                                return $self->recv_getPosTag();
}

sub send_getPosTag{
  my $self = shift;

                                $self->{output}->writeMessageBegin('getPosTag', TMessageType::CALL, $self->{seqid});
                                my $args = new thrift::adept::common::ParaphraseService_getPosTag_args();
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getPosTag{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == TMessageType::EXCEPTION) {
                                  my $x = new TApplicationException();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = new thrift::adept::common::ParaphraseService_getPosTag_result();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                die "getPosTag failed: unknown result";
}
sub setPosTag{
  my $self = shift;
  my $posTag = shift;

                                                                $self->send_setPosTag($posTag);
                                $self->recv_setPosTag();
}

sub send_setPosTag{
  my $self = shift;
  my $posTag = shift;

                                $self->{output}->writeMessageBegin('setPosTag', TMessageType::CALL, $self->{seqid});
                                my $args = new thrift::adept::common::ParaphraseService_setPosTag_args();
                                $args->{posTag} = $posTag;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_setPosTag{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == TMessageType::EXCEPTION) {
                                  my $x = new TApplicationException();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = new thrift::adept::common::ParaphraseService_setPosTag_result();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                return;
}
package thrift::adept::common::ParaphraseServiceProcessor;

use strict;
use base qw(thrift::adept::common::ItemServiceProcessor);

sub process {
                                  my ($self, $input, $output) = @_;
                                  my $rseqid = 0;
                                  my $fname  = undef;
                                  my $mtype  = 0;

                                  $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                  my $methodname = 'process_'.$fname;
                                  if (!$self->can($methodname)) {
                                    $input->skip(TType::STRUCT);
                                    $input->readMessageEnd();
                                    my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                    $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                    $x->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    return;
                                  }
                                  $self->$methodname($rseqid, $input, $output);
                                  return 1;
}

sub process_getConfidence {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = new thrift::adept::common::ParaphraseService_getConfidence_args();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = new thrift::adept::common::ParaphraseService_getConfidence_result();
                                  $result->{success} = $self->{handler}->getConfidence();
                                  $output->writeMessageBegin('getConfidence', TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getPosTag {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = new thrift::adept::common::ParaphraseService_getPosTag_args();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = new thrift::adept::common::ParaphraseService_getPosTag_result();
                                  $result->{success} = $self->{handler}->getPosTag();
                                  $output->writeMessageBegin('getPosTag', TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_setPosTag {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = new thrift::adept::common::ParaphraseService_setPosTag_args();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = new thrift::adept::common::ParaphraseService_setPosTag_result();
                                  $self->{handler}->setPosTag($args->posTag);
                                  $output->writeMessageBegin('setPosTag', TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

1;