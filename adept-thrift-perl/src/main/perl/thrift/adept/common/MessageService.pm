#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::PassageService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::MessageService_getSender_args;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getSender_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getSender_args');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getSender_result;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_getSender_result->mk_accessors( qw( success ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{success} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{success}) {
                                                                                      $self->{success} = $vals->{success};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getSender_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^0$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{success});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getSender_result');
                                                                                  if (defined $self->{success}) {
                                                                                    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                                                    $xfer += $output->writeString($self->{success});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setSender_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_setSender_args->mk_accessors( qw( sender ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{sender} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{sender}) {
                                                                                      $self->{sender} = $vals->{sender};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setSender_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{sender});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setSender_args');
                                                                                  if (defined $self->{sender}) {
                                                                                    $xfer += $output->writeFieldBegin('sender', TType::STRING, 1);
                                                                                    $xfer += $output->writeString($self->{sender});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setSender_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setSender_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setSender_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getSentDate_args;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getSentDate_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getSentDate_args');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getSentDate_result;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_getSentDate_result->mk_accessors( qw( success ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{success} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{success}) {
                                                                                      $self->{success} = $vals->{success};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getSentDate_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^0$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{success});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getSentDate_result');
                                                                                  if (defined $self->{success}) {
                                                                                    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                                                    $xfer += $output->writeString($self->{success});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setSentDate_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_setSentDate_args->mk_accessors( qw( sentDate ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{sentDate} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{sentDate}) {
                                                                                      $self->{sentDate} = $vals->{sentDate};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setSentDate_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{sentDate});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setSentDate_args');
                                                                                  if (defined $self->{sentDate}) {
                                                                                    $xfer += $output->writeFieldBegin('sentDate', TType::STRING, 1);
                                                                                    $xfer += $output->writeString($self->{sentDate});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setSentDate_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setSentDate_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setSentDate_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getPriority_args;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getPriority_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getPriority_args');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getPriority_result;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_getPriority_result->mk_accessors( qw( success ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{success} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{success}) {
                                                                                      $self->{success} = $vals->{success};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getPriority_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^0$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{success});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getPriority_result');
                                                                                  if (defined $self->{success}) {
                                                                                    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                                                    $xfer += $output->writeString($self->{success});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setPriority_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_setPriority_args->mk_accessors( qw( priority ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{priority} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{priority}) {
                                                                                      $self->{priority} = $vals->{priority};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setPriority_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{priority});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setPriority_args');
                                                                                  if (defined $self->{priority}) {
                                                                                    $xfer += $output->writeFieldBegin('priority', TType::STRING, 1);
                                                                                    $xfer += $output->writeString($self->{priority});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setPriority_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setPriority_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setPriority_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getSubject_args;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getSubject_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getSubject_args');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getSubject_result;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_getSubject_result->mk_accessors( qw( success ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{success} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{success}) {
                                                                                      $self->{success} = $vals->{success};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getSubject_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^0$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{success});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getSubject_result');
                                                                                  if (defined $self->{success}) {
                                                                                    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                                                                                    $xfer += $output->writeString($self->{success});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setSubject_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_setSubject_args->mk_accessors( qw( subject ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{subject} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{subject}) {
                                                                                      $self->{subject} = $vals->{subject};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setSubject_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{subject});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setSubject_args');
                                                                                  if (defined $self->{subject}) {
                                                                                    $xfer += $output->writeFieldBegin('subject', TType::STRING, 1);
                                                                                    $xfer += $output->writeString($self->{subject});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setSubject_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setSubject_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setSubject_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getRecipients_args;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getRecipients_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getRecipients_args');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getRecipients_result;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_getRecipients_result->mk_accessors( qw( success ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{success} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{success}) {
                                                                                      $self->{success} = $vals->{success};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getRecipients_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^0$/ && do{                                                                                      if ($ftype == TType::LIST) {
                                                                                        {
                                                                                          my $_size784 = 0;
                                                                                          $self->{success} = [];
                                                                                          my $_etype787 = 0;
                                                                                          $xfer += $input->readListBegin(\$_etype787, \$_size784);
                                                                                          for (my $_i788 = 0; $_i788 < $_size784; ++$_i788)
                                                                                          {
                                                                                            my $elem789 = undef;
                                                                                            $xfer += $input->readString(\$elem789);
                                                                                            push(@{$self->{success}},$elem789);
                                                                                          }
                                                                                          $xfer += $input->readListEnd();
                                                                                        }
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getRecipients_result');
                                                                                  if (defined $self->{success}) {
                                                                                    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                                                    {
                                                                                      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
                                                                                      {
                                                                                        foreach my $iter790 (@{$self->{success}}) 
                                                                                        {
                                                                                          $xfer += $output->writeString($iter790);
                                                                                        }
                                                                                      }
                                                                                      $xfer += $output->writeListEnd();
                                                                                    }
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setRecipients_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_setRecipients_args->mk_accessors( qw( recipients ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{recipients} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{recipients}) {
                                                                                      $self->{recipients} = $vals->{recipients};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setRecipients_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::LIST) {
                                                                                        {
                                                                                          my $_size791 = 0;
                                                                                          $self->{recipients} = [];
                                                                                          my $_etype794 = 0;
                                                                                          $xfer += $input->readListBegin(\$_etype794, \$_size791);
                                                                                          for (my $_i795 = 0; $_i795 < $_size791; ++$_i795)
                                                                                          {
                                                                                            my $elem796 = undef;
                                                                                            $xfer += $input->readString(\$elem796);
                                                                                            push(@{$self->{recipients}},$elem796);
                                                                                          }
                                                                                          $xfer += $input->readListEnd();
                                                                                        }
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setRecipients_args');
                                                                                  if (defined $self->{recipients}) {
                                                                                    $xfer += $output->writeFieldBegin('recipients', TType::LIST, 1);
                                                                                    {
                                                                                      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{recipients}}));
                                                                                      {
                                                                                        foreach my $iter797 (@{$self->{recipients}}) 
                                                                                        {
                                                                                          $xfer += $output->writeString($iter797);
                                                                                        }
                                                                                      }
                                                                                      $xfer += $output->writeListEnd();
                                                                                    }
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setRecipients_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setRecipients_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setRecipients_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_addRecipient_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_addRecipient_args->mk_accessors( qw( recipient ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{recipient} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{recipient}) {
                                                                                      $self->{recipient} = $vals->{recipient};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_addRecipient_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{recipient});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_addRecipient_args');
                                                                                  if (defined $self->{recipient}) {
                                                                                    $xfer += $output->writeFieldBegin('recipient', TType::STRING, 1);
                                                                                    $xfer += $output->writeString($self->{recipient});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_addRecipient_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_addRecipient_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_addRecipient_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getCcRecipients_args;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getCcRecipients_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getCcRecipients_args');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getCcRecipients_result;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_getCcRecipients_result->mk_accessors( qw( success ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{success} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{success}) {
                                                                                      $self->{success} = $vals->{success};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getCcRecipients_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^0$/ && do{                                                                                      if ($ftype == TType::LIST) {
                                                                                        {
                                                                                          my $_size798 = 0;
                                                                                          $self->{success} = [];
                                                                                          my $_etype801 = 0;
                                                                                          $xfer += $input->readListBegin(\$_etype801, \$_size798);
                                                                                          for (my $_i802 = 0; $_i802 < $_size798; ++$_i802)
                                                                                          {
                                                                                            my $elem803 = undef;
                                                                                            $xfer += $input->readString(\$elem803);
                                                                                            push(@{$self->{success}},$elem803);
                                                                                          }
                                                                                          $xfer += $input->readListEnd();
                                                                                        }
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getCcRecipients_result');
                                                                                  if (defined $self->{success}) {
                                                                                    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                                                    {
                                                                                      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
                                                                                      {
                                                                                        foreach my $iter804 (@{$self->{success}}) 
                                                                                        {
                                                                                          $xfer += $output->writeString($iter804);
                                                                                        }
                                                                                      }
                                                                                      $xfer += $output->writeListEnd();
                                                                                    }
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setCcRecipients_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_setCcRecipients_args->mk_accessors( qw( ccRecipients ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{ccRecipients} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{ccRecipients}) {
                                                                                      $self->{ccRecipients} = $vals->{ccRecipients};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setCcRecipients_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::LIST) {
                                                                                        {
                                                                                          my $_size805 = 0;
                                                                                          $self->{ccRecipients} = [];
                                                                                          my $_etype808 = 0;
                                                                                          $xfer += $input->readListBegin(\$_etype808, \$_size805);
                                                                                          for (my $_i809 = 0; $_i809 < $_size805; ++$_i809)
                                                                                          {
                                                                                            my $elem810 = undef;
                                                                                            $xfer += $input->readString(\$elem810);
                                                                                            push(@{$self->{ccRecipients}},$elem810);
                                                                                          }
                                                                                          $xfer += $input->readListEnd();
                                                                                        }
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setCcRecipients_args');
                                                                                  if (defined $self->{ccRecipients}) {
                                                                                    $xfer += $output->writeFieldBegin('ccRecipients', TType::LIST, 1);
                                                                                    {
                                                                                      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{ccRecipients}}));
                                                                                      {
                                                                                        foreach my $iter811 (@{$self->{ccRecipients}}) 
                                                                                        {
                                                                                          $xfer += $output->writeString($iter811);
                                                                                        }
                                                                                      }
                                                                                      $xfer += $output->writeListEnd();
                                                                                    }
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setCcRecipients_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setCcRecipients_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setCcRecipients_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_addCcRecipient_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_addCcRecipient_args->mk_accessors( qw( ccRecipient ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{ccRecipient} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{ccRecipient}) {
                                                                                      $self->{ccRecipient} = $vals->{ccRecipient};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_addCcRecipient_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{ccRecipient});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_addCcRecipient_args');
                                                                                  if (defined $self->{ccRecipient}) {
                                                                                    $xfer += $output->writeFieldBegin('ccRecipient', TType::STRING, 1);
                                                                                    $xfer += $output->writeString($self->{ccRecipient});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_addCcRecipient_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_addCcRecipient_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_addCcRecipient_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getBccRecipients_args;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getBccRecipients_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getBccRecipients_args');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_getBccRecipients_result;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_getBccRecipients_result->mk_accessors( qw( success ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{success} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{success}) {
                                                                                      $self->{success} = $vals->{success};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_getBccRecipients_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^0$/ && do{                                                                                      if ($ftype == TType::LIST) {
                                                                                        {
                                                                                          my $_size812 = 0;
                                                                                          $self->{success} = [];
                                                                                          my $_etype815 = 0;
                                                                                          $xfer += $input->readListBegin(\$_etype815, \$_size812);
                                                                                          for (my $_i816 = 0; $_i816 < $_size812; ++$_i816)
                                                                                          {
                                                                                            my $elem817 = undef;
                                                                                            $xfer += $input->readString(\$elem817);
                                                                                            push(@{$self->{success}},$elem817);
                                                                                          }
                                                                                          $xfer += $input->readListEnd();
                                                                                        }
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_getBccRecipients_result');
                                                                                  if (defined $self->{success}) {
                                                                                    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                                                    {
                                                                                      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
                                                                                      {
                                                                                        foreach my $iter818 (@{$self->{success}}) 
                                                                                        {
                                                                                          $xfer += $output->writeString($iter818);
                                                                                        }
                                                                                      }
                                                                                      $xfer += $output->writeListEnd();
                                                                                    }
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setBccRecipients_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_setBccRecipients_args->mk_accessors( qw( bccRecipients ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{bccRecipients} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{bccRecipients}) {
                                                                                      $self->{bccRecipients} = $vals->{bccRecipients};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setBccRecipients_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::LIST) {
                                                                                        {
                                                                                          my $_size819 = 0;
                                                                                          $self->{bccRecipients} = [];
                                                                                          my $_etype822 = 0;
                                                                                          $xfer += $input->readListBegin(\$_etype822, \$_size819);
                                                                                          for (my $_i823 = 0; $_i823 < $_size819; ++$_i823)
                                                                                          {
                                                                                            my $elem824 = undef;
                                                                                            $xfer += $input->readString(\$elem824);
                                                                                            push(@{$self->{bccRecipients}},$elem824);
                                                                                          }
                                                                                          $xfer += $input->readListEnd();
                                                                                        }
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setBccRecipients_args');
                                                                                  if (defined $self->{bccRecipients}) {
                                                                                    $xfer += $output->writeFieldBegin('bccRecipients', TType::LIST, 1);
                                                                                    {
                                                                                      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{bccRecipients}}));
                                                                                      {
                                                                                        foreach my $iter825 (@{$self->{bccRecipients}}) 
                                                                                        {
                                                                                          $xfer += $output->writeString($iter825);
                                                                                        }
                                                                                      }
                                                                                      $xfer += $output->writeListEnd();
                                                                                    }
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_setBccRecipients_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_setBccRecipients_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_setBccRecipients_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_addBccRecipient_args;
use base qw(Class::Accessor);
thrift::adept::common::MessageService_addBccRecipient_args->mk_accessors( qw( bccRecipient ) );

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  $self->{bccRecipient} = undef;
                                                                                  if (UNIVERSAL::isa($vals,'HASH')) {
                                                                                    if (defined $vals->{bccRecipient}) {
                                                                                      $self->{bccRecipient} = $vals->{bccRecipient};
                                                                                    }
                                                                                  }
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_addBccRecipient_args';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                      /^1$/ && do{                                                                                      if ($ftype == TType::STRING) {
                                                                                        $xfer += $input->readString(\$self->{bccRecipient});
                                                                                      } else {
                                                                                        $xfer += $input->skip($ftype);
                                                                                      }
                                                                                      last; };
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_addBccRecipient_args');
                                                                                  if (defined $self->{bccRecipient}) {
                                                                                    $xfer += $output->writeFieldBegin('bccRecipient', TType::STRING, 1);
                                                                                    $xfer += $output->writeString($self->{bccRecipient});
                                                                                    $xfer += $output->writeFieldEnd();
                                                                                  }
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageService_addBccRecipient_result;
use base qw(Class::Accessor);

sub new {
                                                                                  my $classname = shift;
                                                                                  my $self      = {};
                                                                                  my $vals      = shift || {};
                                                                                  return bless ($self, $classname);
}

sub getName {
                                                                                  return 'MessageService_addBccRecipient_result';
                                                                                }

sub read {
                                                                                  my ($self, $input) = @_;
                                                                                  my $xfer  = 0;
                                                                                  my $fname;
                                                                                  my $ftype = 0;
                                                                                  my $fid   = 0;
                                                                                  $xfer += $input->readStructBegin(\$fname);
                                                                                  while (1) 
                                                                                  {
                                                                                    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                                    if ($ftype == TType::STOP) {
                                                                                      last;
                                                                                    }
                                                                                    SWITCH: for($fid)
                                                                                    {
                                                                                        $xfer += $input->skip($ftype);
                                                                                    }
                                                                                    $xfer += $input->readFieldEnd();
                                                                                  }
                                                                                  $xfer += $input->readStructEnd();
                                                                                  return $xfer;
                                                                                }

sub write {
                                                                                  my ($self, $output) = @_;
                                                                                  my $xfer   = 0;
                                                                                  $xfer += $output->writeStructBegin('MessageService_addBccRecipient_result');
                                                                                  $xfer += $output->writeFieldStop();
                                                                                  $xfer += $output->writeStructEnd();
                                                                                  return $xfer;
                                                                                }

package thrift::adept::common::MessageServiceIf;

use strict;
use base qw(thrift::adept::common::PassageServiceIf);

sub getSender{
  my $self = shift;

  die 'implement interface';
}

sub setSender{
  my $self = shift;
  my $sender = shift;

  die 'implement interface';
}

sub getSentDate{
  my $self = shift;

  die 'implement interface';
}

sub setSentDate{
  my $self = shift;
  my $sentDate = shift;

  die 'implement interface';
}

sub getPriority{
  my $self = shift;

  die 'implement interface';
}

sub setPriority{
  my $self = shift;
  my $priority = shift;

  die 'implement interface';
}

sub getSubject{
  my $self = shift;

  die 'implement interface';
}

sub setSubject{
  my $self = shift;
  my $subject = shift;

  die 'implement interface';
}

sub getRecipients{
  my $self = shift;

  die 'implement interface';
}

sub setRecipients{
  my $self = shift;
  my $recipients = shift;

  die 'implement interface';
}

sub addRecipient{
  my $self = shift;
  my $recipient = shift;

  die 'implement interface';
}

sub getCcRecipients{
  my $self = shift;

  die 'implement interface';
}

sub setCcRecipients{
  my $self = shift;
  my $ccRecipients = shift;

  die 'implement interface';
}

sub addCcRecipient{
  my $self = shift;
  my $ccRecipient = shift;

  die 'implement interface';
}

sub getBccRecipients{
  my $self = shift;

  die 'implement interface';
}

sub setBccRecipients{
  my $self = shift;
  my $bccRecipients = shift;

  die 'implement interface';
}

sub addBccRecipient{
  my $self = shift;
  my $bccRecipient = shift;

  die 'implement interface';
}

package thrift::adept::common::MessageServiceRest;

use strict;
use base qw(thrift::adept::common::PassageServiceRest);

sub getSender{
                                                                                  my ($self, $request) = @_;

                                                                                  return $self->{impl}->getSender();
                                                                                }

sub setSender{
                                                                                  my ($self, $request) = @_;

                                                                                  my $sender = ($request->{'sender'}) ? $request->{'sender'} : undef;
                                                                                  return $self->{impl}->setSender($sender);
                                                                                }

sub getSentDate{
                                                                                  my ($self, $request) = @_;

                                                                                  return $self->{impl}->getSentDate();
                                                                                }

sub setSentDate{
                                                                                  my ($self, $request) = @_;

                                                                                  my $sentDate = ($request->{'sentDate'}) ? $request->{'sentDate'} : undef;
                                                                                  return $self->{impl}->setSentDate($sentDate);
                                                                                }

sub getPriority{
                                                                                  my ($self, $request) = @_;

                                                                                  return $self->{impl}->getPriority();
                                                                                }

sub setPriority{
                                                                                  my ($self, $request) = @_;

                                                                                  my $priority = ($request->{'priority'}) ? $request->{'priority'} : undef;
                                                                                  return $self->{impl}->setPriority($priority);
                                                                                }

sub getSubject{
                                                                                  my ($self, $request) = @_;

                                                                                  return $self->{impl}->getSubject();
                                                                                }

sub setSubject{
                                                                                  my ($self, $request) = @_;

                                                                                  my $subject = ($request->{'subject'}) ? $request->{'subject'} : undef;
                                                                                  return $self->{impl}->setSubject($subject);
                                                                                }

sub getRecipients{
                                                                                  my ($self, $request) = @_;

                                                                                  return $self->{impl}->getRecipients();
                                                                                }

sub setRecipients{
                                                                                  my ($self, $request) = @_;

                                                                                  my $recipients = ($request->{'recipients'}) ? $request->{'recipients'} : undef;
                                                                                  return $self->{impl}->setRecipients($recipients);
                                                                                }

sub addRecipient{
                                                                                  my ($self, $request) = @_;

                                                                                  my $recipient = ($request->{'recipient'}) ? $request->{'recipient'} : undef;
                                                                                  return $self->{impl}->addRecipient($recipient);
                                                                                }

sub getCcRecipients{
                                                                                  my ($self, $request) = @_;

                                                                                  return $self->{impl}->getCcRecipients();
                                                                                }

sub setCcRecipients{
                                                                                  my ($self, $request) = @_;

                                                                                  my $ccRecipients = ($request->{'ccRecipients'}) ? $request->{'ccRecipients'} : undef;
                                                                                  return $self->{impl}->setCcRecipients($ccRecipients);
                                                                                }

sub addCcRecipient{
                                                                                  my ($self, $request) = @_;

                                                                                  my $ccRecipient = ($request->{'ccRecipient'}) ? $request->{'ccRecipient'} : undef;
                                                                                  return $self->{impl}->addCcRecipient($ccRecipient);
                                                                                }

sub getBccRecipients{
                                                                                  my ($self, $request) = @_;

                                                                                  return $self->{impl}->getBccRecipients();
                                                                                }

sub setBccRecipients{
                                                                                  my ($self, $request) = @_;

                                                                                  my $bccRecipients = ($request->{'bccRecipients'}) ? $request->{'bccRecipients'} : undef;
                                                                                  return $self->{impl}->setBccRecipients($bccRecipients);
                                                                                }

sub addBccRecipient{
                                                                                  my ($self, $request) = @_;

                                                                                  my $bccRecipient = ($request->{'bccRecipient'}) ? $request->{'bccRecipient'} : undef;
                                                                                  return $self->{impl}->addBccRecipient($bccRecipient);
                                                                                }

package thrift::adept::common::MessageServiceClient;

use base qw(thrift::adept::common::PassageServiceClient);
use base qw(thrift::adept::common::MessageServiceIf);
sub new {
                                                                                  my ($classname, $input, $output) = @_;
                                                                                  my $self      = {};
                                                                                  $self = $classname->SUPER::new($input, $output);
                                                                                  return bless($self,$classname);
}

sub getSender{
  my $self = shift;

                                                                                                                                                                    $self->send_getSender();
                                                                                  return $self->recv_getSender();
}

sub send_getSender{
  my $self = shift;

                                                                                  $self->{output}->writeMessageBegin('getSender', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_getSender_args();
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getSender{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_getSender_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  if (defined $result->{success} ) {
                                                                                    return $result->{success};
                                                                                  }
                                                                                  die "getSender failed: unknown result";
}
sub setSender{
  my $self = shift;
  my $sender = shift;

                                                                                                                                                                    $self->send_setSender($sender);
                                                                                  $self->recv_setSender();
}

sub send_setSender{
  my $self = shift;
  my $sender = shift;

                                                                                  $self->{output}->writeMessageBegin('setSender', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_setSender_args();
                                                                                  $args->{sender} = $sender;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setSender{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_setSender_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub getSentDate{
  my $self = shift;

                                                                                                                                                                    $self->send_getSentDate();
                                                                                  return $self->recv_getSentDate();
}

sub send_getSentDate{
  my $self = shift;

                                                                                  $self->{output}->writeMessageBegin('getSentDate', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_getSentDate_args();
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getSentDate{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_getSentDate_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  if (defined $result->{success} ) {
                                                                                    return $result->{success};
                                                                                  }
                                                                                  die "getSentDate failed: unknown result";
}
sub setSentDate{
  my $self = shift;
  my $sentDate = shift;

                                                                                                                                                                    $self->send_setSentDate($sentDate);
                                                                                  $self->recv_setSentDate();
}

sub send_setSentDate{
  my $self = shift;
  my $sentDate = shift;

                                                                                  $self->{output}->writeMessageBegin('setSentDate', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_setSentDate_args();
                                                                                  $args->{sentDate} = $sentDate;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setSentDate{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_setSentDate_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub getPriority{
  my $self = shift;

                                                                                                                                                                    $self->send_getPriority();
                                                                                  return $self->recv_getPriority();
}

sub send_getPriority{
  my $self = shift;

                                                                                  $self->{output}->writeMessageBegin('getPriority', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_getPriority_args();
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getPriority{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_getPriority_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  if (defined $result->{success} ) {
                                                                                    return $result->{success};
                                                                                  }
                                                                                  die "getPriority failed: unknown result";
}
sub setPriority{
  my $self = shift;
  my $priority = shift;

                                                                                                                                                                    $self->send_setPriority($priority);
                                                                                  $self->recv_setPriority();
}

sub send_setPriority{
  my $self = shift;
  my $priority = shift;

                                                                                  $self->{output}->writeMessageBegin('setPriority', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_setPriority_args();
                                                                                  $args->{priority} = $priority;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setPriority{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_setPriority_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub getSubject{
  my $self = shift;

                                                                                                                                                                    $self->send_getSubject();
                                                                                  return $self->recv_getSubject();
}

sub send_getSubject{
  my $self = shift;

                                                                                  $self->{output}->writeMessageBegin('getSubject', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_getSubject_args();
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getSubject{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_getSubject_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  if (defined $result->{success} ) {
                                                                                    return $result->{success};
                                                                                  }
                                                                                  die "getSubject failed: unknown result";
}
sub setSubject{
  my $self = shift;
  my $subject = shift;

                                                                                                                                                                    $self->send_setSubject($subject);
                                                                                  $self->recv_setSubject();
}

sub send_setSubject{
  my $self = shift;
  my $subject = shift;

                                                                                  $self->{output}->writeMessageBegin('setSubject', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_setSubject_args();
                                                                                  $args->{subject} = $subject;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setSubject{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_setSubject_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub getRecipients{
  my $self = shift;

                                                                                                                                                                    $self->send_getRecipients();
                                                                                  return $self->recv_getRecipients();
}

sub send_getRecipients{
  my $self = shift;

                                                                                  $self->{output}->writeMessageBegin('getRecipients', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_getRecipients_args();
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getRecipients{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_getRecipients_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  if (defined $result->{success} ) {
                                                                                    return $result->{success};
                                                                                  }
                                                                                  die "getRecipients failed: unknown result";
}
sub setRecipients{
  my $self = shift;
  my $recipients = shift;

                                                                                                                                                                    $self->send_setRecipients($recipients);
                                                                                  $self->recv_setRecipients();
}

sub send_setRecipients{
  my $self = shift;
  my $recipients = shift;

                                                                                  $self->{output}->writeMessageBegin('setRecipients', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_setRecipients_args();
                                                                                  $args->{recipients} = $recipients;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setRecipients{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_setRecipients_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub addRecipient{
  my $self = shift;
  my $recipient = shift;

                                                                                                                                                                    $self->send_addRecipient($recipient);
                                                                                  $self->recv_addRecipient();
}

sub send_addRecipient{
  my $self = shift;
  my $recipient = shift;

                                                                                  $self->{output}->writeMessageBegin('addRecipient', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_addRecipient_args();
                                                                                  $args->{recipient} = $recipient;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_addRecipient{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_addRecipient_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub getCcRecipients{
  my $self = shift;

                                                                                                                                                                    $self->send_getCcRecipients();
                                                                                  return $self->recv_getCcRecipients();
}

sub send_getCcRecipients{
  my $self = shift;

                                                                                  $self->{output}->writeMessageBegin('getCcRecipients', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_getCcRecipients_args();
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getCcRecipients{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_getCcRecipients_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  if (defined $result->{success} ) {
                                                                                    return $result->{success};
                                                                                  }
                                                                                  die "getCcRecipients failed: unknown result";
}
sub setCcRecipients{
  my $self = shift;
  my $ccRecipients = shift;

                                                                                                                                                                    $self->send_setCcRecipients($ccRecipients);
                                                                                  $self->recv_setCcRecipients();
}

sub send_setCcRecipients{
  my $self = shift;
  my $ccRecipients = shift;

                                                                                  $self->{output}->writeMessageBegin('setCcRecipients', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_setCcRecipients_args();
                                                                                  $args->{ccRecipients} = $ccRecipients;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setCcRecipients{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_setCcRecipients_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub addCcRecipient{
  my $self = shift;
  my $ccRecipient = shift;

                                                                                                                                                                    $self->send_addCcRecipient($ccRecipient);
                                                                                  $self->recv_addCcRecipient();
}

sub send_addCcRecipient{
  my $self = shift;
  my $ccRecipient = shift;

                                                                                  $self->{output}->writeMessageBegin('addCcRecipient', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_addCcRecipient_args();
                                                                                  $args->{ccRecipient} = $ccRecipient;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_addCcRecipient{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_addCcRecipient_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub getBccRecipients{
  my $self = shift;

                                                                                                                                                                    $self->send_getBccRecipients();
                                                                                  return $self->recv_getBccRecipients();
}

sub send_getBccRecipients{
  my $self = shift;

                                                                                  $self->{output}->writeMessageBegin('getBccRecipients', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_getBccRecipients_args();
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_getBccRecipients{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_getBccRecipients_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  if (defined $result->{success} ) {
                                                                                    return $result->{success};
                                                                                  }
                                                                                  die "getBccRecipients failed: unknown result";
}
sub setBccRecipients{
  my $self = shift;
  my $bccRecipients = shift;

                                                                                                                                                                    $self->send_setBccRecipients($bccRecipients);
                                                                                  $self->recv_setBccRecipients();
}

sub send_setBccRecipients{
  my $self = shift;
  my $bccRecipients = shift;

                                                                                  $self->{output}->writeMessageBegin('setBccRecipients', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_setBccRecipients_args();
                                                                                  $args->{bccRecipients} = $bccRecipients;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_setBccRecipients{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_setBccRecipients_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
sub addBccRecipient{
  my $self = shift;
  my $bccRecipient = shift;

                                                                                                                                                                    $self->send_addBccRecipient($bccRecipient);
                                                                                  $self->recv_addBccRecipient();
}

sub send_addBccRecipient{
  my $self = shift;
  my $bccRecipient = shift;

                                                                                  $self->{output}->writeMessageBegin('addBccRecipient', TMessageType::CALL, $self->{seqid});
                                                                                  my $args = new thrift::adept::common::MessageService_addBccRecipient_args();
                                                                                  $args->{bccRecipient} = $bccRecipient;
                                                                                  $args->write($self->{output});
                                                                                  $self->{output}->writeMessageEnd();
                                                                                  $self->{output}->getTransport()->flush();
}

sub recv_addBccRecipient{
  my $self = shift;

                                                                                  my $rseqid = 0;
                                                                                  my $fname;
                                                                                  my $mtype = 0;

                                                                                  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                  if ($mtype == TMessageType::EXCEPTION) {
                                                                                    my $x = new TApplicationException();
                                                                                    $x->read($self->{input});
                                                                                    $self->{input}->readMessageEnd();
                                                                                    die $x;
                                                                                  }
                                                                                  my $result = new thrift::adept::common::MessageService_addBccRecipient_result();
                                                                                  $result->read($self->{input});
                                                                                  $self->{input}->readMessageEnd();

                                                                                  return;
}
package thrift::adept::common::MessageServiceProcessor;

use strict;
use base qw(thrift::adept::common::PassageServiceProcessor);

sub process {
                                                                                    my ($self, $input, $output) = @_;
                                                                                    my $rseqid = 0;
                                                                                    my $fname  = undef;
                                                                                    my $mtype  = 0;

                                                                                    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                                    my $methodname = 'process_'.$fname;
                                                                                    if (!$self->can($methodname)) {
                                                                                      $input->skip(TType::STRUCT);
                                                                                      $input->readMessageEnd();
                                                                                      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                                      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                                      $x->write($output);
                                                                                      $output->writeMessageEnd();
                                                                                      $output->getTransport()->flush();
                                                                                      return;
                                                                                    }
                                                                                    $self->$methodname($rseqid, $input, $output);
                                                                                    return 1;
}

sub process_getSender {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_getSender_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_getSender_result();
                                                                                    $result->{success} = $self->{handler}->getSender();
                                                                                    $output->writeMessageBegin('getSender', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_setSender {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_setSender_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_setSender_result();
                                                                                    $self->{handler}->setSender($args->sender);
                                                                                    $output->writeMessageBegin('setSender', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_getSentDate {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_getSentDate_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_getSentDate_result();
                                                                                    $result->{success} = $self->{handler}->getSentDate();
                                                                                    $output->writeMessageBegin('getSentDate', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_setSentDate {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_setSentDate_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_setSentDate_result();
                                                                                    $self->{handler}->setSentDate($args->sentDate);
                                                                                    $output->writeMessageBegin('setSentDate', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_getPriority {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_getPriority_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_getPriority_result();
                                                                                    $result->{success} = $self->{handler}->getPriority();
                                                                                    $output->writeMessageBegin('getPriority', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_setPriority {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_setPriority_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_setPriority_result();
                                                                                    $self->{handler}->setPriority($args->priority);
                                                                                    $output->writeMessageBegin('setPriority', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_getSubject {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_getSubject_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_getSubject_result();
                                                                                    $result->{success} = $self->{handler}->getSubject();
                                                                                    $output->writeMessageBegin('getSubject', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_setSubject {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_setSubject_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_setSubject_result();
                                                                                    $self->{handler}->setSubject($args->subject);
                                                                                    $output->writeMessageBegin('setSubject', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_getRecipients {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_getRecipients_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_getRecipients_result();
                                                                                    $result->{success} = $self->{handler}->getRecipients();
                                                                                    $output->writeMessageBegin('getRecipients', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_setRecipients {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_setRecipients_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_setRecipients_result();
                                                                                    $self->{handler}->setRecipients($args->recipients);
                                                                                    $output->writeMessageBegin('setRecipients', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_addRecipient {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_addRecipient_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_addRecipient_result();
                                                                                    $self->{handler}->addRecipient($args->recipient);
                                                                                    $output->writeMessageBegin('addRecipient', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_getCcRecipients {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_getCcRecipients_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_getCcRecipients_result();
                                                                                    $result->{success} = $self->{handler}->getCcRecipients();
                                                                                    $output->writeMessageBegin('getCcRecipients', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_setCcRecipients {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_setCcRecipients_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_setCcRecipients_result();
                                                                                    $self->{handler}->setCcRecipients($args->ccRecipients);
                                                                                    $output->writeMessageBegin('setCcRecipients', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_addCcRecipient {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_addCcRecipient_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_addCcRecipient_result();
                                                                                    $self->{handler}->addCcRecipient($args->ccRecipient);
                                                                                    $output->writeMessageBegin('addCcRecipient', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_getBccRecipients {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_getBccRecipients_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_getBccRecipients_result();
                                                                                    $result->{success} = $self->{handler}->getBccRecipients();
                                                                                    $output->writeMessageBegin('getBccRecipients', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_setBccRecipients {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_setBccRecipients_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_setBccRecipients_result();
                                                                                    $self->{handler}->setBccRecipients($args->bccRecipients);
                                                                                    $output->writeMessageBegin('setBccRecipients', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

sub process_addBccRecipient {
                                                                                    my ($self, $seqid, $input, $output) = @_;
                                                                                    my $args = new thrift::adept::common::MessageService_addBccRecipient_args();
                                                                                    $args->read($input);
                                                                                    $input->readMessageEnd();
                                                                                    my $result = new thrift::adept::common::MessageService_addBccRecipient_result();
                                                                                    $self->{handler}->addBccRecipient($args->bccRecipient);
                                                                                    $output->writeMessageBegin('addBccRecipient', TMessageType::REPLY, $seqid);
                                                                                    $result->write($output);
                                                                                    $output->writeMessageEnd();
                                                                                    $output->getTransport()->flush();
}

1;