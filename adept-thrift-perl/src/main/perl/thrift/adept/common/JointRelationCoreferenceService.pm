#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;
use thrift::adept::common::ItemService;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::JointRelationCoreferenceService_getCoreference_args;
use base qw(Class::Accessor);

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_getCoreference_args';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_getCoreference_args');
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceService_getCoreference_result;
use base qw(Class::Accessor);
thrift::adept::common::JointRelationCoreferenceService_getCoreference_result->mk_accessors( qw( success ) );

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              $self->{success} = undef;
                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                if (defined $vals->{success}) {
                                                                  $self->{success} = $vals->{success};
                                                                }
                                                              }
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_getCoreference_result';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                  /^0$/ && do{                                                                  if ($ftype == TType::STRUCT) {
                                                                    $self->{success} = new thrift::adept::common::Coreference();
                                                                    $xfer += $self->{success}->read($input);
                                                                  } else {
                                                                    $xfer += $input->skip($ftype);
                                                                  }
                                                                  last; };
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_getCoreference_result');
                                                              if (defined $self->{success}) {
                                                                $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                                                $xfer += $self->{success}->write($output);
                                                                $xfer += $output->writeFieldEnd();
                                                              }
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceService_getRelations_args;
use base qw(Class::Accessor);

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_getRelations_args';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_getRelations_args');
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceService_getRelations_result;
use base qw(Class::Accessor);
thrift::adept::common::JointRelationCoreferenceService_getRelations_result->mk_accessors( qw( success ) );

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              $self->{success} = undef;
                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                if (defined $vals->{success}) {
                                                                  $self->{success} = $vals->{success};
                                                                }
                                                              }
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_getRelations_result';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                  /^0$/ && do{                                                                  if ($ftype == TType::LIST) {
                                                                    {
                                                                      my $_size510 = 0;
                                                                      $self->{success} = [];
                                                                      my $_etype513 = 0;
                                                                      $xfer += $input->readListBegin(\$_etype513, \$_size510);
                                                                      for (my $_i514 = 0; $_i514 < $_size510; ++$_i514)
                                                                      {
                                                                        my $elem515 = undef;
                                                                        $elem515 = new thrift::adept::common::Relation();
                                                                        $xfer += $elem515->read($input);
                                                                        push(@{$self->{success}},$elem515);
                                                                      }
                                                                      $xfer += $input->readListEnd();
                                                                    }
                                                                  } else {
                                                                    $xfer += $input->skip($ftype);
                                                                  }
                                                                  last; };
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_getRelations_result');
                                                              if (defined $self->{success}) {
                                                                $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                                                                {
                                                                  $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
                                                                  {
                                                                    foreach my $iter516 (@{$self->{success}}) 
                                                                    {
                                                                      $xfer += ${iter516}->write($output);
                                                                    }
                                                                  }
                                                                  $xfer += $output->writeListEnd();
                                                                }
                                                                $xfer += $output->writeFieldEnd();
                                                              }
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceService_setCoreference_args;
use base qw(Class::Accessor);
thrift::adept::common::JointRelationCoreferenceService_setCoreference_args->mk_accessors( qw( coreference ) );

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              $self->{coreference} = undef;
                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                if (defined $vals->{coreference}) {
                                                                  $self->{coreference} = $vals->{coreference};
                                                                }
                                                              }
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_setCoreference_args';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                  /^1$/ && do{                                                                  if ($ftype == TType::STRUCT) {
                                                                    $self->{coreference} = new thrift::adept::common::Coreference();
                                                                    $xfer += $self->{coreference}->read($input);
                                                                  } else {
                                                                    $xfer += $input->skip($ftype);
                                                                  }
                                                                  last; };
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_setCoreference_args');
                                                              if (defined $self->{coreference}) {
                                                                $xfer += $output->writeFieldBegin('coreference', TType::STRUCT, 1);
                                                                $xfer += $self->{coreference}->write($output);
                                                                $xfer += $output->writeFieldEnd();
                                                              }
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceService_setCoreference_result;
use base qw(Class::Accessor);

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_setCoreference_result';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_setCoreference_result');
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceService_setRelations_args;
use base qw(Class::Accessor);
thrift::adept::common::JointRelationCoreferenceService_setRelations_args->mk_accessors( qw( relations ) );

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              $self->{relations} = undef;
                                                              if (UNIVERSAL::isa($vals,'HASH')) {
                                                                if (defined $vals->{relations}) {
                                                                  $self->{relations} = $vals->{relations};
                                                                }
                                                              }
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_setRelations_args';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                  /^1$/ && do{                                                                  if ($ftype == TType::LIST) {
                                                                    {
                                                                      my $_size517 = 0;
                                                                      $self->{relations} = [];
                                                                      my $_etype520 = 0;
                                                                      $xfer += $input->readListBegin(\$_etype520, \$_size517);
                                                                      for (my $_i521 = 0; $_i521 < $_size517; ++$_i521)
                                                                      {
                                                                        my $elem522 = undef;
                                                                        $elem522 = new thrift::adept::common::Relation();
                                                                        $xfer += $elem522->read($input);
                                                                        push(@{$self->{relations}},$elem522);
                                                                      }
                                                                      $xfer += $input->readListEnd();
                                                                    }
                                                                  } else {
                                                                    $xfer += $input->skip($ftype);
                                                                  }
                                                                  last; };
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_setRelations_args');
                                                              if (defined $self->{relations}) {
                                                                $xfer += $output->writeFieldBegin('relations', TType::LIST, 1);
                                                                {
                                                                  $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{relations}}));
                                                                  {
                                                                    foreach my $iter523 (@{$self->{relations}}) 
                                                                    {
                                                                      $xfer += ${iter523}->write($output);
                                                                    }
                                                                  }
                                                                  $xfer += $output->writeListEnd();
                                                                }
                                                                $xfer += $output->writeFieldEnd();
                                                              }
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceService_setRelations_result;
use base qw(Class::Accessor);

sub new {
                                                              my $classname = shift;
                                                              my $self      = {};
                                                              my $vals      = shift || {};
                                                              return bless ($self, $classname);
}

sub getName {
                                                              return 'JointRelationCoreferenceService_setRelations_result';
                                                            }

sub read {
                                                              my ($self, $input) = @_;
                                                              my $xfer  = 0;
                                                              my $fname;
                                                              my $ftype = 0;
                                                              my $fid   = 0;
                                                              $xfer += $input->readStructBegin(\$fname);
                                                              while (1) 
                                                              {
                                                                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                if ($ftype == TType::STOP) {
                                                                  last;
                                                                }
                                                                SWITCH: for($fid)
                                                                {
                                                                    $xfer += $input->skip($ftype);
                                                                }
                                                                $xfer += $input->readFieldEnd();
                                                              }
                                                              $xfer += $input->readStructEnd();
                                                              return $xfer;
                                                            }

sub write {
                                                              my ($self, $output) = @_;
                                                              my $xfer   = 0;
                                                              $xfer += $output->writeStructBegin('JointRelationCoreferenceService_setRelations_result');
                                                              $xfer += $output->writeFieldStop();
                                                              $xfer += $output->writeStructEnd();
                                                              return $xfer;
                                                            }

package thrift::adept::common::JointRelationCoreferenceServiceIf;

use strict;
use base qw(thrift::adept::common::ItemServiceIf);

sub getCoreference{
  my $self = shift;

  die 'implement interface';
}

sub getRelations{
  my $self = shift;

  die 'implement interface';
}

sub setCoreference{
  my $self = shift;
  my $coreference = shift;

  die 'implement interface';
}

sub setRelations{
  my $self = shift;
  my $relations = shift;

  die 'implement interface';
}

package thrift::adept::common::JointRelationCoreferenceServiceRest;

use strict;
use base qw(thrift::adept::common::ItemServiceRest);

sub getCoreference{
                                                              my ($self, $request) = @_;

                                                              return $self->{impl}->getCoreference();
                                                            }

sub getRelations{
                                                              my ($self, $request) = @_;

                                                              return $self->{impl}->getRelations();
                                                            }

sub setCoreference{
                                                              my ($self, $request) = @_;

                                                              my $coreference = ($request->{'coreference'}) ? $request->{'coreference'} : undef;
                                                              return $self->{impl}->setCoreference($coreference);
                                                            }

sub setRelations{
                                                              my ($self, $request) = @_;

                                                              my $relations = ($request->{'relations'}) ? $request->{'relations'} : undef;
                                                              return $self->{impl}->setRelations($relations);
                                                            }

package thrift::adept::common::JointRelationCoreferenceServiceClient;

use base qw(thrift::adept::common::ItemServiceClient);
use base qw(thrift::adept::common::JointRelationCoreferenceServiceIf);
sub new {
                                                              my ($classname, $input, $output) = @_;
                                                              my $self      = {};
                                                              $self = $classname->SUPER::new($input, $output);
                                                              return bless($self,$classname);
}

sub getCoreference{
  my $self = shift;

                                                                                                                            $self->send_getCoreference();
                                                              return $self->recv_getCoreference();
}

sub send_getCoreference{
  my $self = shift;

                                                              $self->{output}->writeMessageBegin('getCoreference', TMessageType::CALL, $self->{seqid});
                                                              my $args = new thrift::adept::common::JointRelationCoreferenceService_getCoreference_args();
                                                              $args->write($self->{output});
                                                              $self->{output}->writeMessageEnd();
                                                              $self->{output}->getTransport()->flush();
}

sub recv_getCoreference{
  my $self = shift;

                                                              my $rseqid = 0;
                                                              my $fname;
                                                              my $mtype = 0;

                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                my $x = new TApplicationException();
                                                                $x->read($self->{input});
                                                                $self->{input}->readMessageEnd();
                                                                die $x;
                                                              }
                                                              my $result = new thrift::adept::common::JointRelationCoreferenceService_getCoreference_result();
                                                              $result->read($self->{input});
                                                              $self->{input}->readMessageEnd();

                                                              if (defined $result->{success} ) {
                                                                return $result->{success};
                                                              }
                                                              die "getCoreference failed: unknown result";
}
sub getRelations{
  my $self = shift;

                                                                                                                            $self->send_getRelations();
                                                              return $self->recv_getRelations();
}

sub send_getRelations{
  my $self = shift;

                                                              $self->{output}->writeMessageBegin('getRelations', TMessageType::CALL, $self->{seqid});
                                                              my $args = new thrift::adept::common::JointRelationCoreferenceService_getRelations_args();
                                                              $args->write($self->{output});
                                                              $self->{output}->writeMessageEnd();
                                                              $self->{output}->getTransport()->flush();
}

sub recv_getRelations{
  my $self = shift;

                                                              my $rseqid = 0;
                                                              my $fname;
                                                              my $mtype = 0;

                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                my $x = new TApplicationException();
                                                                $x->read($self->{input});
                                                                $self->{input}->readMessageEnd();
                                                                die $x;
                                                              }
                                                              my $result = new thrift::adept::common::JointRelationCoreferenceService_getRelations_result();
                                                              $result->read($self->{input});
                                                              $self->{input}->readMessageEnd();

                                                              if (defined $result->{success} ) {
                                                                return $result->{success};
                                                              }
                                                              die "getRelations failed: unknown result";
}
sub setCoreference{
  my $self = shift;
  my $coreference = shift;

                                                                                                                            $self->send_setCoreference($coreference);
                                                              $self->recv_setCoreference();
}

sub send_setCoreference{
  my $self = shift;
  my $coreference = shift;

                                                              $self->{output}->writeMessageBegin('setCoreference', TMessageType::CALL, $self->{seqid});
                                                              my $args = new thrift::adept::common::JointRelationCoreferenceService_setCoreference_args();
                                                              $args->{coreference} = $coreference;
                                                              $args->write($self->{output});
                                                              $self->{output}->writeMessageEnd();
                                                              $self->{output}->getTransport()->flush();
}

sub recv_setCoreference{
  my $self = shift;

                                                              my $rseqid = 0;
                                                              my $fname;
                                                              my $mtype = 0;

                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                my $x = new TApplicationException();
                                                                $x->read($self->{input});
                                                                $self->{input}->readMessageEnd();
                                                                die $x;
                                                              }
                                                              my $result = new thrift::adept::common::JointRelationCoreferenceService_setCoreference_result();
                                                              $result->read($self->{input});
                                                              $self->{input}->readMessageEnd();

                                                              return;
}
sub setRelations{
  my $self = shift;
  my $relations = shift;

                                                                                                                            $self->send_setRelations($relations);
                                                              $self->recv_setRelations();
}

sub send_setRelations{
  my $self = shift;
  my $relations = shift;

                                                              $self->{output}->writeMessageBegin('setRelations', TMessageType::CALL, $self->{seqid});
                                                              my $args = new thrift::adept::common::JointRelationCoreferenceService_setRelations_args();
                                                              $args->{relations} = $relations;
                                                              $args->write($self->{output});
                                                              $self->{output}->writeMessageEnd();
                                                              $self->{output}->getTransport()->flush();
}

sub recv_setRelations{
  my $self = shift;

                                                              my $rseqid = 0;
                                                              my $fname;
                                                              my $mtype = 0;

                                                              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                              if ($mtype == TMessageType::EXCEPTION) {
                                                                my $x = new TApplicationException();
                                                                $x->read($self->{input});
                                                                $self->{input}->readMessageEnd();
                                                                die $x;
                                                              }
                                                              my $result = new thrift::adept::common::JointRelationCoreferenceService_setRelations_result();
                                                              $result->read($self->{input});
                                                              $self->{input}->readMessageEnd();

                                                              return;
}
package thrift::adept::common::JointRelationCoreferenceServiceProcessor;

use strict;
use base qw(thrift::adept::common::ItemServiceProcessor);

sub process {
                                                                my ($self, $input, $output) = @_;
                                                                my $rseqid = 0;
                                                                my $fname  = undef;
                                                                my $mtype  = 0;

                                                                $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                my $methodname = 'process_'.$fname;
                                                                if (!$self->can($methodname)) {
                                                                  $input->skip(TType::STRUCT);
                                                                  $input->readMessageEnd();
                                                                  my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                  $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                  $x->write($output);
                                                                  $output->writeMessageEnd();
                                                                  $output->getTransport()->flush();
                                                                  return;
                                                                }
                                                                $self->$methodname($rseqid, $input, $output);
                                                                return 1;
}

sub process_getCoreference {
                                                                my ($self, $seqid, $input, $output) = @_;
                                                                my $args = new thrift::adept::common::JointRelationCoreferenceService_getCoreference_args();
                                                                $args->read($input);
                                                                $input->readMessageEnd();
                                                                my $result = new thrift::adept::common::JointRelationCoreferenceService_getCoreference_result();
                                                                $result->{success} = $self->{handler}->getCoreference();
                                                                $output->writeMessageBegin('getCoreference', TMessageType::REPLY, $seqid);
                                                                $result->write($output);
                                                                $output->writeMessageEnd();
                                                                $output->getTransport()->flush();
}

sub process_getRelations {
                                                                my ($self, $seqid, $input, $output) = @_;
                                                                my $args = new thrift::adept::common::JointRelationCoreferenceService_getRelations_args();
                                                                $args->read($input);
                                                                $input->readMessageEnd();
                                                                my $result = new thrift::adept::common::JointRelationCoreferenceService_getRelations_result();
                                                                $result->{success} = $self->{handler}->getRelations();
                                                                $output->writeMessageBegin('getRelations', TMessageType::REPLY, $seqid);
                                                                $result->write($output);
                                                                $output->writeMessageEnd();
                                                                $output->getTransport()->flush();
}

sub process_setCoreference {
                                                                my ($self, $seqid, $input, $output) = @_;
                                                                my $args = new thrift::adept::common::JointRelationCoreferenceService_setCoreference_args();
                                                                $args->read($input);
                                                                $input->readMessageEnd();
                                                                my $result = new thrift::adept::common::JointRelationCoreferenceService_setCoreference_result();
                                                                $self->{handler}->setCoreference($args->coreference);
                                                                $output->writeMessageBegin('setCoreference', TMessageType::REPLY, $seqid);
                                                                $result->write($output);
                                                                $output->writeMessageEnd();
                                                                $output->getTransport()->flush();
}

sub process_setRelations {
                                                                my ($self, $seqid, $input, $output) = @_;
                                                                my $args = new thrift::adept::common::JointRelationCoreferenceService_setRelations_args();
                                                                $args->read($input);
                                                                $input->readMessageEnd();
                                                                my $result = new thrift::adept::common::JointRelationCoreferenceService_setRelations_result();
                                                                $self->{handler}->setRelations($args->relations);
                                                                $output->writeMessageBegin('setRelations', TMessageType::REPLY, $seqid);
                                                                $result->write($output);
                                                                $output->writeMessageEnd();
                                                                $output->getTransport()->flush();
}

1;
