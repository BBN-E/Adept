#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::CorpusService_getCorpusId_args;
use base qw(Class::Accessor);

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getCorpusId_args';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getCorpusId_args');
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getCorpusId_result;
use base qw(Class::Accessor);
thrift::adept::common::CorpusService_getCorpusId_result->mk_accessors( qw( success ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{success} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{success}) {
                              $self->{success} = $vals->{success};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getCorpusId_result';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^0$/ && do{                              if ($ftype == TType::STRING) {
                                $xfer += $input->readString(\$self->{success});
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getCorpusId_result');
                          if (defined $self->{success}) {
                            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                            $xfer += $output->writeString($self->{success});
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getId_args;
use base qw(Class::Accessor);

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getId_args';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getId_args');
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getId_result;
use base qw(Class::Accessor);
thrift::adept::common::CorpusService_getId_result->mk_accessors( qw( success ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{success} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{success}) {
                              $self->{success} = $vals->{success};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getId_result';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^0$/ && do{                              if ($ftype == TType::STRUCT) {
                                $self->{success} = new thrift::adept::common::ID();
                                $xfer += $self->{success}->read($input);
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getId_result');
                          if (defined $self->{success}) {
                            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                            $xfer += $self->{success}->write($output);
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getIdString_args;
use base qw(Class::Accessor);

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getIdString_args';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getIdString_args');
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getIdString_result;
use base qw(Class::Accessor);
thrift::adept::common::CorpusService_getIdString_result->mk_accessors( qw( success ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{success} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{success}) {
                              $self->{success} = $vals->{success};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getIdString_result';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^0$/ && do{                              if ($ftype == TType::STRING) {
                                $xfer += $input->readString(\$self->{success});
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getIdString_result');
                          if (defined $self->{success}) {
                            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                            $xfer += $output->writeString($self->{success});
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getName_args;
use base qw(Class::Accessor);

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getName_args';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getName_args');
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getName_result;
use base qw(Class::Accessor);
thrift::adept::common::CorpusService_getName_result->mk_accessors( qw( success ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{success} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{success}) {
                              $self->{success} = $vals->{success};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getName_result';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^0$/ && do{                              if ($ftype == TType::STRING) {
                                $xfer += $input->readString(\$self->{success});
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getName_result');
                          if (defined $self->{success}) {
                            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                            $xfer += $output->writeString($self->{success});
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getType_args;
use base qw(Class::Accessor);

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getType_args';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getType_args');
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getType_result;
use base qw(Class::Accessor);
thrift::adept::common::CorpusService_getType_result->mk_accessors( qw( success ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{success} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{success}) {
                              $self->{success} = $vals->{success};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getType_result';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^0$/ && do{                              if ($ftype == TType::STRING) {
                                $xfer += $input->readString(\$self->{success});
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getType_result');
                          if (defined $self->{success}) {
                            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                            $xfer += $output->writeString($self->{success});
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getUri_args;
use base qw(Class::Accessor);

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getUri_args';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getUri_args');
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusService_getUri_result;
use base qw(Class::Accessor);
thrift::adept::common::CorpusService_getUri_result->mk_accessors( qw( success ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{success} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{success}) {
                              $self->{success} = $vals->{success};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'CorpusService_getUri_result';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^0$/ && do{                              if ($ftype == TType::STRING) {
                                $xfer += $input->readString(\$self->{success});
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('CorpusService_getUri_result');
                          if (defined $self->{success}) {
                            $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                            $xfer += $output->writeString($self->{success});
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package thrift::adept::common::CorpusServiceIf;

use strict;


sub getCorpusId{
  my $self = shift;

  die 'implement interface';
}

sub getId{
  my $self = shift;

  die 'implement interface';
}

sub getIdString{
  my $self = shift;

  die 'implement interface';
}

sub getName{
  my $self = shift;

  die 'implement interface';
}

sub getType{
  my $self = shift;

  die 'implement interface';
}

sub getUri{
  my $self = shift;

  die 'implement interface';
}

package thrift::adept::common::CorpusServiceRest;

use strict;


sub new {
                          my ($classname, $impl) = @_;
                          my $self     ={ impl => $impl };

                          return bless($self,$classname);
}

sub getCorpusId{
                          my ($self, $request) = @_;

                          return $self->{impl}->getCorpusId();
                        }

sub getId{
                          my ($self, $request) = @_;

                          return $self->{impl}->getId();
                        }

sub getIdString{
                          my ($self, $request) = @_;

                          return $self->{impl}->getIdString();
                        }

sub getName{
                          my ($self, $request) = @_;

                          return $self->{impl}->getName();
                        }

sub getType{
                          my ($self, $request) = @_;

                          return $self->{impl}->getType();
                        }

sub getUri{
                          my ($self, $request) = @_;

                          return $self->{impl}->getUri();
                        }

package thrift::adept::common::CorpusServiceClient;


use base qw(thrift::adept::common::CorpusServiceIf);
sub new {
                          my ($classname, $input, $output) = @_;
                          my $self      = {};
                          $self->{input}  = $input;
                          $self->{output} = defined $output ? $output : $input;
                          $self->{seqid}  = 0;
                          return bless($self,$classname);
}

sub getCorpusId{
  my $self = shift;

                                                    $self->send_getCorpusId();
                          return $self->recv_getCorpusId();
}

sub send_getCorpusId{
  my $self = shift;

                          $self->{output}->writeMessageBegin('getCorpusId', TMessageType::CALL, $self->{seqid});
                          my $args = new thrift::adept::common::CorpusService_getCorpusId_args();
                          $args->write($self->{output});
                          $self->{output}->writeMessageEnd();
                          $self->{output}->getTransport()->flush();
}

sub recv_getCorpusId{
  my $self = shift;

                          my $rseqid = 0;
                          my $fname;
                          my $mtype = 0;

                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          if ($mtype == TMessageType::EXCEPTION) {
                            my $x = new TApplicationException();
                            $x->read($self->{input});
                            $self->{input}->readMessageEnd();
                            die $x;
                          }
                          my $result = new thrift::adept::common::CorpusService_getCorpusId_result();
                          $result->read($self->{input});
                          $self->{input}->readMessageEnd();

                          if (defined $result->{success} ) {
                            return $result->{success};
                          }
                          die "getCorpusId failed: unknown result";
}
sub getId{
  my $self = shift;

                                                    $self->send_getId();
                          return $self->recv_getId();
}

sub send_getId{
  my $self = shift;

                          $self->{output}->writeMessageBegin('getId', TMessageType::CALL, $self->{seqid});
                          my $args = new thrift::adept::common::CorpusService_getId_args();
                          $args->write($self->{output});
                          $self->{output}->writeMessageEnd();
                          $self->{output}->getTransport()->flush();
}

sub recv_getId{
  my $self = shift;

                          my $rseqid = 0;
                          my $fname;
                          my $mtype = 0;

                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          if ($mtype == TMessageType::EXCEPTION) {
                            my $x = new TApplicationException();
                            $x->read($self->{input});
                            $self->{input}->readMessageEnd();
                            die $x;
                          }
                          my $result = new thrift::adept::common::CorpusService_getId_result();
                          $result->read($self->{input});
                          $self->{input}->readMessageEnd();

                          if (defined $result->{success} ) {
                            return $result->{success};
                          }
                          die "getId failed: unknown result";
}
sub getIdString{
  my $self = shift;

                                                    $self->send_getIdString();
                          return $self->recv_getIdString();
}

sub send_getIdString{
  my $self = shift;

                          $self->{output}->writeMessageBegin('getIdString', TMessageType::CALL, $self->{seqid});
                          my $args = new thrift::adept::common::CorpusService_getIdString_args();
                          $args->write($self->{output});
                          $self->{output}->writeMessageEnd();
                          $self->{output}->getTransport()->flush();
}

sub recv_getIdString{
  my $self = shift;

                          my $rseqid = 0;
                          my $fname;
                          my $mtype = 0;

                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          if ($mtype == TMessageType::EXCEPTION) {
                            my $x = new TApplicationException();
                            $x->read($self->{input});
                            $self->{input}->readMessageEnd();
                            die $x;
                          }
                          my $result = new thrift::adept::common::CorpusService_getIdString_result();
                          $result->read($self->{input});
                          $self->{input}->readMessageEnd();

                          if (defined $result->{success} ) {
                            return $result->{success};
                          }
                          die "getIdString failed: unknown result";
}
sub getName{
  my $self = shift;

                                                    $self->send_getName();
                          return $self->recv_getName();
}

sub send_getName{
  my $self = shift;

                          $self->{output}->writeMessageBegin('getName', TMessageType::CALL, $self->{seqid});
                          my $args = new thrift::adept::common::CorpusService_getName_args();
                          $args->write($self->{output});
                          $self->{output}->writeMessageEnd();
                          $self->{output}->getTransport()->flush();
}

sub recv_getName{
  my $self = shift;

                          my $rseqid = 0;
                          my $fname;
                          my $mtype = 0;

                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          if ($mtype == TMessageType::EXCEPTION) {
                            my $x = new TApplicationException();
                            $x->read($self->{input});
                            $self->{input}->readMessageEnd();
                            die $x;
                          }
                          my $result = new thrift::adept::common::CorpusService_getName_result();
                          $result->read($self->{input});
                          $self->{input}->readMessageEnd();

                          if (defined $result->{success} ) {
                            return $result->{success};
                          }
                          die "getName failed: unknown result";
}
sub getType{
  my $self = shift;

                                                    $self->send_getType();
                          return $self->recv_getType();
}

sub send_getType{
  my $self = shift;

                          $self->{output}->writeMessageBegin('getType', TMessageType::CALL, $self->{seqid});
                          my $args = new thrift::adept::common::CorpusService_getType_args();
                          $args->write($self->{output});
                          $self->{output}->writeMessageEnd();
                          $self->{output}->getTransport()->flush();
}

sub recv_getType{
  my $self = shift;

                          my $rseqid = 0;
                          my $fname;
                          my $mtype = 0;

                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          if ($mtype == TMessageType::EXCEPTION) {
                            my $x = new TApplicationException();
                            $x->read($self->{input});
                            $self->{input}->readMessageEnd();
                            die $x;
                          }
                          my $result = new thrift::adept::common::CorpusService_getType_result();
                          $result->read($self->{input});
                          $self->{input}->readMessageEnd();

                          if (defined $result->{success} ) {
                            return $result->{success};
                          }
                          die "getType failed: unknown result";
}
sub getUri{
  my $self = shift;

                                                    $self->send_getUri();
                          return $self->recv_getUri();
}

sub send_getUri{
  my $self = shift;

                          $self->{output}->writeMessageBegin('getUri', TMessageType::CALL, $self->{seqid});
                          my $args = new thrift::adept::common::CorpusService_getUri_args();
                          $args->write($self->{output});
                          $self->{output}->writeMessageEnd();
                          $self->{output}->getTransport()->flush();
}

sub recv_getUri{
  my $self = shift;

                          my $rseqid = 0;
                          my $fname;
                          my $mtype = 0;

                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          if ($mtype == TMessageType::EXCEPTION) {
                            my $x = new TApplicationException();
                            $x->read($self->{input});
                            $self->{input}->readMessageEnd();
                            die $x;
                          }
                          my $result = new thrift::adept::common::CorpusService_getUri_result();
                          $result->read($self->{input});
                          $self->{input}->readMessageEnd();

                          if (defined $result->{success} ) {
                            return $result->{success};
                          }
                          die "getUri failed: unknown result";
}
package thrift::adept::common::CorpusServiceProcessor;

use strict;


sub new {
                            my ($classname, $handler) = @_;
                            my $self      = {};
                            $self->{handler} = $handler;
                            return bless ($self, $classname);
}

sub process {
                            my ($self, $input, $output) = @_;
                            my $rseqid = 0;
                            my $fname  = undef;
                            my $mtype  = 0;

                            $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            my $methodname = 'process_'.$fname;
                            if (!$self->can($methodname)) {
                              $input->skip(TType::STRUCT);
                              $input->readMessageEnd();
                              my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                              $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                              $x->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
                              return;
                            }
                            $self->$methodname($rseqid, $input, $output);
                            return 1;
}

sub process_getCorpusId {
                            my ($self, $seqid, $input, $output) = @_;
                            my $args = new thrift::adept::common::CorpusService_getCorpusId_args();
                            $args->read($input);
                            $input->readMessageEnd();
                            my $result = new thrift::adept::common::CorpusService_getCorpusId_result();
                            $result->{success} = $self->{handler}->getCorpusId();
                            $output->writeMessageBegin('getCorpusId', TMessageType::REPLY, $seqid);
                            $result->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
}

sub process_getId {
                            my ($self, $seqid, $input, $output) = @_;
                            my $args = new thrift::adept::common::CorpusService_getId_args();
                            $args->read($input);
                            $input->readMessageEnd();
                            my $result = new thrift::adept::common::CorpusService_getId_result();
                            $result->{success} = $self->{handler}->getId();
                            $output->writeMessageBegin('getId', TMessageType::REPLY, $seqid);
                            $result->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
}

sub process_getIdString {
                            my ($self, $seqid, $input, $output) = @_;
                            my $args = new thrift::adept::common::CorpusService_getIdString_args();
                            $args->read($input);
                            $input->readMessageEnd();
                            my $result = new thrift::adept::common::CorpusService_getIdString_result();
                            $result->{success} = $self->{handler}->getIdString();
                            $output->writeMessageBegin('getIdString', TMessageType::REPLY, $seqid);
                            $result->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
}

sub process_getName {
                            my ($self, $seqid, $input, $output) = @_;
                            my $args = new thrift::adept::common::CorpusService_getName_args();
                            $args->read($input);
                            $input->readMessageEnd();
                            my $result = new thrift::adept::common::CorpusService_getName_result();
                            $result->{success} = $self->{handler}->getName();
                            $output->writeMessageBegin('getName', TMessageType::REPLY, $seqid);
                            $result->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
}

sub process_getType {
                            my ($self, $seqid, $input, $output) = @_;
                            my $args = new thrift::adept::common::CorpusService_getType_args();
                            $args->read($input);
                            $input->readMessageEnd();
                            my $result = new thrift::adept::common::CorpusService_getType_result();
                            $result->{success} = $self->{handler}->getType();
                            $output->writeMessageBegin('getType', TMessageType::REPLY, $seqid);
                            $result->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
}

sub process_getUri {
                            my ($self, $seqid, $input, $output) = @_;
                            my $args = new thrift::adept::common::CorpusService_getUri_args();
                            $args->read($input);
                            $input->readMessageEnd();
                            my $result = new thrift::adept::common::CorpusService_getUri_result();
                            $result->{success} = $self->{handler}->getUri();
                            $output->writeMessageBegin('getUri', TMessageType::REPLY, $seqid);
                            $result->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
}

1;
