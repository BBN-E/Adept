#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::common::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::common::TranslationService_getSourceChunk_args;
use base qw(Class::Accessor);

sub new {
                                                                      my $classname = shift;
                                                                      my $self      = {};
                                                                      my $vals      = shift || {};
                                                                      return bless ($self, $classname);
}

sub getName {
                                                                      return 'TranslationService_getSourceChunk_args';
                                                                    }

sub read {
                                                                      my ($self, $input) = @_;
                                                                      my $xfer  = 0;
                                                                      my $fname;
                                                                      my $ftype = 0;
                                                                      my $fid   = 0;
                                                                      $xfer += $input->readStructBegin(\$fname);
                                                                      while (1) 
                                                                      {
                                                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                        if ($ftype == TType::STOP) {
                                                                          last;
                                                                        }
                                                                        SWITCH: for($fid)
                                                                        {
                                                                            $xfer += $input->skip($ftype);
                                                                        }
                                                                        $xfer += $input->readFieldEnd();
                                                                      }
                                                                      $xfer += $input->readStructEnd();
                                                                      return $xfer;
                                                                    }

sub write {
                                                                      my ($self, $output) = @_;
                                                                      my $xfer   = 0;
                                                                      $xfer += $output->writeStructBegin('TranslationService_getSourceChunk_args');
                                                                      $xfer += $output->writeFieldStop();
                                                                      $xfer += $output->writeStructEnd();
                                                                      return $xfer;
                                                                    }

package thrift::adept::common::TranslationService_getSourceChunk_result;
use base qw(Class::Accessor);
thrift::adept::common::TranslationService_getSourceChunk_result->mk_accessors( qw( success ) );

sub new {
                                                                      my $classname = shift;
                                                                      my $self      = {};
                                                                      my $vals      = shift || {};
                                                                      $self->{success} = undef;
                                                                      if (UNIVERSAL::isa($vals,'HASH')) {
                                                                        if (defined $vals->{success}) {
                                                                          $self->{success} = $vals->{success};
                                                                        }
                                                                      }
                                                                      return bless ($self, $classname);
}

sub getName {
                                                                      return 'TranslationService_getSourceChunk_result';
                                                                    }

sub read {
                                                                      my ($self, $input) = @_;
                                                                      my $xfer  = 0;
                                                                      my $fname;
                                                                      my $ftype = 0;
                                                                      my $fid   = 0;
                                                                      $xfer += $input->readStructBegin(\$fname);
                                                                      while (1) 
                                                                      {
                                                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                        if ($ftype == TType::STOP) {
                                                                          last;
                                                                        }
                                                                        SWITCH: for($fid)
                                                                        {
                                                                          /^0$/ && do{                                                                          if ($ftype == TType::STRUCT) {
                                                                            $self->{success} = new thrift::adept::common::ChunkUnion();
                                                                            $xfer += $self->{success}->read($input);
                                                                          } else {
                                                                            $xfer += $input->skip($ftype);
                                                                          }
                                                                          last; };
                                                                            $xfer += $input->skip($ftype);
                                                                        }
                                                                        $xfer += $input->readFieldEnd();
                                                                      }
                                                                      $xfer += $input->readStructEnd();
                                                                      return $xfer;
                                                                    }

sub write {
                                                                      my ($self, $output) = @_;
                                                                      my $xfer   = 0;
                                                                      $xfer += $output->writeStructBegin('TranslationService_getSourceChunk_result');
                                                                      if (defined $self->{success}) {
                                                                        $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                                                        $xfer += $self->{success}->write($output);
                                                                        $xfer += $output->writeFieldEnd();
                                                                      }
                                                                      $xfer += $output->writeFieldStop();
                                                                      $xfer += $output->writeStructEnd();
                                                                      return $xfer;
                                                                    }

package thrift::adept::common::TranslationService_getTargetChunk_args;
use base qw(Class::Accessor);

sub new {
                                                                      my $classname = shift;
                                                                      my $self      = {};
                                                                      my $vals      = shift || {};
                                                                      return bless ($self, $classname);
}

sub getName {
                                                                      return 'TranslationService_getTargetChunk_args';
                                                                    }

sub read {
                                                                      my ($self, $input) = @_;
                                                                      my $xfer  = 0;
                                                                      my $fname;
                                                                      my $ftype = 0;
                                                                      my $fid   = 0;
                                                                      $xfer += $input->readStructBegin(\$fname);
                                                                      while (1) 
                                                                      {
                                                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                        if ($ftype == TType::STOP) {
                                                                          last;
                                                                        }
                                                                        SWITCH: for($fid)
                                                                        {
                                                                            $xfer += $input->skip($ftype);
                                                                        }
                                                                        $xfer += $input->readFieldEnd();
                                                                      }
                                                                      $xfer += $input->readStructEnd();
                                                                      return $xfer;
                                                                    }

sub write {
                                                                      my ($self, $output) = @_;
                                                                      my $xfer   = 0;
                                                                      $xfer += $output->writeStructBegin('TranslationService_getTargetChunk_args');
                                                                      $xfer += $output->writeFieldStop();
                                                                      $xfer += $output->writeStructEnd();
                                                                      return $xfer;
                                                                    }

package thrift::adept::common::TranslationService_getTargetChunk_result;
use base qw(Class::Accessor);
thrift::adept::common::TranslationService_getTargetChunk_result->mk_accessors( qw( success ) );

sub new {
                                                                      my $classname = shift;
                                                                      my $self      = {};
                                                                      my $vals      = shift || {};
                                                                      $self->{success} = undef;
                                                                      if (UNIVERSAL::isa($vals,'HASH')) {
                                                                        if (defined $vals->{success}) {
                                                                          $self->{success} = $vals->{success};
                                                                        }
                                                                      }
                                                                      return bless ($self, $classname);
}

sub getName {
                                                                      return 'TranslationService_getTargetChunk_result';
                                                                    }

sub read {
                                                                      my ($self, $input) = @_;
                                                                      my $xfer  = 0;
                                                                      my $fname;
                                                                      my $ftype = 0;
                                                                      my $fid   = 0;
                                                                      $xfer += $input->readStructBegin(\$fname);
                                                                      while (1) 
                                                                      {
                                                                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                                                        if ($ftype == TType::STOP) {
                                                                          last;
                                                                        }
                                                                        SWITCH: for($fid)
                                                                        {
                                                                          /^0$/ && do{                                                                          if ($ftype == TType::STRUCT) {
                                                                            $self->{success} = new thrift::adept::common::ChunkUnion();
                                                                            $xfer += $self->{success}->read($input);
                                                                          } else {
                                                                            $xfer += $input->skip($ftype);
                                                                          }
                                                                          last; };
                                                                            $xfer += $input->skip($ftype);
                                                                        }
                                                                        $xfer += $input->readFieldEnd();
                                                                      }
                                                                      $xfer += $input->readStructEnd();
                                                                      return $xfer;
                                                                    }

sub write {
                                                                      my ($self, $output) = @_;
                                                                      my $xfer   = 0;
                                                                      $xfer += $output->writeStructBegin('TranslationService_getTargetChunk_result');
                                                                      if (defined $self->{success}) {
                                                                        $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
                                                                        $xfer += $self->{success}->write($output);
                                                                        $xfer += $output->writeFieldEnd();
                                                                      }
                                                                      $xfer += $output->writeFieldStop();
                                                                      $xfer += $output->writeStructEnd();
                                                                      return $xfer;
                                                                    }

package thrift::adept::common::TranslationServiceIf;

use strict;


sub getSourceChunk{
  my $self = shift;

  die 'implement interface';
}

sub getTargetChunk{
  my $self = shift;

  die 'implement interface';
}

package thrift::adept::common::TranslationServiceRest;

use strict;


sub new {
                                                                      my ($classname, $impl) = @_;
                                                                      my $self     ={ impl => $impl };

                                                                      return bless($self,$classname);
}

sub getSourceChunk{
                                                                      my ($self, $request) = @_;

                                                                      return $self->{impl}->getSourceChunk();
                                                                    }

sub getTargetChunk{
                                                                      my ($self, $request) = @_;

                                                                      return $self->{impl}->getTargetChunk();
                                                                    }

package thrift::adept::common::TranslationServiceClient;


use base qw(thrift::adept::common::TranslationServiceIf);
sub new {
                                                                      my ($classname, $input, $output) = @_;
                                                                      my $self      = {};
                                                                      $self->{input}  = $input;
                                                                      $self->{output} = defined $output ? $output : $input;
                                                                      $self->{seqid}  = 0;
                                                                      return bless($self,$classname);
}

sub getSourceChunk{
  my $self = shift;

                                                                                                                                            $self->send_getSourceChunk();
                                                                      return $self->recv_getSourceChunk();
}

sub send_getSourceChunk{
  my $self = shift;

                                                                      $self->{output}->writeMessageBegin('getSourceChunk', TMessageType::CALL, $self->{seqid});
                                                                      my $args = new thrift::adept::common::TranslationService_getSourceChunk_args();
                                                                      $args->write($self->{output});
                                                                      $self->{output}->writeMessageEnd();
                                                                      $self->{output}->getTransport()->flush();
}

sub recv_getSourceChunk{
  my $self = shift;

                                                                      my $rseqid = 0;
                                                                      my $fname;
                                                                      my $mtype = 0;

                                                                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                      if ($mtype == TMessageType::EXCEPTION) {
                                                                        my $x = new TApplicationException();
                                                                        $x->read($self->{input});
                                                                        $self->{input}->readMessageEnd();
                                                                        die $x;
                                                                      }
                                                                      my $result = new thrift::adept::common::TranslationService_getSourceChunk_result();
                                                                      $result->read($self->{input});
                                                                      $self->{input}->readMessageEnd();

                                                                      if (defined $result->{success} ) {
                                                                        return $result->{success};
                                                                      }
                                                                      die "getSourceChunk failed: unknown result";
}
sub getTargetChunk{
  my $self = shift;

                                                                                                                                            $self->send_getTargetChunk();
                                                                      return $self->recv_getTargetChunk();
}

sub send_getTargetChunk{
  my $self = shift;

                                                                      $self->{output}->writeMessageBegin('getTargetChunk', TMessageType::CALL, $self->{seqid});
                                                                      my $args = new thrift::adept::common::TranslationService_getTargetChunk_args();
                                                                      $args->write($self->{output});
                                                                      $self->{output}->writeMessageEnd();
                                                                      $self->{output}->getTransport()->flush();
}

sub recv_getTargetChunk{
  my $self = shift;

                                                                      my $rseqid = 0;
                                                                      my $fname;
                                                                      my $mtype = 0;

                                                                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                      if ($mtype == TMessageType::EXCEPTION) {
                                                                        my $x = new TApplicationException();
                                                                        $x->read($self->{input});
                                                                        $self->{input}->readMessageEnd();
                                                                        die $x;
                                                                      }
                                                                      my $result = new thrift::adept::common::TranslationService_getTargetChunk_result();
                                                                      $result->read($self->{input});
                                                                      $self->{input}->readMessageEnd();

                                                                      if (defined $result->{success} ) {
                                                                        return $result->{success};
                                                                      }
                                                                      die "getTargetChunk failed: unknown result";
}
package thrift::adept::common::TranslationServiceProcessor;

use strict;


sub new {
                                                                        my ($classname, $handler) = @_;
                                                                        my $self      = {};
                                                                        $self->{handler} = $handler;
                                                                        return bless ($self, $classname);
}

sub process {
                                                                        my ($self, $input, $output) = @_;
                                                                        my $rseqid = 0;
                                                                        my $fname  = undef;
                                                                        my $mtype  = 0;

                                                                        $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                                                        my $methodname = 'process_'.$fname;
                                                                        if (!$self->can($methodname)) {
                                                                          $input->skip(TType::STRUCT);
                                                                          $input->readMessageEnd();
                                                                          my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                                                                          $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                                                                          $x->write($output);
                                                                          $output->writeMessageEnd();
                                                                          $output->getTransport()->flush();
                                                                          return;
                                                                        }
                                                                        $self->$methodname($rseqid, $input, $output);
                                                                        return 1;
}

sub process_getSourceChunk {
                                                                        my ($self, $seqid, $input, $output) = @_;
                                                                        my $args = new thrift::adept::common::TranslationService_getSourceChunk_args();
                                                                        $args->read($input);
                                                                        $input->readMessageEnd();
                                                                        my $result = new thrift::adept::common::TranslationService_getSourceChunk_result();
                                                                        $result->{success} = $self->{handler}->getSourceChunk();
                                                                        $output->writeMessageBegin('getSourceChunk', TMessageType::REPLY, $seqid);
                                                                        $result->write($output);
                                                                        $output->writeMessageEnd();
                                                                        $output->getTransport()->flush();
}

sub process_getTargetChunk {
                                                                        my ($self, $seqid, $input, $output) = @_;
                                                                        my $args = new thrift::adept::common::TranslationService_getTargetChunk_args();
                                                                        $args->read($input);
                                                                        $input->readMessageEnd();
                                                                        my $result = new thrift::adept::common::TranslationService_getTargetChunk_result();
                                                                        $result->{success} = $self->{handler}->getTargetChunk();
                                                                        $output->writeMessageBegin('getTargetChunk', TMessageType::REPLY, $seqid);
                                                                        $result->write($output);
                                                                        $output->writeMessageEnd();
                                                                        $output->getTransport()->flush();
}

1;
