################################################################################
#
# Copyright (C) 2016 Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################
#
#
#

#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::module::Types;
use thrift::adept::common::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::module::PassagePairProcessor_process_args;
use base qw(Class::Accessor);
thrift::adept::module::PassagePairProcessor_process_args->mk_accessors( qw( passage1 passage2 ) );

sub new {
              my $classname = shift;
              my $self      = {};
              my $vals      = shift || {};
              $self->{passage1} = undef;
              $self->{passage2} = undef;
              if (UNIVERSAL::isa($vals,'HASH')) {
                if (defined $vals->{passage1}) {
                  $self->{passage1} = $vals->{passage1};
                }
                if (defined $vals->{passage2}) {
                  $self->{passage2} = $vals->{passage2};
                }
              }
              return bless ($self, $classname);
}

sub getName {
              return 'PassagePairProcessor_process_args';
            }

sub read {
              my ($self, $input) = @_;
              my $xfer  = 0;
              my $fname;
              my $ftype = 0;
              my $fid   = 0;
              $xfer += $input->readStructBegin(\$fname);
              while (1) 
              {
                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                if ($ftype == TType::STOP) {
                  last;
                }
                SWITCH: for($fid)
                {
                  /^1$/ && do{                  if ($ftype == TType::STRUCT) {
                    $self->{passage1} = new thrift::adept::common::Passage();
                    $xfer += $self->{passage1}->read($input);
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                  /^2$/ && do{                  if ($ftype == TType::STRUCT) {
                    $self->{passage2} = new thrift::adept::common::Passage();
                    $xfer += $self->{passage2}->read($input);
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                    $xfer += $input->skip($ftype);
                }
                $xfer += $input->readFieldEnd();
              }
              $xfer += $input->readStructEnd();
              return $xfer;
            }

sub write {
              my ($self, $output) = @_;
              my $xfer   = 0;
              $xfer += $output->writeStructBegin('PassagePairProcessor_process_args');
              if (defined $self->{passage1}) {
                $xfer += $output->writeFieldBegin('passage1', TType::STRUCT, 1);
                $xfer += $self->{passage1}->write($output);
                $xfer += $output->writeFieldEnd();
              }
              if (defined $self->{passage2}) {
                $xfer += $output->writeFieldBegin('passage2', TType::STRUCT, 2);
                $xfer += $self->{passage2}->write($output);
                $xfer += $output->writeFieldEnd();
              }
              $xfer += $output->writeFieldStop();
              $xfer += $output->writeStructEnd();
              return $xfer;
            }

package thrift::adept::module::PassagePairProcessor_process_result;
use base qw(Class::Accessor);
thrift::adept::module::PassagePairProcessor_process_result->mk_accessors( qw( success ) );

sub new {
              my $classname = shift;
              my $self      = {};
              my $vals      = shift || {};
              $self->{success} = undef;
              if (UNIVERSAL::isa($vals,'HASH')) {
                if (defined $vals->{success}) {
                  $self->{success} = $vals->{success};
                }
              }
              return bless ($self, $classname);
}

sub getName {
              return 'PassagePairProcessor_process_result';
            }

sub read {
              my ($self, $input) = @_;
              my $xfer  = 0;
              my $fname;
              my $ftype = 0;
              my $fid   = 0;
              $xfer += $input->readStructBegin(\$fname);
              while (1) 
              {
                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                if ($ftype == TType::STOP) {
                  last;
                }
                SWITCH: for($fid)
                {
                  /^0$/ && do{                  if ($ftype == TType::LIST) {
                    {
                      my $_size37 = 0;
                      $self->{success} = [];
                      my $_etype40 = 0;
                      $xfer += $input->readListBegin(\$_etype40, \$_size37);
                      for (my $_i41 = 0; $_i41 < $_size37; ++$_i41)
                      {
                        my $elem42 = undef;
                        $elem42 = new thrift::adept::common::HltContentUnion();
                        $xfer += $elem42->read($input);
                        push(@{$self->{success}},$elem42);
                      }
                      $xfer += $input->readListEnd();
                    }
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                    $xfer += $input->skip($ftype);
                }
                $xfer += $input->readFieldEnd();
              }
              $xfer += $input->readStructEnd();
              return $xfer;
            }

sub write {
              my ($self, $output) = @_;
              my $xfer   = 0;
              $xfer += $output->writeStructBegin('PassagePairProcessor_process_result');
              if (defined $self->{success}) {
                $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
                {
                  $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
                  {
                    foreach my $iter43 (@{$self->{success}}) 
                    {
                      $xfer += ${iter43}->write($output);
                    }
                  }
                  $xfer += $output->writeListEnd();
                }
                $xfer += $output->writeFieldEnd();
              }
              $xfer += $output->writeFieldStop();
              $xfer += $output->writeStructEnd();
              return $xfer;
            }

package thrift::adept::module::PassagePairProcessor_processAsync_args;
use base qw(Class::Accessor);
thrift::adept::module::PassagePairProcessor_processAsync_args->mk_accessors( qw( passage1 passage2 ) );

sub new {
              my $classname = shift;
              my $self      = {};
              my $vals      = shift || {};
              $self->{passage1} = undef;
              $self->{passage2} = undef;
              if (UNIVERSAL::isa($vals,'HASH')) {
                if (defined $vals->{passage1}) {
                  $self->{passage1} = $vals->{passage1};
                }
                if (defined $vals->{passage2}) {
                  $self->{passage2} = $vals->{passage2};
                }
              }
              return bless ($self, $classname);
}

sub getName {
              return 'PassagePairProcessor_processAsync_args';
            }

sub read {
              my ($self, $input) = @_;
              my $xfer  = 0;
              my $fname;
              my $ftype = 0;
              my $fid   = 0;
              $xfer += $input->readStructBegin(\$fname);
              while (1) 
              {
                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                if ($ftype == TType::STOP) {
                  last;
                }
                SWITCH: for($fid)
                {
                  /^1$/ && do{                  if ($ftype == TType::STRUCT) {
                    $self->{passage1} = new thrift::adept::common::Passage();
                    $xfer += $self->{passage1}->read($input);
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                  /^2$/ && do{                  if ($ftype == TType::STRUCT) {
                    $self->{passage2} = new thrift::adept::common::Passage();
                    $xfer += $self->{passage2}->read($input);
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                    $xfer += $input->skip($ftype);
                }
                $xfer += $input->readFieldEnd();
              }
              $xfer += $input->readStructEnd();
              return $xfer;
            }

sub write {
              my ($self, $output) = @_;
              my $xfer   = 0;
              $xfer += $output->writeStructBegin('PassagePairProcessor_processAsync_args');
              if (defined $self->{passage1}) {
                $xfer += $output->writeFieldBegin('passage1', TType::STRUCT, 1);
                $xfer += $self->{passage1}->write($output);
                $xfer += $output->writeFieldEnd();
              }
              if (defined $self->{passage2}) {
                $xfer += $output->writeFieldBegin('passage2', TType::STRUCT, 2);
                $xfer += $self->{passage2}->write($output);
                $xfer += $output->writeFieldEnd();
              }
              $xfer += $output->writeFieldStop();
              $xfer += $output->writeStructEnd();
              return $xfer;
            }

package thrift::adept::module::PassagePairProcessor_processAsync_result;
use base qw(Class::Accessor);
thrift::adept::module::PassagePairProcessor_processAsync_result->mk_accessors( qw( success ) );

sub new {
              my $classname = shift;
              my $self      = {};
              my $vals      = shift || {};
              $self->{success} = undef;
              if (UNIVERSAL::isa($vals,'HASH')) {
                if (defined $vals->{success}) {
                  $self->{success} = $vals->{success};
                }
              }
              return bless ($self, $classname);
}

sub getName {
              return 'PassagePairProcessor_processAsync_result';
            }

sub read {
              my ($self, $input) = @_;
              my $xfer  = 0;
              my $fname;
              my $ftype = 0;
              my $fid   = 0;
              $xfer += $input->readStructBegin(\$fname);
              while (1) 
              {
                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                if ($ftype == TType::STOP) {
                  last;
                }
                SWITCH: for($fid)
                {
                  /^0$/ && do{                  if ($ftype == TType::I64) {
                    $xfer += $input->readI64(\$self->{success});
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                    $xfer += $input->skip($ftype);
                }
                $xfer += $input->readFieldEnd();
              }
              $xfer += $input->readStructEnd();
              return $xfer;
            }

sub write {
              my ($self, $output) = @_;
              my $xfer   = 0;
              $xfer += $output->writeStructBegin('PassagePairProcessor_processAsync_result');
              if (defined $self->{success}) {
                $xfer += $output->writeFieldBegin('success', TType::I64, 0);
                $xfer += $output->writeI64($self->{success});
                $xfer += $output->writeFieldEnd();
              }
              $xfer += $output->writeFieldStop();
              $xfer += $output->writeStructEnd();
              return $xfer;
            }

package thrift::adept::module::PassagePairProcessor_tryGetResult_args;
use base qw(Class::Accessor);
thrift::adept::module::PassagePairProcessor_tryGetResult_args->mk_accessors( qw( requestId metaContents ) );

sub new {
              my $classname = shift;
              my $self      = {};
              my $vals      = shift || {};
              $self->{requestId} = undef;
              $self->{metaContents} = undef;
              if (UNIVERSAL::isa($vals,'HASH')) {
                if (defined $vals->{requestId}) {
                  $self->{requestId} = $vals->{requestId};
                }
                if (defined $vals->{metaContents}) {
                  $self->{metaContents} = $vals->{metaContents};
                }
              }
              return bless ($self, $classname);
}

sub getName {
              return 'PassagePairProcessor_tryGetResult_args';
            }

sub read {
              my ($self, $input) = @_;
              my $xfer  = 0;
              my $fname;
              my $ftype = 0;
              my $fid   = 0;
              $xfer += $input->readStructBegin(\$fname);
              while (1) 
              {
                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                if ($ftype == TType::STOP) {
                  last;
                }
                SWITCH: for($fid)
                {
                  /^1$/ && do{                  if ($ftype == TType::I64) {
                    $xfer += $input->readI64(\$self->{requestId});
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                  /^2$/ && do{                  if ($ftype == TType::LIST) {
                    {
                      my $_size44 = 0;
                      $self->{metaContents} = [];
                      my $_etype47 = 0;
                      $xfer += $input->readListBegin(\$_etype47, \$_size44);
                      for (my $_i48 = 0; $_i48 < $_size44; ++$_i48)
                      {
                        my $elem49 = undef;
                        $elem49 = new thrift::adept::common::HltContentUnion();
                        $xfer += $elem49->read($input);
                        push(@{$self->{metaContents}},$elem49);
                      }
                      $xfer += $input->readListEnd();
                    }
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                    $xfer += $input->skip($ftype);
                }
                $xfer += $input->readFieldEnd();
              }
              $xfer += $input->readStructEnd();
              return $xfer;
            }

sub write {
              my ($self, $output) = @_;
              my $xfer   = 0;
              $xfer += $output->writeStructBegin('PassagePairProcessor_tryGetResult_args');
              if (defined $self->{requestId}) {
                $xfer += $output->writeFieldBegin('requestId', TType::I64, 1);
                $xfer += $output->writeI64($self->{requestId});
                $xfer += $output->writeFieldEnd();
              }
              if (defined $self->{metaContents}) {
                $xfer += $output->writeFieldBegin('metaContents', TType::LIST, 2);
                {
                  $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{metaContents}}));
                  {
                    foreach my $iter50 (@{$self->{metaContents}}) 
                    {
                      $xfer += ${iter50}->write($output);
                    }
                  }
                  $xfer += $output->writeListEnd();
                }
                $xfer += $output->writeFieldEnd();
              }
              $xfer += $output->writeFieldStop();
              $xfer += $output->writeStructEnd();
              return $xfer;
            }

package thrift::adept::module::PassagePairProcessor_tryGetResult_result;
use base qw(Class::Accessor);
thrift::adept::module::PassagePairProcessor_tryGetResult_result->mk_accessors( qw( success ) );

sub new {
              my $classname = shift;
              my $self      = {};
              my $vals      = shift || {};
              $self->{success} = undef;
              if (UNIVERSAL::isa($vals,'HASH')) {
                if (defined $vals->{success}) {
                  $self->{success} = $vals->{success};
                }
              }
              return bless ($self, $classname);
}

sub getName {
              return 'PassagePairProcessor_tryGetResult_result';
            }

sub read {
              my ($self, $input) = @_;
              my $xfer  = 0;
              my $fname;
              my $ftype = 0;
              my $fid   = 0;
              $xfer += $input->readStructBegin(\$fname);
              while (1) 
              {
                $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                if ($ftype == TType::STOP) {
                  last;
                }
                SWITCH: for($fid)
                {
                  /^0$/ && do{                  if ($ftype == TType::BOOL) {
                    $xfer += $input->readBool(\$self->{success});
                  } else {
                    $xfer += $input->skip($ftype);
                  }
                  last; };
                    $xfer += $input->skip($ftype);
                }
                $xfer += $input->readFieldEnd();
              }
              $xfer += $input->readStructEnd();
              return $xfer;
            }

sub write {
              my ($self, $output) = @_;
              my $xfer   = 0;
              $xfer += $output->writeStructBegin('PassagePairProcessor_tryGetResult_result');
              if (defined $self->{success}) {
                $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
                $xfer += $output->writeBool($self->{success});
                $xfer += $output->writeFieldEnd();
              }
              $xfer += $output->writeFieldStop();
              $xfer += $output->writeStructEnd();
              return $xfer;
            }

package thrift::adept::module::PassagePairProcessorIf;

use strict;


sub process{
  my $self = shift;
  my $passage1 = shift;
  my $passage2 = shift;

  die 'implement interface';
}

sub processAsync{
  my $self = shift;
  my $passage1 = shift;
  my $passage2 = shift;

  die 'implement interface';
}

sub tryGetResult{
  my $self = shift;
  my $requestId = shift;
  my $metaContents = shift;

  die 'implement interface';
}

package thrift::adept::module::PassagePairProcessorRest;

use strict;


sub new {
              my ($classname, $impl) = @_;
              my $self     ={ impl => $impl };

              return bless($self,$classname);
}

sub process{
              my ($self, $request) = @_;

              my $passage1 = ($request->{'passage1'}) ? $request->{'passage1'} : undef;
              my $passage2 = ($request->{'passage2'}) ? $request->{'passage2'} : undef;
              return $self->{impl}->process($passage1, $passage2);
            }

sub processAsync{
              my ($self, $request) = @_;

              my $passage1 = ($request->{'passage1'}) ? $request->{'passage1'} : undef;
              my $passage2 = ($request->{'passage2'}) ? $request->{'passage2'} : undef;
              return $self->{impl}->processAsync($passage1, $passage2);
            }

sub tryGetResult{
              my ($self, $request) = @_;

              my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
              my $metaContents = ($request->{'metaContents'}) ? $request->{'metaContents'} : undef;
              return $self->{impl}->tryGetResult($requestId, $metaContents);
            }

package thrift::adept::module::PassagePairProcessorClient;


use base qw(thrift::adept::module::PassagePairProcessorIf);
sub new {
              my ($classname, $input, $output) = @_;
              my $self      = {};
              $self->{input}  = $input;
              $self->{output} = defined $output ? $output : $input;
              $self->{seqid}  = 0;
              return bless($self,$classname);
}

sub process{
  my $self = shift;
  my $passage1 = shift;
  my $passage2 = shift;

                            $self->send_process($passage1, $passage2);
              return $self->recv_process();
}

sub send_process{
  my $self = shift;
  my $passage1 = shift;
  my $passage2 = shift;

              $self->{output}->writeMessageBegin('process', TMessageType::CALL, $self->{seqid});
              my $args = new thrift::adept::module::PassagePairProcessor_process_args();
              $args->{passage1} = $passage1;
              $args->{passage2} = $passage2;
              $args->write($self->{output});
              $self->{output}->writeMessageEnd();
              $self->{output}->getTransport()->flush();
}

sub recv_process{
  my $self = shift;

              my $rseqid = 0;
              my $fname;
              my $mtype = 0;

              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
              if ($mtype == TMessageType::EXCEPTION) {
                my $x = new TApplicationException();
                $x->read($self->{input});
                $self->{input}->readMessageEnd();
                die $x;
              }
              my $result = new thrift::adept::module::PassagePairProcessor_process_result();
              $result->read($self->{input});
              $self->{input}->readMessageEnd();

              if (defined $result->{success} ) {
                return $result->{success};
              }
              die "process failed: unknown result";
}
sub processAsync{
  my $self = shift;
  my $passage1 = shift;
  my $passage2 = shift;

                            $self->send_processAsync($passage1, $passage2);
              return $self->recv_processAsync();
}

sub send_processAsync{
  my $self = shift;
  my $passage1 = shift;
  my $passage2 = shift;

              $self->{output}->writeMessageBegin('processAsync', TMessageType::CALL, $self->{seqid});
              my $args = new thrift::adept::module::PassagePairProcessor_processAsync_args();
              $args->{passage1} = $passage1;
              $args->{passage2} = $passage2;
              $args->write($self->{output});
              $self->{output}->writeMessageEnd();
              $self->{output}->getTransport()->flush();
}

sub recv_processAsync{
  my $self = shift;

              my $rseqid = 0;
              my $fname;
              my $mtype = 0;

              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
              if ($mtype == TMessageType::EXCEPTION) {
                my $x = new TApplicationException();
                $x->read($self->{input});
                $self->{input}->readMessageEnd();
                die $x;
              }
              my $result = new thrift::adept::module::PassagePairProcessor_processAsync_result();
              $result->read($self->{input});
              $self->{input}->readMessageEnd();

              if (defined $result->{success} ) {
                return $result->{success};
              }
              die "processAsync failed: unknown result";
}
sub tryGetResult{
  my $self = shift;
  my $requestId = shift;
  my $metaContents = shift;

                            $self->send_tryGetResult($requestId, $metaContents);
              return $self->recv_tryGetResult();
}

sub send_tryGetResult{
  my $self = shift;
  my $requestId = shift;
  my $metaContents = shift;

              $self->{output}->writeMessageBegin('tryGetResult', TMessageType::CALL, $self->{seqid});
              my $args = new thrift::adept::module::PassagePairProcessor_tryGetResult_args();
              $args->{requestId} = $requestId;
              $args->{metaContents} = $metaContents;
              $args->write($self->{output});
              $self->{output}->writeMessageEnd();
              $self->{output}->getTransport()->flush();
}

sub recv_tryGetResult{
  my $self = shift;

              my $rseqid = 0;
              my $fname;
              my $mtype = 0;

              $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
              if ($mtype == TMessageType::EXCEPTION) {
                my $x = new TApplicationException();
                $x->read($self->{input});
                $self->{input}->readMessageEnd();
                die $x;
              }
              my $result = new thrift::adept::module::PassagePairProcessor_tryGetResult_result();
              $result->read($self->{input});
              $self->{input}->readMessageEnd();

              if (defined $result->{success} ) {
                return $result->{success};
              }
              die "tryGetResult failed: unknown result";
}
package thrift::adept::module::PassagePairProcessorProcessor;

use strict;


sub new {
                my ($classname, $handler) = @_;
                my $self      = {};
                $self->{handler} = $handler;
                return bless ($self, $classname);
}

sub process {
                my ($self, $input, $output) = @_;
                my $rseqid = 0;
                my $fname  = undef;
                my $mtype  = 0;

                $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                my $methodname = 'process_'.$fname;
                if (!$self->can($methodname)) {
                  $input->skip(TType::STRUCT);
                  $input->readMessageEnd();
                  my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                  $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                  $x->write($output);
                  $output->writeMessageEnd();
                  $output->getTransport()->flush();
                  return;
                }
                $self->$methodname($rseqid, $input, $output);
                return 1;
}

sub process_process {
                my ($self, $seqid, $input, $output) = @_;
                my $args = new thrift::adept::module::PassagePairProcessor_process_args();
                $args->read($input);
                $input->readMessageEnd();
                my $result = new thrift::adept::module::PassagePairProcessor_process_result();
                $result->{success} = $self->{handler}->process($args->passage1, $args->passage2);
                $output->writeMessageBegin('process', TMessageType::REPLY, $seqid);
                $result->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
}

sub process_processAsync {
                my ($self, $seqid, $input, $output) = @_;
                my $args = new thrift::adept::module::PassagePairProcessor_processAsync_args();
                $args->read($input);
                $input->readMessageEnd();
                my $result = new thrift::adept::module::PassagePairProcessor_processAsync_result();
                $result->{success} = $self->{handler}->processAsync($args->passage1, $args->passage2);
                $output->writeMessageBegin('processAsync', TMessageType::REPLY, $seqid);
                $result->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
}

sub process_tryGetResult {
                my ($self, $seqid, $input, $output) = @_;
                my $args = new thrift::adept::module::PassagePairProcessor_tryGetResult_args();
                $args->read($input);
                $input->readMessageEnd();
                my $result = new thrift::adept::module::PassagePairProcessor_tryGetResult_result();
                $result->{success} = $self->{handler}->tryGetResult($args->requestId, $args->metaContents);
                $output->writeMessageBegin('tryGetResult', TMessageType::REPLY, $seqid);
                $result->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
}

1;
