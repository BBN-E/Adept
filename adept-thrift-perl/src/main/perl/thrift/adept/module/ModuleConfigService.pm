#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::module::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::module::ModuleConfigService_loadModuleConfig_args;
use base qw(Class::Accessor);
thrift::adept::module::ModuleConfigService_loadModuleConfig_args->mk_accessors( qw( configFilePath ) );

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      $self->{configFilePath} = undef;
                      if (UNIVERSAL::isa($vals,'HASH')) {
                        if (defined $vals->{configFilePath}) {
                          $self->{configFilePath} = $vals->{configFilePath};
                        }
                      }
                      return bless ($self, $classname);
}

sub getName {
                      return 'ModuleConfigService_loadModuleConfig_args';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                          /^1$/ && do{                          if ($ftype == TType::STRING) {
                            $xfer += $input->readString(\$self->{configFilePath});
                          } else {
                            $xfer += $input->skip($ftype);
                          }
                          last; };
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('ModuleConfigService_loadModuleConfig_args');
                      if (defined $self->{configFilePath}) {
                        $xfer += $output->writeFieldBegin('configFilePath', TType::STRING, 1);
                        $xfer += $output->writeString($self->{configFilePath});
                        $xfer += $output->writeFieldEnd();
                      }
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::module::ModuleConfigService_loadModuleConfig_result;
use base qw(Class::Accessor);

sub new {
                      my $classname = shift;
                      my $self      = {};
                      my $vals      = shift || {};
                      return bless ($self, $classname);
}

sub getName {
                      return 'ModuleConfigService_loadModuleConfig_result';
                    }

sub read {
                      my ($self, $input) = @_;
                      my $xfer  = 0;
                      my $fname;
                      my $ftype = 0;
                      my $fid   = 0;
                      $xfer += $input->readStructBegin(\$fname);
                      while (1) 
                      {
                        $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                        if ($ftype == TType::STOP) {
                          last;
                        }
                        SWITCH: for($fid)
                        {
                            $xfer += $input->skip($ftype);
                        }
                        $xfer += $input->readFieldEnd();
                      }
                      $xfer += $input->readStructEnd();
                      return $xfer;
                    }

sub write {
                      my ($self, $output) = @_;
                      my $xfer   = 0;
                      $xfer += $output->writeStructBegin('ModuleConfigService_loadModuleConfig_result');
                      $xfer += $output->writeFieldStop();
                      $xfer += $output->writeStructEnd();
                      return $xfer;
                    }

package thrift::adept::module::ModuleConfigServiceIf;

use strict;


sub loadModuleConfig{
  my $self = shift;
  my $configFilePath = shift;

  die 'implement interface';
}

package thrift::adept::module::ModuleConfigServiceRest;

use strict;


sub new {
                      my ($classname, $impl) = @_;
                      my $self     ={ impl => $impl };

                      return bless($self,$classname);
}

sub loadModuleConfig{
                      my ($self, $request) = @_;

                      my $configFilePath = ($request->{'configFilePath'}) ? $request->{'configFilePath'} : undef;
                      return $self->{impl}->loadModuleConfig($configFilePath);
                    }

package thrift::adept::module::ModuleConfigServiceClient;


use base qw(thrift::adept::module::ModuleConfigServiceIf);
sub new {
                      my ($classname, $input, $output) = @_;
                      my $self      = {};
                      $self->{input}  = $input;
                      $self->{output} = defined $output ? $output : $input;
                      $self->{seqid}  = 0;
                      return bless($self,$classname);
}

sub loadModuleConfig{
  my $self = shift;
  my $configFilePath = shift;

                                            $self->send_loadModuleConfig($configFilePath);
                      $self->recv_loadModuleConfig();
}

sub send_loadModuleConfig{
  my $self = shift;
  my $configFilePath = shift;

                      $self->{output}->writeMessageBegin('loadModuleConfig', TMessageType::CALL, $self->{seqid});
                      my $args = new thrift::adept::module::ModuleConfigService_loadModuleConfig_args();
                      $args->{configFilePath} = $configFilePath;
                      $args->write($self->{output});
                      $self->{output}->writeMessageEnd();
                      $self->{output}->getTransport()->flush();
}

sub recv_loadModuleConfig{
  my $self = shift;

                      my $rseqid = 0;
                      my $fname;
                      my $mtype = 0;

                      $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      if ($mtype == TMessageType::EXCEPTION) {
                        my $x = new TApplicationException();
                        $x->read($self->{input});
                        $self->{input}->readMessageEnd();
                        die $x;
                      }
                      my $result = new thrift::adept::module::ModuleConfigService_loadModuleConfig_result();
                      $result->read($self->{input});
                      $self->{input}->readMessageEnd();

                      return;
}
package thrift::adept::module::ModuleConfigServiceProcessor;

use strict;


sub new {
                        my ($classname, $handler) = @_;
                        my $self      = {};
                        $self->{handler} = $handler;
                        return bless ($self, $classname);
}

sub process {
                        my ($self, $input, $output) = @_;
                        my $rseqid = 0;
                        my $fname  = undef;
                        my $mtype  = 0;

                        $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        my $methodname = 'process_'.$fname;
                        if (!$self->can($methodname)) {
                          $input->skip(TType::STRUCT);
                          $input->readMessageEnd();
                          my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                          $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                          $x->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
                          return;
                        }
                        $self->$methodname($rseqid, $input, $output);
                        return 1;
}

sub process_loadModuleConfig {
                        my ($self, $seqid, $input, $output) = @_;
                        my $args = new thrift::adept::module::ModuleConfigService_loadModuleConfig_args();
                        $args->read($input);
                        $input->readMessageEnd();
                        my $result = new thrift::adept::module::ModuleConfigService_loadModuleConfig_result();
                        $self->{handler}->loadModuleConfig($args->configFilePath);
                        $output->writeMessageBegin('loadModuleConfig', TMessageType::REPLY, $seqid);
                        $result->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
}

1;
