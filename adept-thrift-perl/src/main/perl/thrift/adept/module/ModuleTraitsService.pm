################################################################################
# ------
# Adept
# -----
# Copyright (C) 2014 Raytheon BBN Technologies Corp.
# -----
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -------
################################################################################
#
#
#

#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::module::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::module::ModuleTraitsService_getSchema_args;
use base qw(Class::Accessor);

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_getSchema_args';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_getSchema_args');
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_getSchema_result;
use base qw(Class::Accessor);
thrift::adept::module::ModuleTraitsService_getSchema_result->mk_accessors( qw( success ) );

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        $self->{success} = undef;
                        if (UNIVERSAL::isa($vals,'HASH')) {
                          if (defined $vals->{success}) {
                            $self->{success} = $vals->{success};
                          }
                        }
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_getSchema_result';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                            /^0$/ && do{                            if ($ftype == TType::STRING) {
                              $xfer += $input->readString(\$self->{success});
                            } else {
                              $xfer += $input->skip($ftype);
                            }
                            last; };
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_getSchema_result');
                        if (defined $self->{success}) {
                          $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                          $xfer += $output->writeString($self->{success});
                          $xfer += $output->writeFieldEnd();
                        }
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_getTrait_args;
use base qw(Class::Accessor);

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_getTrait_args';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_getTrait_args');
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_getTrait_result;
use base qw(Class::Accessor);
thrift::adept::module::ModuleTraitsService_getTrait_result->mk_accessors( qw( success ) );

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        $self->{success} = undef;
                        if (UNIVERSAL::isa($vals,'HASH')) {
                          if (defined $vals->{success}) {
                            $self->{success} = $vals->{success};
                          }
                        }
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_getTrait_result';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                            /^0$/ && do{                            if ($ftype == TType::STRING) {
                              $xfer += $input->readString(\$self->{success});
                            } else {
                              $xfer += $input->skip($ftype);
                            }
                            last; };
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_getTrait_result');
                        if (defined $self->{success}) {
                          $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                          $xfer += $output->writeString($self->{success});
                          $xfer += $output->writeFieldEnd();
                        }
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_getVersion_args;
use base qw(Class::Accessor);

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_getVersion_args';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_getVersion_args');
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_getVersion_result;
use base qw(Class::Accessor);
thrift::adept::module::ModuleTraitsService_getVersion_result->mk_accessors( qw( success ) );

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        $self->{success} = undef;
                        if (UNIVERSAL::isa($vals,'HASH')) {
                          if (defined $vals->{success}) {
                            $self->{success} = $vals->{success};
                          }
                        }
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_getVersion_result';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                            /^0$/ && do{                            if ($ftype == TType::STRING) {
                              $xfer += $input->readString(\$self->{success});
                            } else {
                              $xfer += $input->skip($ftype);
                            }
                            last; };
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_getVersion_result');
                        if (defined $self->{success}) {
                          $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
                          $xfer += $output->writeString($self->{success});
                          $xfer += $output->writeFieldEnd();
                        }
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_setSchema_args;
use base qw(Class::Accessor);
thrift::adept::module::ModuleTraitsService_setSchema_args->mk_accessors( qw( schema ) );

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        $self->{schema} = undef;
                        if (UNIVERSAL::isa($vals,'HASH')) {
                          if (defined $vals->{schema}) {
                            $self->{schema} = $vals->{schema};
                          }
                        }
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_setSchema_args';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                            /^1$/ && do{                            if ($ftype == TType::STRING) {
                              $xfer += $input->readString(\$self->{schema});
                            } else {
                              $xfer += $input->skip($ftype);
                            }
                            last; };
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_setSchema_args');
                        if (defined $self->{schema}) {
                          $xfer += $output->writeFieldBegin('schema', TType::STRING, 1);
                          $xfer += $output->writeString($self->{schema});
                          $xfer += $output->writeFieldEnd();
                        }
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_setSchema_result;
use base qw(Class::Accessor);

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_setSchema_result';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_setSchema_result');
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_setTrait_args;
use base qw(Class::Accessor);
thrift::adept::module::ModuleTraitsService_setTrait_args->mk_accessors( qw( trait ) );

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        $self->{trait} = undef;
                        if (UNIVERSAL::isa($vals,'HASH')) {
                          if (defined $vals->{trait}) {
                            $self->{trait} = $vals->{trait};
                          }
                        }
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_setTrait_args';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                            /^1$/ && do{                            if ($ftype == TType::STRING) {
                              $xfer += $input->readString(\$self->{trait});
                            } else {
                              $xfer += $input->skip($ftype);
                            }
                            last; };
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_setTrait_args');
                        if (defined $self->{trait}) {
                          $xfer += $output->writeFieldBegin('trait', TType::STRING, 1);
                          $xfer += $output->writeString($self->{trait});
                          $xfer += $output->writeFieldEnd();
                        }
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_setTrait_result;
use base qw(Class::Accessor);

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_setTrait_result';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_setTrait_result');
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_setVersion_args;
use base qw(Class::Accessor);
thrift::adept::module::ModuleTraitsService_setVersion_args->mk_accessors( qw( version ) );

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        $self->{version} = undef;
                        if (UNIVERSAL::isa($vals,'HASH')) {
                          if (defined $vals->{version}) {
                            $self->{version} = $vals->{version};
                          }
                        }
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_setVersion_args';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                            /^1$/ && do{                            if ($ftype == TType::STRING) {
                              $xfer += $input->readString(\$self->{version});
                            } else {
                              $xfer += $input->skip($ftype);
                            }
                            last; };
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_setVersion_args');
                        if (defined $self->{version}) {
                          $xfer += $output->writeFieldBegin('version', TType::STRING, 1);
                          $xfer += $output->writeString($self->{version});
                          $xfer += $output->writeFieldEnd();
                        }
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsService_setVersion_result;
use base qw(Class::Accessor);

sub new {
                        my $classname = shift;
                        my $self      = {};
                        my $vals      = shift || {};
                        return bless ($self, $classname);
}

sub getName {
                        return 'ModuleTraitsService_setVersion_result';
                      }

sub read {
                        my ($self, $input) = @_;
                        my $xfer  = 0;
                        my $fname;
                        my $ftype = 0;
                        my $fid   = 0;
                        $xfer += $input->readStructBegin(\$fname);
                        while (1) 
                        {
                          $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                          if ($ftype == TType::STOP) {
                            last;
                          }
                          SWITCH: for($fid)
                          {
                              $xfer += $input->skip($ftype);
                          }
                          $xfer += $input->readFieldEnd();
                        }
                        $xfer += $input->readStructEnd();
                        return $xfer;
                      }

sub write {
                        my ($self, $output) = @_;
                        my $xfer   = 0;
                        $xfer += $output->writeStructBegin('ModuleTraitsService_setVersion_result');
                        $xfer += $output->writeFieldStop();
                        $xfer += $output->writeStructEnd();
                        return $xfer;
                      }

package thrift::adept::module::ModuleTraitsServiceIf;

use strict;


sub getSchema{
  my $self = shift;

  die 'implement interface';
}

sub getTrait{
  my $self = shift;

  die 'implement interface';
}

sub getVersion{
  my $self = shift;

  die 'implement interface';
}

sub setSchema{
  my $self = shift;
  my $schema = shift;

  die 'implement interface';
}

sub setTrait{
  my $self = shift;
  my $trait = shift;

  die 'implement interface';
}

sub setVersion{
  my $self = shift;
  my $version = shift;

  die 'implement interface';
}

package thrift::adept::module::ModuleTraitsServiceRest;

use strict;


sub new {
                        my ($classname, $impl) = @_;
                        my $self     ={ impl => $impl };

                        return bless($self,$classname);
}

sub getSchema{
                        my ($self, $request) = @_;

                        return $self->{impl}->getSchema();
                      }

sub getTrait{
                        my ($self, $request) = @_;

                        return $self->{impl}->getTrait();
                      }

sub getVersion{
                        my ($self, $request) = @_;

                        return $self->{impl}->getVersion();
                      }

sub setSchema{
                        my ($self, $request) = @_;

                        my $schema = ($request->{'schema'}) ? $request->{'schema'} : undef;
                        return $self->{impl}->setSchema($schema);
                      }

sub setTrait{
                        my ($self, $request) = @_;

                        my $trait = ($request->{'trait'}) ? $request->{'trait'} : undef;
                        return $self->{impl}->setTrait($trait);
                      }

sub setVersion{
                        my ($self, $request) = @_;

                        my $version = ($request->{'version'}) ? $request->{'version'} : undef;
                        return $self->{impl}->setVersion($version);
                      }

package thrift::adept::module::ModuleTraitsServiceClient;


use base qw(thrift::adept::module::ModuleTraitsServiceIf);
sub new {
                        my ($classname, $input, $output) = @_;
                        my $self      = {};
                        $self->{input}  = $input;
                        $self->{output} = defined $output ? $output : $input;
                        $self->{seqid}  = 0;
                        return bless($self,$classname);
}

sub getSchema{
  my $self = shift;

                                                $self->send_getSchema();
                        return $self->recv_getSchema();
}

sub send_getSchema{
  my $self = shift;

                        $self->{output}->writeMessageBegin('getSchema', TMessageType::CALL, $self->{seqid});
                        my $args = new thrift::adept::module::ModuleTraitsService_getSchema_args();
                        $args->write($self->{output});
                        $self->{output}->writeMessageEnd();
                        $self->{output}->getTransport()->flush();
}

sub recv_getSchema{
  my $self = shift;

                        my $rseqid = 0;
                        my $fname;
                        my $mtype = 0;

                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        if ($mtype == TMessageType::EXCEPTION) {
                          my $x = new TApplicationException();
                          $x->read($self->{input});
                          $self->{input}->readMessageEnd();
                          die $x;
                        }
                        my $result = new thrift::adept::module::ModuleTraitsService_getSchema_result();
                        $result->read($self->{input});
                        $self->{input}->readMessageEnd();

                        if (defined $result->{success} ) {
                          return $result->{success};
                        }
                        die "getSchema failed: unknown result";
}
sub getTrait{
  my $self = shift;

                                                $self->send_getTrait();
                        return $self->recv_getTrait();
}

sub send_getTrait{
  my $self = shift;

                        $self->{output}->writeMessageBegin('getTrait', TMessageType::CALL, $self->{seqid});
                        my $args = new thrift::adept::module::ModuleTraitsService_getTrait_args();
                        $args->write($self->{output});
                        $self->{output}->writeMessageEnd();
                        $self->{output}->getTransport()->flush();
}

sub recv_getTrait{
  my $self = shift;

                        my $rseqid = 0;
                        my $fname;
                        my $mtype = 0;

                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        if ($mtype == TMessageType::EXCEPTION) {
                          my $x = new TApplicationException();
                          $x->read($self->{input});
                          $self->{input}->readMessageEnd();
                          die $x;
                        }
                        my $result = new thrift::adept::module::ModuleTraitsService_getTrait_result();
                        $result->read($self->{input});
                        $self->{input}->readMessageEnd();

                        if (defined $result->{success} ) {
                          return $result->{success};
                        }
                        die "getTrait failed: unknown result";
}
sub getVersion{
  my $self = shift;

                                                $self->send_getVersion();
                        return $self->recv_getVersion();
}

sub send_getVersion{
  my $self = shift;

                        $self->{output}->writeMessageBegin('getVersion', TMessageType::CALL, $self->{seqid});
                        my $args = new thrift::adept::module::ModuleTraitsService_getVersion_args();
                        $args->write($self->{output});
                        $self->{output}->writeMessageEnd();
                        $self->{output}->getTransport()->flush();
}

sub recv_getVersion{
  my $self = shift;

                        my $rseqid = 0;
                        my $fname;
                        my $mtype = 0;

                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        if ($mtype == TMessageType::EXCEPTION) {
                          my $x = new TApplicationException();
                          $x->read($self->{input});
                          $self->{input}->readMessageEnd();
                          die $x;
                        }
                        my $result = new thrift::adept::module::ModuleTraitsService_getVersion_result();
                        $result->read($self->{input});
                        $self->{input}->readMessageEnd();

                        if (defined $result->{success} ) {
                          return $result->{success};
                        }
                        die "getVersion failed: unknown result";
}
sub setSchema{
  my $self = shift;
  my $schema = shift;

                                                $self->send_setSchema($schema);
                        $self->recv_setSchema();
}

sub send_setSchema{
  my $self = shift;
  my $schema = shift;

                        $self->{output}->writeMessageBegin('setSchema', TMessageType::CALL, $self->{seqid});
                        my $args = new thrift::adept::module::ModuleTraitsService_setSchema_args();
                        $args->{schema} = $schema;
                        $args->write($self->{output});
                        $self->{output}->writeMessageEnd();
                        $self->{output}->getTransport()->flush();
}

sub recv_setSchema{
  my $self = shift;

                        my $rseqid = 0;
                        my $fname;
                        my $mtype = 0;

                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        if ($mtype == TMessageType::EXCEPTION) {
                          my $x = new TApplicationException();
                          $x->read($self->{input});
                          $self->{input}->readMessageEnd();
                          die $x;
                        }
                        my $result = new thrift::adept::module::ModuleTraitsService_setSchema_result();
                        $result->read($self->{input});
                        $self->{input}->readMessageEnd();

                        return;
}
sub setTrait{
  my $self = shift;
  my $trait = shift;

                                                $self->send_setTrait($trait);
                        $self->recv_setTrait();
}

sub send_setTrait{
  my $self = shift;
  my $trait = shift;

                        $self->{output}->writeMessageBegin('setTrait', TMessageType::CALL, $self->{seqid});
                        my $args = new thrift::adept::module::ModuleTraitsService_setTrait_args();
                        $args->{trait} = $trait;
                        $args->write($self->{output});
                        $self->{output}->writeMessageEnd();
                        $self->{output}->getTransport()->flush();
}

sub recv_setTrait{
  my $self = shift;

                        my $rseqid = 0;
                        my $fname;
                        my $mtype = 0;

                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        if ($mtype == TMessageType::EXCEPTION) {
                          my $x = new TApplicationException();
                          $x->read($self->{input});
                          $self->{input}->readMessageEnd();
                          die $x;
                        }
                        my $result = new thrift::adept::module::ModuleTraitsService_setTrait_result();
                        $result->read($self->{input});
                        $self->{input}->readMessageEnd();

                        return;
}
sub setVersion{
  my $self = shift;
  my $version = shift;

                                                $self->send_setVersion($version);
                        $self->recv_setVersion();
}

sub send_setVersion{
  my $self = shift;
  my $version = shift;

                        $self->{output}->writeMessageBegin('setVersion', TMessageType::CALL, $self->{seqid});
                        my $args = new thrift::adept::module::ModuleTraitsService_setVersion_args();
                        $args->{version} = $version;
                        $args->write($self->{output});
                        $self->{output}->writeMessageEnd();
                        $self->{output}->getTransport()->flush();
}

sub recv_setVersion{
  my $self = shift;

                        my $rseqid = 0;
                        my $fname;
                        my $mtype = 0;

                        $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                        if ($mtype == TMessageType::EXCEPTION) {
                          my $x = new TApplicationException();
                          $x->read($self->{input});
                          $self->{input}->readMessageEnd();
                          die $x;
                        }
                        my $result = new thrift::adept::module::ModuleTraitsService_setVersion_result();
                        $result->read($self->{input});
                        $self->{input}->readMessageEnd();

                        return;
}
package thrift::adept::module::ModuleTraitsServiceProcessor;

use strict;


sub new {
                          my ($classname, $handler) = @_;
                          my $self      = {};
                          $self->{handler} = $handler;
                          return bless ($self, $classname);
}

sub process {
                          my ($self, $input, $output) = @_;
                          my $rseqid = 0;
                          my $fname  = undef;
                          my $mtype  = 0;

                          $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          my $methodname = 'process_'.$fname;
                          if (!$self->can($methodname)) {
                            $input->skip(TType::STRUCT);
                            $input->readMessageEnd();
                            my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                            $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                            $x->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
                            return;
                          }
                          $self->$methodname($rseqid, $input, $output);
                          return 1;
}

sub process_getSchema {
                          my ($self, $seqid, $input, $output) = @_;
                          my $args = new thrift::adept::module::ModuleTraitsService_getSchema_args();
                          $args->read($input);
                          $input->readMessageEnd();
                          my $result = new thrift::adept::module::ModuleTraitsService_getSchema_result();
                          $result->{success} = $self->{handler}->getSchema();
                          $output->writeMessageBegin('getSchema', TMessageType::REPLY, $seqid);
                          $result->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
}

sub process_getTrait {
                          my ($self, $seqid, $input, $output) = @_;
                          my $args = new thrift::adept::module::ModuleTraitsService_getTrait_args();
                          $args->read($input);
                          $input->readMessageEnd();
                          my $result = new thrift::adept::module::ModuleTraitsService_getTrait_result();
                          $result->{success} = $self->{handler}->getTrait();
                          $output->writeMessageBegin('getTrait', TMessageType::REPLY, $seqid);
                          $result->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
}

sub process_getVersion {
                          my ($self, $seqid, $input, $output) = @_;
                          my $args = new thrift::adept::module::ModuleTraitsService_getVersion_args();
                          $args->read($input);
                          $input->readMessageEnd();
                          my $result = new thrift::adept::module::ModuleTraitsService_getVersion_result();
                          $result->{success} = $self->{handler}->getVersion();
                          $output->writeMessageBegin('getVersion', TMessageType::REPLY, $seqid);
                          $result->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
}

sub process_setSchema {
                          my ($self, $seqid, $input, $output) = @_;
                          my $args = new thrift::adept::module::ModuleTraitsService_setSchema_args();
                          $args->read($input);
                          $input->readMessageEnd();
                          my $result = new thrift::adept::module::ModuleTraitsService_setSchema_result();
                          $self->{handler}->setSchema($args->schema);
                          $output->writeMessageBegin('setSchema', TMessageType::REPLY, $seqid);
                          $result->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
}

sub process_setTrait {
                          my ($self, $seqid, $input, $output) = @_;
                          my $args = new thrift::adept::module::ModuleTraitsService_setTrait_args();
                          $args->read($input);
                          $input->readMessageEnd();
                          my $result = new thrift::adept::module::ModuleTraitsService_setTrait_result();
                          $self->{handler}->setTrait($args->trait);
                          $output->writeMessageBegin('setTrait', TMessageType::REPLY, $seqid);
                          $result->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
}

sub process_setVersion {
                          my ($self, $seqid, $input, $output) = @_;
                          my $args = new thrift::adept::module::ModuleTraitsService_setVersion_args();
                          $args->read($input);
                          $input->readMessageEnd();
                          my $result = new thrift::adept::module::ModuleTraitsService_setVersion_result();
                          $self->{handler}->setVersion($args->version);
                          $output->writeMessageBegin('setVersion', TMessageType::REPLY, $seqid);
                          $result->write($output);
                          $output->writeMessageEnd();
                          $output->getTransport()->flush();
}

1;