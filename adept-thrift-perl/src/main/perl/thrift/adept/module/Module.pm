#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::module::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::module::Module_activate_args;
use base qw(Class::Accessor);
thrift::adept::module::Module_activate_args->mk_accessors( qw( configFilePath ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{configFilePath} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{configFilePath}) {
                $self->{configFilePath} = $vals->{configFilePath};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'Module_activate_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^1$/ && do{                if ($ftype == TType::STRING) {
                  $xfer += $input->readString(\$self->{configFilePath});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_activate_args');
            if (defined $self->{configFilePath}) {
              $xfer += $output->writeFieldBegin('configFilePath', TType::STRING, 1);
              $xfer += $output->writeString($self->{configFilePath});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::Module_activate_result;
use base qw(Class::Accessor);

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            return bless ($self, $classname);
}

sub getName {
            return 'Module_activate_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_activate_result');
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::Module_deactivate_args;
use base qw(Class::Accessor);

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            return bless ($self, $classname);
}

sub getName {
            return 'Module_deactivate_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_deactivate_args');
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::Module_deactivate_result;
use base qw(Class::Accessor);

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            return bless ($self, $classname);
}

sub getName {
            return 'Module_deactivate_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_deactivate_result');
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::Module_getModuleConfig_args;
use base qw(Class::Accessor);

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            return bless ($self, $classname);
}

sub getName {
            return 'Module_getModuleConfig_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_getModuleConfig_args');
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::Module_getModuleConfig_result;
use base qw(Class::Accessor);
thrift::adept::module::Module_getModuleConfig_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'Module_getModuleConfig_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == TType::STRUCT) {
                  $self->{success} = new thrift::adept::module::ModuleConfig();
                  $xfer += $self->{success}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_getModuleConfig_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
              $xfer += $self->{success}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::Module_getModuleTraits_args;
use base qw(Class::Accessor);

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            return bless ($self, $classname);
}

sub getName {
            return 'Module_getModuleTraits_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_getModuleTraits_args');
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::Module_getModuleTraits_result;
use base qw(Class::Accessor);
thrift::adept::module::Module_getModuleTraits_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'Module_getModuleTraits_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1) 
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == TType::STRUCT) {
                  $self->{success} = new thrift::adept::module::ModuleTraits();
                  $xfer += $self->{success}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('Module_getModuleTraits_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
              $xfer += $self->{success}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package thrift::adept::module::ModuleIf;

use strict;


sub activate{
  my $self = shift;
  my $configFilePath = shift;

  die 'implement interface';
}

sub deactivate{
  my $self = shift;

  die 'implement interface';
}

sub getModuleConfig{
  my $self = shift;

  die 'implement interface';
}

sub getModuleTraits{
  my $self = shift;

  die 'implement interface';
}

package thrift::adept::module::ModuleRest;

use strict;


sub new {
            my ($classname, $impl) = @_;
            my $self     ={ impl => $impl };

            return bless($self,$classname);
}

sub activate{
            my ($self, $request) = @_;

            my $configFilePath = ($request->{'configFilePath'}) ? $request->{'configFilePath'} : undef;
            return $self->{impl}->activate($configFilePath);
          }

sub deactivate{
            my ($self, $request) = @_;

            return $self->{impl}->deactivate();
          }

sub getModuleConfig{
            my ($self, $request) = @_;

            return $self->{impl}->getModuleConfig();
          }

sub getModuleTraits{
            my ($self, $request) = @_;

            return $self->{impl}->getModuleTraits();
          }

package thrift::adept::module::ModuleClient;


use base qw(thrift::adept::module::ModuleIf);
sub new {
            my ($classname, $input, $output) = @_;
            my $self      = {};
            $self->{input}  = $input;
            $self->{output} = defined $output ? $output : $input;
            $self->{seqid}  = 0;
            return bless($self,$classname);
}

sub activate{
  my $self = shift;
  my $configFilePath = shift;

                        $self->send_activate($configFilePath);
            $self->recv_activate();
}

sub send_activate{
  my $self = shift;
  my $configFilePath = shift;

            $self->{output}->writeMessageBegin('activate', TMessageType::CALL, $self->{seqid});
            my $args = new thrift::adept::module::Module_activate_args();
            $args->{configFilePath} = $configFilePath;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_activate{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
              my $x = new TApplicationException();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = new thrift::adept::module::Module_activate_result();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            return;
}
sub deactivate{
  my $self = shift;

                        $self->send_deactivate();
            $self->recv_deactivate();
}

sub send_deactivate{
  my $self = shift;

            $self->{output}->writeMessageBegin('deactivate', TMessageType::CALL, $self->{seqid});
            my $args = new thrift::adept::module::Module_deactivate_args();
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_deactivate{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
              my $x = new TApplicationException();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = new thrift::adept::module::Module_deactivate_result();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            return;
}
sub getModuleConfig{
  my $self = shift;

                        $self->send_getModuleConfig();
            return $self->recv_getModuleConfig();
}

sub send_getModuleConfig{
  my $self = shift;

            $self->{output}->writeMessageBegin('getModuleConfig', TMessageType::CALL, $self->{seqid});
            my $args = new thrift::adept::module::Module_getModuleConfig_args();
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getModuleConfig{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
              my $x = new TApplicationException();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = new thrift::adept::module::Module_getModuleConfig_result();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            die "getModuleConfig failed: unknown result";
}
sub getModuleTraits{
  my $self = shift;

                        $self->send_getModuleTraits();
            return $self->recv_getModuleTraits();
}

sub send_getModuleTraits{
  my $self = shift;

            $self->{output}->writeMessageBegin('getModuleTraits', TMessageType::CALL, $self->{seqid});
            my $args = new thrift::adept::module::Module_getModuleTraits_args();
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getModuleTraits{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
              my $x = new TApplicationException();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = new thrift::adept::module::Module_getModuleTraits_result();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            die "getModuleTraits failed: unknown result";
}
package thrift::adept::module::ModuleProcessor;

use strict;


sub new {
              my ($classname, $handler) = @_;
              my $self      = {};
              $self->{handler} = $handler;
              return bless ($self, $classname);
}

sub process {
              my ($self, $input, $output) = @_;
              my $rseqid = 0;
              my $fname  = undef;
              my $mtype  = 0;

              $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
              my $methodname = 'process_'.$fname;
              if (!$self->can($methodname)) {
                $input->skip(TType::STRUCT);
                $input->readMessageEnd();
                my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
                $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
                $x->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                return;
              }
              $self->$methodname($rseqid, $input, $output);
              return 1;
}

sub process_activate {
              my ($self, $seqid, $input, $output) = @_;
              my $args = new thrift::adept::module::Module_activate_args();
              $args->read($input);
              $input->readMessageEnd();
              my $result = new thrift::adept::module::Module_activate_result();
              $self->{handler}->activate($args->configFilePath);
              $output->writeMessageBegin('activate', TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_deactivate {
              my ($self, $seqid, $input, $output) = @_;
              my $args = new thrift::adept::module::Module_deactivate_args();
              $args->read($input);
              $input->readMessageEnd();
              my $result = new thrift::adept::module::Module_deactivate_result();
              $self->{handler}->deactivate();
              $output->writeMessageBegin('deactivate', TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getModuleConfig {
              my ($self, $seqid, $input, $output) = @_;
              my $args = new thrift::adept::module::Module_getModuleConfig_args();
              $args->read($input);
              $input->readMessageEnd();
              my $result = new thrift::adept::module::Module_getModuleConfig_result();
              $result->{success} = $self->{handler}->getModuleConfig();
              $output->writeMessageBegin('getModuleConfig', TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getModuleTraits {
              my ($self, $seqid, $input, $output) = @_;
              my $args = new thrift::adept::module::Module_getModuleTraits_args();
              $args->read($input);
              $input->readMessageEnd();
              my $result = new thrift::adept::module::Module_getModuleTraits_result();
              $result->{success} = $self->{handler}->getModuleTraits();
              $output->writeMessageBegin('getModuleTraits', TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

1;