#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package thrift::adept::io::EREDocument;
use base qw(Class::Accessor);
thrift::adept::io::EREDocument->mk_accessors( qw( fullText document charMapping charToTokenOffset startIndices endIndices entityMentionsById canonicalEntityMentionsById isProxy eventsById ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{fullText} = undef;
  $self->{document} = undef;
  $self->{charMapping} = undef;
  $self->{charToTokenOffset} = undef;
  $self->{startIndices} = undef;
  $self->{endIndices} = undef;
  $self->{entityMentionsById} = undef;
  $self->{canonicalEntityMentionsById} = undef;
  $self->{isProxy} = undef;
  $self->{eventsById} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{fullText}) {
      $self->{fullText} = $vals->{fullText};
    }
    if (defined $vals->{document}) {
      $self->{document} = $vals->{document};
    }
    if (defined $vals->{charMapping}) {
      $self->{charMapping} = $vals->{charMapping};
    }
    if (defined $vals->{charToTokenOffset}) {
      $self->{charToTokenOffset} = $vals->{charToTokenOffset};
    }
    if (defined $vals->{startIndices}) {
      $self->{startIndices} = $vals->{startIndices};
    }
    if (defined $vals->{endIndices}) {
      $self->{endIndices} = $vals->{endIndices};
    }
    if (defined $vals->{entityMentionsById}) {
      $self->{entityMentionsById} = $vals->{entityMentionsById};
    }
    if (defined $vals->{canonicalEntityMentionsById}) {
      $self->{canonicalEntityMentionsById} = $vals->{canonicalEntityMentionsById};
    }
    if (defined $vals->{isProxy}) {
      $self->{isProxy} = $vals->{isProxy};
    }
    if (defined $vals->{eventsById}) {
      $self->{eventsById} = $vals->{eventsById};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'EREDocument';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{fullText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{document} = new thrift::adept::common::Document();
        $xfer += $self->{document}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size0 = 0;
          $self->{charMapping} = {};
          my $_ktype1 = 0;
          my $_vtype2 = 0;
          $xfer += $input->readMapBegin(\$_ktype1, \$_vtype2, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $key5 = 0;
            my $val6 = 0;
            $xfer += $input->readI64(\$key5);
            $xfer += $input->readI64(\$val6);
            $self->{charMapping}->{$key5} = $val6;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size7 = 0;
          $self->{charToTokenOffset} = {};
          my $_ktype8 = 0;
          my $_vtype9 = 0;
          $xfer += $input->readMapBegin(\$_ktype8, \$_vtype9, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $key12 = 0;
            my $val13 = 0;
            $xfer += $input->readI64(\$key12);
            $xfer += $input->readI64(\$val13);
            $self->{charToTokenOffset}->{$key12} = $val13;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size14 = 0;
          $self->{startIndices} = [];
          my $_etype17 = 0;
          $xfer += $input->readListBegin(\$_etype17, \$_size14);
          for (my $_i18 = 0; $_i18 < $_size14; ++$_i18)
          {
            my $elem19 = undef;
            $xfer += $input->readI32(\$elem19);
            push(@{$self->{startIndices}},$elem19);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size20 = 0;
          $self->{endIndices} = [];
          my $_etype23 = 0;
          $xfer += $input->readListBegin(\$_etype23, \$_size20);
          for (my $_i24 = 0; $_i24 < $_size20; ++$_i24)
          {
            my $elem25 = undef;
            $xfer += $input->readI32(\$elem25);
            push(@{$self->{endIndices}},$elem25);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size26 = 0;
          $self->{entityMentionsById} = {};
          my $_ktype27 = 0;
          my $_vtype28 = 0;
          $xfer += $input->readMapBegin(\$_ktype27, \$_vtype28, \$_size26);
          for (my $_i30 = 0; $_i30 < $_size26; ++$_i30)
          {
            my $key31 = 0;
            my $val32 = new thrift::adept::common::EntityMention();
            $xfer += $input->readI64(\$key31);
            $val32 = new thrift::adept::common::EntityMention();
            $xfer += $val32->read($input);
            $self->{entityMentionsById}->{$key31} = $val32;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size33 = 0;
          $self->{canonicalEntityMentionsById} = {};
          my $_ktype34 = 0;
          my $_vtype35 = 0;
          $xfer += $input->readMapBegin(\$_ktype34, \$_vtype35, \$_size33);
          for (my $_i37 = 0; $_i37 < $_size33; ++$_i37)
          {
            my $key38 = 0;
            my $val39 = new thrift::adept::common::EntityMention();
            $xfer += $input->readI64(\$key38);
            $val39 = new thrift::adept::common::EntityMention();
            $xfer += $val39->read($input);
            $self->{canonicalEntityMentionsById}->{$key38} = $val39;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{isProxy});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size40 = 0;
          $self->{eventsById} = {};
          my $_ktype41 = 0;
          my $_vtype42 = 0;
          $xfer += $input->readMapBegin(\$_ktype41, \$_vtype42, \$_size40);
          for (my $_i44 = 0; $_i44 < $_size40; ++$_i44)
          {
            my $key45 = 0;
            my $val46 = [];
            $xfer += $input->readI64(\$key45);
            {
              my $_size47 = 0;
              $val46 = [];
              my $_etype50 = 0;
              $xfer += $input->readListBegin(\$_etype50, \$_size47);
              for (my $_i51 = 0; $_i51 < $_size47; ++$_i51)
              {
                my $elem52 = undef;
                $elem52 = new thrift::adept::common::Event();
                $xfer += $elem52->read($input);
                push(@{$val46},$elem52);
              }
              $xfer += $input->readListEnd();
            }
            $self->{eventsById}->{$key45} = $val46;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('EREDocument');
  if (defined $self->{fullText}) {
    $xfer += $output->writeFieldBegin('fullText', TType::STRING, 1);
    $xfer += $output->writeString($self->{fullText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{document}) {
    $xfer += $output->writeFieldBegin('document', TType::STRUCT, 2);
    $xfer += $self->{document}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{charMapping}) {
    $xfer += $output->writeFieldBegin('charMapping', TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(TType::I64, TType::I64, scalar(keys %{$self->{charMapping}}));
      {
        while( my ($kiter53,$viter54) = each %{$self->{charMapping}}) 
        {
          $xfer += $output->writeI64($kiter53);
          $xfer += $output->writeI64($viter54);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{charToTokenOffset}) {
    $xfer += $output->writeFieldBegin('charToTokenOffset', TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(TType::I64, TType::I64, scalar(keys %{$self->{charToTokenOffset}}));
      {
        while( my ($kiter55,$viter56) = each %{$self->{charToTokenOffset}}) 
        {
          $xfer += $output->writeI64($kiter55);
          $xfer += $output->writeI64($viter56);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{startIndices}) {
    $xfer += $output->writeFieldBegin('startIndices', TType::LIST, 5);
    {
      $xfer += $output->writeListBegin(TType::I32, scalar(@{$self->{startIndices}}));
      {
        foreach my $iter57 (@{$self->{startIndices}}) 
        {
          $xfer += $output->writeI32($iter57);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endIndices}) {
    $xfer += $output->writeFieldBegin('endIndices', TType::LIST, 6);
    {
      $xfer += $output->writeListBegin(TType::I32, scalar(@{$self->{endIndices}}));
      {
        foreach my $iter58 (@{$self->{endIndices}}) 
        {
          $xfer += $output->writeI32($iter58);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{entityMentionsById}) {
    $xfer += $output->writeFieldBegin('entityMentionsById', TType::MAP, 7);
    {
      $xfer += $output->writeMapBegin(TType::I64, TType::STRUCT, scalar(keys %{$self->{entityMentionsById}}));
      {
        while( my ($kiter59,$viter60) = each %{$self->{entityMentionsById}}) 
        {
          $xfer += $output->writeI64($kiter59);
          $xfer += ${viter60}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{canonicalEntityMentionsById}) {
    $xfer += $output->writeFieldBegin('canonicalEntityMentionsById', TType::MAP, 8);
    {
      $xfer += $output->writeMapBegin(TType::I64, TType::STRUCT, scalar(keys %{$self->{canonicalEntityMentionsById}}));
      {
        while( my ($kiter61,$viter62) = each %{$self->{canonicalEntityMentionsById}}) 
        {
          $xfer += $output->writeI64($kiter61);
          $xfer += ${viter62}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{isProxy}) {
    $xfer += $output->writeFieldBegin('isProxy', TType::BOOL, 9);
    $xfer += $output->writeBool($self->{isProxy});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventsById}) {
    $xfer += $output->writeFieldBegin('eventsById', TType::MAP, 10);
    {
      $xfer += $output->writeMapBegin(TType::I64, TType::LIST, scalar(keys %{$self->{eventsById}}));
      {
        while( my ($kiter63,$viter64) = each %{$self->{eventsById}}) 
        {
          $xfer += $output->writeI64($kiter63);
          {
            $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{${viter64}}));
            {
              foreach my $iter65 (@{${viter64}}) 
              {
                $xfer += ${iter65}->write($output);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::io::CoNLLDocument;
use base qw(Class::Accessor);
thrift::adept::io::CoNLLDocument->mk_accessors( qw( fullText document wordNums tokens POSs namedEntities corefs tokensToPOSs ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{fullText} = undef;
  $self->{document} = undef;
  $self->{wordNums} = undef;
  $self->{tokens} = undef;
  $self->{POSs} = undef;
  $self->{namedEntities} = undef;
  $self->{corefs} = undef;
  $self->{tokensToPOSs} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{fullText}) {
      $self->{fullText} = $vals->{fullText};
    }
    if (defined $vals->{document}) {
      $self->{document} = $vals->{document};
    }
    if (defined $vals->{wordNums}) {
      $self->{wordNums} = $vals->{wordNums};
    }
    if (defined $vals->{tokens}) {
      $self->{tokens} = $vals->{tokens};
    }
    if (defined $vals->{POSs}) {
      $self->{POSs} = $vals->{POSs};
    }
    if (defined $vals->{namedEntities}) {
      $self->{namedEntities} = $vals->{namedEntities};
    }
    if (defined $vals->{corefs}) {
      $self->{corefs} = $vals->{corefs};
    }
    if (defined $vals->{tokensToPOSs}) {
      $self->{tokensToPOSs} = $vals->{tokensToPOSs};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoNLLDocument';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{fullText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{document} = new thrift::adept::common::Document();
        $xfer += $self->{document}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size66 = 0;
          $self->{wordNums} = [];
          my $_etype69 = 0;
          $xfer += $input->readListBegin(\$_etype69, \$_size66);
          for (my $_i70 = 0; $_i70 < $_size66; ++$_i70)
          {
            my $elem71 = undef;
            {
              my $_size72 = 0;
              $elem71 = [];
              my $_etype75 = 0;
              $xfer += $input->readListBegin(\$_etype75, \$_size72);
              for (my $_i76 = 0; $_i76 < $_size72; ++$_i76)
              {
                my $elem77 = undef;
                $xfer += $input->readI32(\$elem77);
                push(@{$elem71},$elem77);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{wordNums}},$elem71);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size78 = 0;
          $self->{tokens} = [];
          my $_etype81 = 0;
          $xfer += $input->readListBegin(\$_etype81, \$_size78);
          for (my $_i82 = 0; $_i82 < $_size78; ++$_i82)
          {
            my $elem83 = undef;
            {
              my $_size84 = 0;
              $elem83 = [];
              my $_etype87 = 0;
              $xfer += $input->readListBegin(\$_etype87, \$_size84);
              for (my $_i88 = 0; $_i88 < $_size84; ++$_i88)
              {
                my $elem89 = undef;
                $xfer += $input->readString(\$elem89);
                push(@{$elem83},$elem89);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{tokens}},$elem83);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size90 = 0;
          $self->{POSs} = [];
          my $_etype93 = 0;
          $xfer += $input->readListBegin(\$_etype93, \$_size90);
          for (my $_i94 = 0; $_i94 < $_size90; ++$_i94)
          {
            my $elem95 = undef;
            {
              my $_size96 = 0;
              $elem95 = [];
              my $_etype99 = 0;
              $xfer += $input->readListBegin(\$_etype99, \$_size96);
              for (my $_i100 = 0; $_i100 < $_size96; ++$_i100)
              {
                my $elem101 = undef;
                $xfer += $input->readString(\$elem101);
                push(@{$elem95},$elem101);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{POSs}},$elem95);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size102 = 0;
          $self->{namedEntities} = [];
          my $_etype105 = 0;
          $xfer += $input->readListBegin(\$_etype105, \$_size102);
          for (my $_i106 = 0; $_i106 < $_size102; ++$_i106)
          {
            my $elem107 = undef;
            {
              my $_size108 = 0;
              $elem107 = {};
              my $_ktype109 = 0;
              my $_vtype110 = 0;
              $xfer += $input->readMapBegin(\$_ktype109, \$_vtype110, \$_size108);
              for (my $_i112 = 0; $_i112 < $_size108; ++$_i112)
              {
                my $key113 = '';
                my $val114 = 0;
                $xfer += $input->readString(\$key113);
                $xfer += $input->readI64(\$val114);
                $elem107->{$key113} = $val114;
              }
              $xfer += $input->readMapEnd();
            }
            push(@{$self->{namedEntities}},$elem107);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size115 = 0;
          $self->{corefs} = [];
          my $_etype118 = 0;
          $xfer += $input->readListBegin(\$_etype118, \$_size115);
          for (my $_i119 = 0; $_i119 < $_size115; ++$_i119)
          {
            my $elem120 = undef;
            {
              my $_size121 = 0;
              $elem120 = [];
              my $_etype124 = 0;
              $xfer += $input->readListBegin(\$_etype124, \$_size121);
              for (my $_i125 = 0; $_i125 < $_size121; ++$_i125)
              {
                my $elem126 = undef;
                {
                  my $_size127 = 0;
                  $elem126 = [];
                  my $_etype130 = 0;
                  $xfer += $input->readListBegin(\$_etype130, \$_size127);
                  for (my $_i131 = 0; $_i131 < $_size127; ++$_i131)
                  {
                    my $elem132 = undef;
                    $xfer += $input->readI64(\$elem132);
                    push(@{$elem126},$elem132);
                  }
                  $xfer += $input->readListEnd();
                }
                push(@{$elem120},$elem126);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{corefs}},$elem120);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size133 = 0;
          $self->{tokensToPOSs} = {};
          my $_ktype134 = 0;
          my $_vtype135 = 0;
          $xfer += $input->readMapBegin(\$_ktype134, \$_vtype135, \$_size133);
          for (my $_i137 = 0; $_i137 < $_size133; ++$_i137)
          {
            my $key138 = new thrift::adept::common::Token();
            my $val139 = '';
            $key138 = new thrift::adept::common::Token();
            $xfer += $key138->read($input);
            $xfer += $input->readString(\$val139);
            $self->{tokensToPOSs}->{$key138} = $val139;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoNLLDocument');
  if (defined $self->{fullText}) {
    $xfer += $output->writeFieldBegin('fullText', TType::STRING, 1);
    $xfer += $output->writeString($self->{fullText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{document}) {
    $xfer += $output->writeFieldBegin('document', TType::STRUCT, 2);
    $xfer += $self->{document}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{wordNums}) {
    $xfer += $output->writeFieldBegin('wordNums', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::LIST, scalar(@{$self->{wordNums}}));
      {
        foreach my $iter140 (@{$self->{wordNums}}) 
        {
          {
            $xfer += $output->writeListBegin(TType::I32, scalar(@{${iter140}}));
            {
              foreach my $iter141 (@{${iter140}}) 
              {
                $xfer += $output->writeI32($iter141);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tokens}) {
    $xfer += $output->writeFieldBegin('tokens', TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(TType::LIST, scalar(@{$self->{tokens}}));
      {
        foreach my $iter142 (@{$self->{tokens}}) 
        {
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${iter142}}));
            {
              foreach my $iter143 (@{${iter142}}) 
              {
                $xfer += $output->writeString($iter143);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{POSs}) {
    $xfer += $output->writeFieldBegin('POSs', TType::LIST, 5);
    {
      $xfer += $output->writeListBegin(TType::LIST, scalar(@{$self->{POSs}}));
      {
        foreach my $iter144 (@{$self->{POSs}}) 
        {
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${iter144}}));
            {
              foreach my $iter145 (@{${iter144}}) 
              {
                $xfer += $output->writeString($iter145);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{namedEntities}) {
    $xfer += $output->writeFieldBegin('namedEntities', TType::LIST, 6);
    {
      $xfer += $output->writeListBegin(TType::MAP, scalar(@{$self->{namedEntities}}));
      {
        foreach my $iter146 (@{$self->{namedEntities}}) 
        {
          {
            $xfer += $output->writeMapBegin(TType::STRING, TType::I64, scalar(keys %{${iter146}}));
            {
              while( my ($kiter147,$viter148) = each %{${iter146}}) 
              {
                $xfer += $output->writeString($kiter147);
                $xfer += $output->writeI64($viter148);
              }
            }
            $xfer += $output->writeMapEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{corefs}) {
    $xfer += $output->writeFieldBegin('corefs', TType::LIST, 7);
    {
      $xfer += $output->writeListBegin(TType::LIST, scalar(@{$self->{corefs}}));
      {
        foreach my $iter149 (@{$self->{corefs}}) 
        {
          {
            $xfer += $output->writeListBegin(TType::LIST, scalar(@{${iter149}}));
            {
              foreach my $iter150 (@{${iter149}}) 
              {
                {
                  $xfer += $output->writeListBegin(TType::I64, scalar(@{${iter150}}));
                  {
                    foreach my $iter151 (@{${iter150}}) 
                    {
                      $xfer += $output->writeI64($iter151);
                    }
                  }
                  $xfer += $output->writeListEnd();
                }
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tokensToPOSs}) {
    $xfer += $output->writeFieldBegin('tokensToPOSs', TType::MAP, 8);
    {
      $xfer += $output->writeMapBegin(TType::STRUCT, TType::STRING, scalar(keys %{$self->{tokensToPOSs}}));
      {
        while( my ($kiter152,$viter153) = each %{$self->{tokensToPOSs}}) 
        {
          $xfer += ${kiter152}->write($output);
          $xfer += $output->writeString($viter153);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;