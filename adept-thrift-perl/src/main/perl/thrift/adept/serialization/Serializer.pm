#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use thrift::adept::serialization::Types;

# HELPER FUNCTIONS AND STRUCTURES

package thrift::adept::serialization::Serializer_serializeAsByteArray_args;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_serializeAsByteArray_args->mk_accessors( qw( hltContentContainer ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hltContentContainer} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hltContentContainer}) {
      $self->{hltContentContainer} = $vals->{hltContentContainer};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_serializeAsByteArray_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{hltContentContainer} = new thrift::adept::common::HltContentContainer();
        $xfer += $self->{hltContentContainer}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_serializeAsByteArray_args');
  if (defined $self->{hltContentContainer}) {
    $xfer += $output->writeFieldBegin('hltContentContainer', TType::STRUCT, 1);
    $xfer += $self->{hltContentContainer}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::Serializer_serializeAsByteArray_result;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_serializeAsByteArray_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_serializeAsByteArray_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_serializeAsByteArray_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::Serializer_deserializeByteArray_args;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_deserializeByteArray_args->mk_accessors( qw( data ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{data} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{data}) {
      $self->{data} = $vals->{data};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_deserializeByteArray_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{data});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_deserializeByteArray_args');
  if (defined $self->{data}) {
    $xfer += $output->writeFieldBegin('data', TType::STRING, 1);
    $xfer += $output->writeString($self->{data});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::Serializer_deserializeByteArray_result;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_deserializeByteArray_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_deserializeByteArray_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new thrift::adept::common::HltContentContainer();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_deserializeByteArray_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::Serializer_serializeAsString_args;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_serializeAsString_args->mk_accessors( qw( hltContentContainer ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hltContentContainer} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hltContentContainer}) {
      $self->{hltContentContainer} = $vals->{hltContentContainer};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_serializeAsString_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{hltContentContainer} = new thrift::adept::common::HltContentContainer();
        $xfer += $self->{hltContentContainer}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_serializeAsString_args');
  if (defined $self->{hltContentContainer}) {
    $xfer += $output->writeFieldBegin('hltContentContainer', TType::STRUCT, 1);
    $xfer += $self->{hltContentContainer}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::Serializer_serializeAsString_result;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_serializeAsString_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_serializeAsString_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_serializeAsString_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::Serializer_deserializeString_args;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_deserializeString_args->mk_accessors( qw( data ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{data} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{data}) {
      $self->{data} = $vals->{data};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_deserializeString_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{data});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_deserializeString_args');
  if (defined $self->{data}) {
    $xfer += $output->writeFieldBegin('data', TType::STRING, 1);
    $xfer += $output->writeString($self->{data});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::Serializer_deserializeString_result;
use base qw(Class::Accessor);
thrift::adept::serialization::Serializer_deserializeString_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Serializer_deserializeString_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new thrift::adept::common::HltContentContainer();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Serializer_deserializeString_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package thrift::adept::serialization::SerializerIf;

use strict;


sub serializeAsByteArray{
  my $self = shift;
  my $hltContentContainer = shift;

  die 'implement interface';
}

sub deserializeByteArray{
  my $self = shift;
  my $data = shift;

  die 'implement interface';
}

sub serializeAsString{
  my $self = shift;
  my $hltContentContainer = shift;

  die 'implement interface';
}

sub deserializeString{
  my $self = shift;
  my $data = shift;

  die 'implement interface';
}

package thrift::adept::serialization::SerializerRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub serializeAsByteArray{
  my ($self, $request) = @_;

  my $hltContentContainer = ($request->{'hltContentContainer'}) ? $request->{'hltContentContainer'} : undef;
  return $self->{impl}->serializeAsByteArray($hltContentContainer);
}

sub deserializeByteArray{
  my ($self, $request) = @_;

  my $data = ($request->{'data'}) ? $request->{'data'} : undef;
  return $self->{impl}->deserializeByteArray($data);
}

sub serializeAsString{
  my ($self, $request) = @_;

  my $hltContentContainer = ($request->{'hltContentContainer'}) ? $request->{'hltContentContainer'} : undef;
  return $self->{impl}->serializeAsString($hltContentContainer);
}

sub deserializeString{
  my ($self, $request) = @_;

  my $data = ($request->{'data'}) ? $request->{'data'} : undef;
  return $self->{impl}->deserializeString($data);
}

package thrift::adept::serialization::SerializerClient;


use base qw(thrift::adept::serialization::SerializerIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub serializeAsByteArray{
  my $self = shift;
  my $hltContentContainer = shift;

    $self->send_serializeAsByteArray($hltContentContainer);
  return $self->recv_serializeAsByteArray();
}

sub send_serializeAsByteArray{
  my $self = shift;
  my $hltContentContainer = shift;

  $self->{output}->writeMessageBegin('serializeAsByteArray', TMessageType::CALL, $self->{seqid});
  my $args = new thrift::adept::serialization::Serializer_serializeAsByteArray_args();
  $args->{hltContentContainer} = $hltContentContainer;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_serializeAsByteArray{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new thrift::adept::serialization::Serializer_serializeAsByteArray_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "serializeAsByteArray failed: unknown result";
}
sub deserializeByteArray{
  my $self = shift;
  my $data = shift;

    $self->send_deserializeByteArray($data);
  return $self->recv_deserializeByteArray();
}

sub send_deserializeByteArray{
  my $self = shift;
  my $data = shift;

  $self->{output}->writeMessageBegin('deserializeByteArray', TMessageType::CALL, $self->{seqid});
  my $args = new thrift::adept::serialization::Serializer_deserializeByteArray_args();
  $args->{data} = $data;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_deserializeByteArray{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new thrift::adept::serialization::Serializer_deserializeByteArray_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "deserializeByteArray failed: unknown result";
}
sub serializeAsString{
  my $self = shift;
  my $hltContentContainer = shift;

    $self->send_serializeAsString($hltContentContainer);
  return $self->recv_serializeAsString();
}

sub send_serializeAsString{
  my $self = shift;
  my $hltContentContainer = shift;

  $self->{output}->writeMessageBegin('serializeAsString', TMessageType::CALL, $self->{seqid});
  my $args = new thrift::adept::serialization::Serializer_serializeAsString_args();
  $args->{hltContentContainer} = $hltContentContainer;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_serializeAsString{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new thrift::adept::serialization::Serializer_serializeAsString_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "serializeAsString failed: unknown result";
}
sub deserializeString{
  my $self = shift;
  my $data = shift;

    $self->send_deserializeString($data);
  return $self->recv_deserializeString();
}

sub send_deserializeString{
  my $self = shift;
  my $data = shift;

  $self->{output}->writeMessageBegin('deserializeString', TMessageType::CALL, $self->{seqid});
  my $args = new thrift::adept::serialization::Serializer_deserializeString_args();
  $args->{data} = $data;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_deserializeString{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new thrift::adept::serialization::Serializer_deserializeString_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "deserializeString failed: unknown result";
}
package thrift::adept::serialization::SerializerProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_serializeAsByteArray {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new thrift::adept::serialization::Serializer_serializeAsByteArray_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new thrift::adept::serialization::Serializer_serializeAsByteArray_result();
    $result->{success} = $self->{handler}->serializeAsByteArray($args->hltContentContainer);
    $output->writeMessageBegin('serializeAsByteArray', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_deserializeByteArray {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new thrift::adept::serialization::Serializer_deserializeByteArray_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new thrift::adept::serialization::Serializer_deserializeByteArray_result();
    $result->{success} = $self->{handler}->deserializeByteArray($args->data);
    $output->writeMessageBegin('deserializeByteArray', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_serializeAsString {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new thrift::adept::serialization::Serializer_serializeAsString_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new thrift::adept::serialization::Serializer_serializeAsString_result();
    $result->{success} = $self->{handler}->serializeAsString($args->hltContentContainer);
    $output->writeMessageBegin('serializeAsString', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_deserializeString {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new thrift::adept::serialization::Serializer_deserializeString_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new thrift::adept::serialization::Serializer_deserializeString_result();
    $result->{success} = $self->{handler}->deserializeString($args->data);
    $output->writeMessageBegin('deserializeString', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
