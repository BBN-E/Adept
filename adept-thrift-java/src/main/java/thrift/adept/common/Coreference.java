/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class Coreference.
 */
public class Coreference implements org.apache.thrift.TBase<Coreference, Coreference._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Coreference");

  private static final org.apache.thrift.protocol.TField COREFERENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("coreferenceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RESOLVED_ENTITY_MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("resolvedEntityMentions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CoreferenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CoreferenceTupleSchemeFactory());
  }

  /**
   * The coreference id
   */
  public long coreferenceId; // required
  /**
   * The entities
   */
  public List<Entity> entities; // optional
  /**
   * The resolved entity mentions
   */
  public List<EntityMention> resolvedEntityMentions; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The coreference id
     */
    COREFERENCE_ID((short)1, "coreferenceId"),
    /**
     * The entities
     */
    ENTITIES((short)2, "entities"),
    /**
     * The resolved entity mentions
     */
    RESOLVED_ENTITY_MENTIONS((short)3, "resolvedEntityMentions"),
    /**
     * The id
     */
    ID((short)4, "id"),
    /**
     * The value
     */
    VALUE((short)5, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)6, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COREFERENCE_ID
          return COREFERENCE_ID;
        case 2: // ENTITIES
          return ENTITIES;
        case 3: // RESOLVED_ENTITY_MENTIONS
          return RESOLVED_ENTITY_MENTIONS;
        case 4: // ID
          return ID;
        case 5: // VALUE
          return VALUE;
        case 6: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COREFERENCEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ENTITIES,_Fields.RESOLVED_ENTITY_MENTIONS,_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COREFERENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("coreferenceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entity.class))));
    tmpMap.put(_Fields.RESOLVED_ENTITY_MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("resolvedEntityMentions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Coreference.class, metaDataMap);
  }

  public Coreference() {
  }

  public Coreference(
    long coreferenceId)
  {
    this();
    this.coreferenceId = coreferenceId;
    setCoreferenceIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Coreference(Coreference other) {
    __isset_bitfield = other.__isset_bitfield;
    this.coreferenceId = other.coreferenceId;
    if (other.isSetEntities()) {
      List<Entity> __this__entities = new ArrayList<Entity>();
      for (Entity other_element : other.entities) {
        __this__entities.add(new Entity(other_element));
      }
      this.entities = __this__entities;
    }
    if (other.isSetResolvedEntityMentions()) {
      List<EntityMention> __this__resolvedEntityMentions = new ArrayList<EntityMention>();
      for (EntityMention other_element : other.resolvedEntityMentions) {
        __this__resolvedEntityMentions.add(new EntityMention(other_element));
      }
      this.resolvedEntityMentions = __this__resolvedEntityMentions;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public Coreference deepCopy() {
    return new Coreference(this);
  }

  @Override
  public void clear() {
    setCoreferenceIdIsSet(false);
    this.coreferenceId = 0;
    this.entities = null;
    this.resolvedEntityMentions = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The coreference id
   */
  public long getCoreferenceId() {
    return this.coreferenceId;
  }

  /**
   * The coreference id
   */
  public Coreference setCoreferenceId(long coreferenceId) {
    this.coreferenceId = coreferenceId;
    setCoreferenceIdIsSet(true);
    return this;
  }

  public void unsetCoreferenceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COREFERENCEID_ISSET_ID);
  }

  /** Returns true if field coreferenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreferenceId() {
    return EncodingUtils.testBit(__isset_bitfield, __COREFERENCEID_ISSET_ID);
  }

  public void setCoreferenceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COREFERENCEID_ISSET_ID, value);
  }

  public int getEntitiesSize() {
    return (this.entities == null) ? 0 : this.entities.size();
  }

  public java.util.Iterator<Entity> getEntitiesIterator() {
    return (this.entities == null) ? null : this.entities.iterator();
  }

  public void addToEntities(Entity elem) {
    if (this.entities == null) {
      this.entities = new ArrayList<Entity>();
    }
    this.entities.add(elem);
  }

  /**
   * The entities
   */
  public List<Entity> getEntities() {
    return this.entities;
  }

  /**
   * The entities
   */
  public Coreference setEntities(List<Entity> entities) {
    this.entities = entities;
    return this;
  }

  public void unsetEntities() {
    this.entities = null;
  }

  /** Returns true if field entities is set (has been assigned a value) and false otherwise */
  public boolean isSetEntities() {
    return this.entities != null;
  }

  public void setEntitiesIsSet(boolean value) {
    if (!value) {
      this.entities = null;
    }
  }

  public int getResolvedEntityMentionsSize() {
    return (this.resolvedEntityMentions == null) ? 0 : this.resolvedEntityMentions.size();
  }

  public java.util.Iterator<EntityMention> getResolvedEntityMentionsIterator() {
    return (this.resolvedEntityMentions == null) ? null : this.resolvedEntityMentions.iterator();
  }

  public void addToResolvedEntityMentions(EntityMention elem) {
    if (this.resolvedEntityMentions == null) {
      this.resolvedEntityMentions = new ArrayList<EntityMention>();
    }
    this.resolvedEntityMentions.add(elem);
  }

  /**
   * The resolved entity mentions
   */
  public List<EntityMention> getResolvedEntityMentions() {
    return this.resolvedEntityMentions;
  }

  /**
   * The resolved entity mentions
   */
  public Coreference setResolvedEntityMentions(List<EntityMention> resolvedEntityMentions) {
    this.resolvedEntityMentions = resolvedEntityMentions;
    return this;
  }

  public void unsetResolvedEntityMentions() {
    this.resolvedEntityMentions = null;
  }

  /** Returns true if field resolvedEntityMentions is set (has been assigned a value) and false otherwise */
  public boolean isSetResolvedEntityMentions() {
    return this.resolvedEntityMentions != null;
  }

  public void setResolvedEntityMentionsIsSet(boolean value) {
    if (!value) {
      this.resolvedEntityMentions = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Coreference setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Coreference setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public Coreference setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COREFERENCE_ID:
      if (value == null) {
        unsetCoreferenceId();
      } else {
        setCoreferenceId((Long)value);
      }
      break;

    case ENTITIES:
      if (value == null) {
        unsetEntities();
      } else {
        setEntities((List<Entity>)value);
      }
      break;

    case RESOLVED_ENTITY_MENTIONS:
      if (value == null) {
        unsetResolvedEntityMentions();
      } else {
        setResolvedEntityMentions((List<EntityMention>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COREFERENCE_ID:
      return Long.valueOf(getCoreferenceId());

    case ENTITIES:
      return getEntities();

    case RESOLVED_ENTITY_MENTIONS:
      return getResolvedEntityMentions();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COREFERENCE_ID:
      return isSetCoreferenceId();
    case ENTITIES:
      return isSetEntities();
    case RESOLVED_ENTITY_MENTIONS:
      return isSetResolvedEntityMentions();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Coreference)
      return this.equals((Coreference)that);
    return false;
  }

  public boolean equals(Coreference that) {
    if (that == null)
      return false;

    boolean this_present_coreferenceId = true;
    boolean that_present_coreferenceId = true;
    if (this_present_coreferenceId || that_present_coreferenceId) {
      if (!(this_present_coreferenceId && that_present_coreferenceId))
        return false;
      if (this.coreferenceId != that.coreferenceId)
        return false;
    }

    boolean this_present_entities = true && this.isSetEntities();
    boolean that_present_entities = true && that.isSetEntities();
    if (this_present_entities || that_present_entities) {
      if (!(this_present_entities && that_present_entities))
        return false;
      if (!this.entities.equals(that.entities))
        return false;
    }

    boolean this_present_resolvedEntityMentions = true && this.isSetResolvedEntityMentions();
    boolean that_present_resolvedEntityMentions = true && that.isSetResolvedEntityMentions();
    if (this_present_resolvedEntityMentions || that_present_resolvedEntityMentions) {
      if (!(this_present_resolvedEntityMentions && that_present_resolvedEntityMentions))
        return false;
      if (!this.resolvedEntityMentions.equals(that.resolvedEntityMentions))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Coreference other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Coreference typedOther = (Coreference)other;

    lastComparison = Boolean.valueOf(isSetCoreferenceId()).compareTo(typedOther.isSetCoreferenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreferenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreferenceId, typedOther.coreferenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntities()).compareTo(typedOther.isSetEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, typedOther.entities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResolvedEntityMentions()).compareTo(typedOther.isSetResolvedEntityMentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolvedEntityMentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolvedEntityMentions, typedOther.resolvedEntityMentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Coreference(");
    boolean first = true;

    sb.append("coreferenceId:");
    sb.append(this.coreferenceId);
    first = false;
    if (isSetEntities()) {
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
    }
    if (isSetResolvedEntityMentions()) {
      if (!first) sb.append(", ");
      sb.append("resolvedEntityMentions:");
      if (this.resolvedEntityMentions == null) {
        sb.append("null");
      } else {
        sb.append(this.resolvedEntityMentions);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'coreferenceId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoreferenceStandardSchemeFactory implements SchemeFactory {
    public CoreferenceStandardScheme getScheme() {
      return new CoreferenceStandardScheme();
    }
  }

  private static class CoreferenceStandardScheme extends StandardScheme<Coreference> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Coreference struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COREFERENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coreferenceId = iprot.readI64();
              struct.setCoreferenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.entities = new ArrayList<Entity>(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  Entity _elem48; // required
                  _elem48 = new Entity();
                  _elem48.read(iprot);
                  struct.entities.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOLVED_ENTITY_MENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.resolvedEntityMentions = new ArrayList<EntityMention>(_list49.size);
                for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                {
                  EntityMention _elem51; // required
                  _elem51 = new EntityMention();
                  _elem51.read(iprot);
                  struct.resolvedEntityMentions.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setResolvedEntityMentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCoreferenceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'coreferenceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Coreference struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COREFERENCE_ID_FIELD_DESC);
      oprot.writeI64(struct.coreferenceId);
      oprot.writeFieldEnd();
      if (struct.entities != null) {
        if (struct.isSetEntities()) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entities.size()));
            for (Entity _iter52 : struct.entities)
            {
              _iter52.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resolvedEntityMentions != null) {
        if (struct.isSetResolvedEntityMentions()) {
          oprot.writeFieldBegin(RESOLVED_ENTITY_MENTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resolvedEntityMentions.size()));
            for (EntityMention _iter53 : struct.resolvedEntityMentions)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoreferenceTupleSchemeFactory implements SchemeFactory {
    public CoreferenceTupleScheme getScheme() {
      return new CoreferenceTupleScheme();
    }
  }

  private static class CoreferenceTupleScheme extends TupleScheme<Coreference> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Coreference struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.coreferenceId);
      BitSet optionals = new BitSet();
      if (struct.isSetEntities()) {
        optionals.set(0);
      }
      if (struct.isSetResolvedEntityMentions()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetValue()) {
        optionals.set(3);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetEntities()) {
        {
          oprot.writeI32(struct.entities.size());
          for (Entity _iter54 : struct.entities)
          {
            _iter54.write(oprot);
          }
        }
      }
      if (struct.isSetResolvedEntityMentions()) {
        {
          oprot.writeI32(struct.resolvedEntityMentions.size());
          for (EntityMention _iter55 : struct.resolvedEntityMentions)
          {
            _iter55.write(oprot);
          }
        }
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Coreference struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.coreferenceId = iprot.readI64();
      struct.setCoreferenceIdIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list56 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entities = new ArrayList<Entity>(_list56.size);
          for (int _i57 = 0; _i57 < _list56.size; ++_i57)
          {
            Entity _elem58; // required
            _elem58 = new Entity();
            _elem58.read(iprot);
            struct.entities.add(_elem58);
          }
        }
        struct.setEntitiesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resolvedEntityMentions = new ArrayList<EntityMention>(_list59.size);
          for (int _i60 = 0; _i60 < _list59.size; ++_i60)
          {
            EntityMention _elem61; // required
            _elem61 = new EntityMention();
            _elem61.read(iprot);
            struct.resolvedEntityMentions.add(_elem61);
          }
        }
        struct.setResolvedEntityMentionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}

