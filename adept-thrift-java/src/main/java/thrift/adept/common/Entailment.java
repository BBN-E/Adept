/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class Entailment.
 */
public class Entailment implements org.apache.thrift.TBase<Entailment, Entailment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Entailment");

  private static final org.apache.thrift.protocol.TField ENTAILMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entailmentId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HYPOTHESIS_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesis", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField JUDGMENT_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("judgmentDistribution", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EntailmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EntailmentTupleSchemeFactory());
  }

  /**
   * The entailment id
   */
  public long entailmentId; // required
  /**
   * The hypothesis
   */
  public Passage hypothesis; // optional
  /**
   * The judgment distribution
   */
  public Map<EntailmentJudgment,Double> judgmentDistribution; // optional
  /**
   * The text
   */
  public Passage text; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The entailment id
     */
    ENTAILMENT_ID((short)1, "entailmentId"),
    /**
     * The hypothesis
     */
    HYPOTHESIS((short)2, "hypothesis"),
    /**
     * The judgment distribution
     */
    JUDGMENT_DISTRIBUTION((short)3, "judgmentDistribution"),
    /**
     * The text
     */
    TEXT((short)4, "text"),
    /**
     * The id
     */
    ID((short)5, "id"),
    /**
     * The value
     */
    VALUE((short)6, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)7, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTAILMENT_ID
          return ENTAILMENT_ID;
        case 2: // HYPOTHESIS
          return HYPOTHESIS;
        case 3: // JUDGMENT_DISTRIBUTION
          return JUDGMENT_DISTRIBUTION;
        case 4: // TEXT
          return TEXT;
        case 5: // ID
          return ID;
        case 6: // VALUE
          return VALUE;
        case 7: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENTAILMENTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HYPOTHESIS,_Fields.JUDGMENT_DISTRIBUTION,_Fields.TEXT,_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTAILMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("entailmentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HYPOTHESIS, new org.apache.thrift.meta_data.FieldMetaData("hypothesis", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class)));
    tmpMap.put(_Fields.JUDGMENT_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("judgmentDistribution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EntailmentJudgment.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Entailment.class, metaDataMap);
  }

  public Entailment() {
  }

  public Entailment(
    long entailmentId)
  {
    this();
    this.entailmentId = entailmentId;
    setEntailmentIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Entailment(Entailment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.entailmentId = other.entailmentId;
    if (other.isSetHypothesis()) {
      this.hypothesis = new Passage(other.hypothesis);
    }
    if (other.isSetJudgmentDistribution()) {
      Map<EntailmentJudgment,Double> __this__judgmentDistribution = new HashMap<EntailmentJudgment,Double>();
      for (Map.Entry<EntailmentJudgment, Double> other_element : other.judgmentDistribution.entrySet()) {

        EntailmentJudgment other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        EntailmentJudgment __this__judgmentDistribution_copy_key = other_element_key;

        Double __this__judgmentDistribution_copy_value = other_element_value;

        __this__judgmentDistribution.put(__this__judgmentDistribution_copy_key, __this__judgmentDistribution_copy_value);
      }
      this.judgmentDistribution = __this__judgmentDistribution;
    }
    if (other.isSetText()) {
      this.text = new Passage(other.text);
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public Entailment deepCopy() {
    return new Entailment(this);
  }

  @Override
  public void clear() {
    setEntailmentIdIsSet(false);
    this.entailmentId = 0;
    this.hypothesis = null;
    this.judgmentDistribution = null;
    this.text = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The entailment id
   */
  public long getEntailmentId() {
    return this.entailmentId;
  }

  /**
   * The entailment id
   */
  public Entailment setEntailmentId(long entailmentId) {
    this.entailmentId = entailmentId;
    setEntailmentIdIsSet(true);
    return this;
  }

  public void unsetEntailmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTAILMENTID_ISSET_ID);
  }

  /** Returns true if field entailmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntailmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTAILMENTID_ISSET_ID);
  }

  public void setEntailmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTAILMENTID_ISSET_ID, value);
  }

  /**
   * The hypothesis
   */
  public Passage getHypothesis() {
    return this.hypothesis;
  }

  /**
   * The hypothesis
   */
  public Entailment setHypothesis(Passage hypothesis) {
    this.hypothesis = hypothesis;
    return this;
  }

  public void unsetHypothesis() {
    this.hypothesis = null;
  }

  /** Returns true if field hypothesis is set (has been assigned a value) and false otherwise */
  public boolean isSetHypothesis() {
    return this.hypothesis != null;
  }

  public void setHypothesisIsSet(boolean value) {
    if (!value) {
      this.hypothesis = null;
    }
  }

  public int getJudgmentDistributionSize() {
    return (this.judgmentDistribution == null) ? 0 : this.judgmentDistribution.size();
  }

  public void putToJudgmentDistribution(EntailmentJudgment key, double val) {
    if (this.judgmentDistribution == null) {
      this.judgmentDistribution = new HashMap<EntailmentJudgment,Double>();
    }
    this.judgmentDistribution.put(key, val);
  }

  /**
   * The judgment distribution
   */
  public Map<EntailmentJudgment,Double> getJudgmentDistribution() {
    return this.judgmentDistribution;
  }

  /**
   * The judgment distribution
   */
  public Entailment setJudgmentDistribution(Map<EntailmentJudgment,Double> judgmentDistribution) {
    this.judgmentDistribution = judgmentDistribution;
    return this;
  }

  public void unsetJudgmentDistribution() {
    this.judgmentDistribution = null;
  }

  /** Returns true if field judgmentDistribution is set (has been assigned a value) and false otherwise */
  public boolean isSetJudgmentDistribution() {
    return this.judgmentDistribution != null;
  }

  public void setJudgmentDistributionIsSet(boolean value) {
    if (!value) {
      this.judgmentDistribution = null;
    }
  }

  /**
   * The text
   */
  public Passage getText() {
    return this.text;
  }

  /**
   * The text
   */
  public Entailment setText(Passage text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Entailment setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Entailment setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public Entailment setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTAILMENT_ID:
      if (value == null) {
        unsetEntailmentId();
      } else {
        setEntailmentId((Long)value);
      }
      break;

    case HYPOTHESIS:
      if (value == null) {
        unsetHypothesis();
      } else {
        setHypothesis((Passage)value);
      }
      break;

    case JUDGMENT_DISTRIBUTION:
      if (value == null) {
        unsetJudgmentDistribution();
      } else {
        setJudgmentDistribution((Map<EntailmentJudgment,Double>)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((Passage)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTAILMENT_ID:
      return Long.valueOf(getEntailmentId());

    case HYPOTHESIS:
      return getHypothesis();

    case JUDGMENT_DISTRIBUTION:
      return getJudgmentDistribution();

    case TEXT:
      return getText();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTAILMENT_ID:
      return isSetEntailmentId();
    case HYPOTHESIS:
      return isSetHypothesis();
    case JUDGMENT_DISTRIBUTION:
      return isSetJudgmentDistribution();
    case TEXT:
      return isSetText();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Entailment)
      return this.equals((Entailment)that);
    return false;
  }

  public boolean equals(Entailment that) {
    if (that == null)
      return false;

    boolean this_present_entailmentId = true;
    boolean that_present_entailmentId = true;
    if (this_present_entailmentId || that_present_entailmentId) {
      if (!(this_present_entailmentId && that_present_entailmentId))
        return false;
      if (this.entailmentId != that.entailmentId)
        return false;
    }

    boolean this_present_hypothesis = true && this.isSetHypothesis();
    boolean that_present_hypothesis = true && that.isSetHypothesis();
    if (this_present_hypothesis || that_present_hypothesis) {
      if (!(this_present_hypothesis && that_present_hypothesis))
        return false;
      if (!this.hypothesis.equals(that.hypothesis))
        return false;
    }

    boolean this_present_judgmentDistribution = true && this.isSetJudgmentDistribution();
    boolean that_present_judgmentDistribution = true && that.isSetJudgmentDistribution();
    if (this_present_judgmentDistribution || that_present_judgmentDistribution) {
      if (!(this_present_judgmentDistribution && that_present_judgmentDistribution))
        return false;
      if (!this.judgmentDistribution.equals(that.judgmentDistribution))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Entailment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Entailment typedOther = (Entailment)other;

    lastComparison = Boolean.valueOf(isSetEntailmentId()).compareTo(typedOther.isSetEntailmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntailmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entailmentId, typedOther.entailmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHypothesis()).compareTo(typedOther.isSetHypothesis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHypothesis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesis, typedOther.hypothesis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJudgmentDistribution()).compareTo(typedOther.isSetJudgmentDistribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudgmentDistribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judgmentDistribution, typedOther.judgmentDistribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Entailment(");
    boolean first = true;

    sb.append("entailmentId:");
    sb.append(this.entailmentId);
    first = false;
    if (isSetHypothesis()) {
      if (!first) sb.append(", ");
      sb.append("hypothesis:");
      if (this.hypothesis == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesis);
      }
      first = false;
    }
    if (isSetJudgmentDistribution()) {
      if (!first) sb.append(", ");
      sb.append("judgmentDistribution:");
      if (this.judgmentDistribution == null) {
        sb.append("null");
      } else {
        sb.append(this.judgmentDistribution);
      }
      first = false;
    }
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'entailmentId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (hypothesis != null) {
      hypothesis.validate();
    }
    if (text != null) {
      text.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntailmentStandardSchemeFactory implements SchemeFactory {
    public EntailmentStandardScheme getScheme() {
      return new EntailmentStandardScheme();
    }
  }

  private static class EntailmentStandardScheme extends StandardScheme<Entailment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Entailment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTAILMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entailmentId = iprot.readI64();
              struct.setEntailmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HYPOTHESIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hypothesis = new Passage();
              struct.hypothesis.read(iprot);
              struct.setHypothesisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JUDGMENT_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map102 = iprot.readMapBegin();
                struct.judgmentDistribution = new HashMap<EntailmentJudgment,Double>(2*_map102.size);
                for (int _i103 = 0; _i103 < _map102.size; ++_i103)
                {
                  EntailmentJudgment _key104; // required
                  double _val105; // required
                  _key104 = EntailmentJudgment.findByValue(iprot.readI32());
                  _val105 = iprot.readDouble();
                  struct.judgmentDistribution.put(_key104, _val105);
                }
                iprot.readMapEnd();
              }
              struct.setJudgmentDistributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.text = new Passage();
              struct.text.read(iprot);
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEntailmentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'entailmentId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Entailment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ENTAILMENT_ID_FIELD_DESC);
      oprot.writeI64(struct.entailmentId);
      oprot.writeFieldEnd();
      if (struct.hypothesis != null) {
        if (struct.isSetHypothesis()) {
          oprot.writeFieldBegin(HYPOTHESIS_FIELD_DESC);
          struct.hypothesis.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.judgmentDistribution != null) {
        if (struct.isSetJudgmentDistribution()) {
          oprot.writeFieldBegin(JUDGMENT_DISTRIBUTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.judgmentDistribution.size()));
            for (Map.Entry<EntailmentJudgment, Double> _iter106 : struct.judgmentDistribution.entrySet())
            {
              oprot.writeI32(_iter106.getKey().getValue());
              oprot.writeDouble(_iter106.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          struct.text.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntailmentTupleSchemeFactory implements SchemeFactory {
    public EntailmentTupleScheme getScheme() {
      return new EntailmentTupleScheme();
    }
  }

  private static class EntailmentTupleScheme extends TupleScheme<Entailment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Entailment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.entailmentId);
      BitSet optionals = new BitSet();
      if (struct.isSetHypothesis()) {
        optionals.set(0);
      }
      if (struct.isSetJudgmentDistribution()) {
        optionals.set(1);
      }
      if (struct.isSetText()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetValue()) {
        optionals.set(4);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHypothesis()) {
        struct.hypothesis.write(oprot);
      }
      if (struct.isSetJudgmentDistribution()) {
        {
          oprot.writeI32(struct.judgmentDistribution.size());
          for (Map.Entry<EntailmentJudgment, Double> _iter107 : struct.judgmentDistribution.entrySet())
          {
            oprot.writeI32(_iter107.getKey().getValue());
            oprot.writeDouble(_iter107.getValue());
          }
        }
      }
      if (struct.isSetText()) {
        struct.text.write(oprot);
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Entailment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.entailmentId = iprot.readI64();
      struct.setEntailmentIdIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.hypothesis = new Passage();
        struct.hypothesis.read(iprot);
        struct.setHypothesisIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map108 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.judgmentDistribution = new HashMap<EntailmentJudgment,Double>(2*_map108.size);
          for (int _i109 = 0; _i109 < _map108.size; ++_i109)
          {
            EntailmentJudgment _key110; // required
            double _val111; // required
            _key110 = EntailmentJudgment.findByValue(iprot.readI32());
            _val111 = iprot.readDouble();
            struct.judgmentDistribution.put(_key110, _val111);
          }
        }
        struct.setJudgmentDistributionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.text = new Passage();
        struct.text.read(iprot);
        struct.setTextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}