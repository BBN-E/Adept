/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LanguageIdentification implements org.apache.thrift.TBase<LanguageIdentification, LanguageIdentification._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LanguageIdentification");

  private static final org.apache.thrift.protocol.TField LANGUAGE_PROBABILITY_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("languageProbabilityDistribution", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LanguageIdentificationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LanguageIdentificationTupleSchemeFactory());
  }

  /**
   * The language probability distribution
   */
  public Map<String,Double> languageProbabilityDistribution; // required
  /**
   * The id
   */
  public ID id; // required
  /**
   * The value
   */
  public String value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The language probability distribution
     */
    LANGUAGE_PROBABILITY_DISTRIBUTION((short)1, "languageProbabilityDistribution"),
    /**
     * The id
     */
    ID((short)2, "id"),
    /**
     * The value
     */
    VALUE((short)3, "value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LANGUAGE_PROBABILITY_DISTRIBUTION
          return LANGUAGE_PROBABILITY_DISTRIBUTION;
        case 2: // ID
          return ID;
        case 3: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LANGUAGE_PROBABILITY_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("languageProbabilityDistribution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LanguageIdentification.class, metaDataMap);
  }

  public LanguageIdentification() {
  }

  public LanguageIdentification(
    Map<String,Double> languageProbabilityDistribution,
    ID id,
    String value)
  {
    this();
    this.languageProbabilityDistribution = languageProbabilityDistribution;
    this.id = id;
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LanguageIdentification(LanguageIdentification other) {
    if (other.isSetLanguageProbabilityDistribution()) {
      Map<String,Double> __this__languageProbabilityDistribution = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.languageProbabilityDistribution.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__languageProbabilityDistribution_copy_key = other_element_key;

        Double __this__languageProbabilityDistribution_copy_value = other_element_value;

        __this__languageProbabilityDistribution.put(__this__languageProbabilityDistribution_copy_key, __this__languageProbabilityDistribution_copy_value);
      }
      this.languageProbabilityDistribution = __this__languageProbabilityDistribution;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
  }

  public LanguageIdentification deepCopy() {
    return new LanguageIdentification(this);
  }

  @Override
  public void clear() {
    this.languageProbabilityDistribution = null;
    this.id = null;
    this.value = null;
  }

  public int getLanguageProbabilityDistributionSize() {
    return (this.languageProbabilityDistribution == null) ? 0 : this.languageProbabilityDistribution.size();
  }

  public void putToLanguageProbabilityDistribution(String key, double val) {
    if (this.languageProbabilityDistribution == null) {
      this.languageProbabilityDistribution = new HashMap<String,Double>();
    }
    this.languageProbabilityDistribution.put(key, val);
  }

  /**
   * The language probability distribution
   */
  public Map<String,Double> getLanguageProbabilityDistribution() {
    return this.languageProbabilityDistribution;
  }

  /**
   * The language probability distribution
   */
  public LanguageIdentification setLanguageProbabilityDistribution(Map<String,Double> languageProbabilityDistribution) {
    this.languageProbabilityDistribution = languageProbabilityDistribution;
    return this;
  }

  public void unsetLanguageProbabilityDistribution() {
    this.languageProbabilityDistribution = null;
  }

  /** Returns true if field languageProbabilityDistribution is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguageProbabilityDistribution() {
    return this.languageProbabilityDistribution != null;
  }

  public void setLanguageProbabilityDistributionIsSet(boolean value) {
    if (!value) {
      this.languageProbabilityDistribution = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public LanguageIdentification setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public LanguageIdentification setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LANGUAGE_PROBABILITY_DISTRIBUTION:
      if (value == null) {
        unsetLanguageProbabilityDistribution();
      } else {
        setLanguageProbabilityDistribution((Map<String,Double>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LANGUAGE_PROBABILITY_DISTRIBUTION:
      return getLanguageProbabilityDistribution();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LANGUAGE_PROBABILITY_DISTRIBUTION:
      return isSetLanguageProbabilityDistribution();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LanguageIdentification)
      return this.equals((LanguageIdentification)that);
    return false;
  }

  public boolean equals(LanguageIdentification that) {
    if (that == null)
      return false;

    boolean this_present_languageProbabilityDistribution = true && this.isSetLanguageProbabilityDistribution();
    boolean that_present_languageProbabilityDistribution = true && that.isSetLanguageProbabilityDistribution();
    if (this_present_languageProbabilityDistribution || that_present_languageProbabilityDistribution) {
      if (!(this_present_languageProbabilityDistribution && that_present_languageProbabilityDistribution))
        return false;
      if (!this.languageProbabilityDistribution.equals(that.languageProbabilityDistribution))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LanguageIdentification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LanguageIdentification typedOther = (LanguageIdentification)other;

    lastComparison = Boolean.valueOf(isSetLanguageProbabilityDistribution()).compareTo(typedOther.isSetLanguageProbabilityDistribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguageProbabilityDistribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languageProbabilityDistribution, typedOther.languageProbabilityDistribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LanguageIdentification(");
    boolean first = true;

    sb.append("languageProbabilityDistribution:");
    if (this.languageProbabilityDistribution == null) {
      sb.append("null");
    } else {
      sb.append(this.languageProbabilityDistribution);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LanguageIdentificationStandardSchemeFactory implements SchemeFactory {
    public LanguageIdentificationStandardScheme getScheme() {
      return new LanguageIdentificationStandardScheme();
    }
  }

  private static class LanguageIdentificationStandardScheme extends StandardScheme<LanguageIdentification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LanguageIdentification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LANGUAGE_PROBABILITY_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.languageProbabilityDistribution = new HashMap<String,Double>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  double _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readDouble();
                  struct.languageProbabilityDistribution.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setLanguageProbabilityDistributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LanguageIdentification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.languageProbabilityDistribution != null) {
        oprot.writeFieldBegin(LANGUAGE_PROBABILITY_DISTRIBUTION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.languageProbabilityDistribution.size()));
          for (Map.Entry<String, Double> _iter4 : struct.languageProbabilityDistribution.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeDouble(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LanguageIdentificationTupleSchemeFactory implements SchemeFactory {
    public LanguageIdentificationTupleScheme getScheme() {
      return new LanguageIdentificationTupleScheme();
    }
  }

  private static class LanguageIdentificationTupleScheme extends TupleScheme<LanguageIdentification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LanguageIdentification struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLanguageProbabilityDistribution()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLanguageProbabilityDistribution()) {
        {
          oprot.writeI32(struct.languageProbabilityDistribution.size());
          for (Map.Entry<String, Double> _iter5 : struct.languageProbabilityDistribution.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeDouble(_iter5.getValue());
          }
        }
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LanguageIdentification struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.languageProbabilityDistribution = new HashMap<String,Double>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8; // required
            double _val9; // required
            _key8 = iprot.readString();
            _val9 = iprot.readDouble();
            struct.languageProbabilityDistribution.put(_key8, _val9);
          }
        }
        struct.setLanguageProbabilityDistributionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
    }
  }

}