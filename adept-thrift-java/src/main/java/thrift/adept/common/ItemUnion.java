/*
* ------
* Adept
* -----
* Copyright (C) 2014 Raytheon BBN Technologies Corp.
* -----
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* -------
*/

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ItemUnion extends org.apache.thrift.TUnion<ItemUnion, ItemUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ItemUnion");
  private static final org.apache.thrift.protocol.TField DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("document", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HLT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("hltContent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ANOMALOUS_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("anomalousText", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ARGUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("argument", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("chunk", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField COMMITTED_BELIEF_FIELD_DESC = new org.apache.thrift.protocol.TField("committedBelief", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DISCOURSE_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("discourseUnit", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ENTITY_MENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMention", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("opinion", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PART_OF_SPEECH_FIELD_DESC = new org.apache.thrift.protocol.TField("partOfSpeech", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField PASSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("passage", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField PROSODIC_PHRASE_FIELD_DESC = new org.apache.thrift.protocol.TField("prosodicPhrase", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField SARCASM_FIELD_DESC = new org.apache.thrift.protocol.TField("sarcasm", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentence", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField STORY_FIELD_DESC = new org.apache.thrift.protocol.TField("story", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField SYNTACTIC_CHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("syntacticChunk", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField UTTERANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("utterance", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField COREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("coreference", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField DEPENDENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("dependency", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField HLT_CONTENT_CONTAINER_FIELD_DESC = new org.apache.thrift.protocol.TField("hltContentContainer", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField INTER_PAUSAL_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("interPausalUnit", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField JOINT_RELATION_COREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("jointRelationCoreference", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField PARAPHRASE_FIELD_DESC = new org.apache.thrift.protocol.TField("paraphrase", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("relation", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField SENTENCE_SIMILARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sentenceSimilarity", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)27);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOCUMENT((short)1, "document"),
    HLT_CONTENT((short)2, "hltContent"),
    ANOMALOUS_TEXT((short)3, "anomalousText"),
    ARGUMENT((short)4, "argument"),
    CHUNK((short)5, "chunk"),
    COMMITTED_BELIEF((short)6, "committedBelief"),
    DISCOURSE_UNIT((short)7, "discourseUnit"),
    ENTITY_MENTION((short)8, "entityMention"),
    OPINION((short)9, "opinion"),
    PART_OF_SPEECH((short)10, "partOfSpeech"),
    PASSAGE((short)11, "passage"),
    PROSODIC_PHRASE((short)12, "prosodicPhrase"),
    SARCASM((short)13, "sarcasm"),
    SENTENCE((short)14, "sentence"),
    STORY((short)15, "story"),
    SYNTACTIC_CHUNK((short)16, "syntacticChunk"),
    UTTERANCE((short)17, "utterance"),
    COREFERENCE((short)18, "coreference"),
    DEPENDENCY((short)19, "dependency"),
    ENTITY((short)20, "entity"),
    HLT_CONTENT_CONTAINER((short)21, "hltContentContainer"),
    INTER_PAUSAL_UNIT((short)22, "interPausalUnit"),
    JOINT_RELATION_COREFERENCE((short)23, "jointRelationCoreference"),
    PARAPHRASE((short)24, "paraphrase"),
    RELATION((short)25, "relation"),
    SENTENCE_SIMILARITY((short)26, "sentenceSimilarity"),
    TOKEN((short)27, "token");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOCUMENT
          return DOCUMENT;
        case 2: // HLT_CONTENT
          return HLT_CONTENT;
        case 3: // ANOMALOUS_TEXT
          return ANOMALOUS_TEXT;
        case 4: // ARGUMENT
          return ARGUMENT;
        case 5: // CHUNK
          return CHUNK;
        case 6: // COMMITTED_BELIEF
          return COMMITTED_BELIEF;
        case 7: // DISCOURSE_UNIT
          return DISCOURSE_UNIT;
        case 8: // ENTITY_MENTION
          return ENTITY_MENTION;
        case 9: // OPINION
          return OPINION;
        case 10: // PART_OF_SPEECH
          return PART_OF_SPEECH;
        case 11: // PASSAGE
          return PASSAGE;
        case 12: // PROSODIC_PHRASE
          return PROSODIC_PHRASE;
        case 13: // SARCASM
          return SARCASM;
        case 14: // SENTENCE
          return SENTENCE;
        case 15: // STORY
          return STORY;
        case 16: // SYNTACTIC_CHUNK
          return SYNTACTIC_CHUNK;
        case 17: // UTTERANCE
          return UTTERANCE;
        case 18: // COREFERENCE
          return COREFERENCE;
        case 19: // DEPENDENCY
          return DEPENDENCY;
        case 20: // ENTITY
          return ENTITY;
        case 21: // HLT_CONTENT_CONTAINER
          return HLT_CONTENT_CONTAINER;
        case 22: // INTER_PAUSAL_UNIT
          return INTER_PAUSAL_UNIT;
        case 23: // JOINT_RELATION_COREFERENCE
          return JOINT_RELATION_COREFERENCE;
        case 24: // PARAPHRASE
          return PARAPHRASE;
        case 25: // RELATION
          return RELATION;
        case 26: // SENTENCE_SIMILARITY
          return SENTENCE_SIMILARITY;
        case 27: // TOKEN
          return TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("document", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Document.class)));
    tmpMap.put(_Fields.HLT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("hltContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.HltContent.class)));
    tmpMap.put(_Fields.ANOMALOUS_TEXT, new org.apache.thrift.meta_data.FieldMetaData("anomalousText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.AnomalousText.class)));
    tmpMap.put(_Fields.ARGUMENT, new org.apache.thrift.meta_data.FieldMetaData("argument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Argument.class)));
    tmpMap.put(_Fields.CHUNK, new org.apache.thrift.meta_data.FieldMetaData("chunk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Chunk.class)));
    tmpMap.put(_Fields.COMMITTED_BELIEF, new org.apache.thrift.meta_data.FieldMetaData("committedBelief", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.CommittedBelief.class)));
    tmpMap.put(_Fields.DISCOURSE_UNIT, new org.apache.thrift.meta_data.FieldMetaData("discourseUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.DiscourseUnit.class)));
    tmpMap.put(_Fields.ENTITY_MENTION, new org.apache.thrift.meta_data.FieldMetaData("entityMention", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.EntityMention.class)));
    tmpMap.put(_Fields.OPINION, new org.apache.thrift.meta_data.FieldMetaData("opinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Opinion.class)));
    tmpMap.put(_Fields.PART_OF_SPEECH, new org.apache.thrift.meta_data.FieldMetaData("partOfSpeech", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.PartOfSpeech.class)));
    tmpMap.put(_Fields.PASSAGE, new org.apache.thrift.meta_data.FieldMetaData("passage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Passage.class)));
    tmpMap.put(_Fields.PROSODIC_PHRASE, new org.apache.thrift.meta_data.FieldMetaData("prosodicPhrase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.ProsodicPhrase.class)));
    tmpMap.put(_Fields.SARCASM, new org.apache.thrift.meta_data.FieldMetaData("sarcasm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Sarcasm.class)));
    tmpMap.put(_Fields.SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("sentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Sentence.class)));
    tmpMap.put(_Fields.STORY, new org.apache.thrift.meta_data.FieldMetaData("story", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Story.class)));
    tmpMap.put(_Fields.SYNTACTIC_CHUNK, new org.apache.thrift.meta_data.FieldMetaData("syntacticChunk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.SyntacticChunk.class)));
    tmpMap.put(_Fields.UTTERANCE, new org.apache.thrift.meta_data.FieldMetaData("utterance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Utterance.class)));
    tmpMap.put(_Fields.COREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("coreference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Coreference.class)));
    tmpMap.put(_Fields.DEPENDENCY, new org.apache.thrift.meta_data.FieldMetaData("dependency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Dependency.class)));
    tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Entity.class)));
    tmpMap.put(_Fields.HLT_CONTENT_CONTAINER, new org.apache.thrift.meta_data.FieldMetaData("hltContentContainer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.HltContentContainer.class)));
    tmpMap.put(_Fields.INTER_PAUSAL_UNIT, new org.apache.thrift.meta_data.FieldMetaData("interPausalUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.InterPausalUnit.class)));
    tmpMap.put(_Fields.JOINT_RELATION_COREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("jointRelationCoreference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.JointRelationCoreference.class)));
    tmpMap.put(_Fields.PARAPHRASE, new org.apache.thrift.meta_data.FieldMetaData("paraphrase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Paraphrase.class)));
    tmpMap.put(_Fields.RELATION, new org.apache.thrift.meta_data.FieldMetaData("relation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Relation.class)));
    tmpMap.put(_Fields.SENTENCE_SIMILARITY, new org.apache.thrift.meta_data.FieldMetaData("sentenceSimilarity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.SentenceSimilarity.class)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Token.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ItemUnion.class, metaDataMap);
  }

  public ItemUnion() {
    super();
  }

  public ItemUnion(_Fields setField, Object value) {
    super(setField, value);
  }

  public ItemUnion(ItemUnion other) {
    super(other);
  }
  public ItemUnion deepCopy() {
    return new ItemUnion(this);
  }

  public static ItemUnion document(thrift.adept.common.Document value) {
    ItemUnion x = new ItemUnion();
    x.setDocument(value);
    return x;
  }

  public static ItemUnion hltContent(thrift.adept.common.HltContent value) {
    ItemUnion x = new ItemUnion();
    x.setHltContent(value);
    return x;
  }

  public static ItemUnion anomalousText(thrift.adept.common.AnomalousText value) {
    ItemUnion x = new ItemUnion();
    x.setAnomalousText(value);
    return x;
  }

  public static ItemUnion argument(thrift.adept.common.Argument value) {
    ItemUnion x = new ItemUnion();
    x.setArgument(value);
    return x;
  }

  public static ItemUnion chunk(thrift.adept.common.Chunk value) {
    ItemUnion x = new ItemUnion();
    x.setChunk(value);
    return x;
  }

  public static ItemUnion committedBelief(thrift.adept.common.CommittedBelief value) {
    ItemUnion x = new ItemUnion();
    x.setCommittedBelief(value);
    return x;
  }

  public static ItemUnion discourseUnit(thrift.adept.common.DiscourseUnit value) {
    ItemUnion x = new ItemUnion();
    x.setDiscourseUnit(value);
    return x;
  }

  public static ItemUnion entityMention(thrift.adept.common.EntityMention value) {
    ItemUnion x = new ItemUnion();
    x.setEntityMention(value);
    return x;
  }

  public static ItemUnion opinion(thrift.adept.common.Opinion value) {
    ItemUnion x = new ItemUnion();
    x.setOpinion(value);
    return x;
  }

  public static ItemUnion partOfSpeech(thrift.adept.common.PartOfSpeech value) {
    ItemUnion x = new ItemUnion();
    x.setPartOfSpeech(value);
    return x;
  }

  public static ItemUnion passage(thrift.adept.common.Passage value) {
    ItemUnion x = new ItemUnion();
    x.setPassage(value);
    return x;
  }

  public static ItemUnion prosodicPhrase(thrift.adept.common.ProsodicPhrase value) {
    ItemUnion x = new ItemUnion();
    x.setProsodicPhrase(value);
    return x;
  }

  public static ItemUnion sarcasm(thrift.adept.common.Sarcasm value) {
    ItemUnion x = new ItemUnion();
    x.setSarcasm(value);
    return x;
  }

  public static ItemUnion sentence(thrift.adept.common.Sentence value) {
    ItemUnion x = new ItemUnion();
    x.setSentence(value);
    return x;
  }

  public static ItemUnion story(thrift.adept.common.Story value) {
    ItemUnion x = new ItemUnion();
    x.setStory(value);
    return x;
  }

  public static ItemUnion syntacticChunk(thrift.adept.common.SyntacticChunk value) {
    ItemUnion x = new ItemUnion();
    x.setSyntacticChunk(value);
    return x;
  }

  public static ItemUnion utterance(thrift.adept.common.Utterance value) {
    ItemUnion x = new ItemUnion();
    x.setUtterance(value);
    return x;
  }

  public static ItemUnion coreference(thrift.adept.common.Coreference value) {
    ItemUnion x = new ItemUnion();
    x.setCoreference(value);
    return x;
  }

  public static ItemUnion dependency(thrift.adept.common.Dependency value) {
    ItemUnion x = new ItemUnion();
    x.setDependency(value);
    return x;
  }

  public static ItemUnion entity(thrift.adept.common.Entity value) {
    ItemUnion x = new ItemUnion();
    x.setEntity(value);
    return x;
  }

  public static ItemUnion hltContentContainer(thrift.adept.common.HltContentContainer value) {
    ItemUnion x = new ItemUnion();
    x.setHltContentContainer(value);
    return x;
  }

  public static ItemUnion interPausalUnit(thrift.adept.common.InterPausalUnit value) {
    ItemUnion x = new ItemUnion();
    x.setInterPausalUnit(value);
    return x;
  }

  public static ItemUnion jointRelationCoreference(thrift.adept.common.JointRelationCoreference value) {
    ItemUnion x = new ItemUnion();
    x.setJointRelationCoreference(value);
    return x;
  }

  public static ItemUnion paraphrase(thrift.adept.common.Paraphrase value) {
    ItemUnion x = new ItemUnion();
    x.setParaphrase(value);
    return x;
  }

  public static ItemUnion relation(thrift.adept.common.Relation value) {
    ItemUnion x = new ItemUnion();
    x.setRelation(value);
    return x;
  }

  public static ItemUnion sentenceSimilarity(thrift.adept.common.SentenceSimilarity value) {
    ItemUnion x = new ItemUnion();
    x.setSentenceSimilarity(value);
    return x;
  }

  public static ItemUnion token(thrift.adept.common.Token value) {
    ItemUnion x = new ItemUnion();
    x.setToken(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case DOCUMENT:
        if (value instanceof thrift.adept.common.Document) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Document for field 'document', but got " + value.getClass().getSimpleName());
      case HLT_CONTENT:
        if (value instanceof thrift.adept.common.HltContent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.HltContent for field 'hltContent', but got " + value.getClass().getSimpleName());
      case ANOMALOUS_TEXT:
        if (value instanceof thrift.adept.common.AnomalousText) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.AnomalousText for field 'anomalousText', but got " + value.getClass().getSimpleName());
      case ARGUMENT:
        if (value instanceof thrift.adept.common.Argument) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Argument for field 'argument', but got " + value.getClass().getSimpleName());
      case CHUNK:
        if (value instanceof thrift.adept.common.Chunk) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Chunk for field 'chunk', but got " + value.getClass().getSimpleName());
      case COMMITTED_BELIEF:
        if (value instanceof thrift.adept.common.CommittedBelief) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.CommittedBelief for field 'committedBelief', but got " + value.getClass().getSimpleName());
      case DISCOURSE_UNIT:
        if (value instanceof thrift.adept.common.DiscourseUnit) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.DiscourseUnit for field 'discourseUnit', but got " + value.getClass().getSimpleName());
      case ENTITY_MENTION:
        if (value instanceof thrift.adept.common.EntityMention) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.EntityMention for field 'entityMention', but got " + value.getClass().getSimpleName());
      case OPINION:
        if (value instanceof thrift.adept.common.Opinion) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Opinion for field 'opinion', but got " + value.getClass().getSimpleName());
      case PART_OF_SPEECH:
        if (value instanceof thrift.adept.common.PartOfSpeech) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.PartOfSpeech for field 'partOfSpeech', but got " + value.getClass().getSimpleName());
      case PASSAGE:
        if (value instanceof thrift.adept.common.Passage) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Passage for field 'passage', but got " + value.getClass().getSimpleName());
      case PROSODIC_PHRASE:
        if (value instanceof thrift.adept.common.ProsodicPhrase) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.ProsodicPhrase for field 'prosodicPhrase', but got " + value.getClass().getSimpleName());
      case SARCASM:
        if (value instanceof thrift.adept.common.Sarcasm) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Sarcasm for field 'sarcasm', but got " + value.getClass().getSimpleName());
      case SENTENCE:
        if (value instanceof thrift.adept.common.Sentence) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Sentence for field 'sentence', but got " + value.getClass().getSimpleName());
      case STORY:
        if (value instanceof thrift.adept.common.Story) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Story for field 'story', but got " + value.getClass().getSimpleName());
      case SYNTACTIC_CHUNK:
        if (value instanceof thrift.adept.common.SyntacticChunk) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.SyntacticChunk for field 'syntacticChunk', but got " + value.getClass().getSimpleName());
      case UTTERANCE:
        if (value instanceof thrift.adept.common.Utterance) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Utterance for field 'utterance', but got " + value.getClass().getSimpleName());
      case COREFERENCE:
        if (value instanceof thrift.adept.common.Coreference) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Coreference for field 'coreference', but got " + value.getClass().getSimpleName());
      case DEPENDENCY:
        if (value instanceof thrift.adept.common.Dependency) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Dependency for field 'dependency', but got " + value.getClass().getSimpleName());
      case ENTITY:
        if (value instanceof thrift.adept.common.Entity) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Entity for field 'entity', but got " + value.getClass().getSimpleName());
      case HLT_CONTENT_CONTAINER:
        if (value instanceof thrift.adept.common.HltContentContainer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.HltContentContainer for field 'hltContentContainer', but got " + value.getClass().getSimpleName());
      case INTER_PAUSAL_UNIT:
        if (value instanceof thrift.adept.common.InterPausalUnit) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.InterPausalUnit for field 'interPausalUnit', but got " + value.getClass().getSimpleName());
      case JOINT_RELATION_COREFERENCE:
        if (value instanceof thrift.adept.common.JointRelationCoreference) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.JointRelationCoreference for field 'jointRelationCoreference', but got " + value.getClass().getSimpleName());
      case PARAPHRASE:
        if (value instanceof thrift.adept.common.Paraphrase) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Paraphrase for field 'paraphrase', but got " + value.getClass().getSimpleName());
      case RELATION:
        if (value instanceof thrift.adept.common.Relation) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Relation for field 'relation', but got " + value.getClass().getSimpleName());
      case SENTENCE_SIMILARITY:
        if (value instanceof thrift.adept.common.SentenceSimilarity) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.SentenceSimilarity for field 'sentenceSimilarity', but got " + value.getClass().getSimpleName());
      case TOKEN:
        if (value instanceof thrift.adept.common.Token) {
          break;
        }
        throw new ClassCastException("Was expecting value of type thrift.adept.common.Token for field 'token', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case DOCUMENT:
          if (field.type == DOCUMENT_FIELD_DESC.type) {
            thrift.adept.common.Document document;
            document = new thrift.adept.common.Document();
            document.read(iprot);
            return document;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HLT_CONTENT:
          if (field.type == HLT_CONTENT_FIELD_DESC.type) {
            thrift.adept.common.HltContent hltContent;
            hltContent = new thrift.adept.common.HltContent();
            hltContent.read(iprot);
            return hltContent;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ANOMALOUS_TEXT:
          if (field.type == ANOMALOUS_TEXT_FIELD_DESC.type) {
            thrift.adept.common.AnomalousText anomalousText;
            anomalousText = new thrift.adept.common.AnomalousText();
            anomalousText.read(iprot);
            return anomalousText;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARGUMENT:
          if (field.type == ARGUMENT_FIELD_DESC.type) {
            thrift.adept.common.Argument argument;
            argument = new thrift.adept.common.Argument();
            argument.read(iprot);
            return argument;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CHUNK:
          if (field.type == CHUNK_FIELD_DESC.type) {
            thrift.adept.common.Chunk chunk;
            chunk = new thrift.adept.common.Chunk();
            chunk.read(iprot);
            return chunk;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case COMMITTED_BELIEF:
          if (field.type == COMMITTED_BELIEF_FIELD_DESC.type) {
            thrift.adept.common.CommittedBelief committedBelief;
            committedBelief = new thrift.adept.common.CommittedBelief();
            committedBelief.read(iprot);
            return committedBelief;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DISCOURSE_UNIT:
          if (field.type == DISCOURSE_UNIT_FIELD_DESC.type) {
            thrift.adept.common.DiscourseUnit discourseUnit;
            discourseUnit = new thrift.adept.common.DiscourseUnit();
            discourseUnit.read(iprot);
            return discourseUnit;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ENTITY_MENTION:
          if (field.type == ENTITY_MENTION_FIELD_DESC.type) {
            thrift.adept.common.EntityMention entityMention;
            entityMention = new thrift.adept.common.EntityMention();
            entityMention.read(iprot);
            return entityMention;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OPINION:
          if (field.type == OPINION_FIELD_DESC.type) {
            thrift.adept.common.Opinion opinion;
            opinion = new thrift.adept.common.Opinion();
            opinion.read(iprot);
            return opinion;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PART_OF_SPEECH:
          if (field.type == PART_OF_SPEECH_FIELD_DESC.type) {
            thrift.adept.common.PartOfSpeech partOfSpeech;
            partOfSpeech = new thrift.adept.common.PartOfSpeech();
            partOfSpeech.read(iprot);
            return partOfSpeech;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PASSAGE:
          if (field.type == PASSAGE_FIELD_DESC.type) {
            thrift.adept.common.Passage passage;
            passage = new thrift.adept.common.Passage();
            passage.read(iprot);
            return passage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PROSODIC_PHRASE:
          if (field.type == PROSODIC_PHRASE_FIELD_DESC.type) {
            thrift.adept.common.ProsodicPhrase prosodicPhrase;
            prosodicPhrase = new thrift.adept.common.ProsodicPhrase();
            prosodicPhrase.read(iprot);
            return prosodicPhrase;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SARCASM:
          if (field.type == SARCASM_FIELD_DESC.type) {
            thrift.adept.common.Sarcasm sarcasm;
            sarcasm = new thrift.adept.common.Sarcasm();
            sarcasm.read(iprot);
            return sarcasm;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SENTENCE:
          if (field.type == SENTENCE_FIELD_DESC.type) {
            thrift.adept.common.Sentence sentence;
            sentence = new thrift.adept.common.Sentence();
            sentence.read(iprot);
            return sentence;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STORY:
          if (field.type == STORY_FIELD_DESC.type) {
            thrift.adept.common.Story story;
            story = new thrift.adept.common.Story();
            story.read(iprot);
            return story;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SYNTACTIC_CHUNK:
          if (field.type == SYNTACTIC_CHUNK_FIELD_DESC.type) {
            thrift.adept.common.SyntacticChunk syntacticChunk;
            syntacticChunk = new thrift.adept.common.SyntacticChunk();
            syntacticChunk.read(iprot);
            return syntacticChunk;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UTTERANCE:
          if (field.type == UTTERANCE_FIELD_DESC.type) {
            thrift.adept.common.Utterance utterance;
            utterance = new thrift.adept.common.Utterance();
            utterance.read(iprot);
            return utterance;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case COREFERENCE:
          if (field.type == COREFERENCE_FIELD_DESC.type) {
            thrift.adept.common.Coreference coreference;
            coreference = new thrift.adept.common.Coreference();
            coreference.read(iprot);
            return coreference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEPENDENCY:
          if (field.type == DEPENDENCY_FIELD_DESC.type) {
            thrift.adept.common.Dependency dependency;
            dependency = new thrift.adept.common.Dependency();
            dependency.read(iprot);
            return dependency;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ENTITY:
          if (field.type == ENTITY_FIELD_DESC.type) {
            thrift.adept.common.Entity entity;
            entity = new thrift.adept.common.Entity();
            entity.read(iprot);
            return entity;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HLT_CONTENT_CONTAINER:
          if (field.type == HLT_CONTENT_CONTAINER_FIELD_DESC.type) {
            thrift.adept.common.HltContentContainer hltContentContainer;
            hltContentContainer = new thrift.adept.common.HltContentContainer();
            hltContentContainer.read(iprot);
            return hltContentContainer;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INTER_PAUSAL_UNIT:
          if (field.type == INTER_PAUSAL_UNIT_FIELD_DESC.type) {
            thrift.adept.common.InterPausalUnit interPausalUnit;
            interPausalUnit = new thrift.adept.common.InterPausalUnit();
            interPausalUnit.read(iprot);
            return interPausalUnit;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case JOINT_RELATION_COREFERENCE:
          if (field.type == JOINT_RELATION_COREFERENCE_FIELD_DESC.type) {
            thrift.adept.common.JointRelationCoreference jointRelationCoreference;
            jointRelationCoreference = new thrift.adept.common.JointRelationCoreference();
            jointRelationCoreference.read(iprot);
            return jointRelationCoreference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PARAPHRASE:
          if (field.type == PARAPHRASE_FIELD_DESC.type) {
            thrift.adept.common.Paraphrase paraphrase;
            paraphrase = new thrift.adept.common.Paraphrase();
            paraphrase.read(iprot);
            return paraphrase;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RELATION:
          if (field.type == RELATION_FIELD_DESC.type) {
            thrift.adept.common.Relation relation;
            relation = new thrift.adept.common.Relation();
            relation.read(iprot);
            return relation;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SENTENCE_SIMILARITY:
          if (field.type == SENTENCE_SIMILARITY_FIELD_DESC.type) {
            thrift.adept.common.SentenceSimilarity sentenceSimilarity;
            sentenceSimilarity = new thrift.adept.common.SentenceSimilarity();
            sentenceSimilarity.read(iprot);
            return sentenceSimilarity;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TOKEN:
          if (field.type == TOKEN_FIELD_DESC.type) {
            thrift.adept.common.Token token;
            token = new thrift.adept.common.Token();
            token.read(iprot);
            return token;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DOCUMENT:
        thrift.adept.common.Document document = (thrift.adept.common.Document)value_;
        document.write(oprot);
        return;
      case HLT_CONTENT:
        thrift.adept.common.HltContent hltContent = (thrift.adept.common.HltContent)value_;
        hltContent.write(oprot);
        return;
      case ANOMALOUS_TEXT:
        thrift.adept.common.AnomalousText anomalousText = (thrift.adept.common.AnomalousText)value_;
        anomalousText.write(oprot);
        return;
      case ARGUMENT:
        thrift.adept.common.Argument argument = (thrift.adept.common.Argument)value_;
        argument.write(oprot);
        return;
      case CHUNK:
        thrift.adept.common.Chunk chunk = (thrift.adept.common.Chunk)value_;
        chunk.write(oprot);
        return;
      case COMMITTED_BELIEF:
        thrift.adept.common.CommittedBelief committedBelief = (thrift.adept.common.CommittedBelief)value_;
        committedBelief.write(oprot);
        return;
      case DISCOURSE_UNIT:
        thrift.adept.common.DiscourseUnit discourseUnit = (thrift.adept.common.DiscourseUnit)value_;
        discourseUnit.write(oprot);
        return;
      case ENTITY_MENTION:
        thrift.adept.common.EntityMention entityMention = (thrift.adept.common.EntityMention)value_;
        entityMention.write(oprot);
        return;
      case OPINION:
        thrift.adept.common.Opinion opinion = (thrift.adept.common.Opinion)value_;
        opinion.write(oprot);
        return;
      case PART_OF_SPEECH:
        thrift.adept.common.PartOfSpeech partOfSpeech = (thrift.adept.common.PartOfSpeech)value_;
        partOfSpeech.write(oprot);
        return;
      case PASSAGE:
        thrift.adept.common.Passage passage = (thrift.adept.common.Passage)value_;
        passage.write(oprot);
        return;
      case PROSODIC_PHRASE:
        thrift.adept.common.ProsodicPhrase prosodicPhrase = (thrift.adept.common.ProsodicPhrase)value_;
        prosodicPhrase.write(oprot);
        return;
      case SARCASM:
        thrift.adept.common.Sarcasm sarcasm = (thrift.adept.common.Sarcasm)value_;
        sarcasm.write(oprot);
        return;
      case SENTENCE:
        thrift.adept.common.Sentence sentence = (thrift.adept.common.Sentence)value_;
        sentence.write(oprot);
        return;
      case STORY:
        thrift.adept.common.Story story = (thrift.adept.common.Story)value_;
        story.write(oprot);
        return;
      case SYNTACTIC_CHUNK:
        thrift.adept.common.SyntacticChunk syntacticChunk = (thrift.adept.common.SyntacticChunk)value_;
        syntacticChunk.write(oprot);
        return;
      case UTTERANCE:
        thrift.adept.common.Utterance utterance = (thrift.adept.common.Utterance)value_;
        utterance.write(oprot);
        return;
      case COREFERENCE:
        thrift.adept.common.Coreference coreference = (thrift.adept.common.Coreference)value_;
        coreference.write(oprot);
        return;
      case DEPENDENCY:
        thrift.adept.common.Dependency dependency = (thrift.adept.common.Dependency)value_;
        dependency.write(oprot);
        return;
      case ENTITY:
        thrift.adept.common.Entity entity = (thrift.adept.common.Entity)value_;
        entity.write(oprot);
        return;
      case HLT_CONTENT_CONTAINER:
        thrift.adept.common.HltContentContainer hltContentContainer = (thrift.adept.common.HltContentContainer)value_;
        hltContentContainer.write(oprot);
        return;
      case INTER_PAUSAL_UNIT:
        thrift.adept.common.InterPausalUnit interPausalUnit = (thrift.adept.common.InterPausalUnit)value_;
        interPausalUnit.write(oprot);
        return;
      case JOINT_RELATION_COREFERENCE:
        thrift.adept.common.JointRelationCoreference jointRelationCoreference = (thrift.adept.common.JointRelationCoreference)value_;
        jointRelationCoreference.write(oprot);
        return;
      case PARAPHRASE:
        thrift.adept.common.Paraphrase paraphrase = (thrift.adept.common.Paraphrase)value_;
        paraphrase.write(oprot);
        return;
      case RELATION:
        thrift.adept.common.Relation relation = (thrift.adept.common.Relation)value_;
        relation.write(oprot);
        return;
      case SENTENCE_SIMILARITY:
        thrift.adept.common.SentenceSimilarity sentenceSimilarity = (thrift.adept.common.SentenceSimilarity)value_;
        sentenceSimilarity.write(oprot);
        return;
      case TOKEN:
        thrift.adept.common.Token token = (thrift.adept.common.Token)value_;
        token.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case DOCUMENT:
          thrift.adept.common.Document document;
          document = new thrift.adept.common.Document();
          document.read(iprot);
          return document;
        case HLT_CONTENT:
          thrift.adept.common.HltContent hltContent;
          hltContent = new thrift.adept.common.HltContent();
          hltContent.read(iprot);
          return hltContent;
        case ANOMALOUS_TEXT:
          thrift.adept.common.AnomalousText anomalousText;
          anomalousText = new thrift.adept.common.AnomalousText();
          anomalousText.read(iprot);
          return anomalousText;
        case ARGUMENT:
          thrift.adept.common.Argument argument;
          argument = new thrift.adept.common.Argument();
          argument.read(iprot);
          return argument;
        case CHUNK:
          thrift.adept.common.Chunk chunk;
          chunk = new thrift.adept.common.Chunk();
          chunk.read(iprot);
          return chunk;
        case COMMITTED_BELIEF:
          thrift.adept.common.CommittedBelief committedBelief;
          committedBelief = new thrift.adept.common.CommittedBelief();
          committedBelief.read(iprot);
          return committedBelief;
        case DISCOURSE_UNIT:
          thrift.adept.common.DiscourseUnit discourseUnit;
          discourseUnit = new thrift.adept.common.DiscourseUnit();
          discourseUnit.read(iprot);
          return discourseUnit;
        case ENTITY_MENTION:
          thrift.adept.common.EntityMention entityMention;
          entityMention = new thrift.adept.common.EntityMention();
          entityMention.read(iprot);
          return entityMention;
        case OPINION:
          thrift.adept.common.Opinion opinion;
          opinion = new thrift.adept.common.Opinion();
          opinion.read(iprot);
          return opinion;
        case PART_OF_SPEECH:
          thrift.adept.common.PartOfSpeech partOfSpeech;
          partOfSpeech = new thrift.adept.common.PartOfSpeech();
          partOfSpeech.read(iprot);
          return partOfSpeech;
        case PASSAGE:
          thrift.adept.common.Passage passage;
          passage = new thrift.adept.common.Passage();
          passage.read(iprot);
          return passage;
        case PROSODIC_PHRASE:
          thrift.adept.common.ProsodicPhrase prosodicPhrase;
          prosodicPhrase = new thrift.adept.common.ProsodicPhrase();
          prosodicPhrase.read(iprot);
          return prosodicPhrase;
        case SARCASM:
          thrift.adept.common.Sarcasm sarcasm;
          sarcasm = new thrift.adept.common.Sarcasm();
          sarcasm.read(iprot);
          return sarcasm;
        case SENTENCE:
          thrift.adept.common.Sentence sentence;
          sentence = new thrift.adept.common.Sentence();
          sentence.read(iprot);
          return sentence;
        case STORY:
          thrift.adept.common.Story story;
          story = new thrift.adept.common.Story();
          story.read(iprot);
          return story;
        case SYNTACTIC_CHUNK:
          thrift.adept.common.SyntacticChunk syntacticChunk;
          syntacticChunk = new thrift.adept.common.SyntacticChunk();
          syntacticChunk.read(iprot);
          return syntacticChunk;
        case UTTERANCE:
          thrift.adept.common.Utterance utterance;
          utterance = new thrift.adept.common.Utterance();
          utterance.read(iprot);
          return utterance;
        case COREFERENCE:
          thrift.adept.common.Coreference coreference;
          coreference = new thrift.adept.common.Coreference();
          coreference.read(iprot);
          return coreference;
        case DEPENDENCY:
          thrift.adept.common.Dependency dependency;
          dependency = new thrift.adept.common.Dependency();
          dependency.read(iprot);
          return dependency;
        case ENTITY:
          thrift.adept.common.Entity entity;
          entity = new thrift.adept.common.Entity();
          entity.read(iprot);
          return entity;
        case HLT_CONTENT_CONTAINER:
          thrift.adept.common.HltContentContainer hltContentContainer;
          hltContentContainer = new thrift.adept.common.HltContentContainer();
          hltContentContainer.read(iprot);
          return hltContentContainer;
        case INTER_PAUSAL_UNIT:
          thrift.adept.common.InterPausalUnit interPausalUnit;
          interPausalUnit = new thrift.adept.common.InterPausalUnit();
          interPausalUnit.read(iprot);
          return interPausalUnit;
        case JOINT_RELATION_COREFERENCE:
          thrift.adept.common.JointRelationCoreference jointRelationCoreference;
          jointRelationCoreference = new thrift.adept.common.JointRelationCoreference();
          jointRelationCoreference.read(iprot);
          return jointRelationCoreference;
        case PARAPHRASE:
          thrift.adept.common.Paraphrase paraphrase;
          paraphrase = new thrift.adept.common.Paraphrase();
          paraphrase.read(iprot);
          return paraphrase;
        case RELATION:
          thrift.adept.common.Relation relation;
          relation = new thrift.adept.common.Relation();
          relation.read(iprot);
          return relation;
        case SENTENCE_SIMILARITY:
          thrift.adept.common.SentenceSimilarity sentenceSimilarity;
          sentenceSimilarity = new thrift.adept.common.SentenceSimilarity();
          sentenceSimilarity.read(iprot);
          return sentenceSimilarity;
        case TOKEN:
          thrift.adept.common.Token token;
          token = new thrift.adept.common.Token();
          token.read(iprot);
          return token;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DOCUMENT:
        thrift.adept.common.Document document = (thrift.adept.common.Document)value_;
        document.write(oprot);
        return;
      case HLT_CONTENT:
        thrift.adept.common.HltContent hltContent = (thrift.adept.common.HltContent)value_;
        hltContent.write(oprot);
        return;
      case ANOMALOUS_TEXT:
        thrift.adept.common.AnomalousText anomalousText = (thrift.adept.common.AnomalousText)value_;
        anomalousText.write(oprot);
        return;
      case ARGUMENT:
        thrift.adept.common.Argument argument = (thrift.adept.common.Argument)value_;
        argument.write(oprot);
        return;
      case CHUNK:
        thrift.adept.common.Chunk chunk = (thrift.adept.common.Chunk)value_;
        chunk.write(oprot);
        return;
      case COMMITTED_BELIEF:
        thrift.adept.common.CommittedBelief committedBelief = (thrift.adept.common.CommittedBelief)value_;
        committedBelief.write(oprot);
        return;
      case DISCOURSE_UNIT:
        thrift.adept.common.DiscourseUnit discourseUnit = (thrift.adept.common.DiscourseUnit)value_;
        discourseUnit.write(oprot);
        return;
      case ENTITY_MENTION:
        thrift.adept.common.EntityMention entityMention = (thrift.adept.common.EntityMention)value_;
        entityMention.write(oprot);
        return;
      case OPINION:
        thrift.adept.common.Opinion opinion = (thrift.adept.common.Opinion)value_;
        opinion.write(oprot);
        return;
      case PART_OF_SPEECH:
        thrift.adept.common.PartOfSpeech partOfSpeech = (thrift.adept.common.PartOfSpeech)value_;
        partOfSpeech.write(oprot);
        return;
      case PASSAGE:
        thrift.adept.common.Passage passage = (thrift.adept.common.Passage)value_;
        passage.write(oprot);
        return;
      case PROSODIC_PHRASE:
        thrift.adept.common.ProsodicPhrase prosodicPhrase = (thrift.adept.common.ProsodicPhrase)value_;
        prosodicPhrase.write(oprot);
        return;
      case SARCASM:
        thrift.adept.common.Sarcasm sarcasm = (thrift.adept.common.Sarcasm)value_;
        sarcasm.write(oprot);
        return;
      case SENTENCE:
        thrift.adept.common.Sentence sentence = (thrift.adept.common.Sentence)value_;
        sentence.write(oprot);
        return;
      case STORY:
        thrift.adept.common.Story story = (thrift.adept.common.Story)value_;
        story.write(oprot);
        return;
      case SYNTACTIC_CHUNK:
        thrift.adept.common.SyntacticChunk syntacticChunk = (thrift.adept.common.SyntacticChunk)value_;
        syntacticChunk.write(oprot);
        return;
      case UTTERANCE:
        thrift.adept.common.Utterance utterance = (thrift.adept.common.Utterance)value_;
        utterance.write(oprot);
        return;
      case COREFERENCE:
        thrift.adept.common.Coreference coreference = (thrift.adept.common.Coreference)value_;
        coreference.write(oprot);
        return;
      case DEPENDENCY:
        thrift.adept.common.Dependency dependency = (thrift.adept.common.Dependency)value_;
        dependency.write(oprot);
        return;
      case ENTITY:
        thrift.adept.common.Entity entity = (thrift.adept.common.Entity)value_;
        entity.write(oprot);
        return;
      case HLT_CONTENT_CONTAINER:
        thrift.adept.common.HltContentContainer hltContentContainer = (thrift.adept.common.HltContentContainer)value_;
        hltContentContainer.write(oprot);
        return;
      case INTER_PAUSAL_UNIT:
        thrift.adept.common.InterPausalUnit interPausalUnit = (thrift.adept.common.InterPausalUnit)value_;
        interPausalUnit.write(oprot);
        return;
      case JOINT_RELATION_COREFERENCE:
        thrift.adept.common.JointRelationCoreference jointRelationCoreference = (thrift.adept.common.JointRelationCoreference)value_;
        jointRelationCoreference.write(oprot);
        return;
      case PARAPHRASE:
        thrift.adept.common.Paraphrase paraphrase = (thrift.adept.common.Paraphrase)value_;
        paraphrase.write(oprot);
        return;
      case RELATION:
        thrift.adept.common.Relation relation = (thrift.adept.common.Relation)value_;
        relation.write(oprot);
        return;
      case SENTENCE_SIMILARITY:
        thrift.adept.common.SentenceSimilarity sentenceSimilarity = (thrift.adept.common.SentenceSimilarity)value_;
        sentenceSimilarity.write(oprot);
        return;
      case TOKEN:
        thrift.adept.common.Token token = (thrift.adept.common.Token)value_;
        token.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case DOCUMENT:
        return DOCUMENT_FIELD_DESC;
      case HLT_CONTENT:
        return HLT_CONTENT_FIELD_DESC;
      case ANOMALOUS_TEXT:
        return ANOMALOUS_TEXT_FIELD_DESC;
      case ARGUMENT:
        return ARGUMENT_FIELD_DESC;
      case CHUNK:
        return CHUNK_FIELD_DESC;
      case COMMITTED_BELIEF:
        return COMMITTED_BELIEF_FIELD_DESC;
      case DISCOURSE_UNIT:
        return DISCOURSE_UNIT_FIELD_DESC;
      case ENTITY_MENTION:
        return ENTITY_MENTION_FIELD_DESC;
      case OPINION:
        return OPINION_FIELD_DESC;
      case PART_OF_SPEECH:
        return PART_OF_SPEECH_FIELD_DESC;
      case PASSAGE:
        return PASSAGE_FIELD_DESC;
      case PROSODIC_PHRASE:
        return PROSODIC_PHRASE_FIELD_DESC;
      case SARCASM:
        return SARCASM_FIELD_DESC;
      case SENTENCE:
        return SENTENCE_FIELD_DESC;
      case STORY:
        return STORY_FIELD_DESC;
      case SYNTACTIC_CHUNK:
        return SYNTACTIC_CHUNK_FIELD_DESC;
      case UTTERANCE:
        return UTTERANCE_FIELD_DESC;
      case COREFERENCE:
        return COREFERENCE_FIELD_DESC;
      case DEPENDENCY:
        return DEPENDENCY_FIELD_DESC;
      case ENTITY:
        return ENTITY_FIELD_DESC;
      case HLT_CONTENT_CONTAINER:
        return HLT_CONTENT_CONTAINER_FIELD_DESC;
      case INTER_PAUSAL_UNIT:
        return INTER_PAUSAL_UNIT_FIELD_DESC;
      case JOINT_RELATION_COREFERENCE:
        return JOINT_RELATION_COREFERENCE_FIELD_DESC;
      case PARAPHRASE:
        return PARAPHRASE_FIELD_DESC;
      case RELATION:
        return RELATION_FIELD_DESC;
      case SENTENCE_SIMILARITY:
        return SENTENCE_SIMILARITY_FIELD_DESC;
      case TOKEN:
        return TOKEN_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public thrift.adept.common.Document getDocument() {
    if (getSetField() == _Fields.DOCUMENT) {
      return (thrift.adept.common.Document)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'document' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDocument(thrift.adept.common.Document value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DOCUMENT;
    value_ = value;
  }

  public thrift.adept.common.HltContent getHltContent() {
    if (getSetField() == _Fields.HLT_CONTENT) {
      return (thrift.adept.common.HltContent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'hltContent' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHltContent(thrift.adept.common.HltContent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.HLT_CONTENT;
    value_ = value;
  }

  public thrift.adept.common.AnomalousText getAnomalousText() {
    if (getSetField() == _Fields.ANOMALOUS_TEXT) {
      return (thrift.adept.common.AnomalousText)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'anomalousText' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAnomalousText(thrift.adept.common.AnomalousText value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ANOMALOUS_TEXT;
    value_ = value;
  }

  public thrift.adept.common.Argument getArgument() {
    if (getSetField() == _Fields.ARGUMENT) {
      return (thrift.adept.common.Argument)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'argument' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArgument(thrift.adept.common.Argument value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ARGUMENT;
    value_ = value;
  }

  public thrift.adept.common.Chunk getChunk() {
    if (getSetField() == _Fields.CHUNK) {
      return (thrift.adept.common.Chunk)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'chunk' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setChunk(thrift.adept.common.Chunk value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CHUNK;
    value_ = value;
  }

  public thrift.adept.common.CommittedBelief getCommittedBelief() {
    if (getSetField() == _Fields.COMMITTED_BELIEF) {
      return (thrift.adept.common.CommittedBelief)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'committedBelief' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCommittedBelief(thrift.adept.common.CommittedBelief value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.COMMITTED_BELIEF;
    value_ = value;
  }

  public thrift.adept.common.DiscourseUnit getDiscourseUnit() {
    if (getSetField() == _Fields.DISCOURSE_UNIT) {
      return (thrift.adept.common.DiscourseUnit)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'discourseUnit' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDiscourseUnit(thrift.adept.common.DiscourseUnit value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DISCOURSE_UNIT;
    value_ = value;
  }

  public thrift.adept.common.EntityMention getEntityMention() {
    if (getSetField() == _Fields.ENTITY_MENTION) {
      return (thrift.adept.common.EntityMention)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'entityMention' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEntityMention(thrift.adept.common.EntityMention value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ENTITY_MENTION;
    value_ = value;
  }

  public thrift.adept.common.Opinion getOpinion() {
    if (getSetField() == _Fields.OPINION) {
      return (thrift.adept.common.Opinion)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'opinion' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOpinion(thrift.adept.common.Opinion value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OPINION;
    value_ = value;
  }

  public thrift.adept.common.PartOfSpeech getPartOfSpeech() {
    if (getSetField() == _Fields.PART_OF_SPEECH) {
      return (thrift.adept.common.PartOfSpeech)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'partOfSpeech' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPartOfSpeech(thrift.adept.common.PartOfSpeech value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PART_OF_SPEECH;
    value_ = value;
  }

  public thrift.adept.common.Passage getPassage() {
    if (getSetField() == _Fields.PASSAGE) {
      return (thrift.adept.common.Passage)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'passage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPassage(thrift.adept.common.Passage value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PASSAGE;
    value_ = value;
  }

  public thrift.adept.common.ProsodicPhrase getProsodicPhrase() {
    if (getSetField() == _Fields.PROSODIC_PHRASE) {
      return (thrift.adept.common.ProsodicPhrase)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'prosodicPhrase' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setProsodicPhrase(thrift.adept.common.ProsodicPhrase value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PROSODIC_PHRASE;
    value_ = value;
  }

  public thrift.adept.common.Sarcasm getSarcasm() {
    if (getSetField() == _Fields.SARCASM) {
      return (thrift.adept.common.Sarcasm)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'sarcasm' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSarcasm(thrift.adept.common.Sarcasm value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SARCASM;
    value_ = value;
  }

  public thrift.adept.common.Sentence getSentence() {
    if (getSetField() == _Fields.SENTENCE) {
      return (thrift.adept.common.Sentence)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'sentence' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSentence(thrift.adept.common.Sentence value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SENTENCE;
    value_ = value;
  }

  public thrift.adept.common.Story getStory() {
    if (getSetField() == _Fields.STORY) {
      return (thrift.adept.common.Story)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'story' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStory(thrift.adept.common.Story value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STORY;
    value_ = value;
  }

  public thrift.adept.common.SyntacticChunk getSyntacticChunk() {
    if (getSetField() == _Fields.SYNTACTIC_CHUNK) {
      return (thrift.adept.common.SyntacticChunk)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'syntacticChunk' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSyntacticChunk(thrift.adept.common.SyntacticChunk value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SYNTACTIC_CHUNK;
    value_ = value;
  }

  public thrift.adept.common.Utterance getUtterance() {
    if (getSetField() == _Fields.UTTERANCE) {
      return (thrift.adept.common.Utterance)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'utterance' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUtterance(thrift.adept.common.Utterance value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UTTERANCE;
    value_ = value;
  }

  public thrift.adept.common.Coreference getCoreference() {
    if (getSetField() == _Fields.COREFERENCE) {
      return (thrift.adept.common.Coreference)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'coreference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCoreference(thrift.adept.common.Coreference value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.COREFERENCE;
    value_ = value;
  }

  public thrift.adept.common.Dependency getDependency() {
    if (getSetField() == _Fields.DEPENDENCY) {
      return (thrift.adept.common.Dependency)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'dependency' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDependency(thrift.adept.common.Dependency value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DEPENDENCY;
    value_ = value;
  }

  public thrift.adept.common.Entity getEntity() {
    if (getSetField() == _Fields.ENTITY) {
      return (thrift.adept.common.Entity)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'entity' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEntity(thrift.adept.common.Entity value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ENTITY;
    value_ = value;
  }

  public thrift.adept.common.HltContentContainer getHltContentContainer() {
    if (getSetField() == _Fields.HLT_CONTENT_CONTAINER) {
      return (thrift.adept.common.HltContentContainer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'hltContentContainer' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHltContentContainer(thrift.adept.common.HltContentContainer value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.HLT_CONTENT_CONTAINER;
    value_ = value;
  }

  public thrift.adept.common.InterPausalUnit getInterPausalUnit() {
    if (getSetField() == _Fields.INTER_PAUSAL_UNIT) {
      return (thrift.adept.common.InterPausalUnit)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'interPausalUnit' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInterPausalUnit(thrift.adept.common.InterPausalUnit value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.INTER_PAUSAL_UNIT;
    value_ = value;
  }

  public thrift.adept.common.JointRelationCoreference getJointRelationCoreference() {
    if (getSetField() == _Fields.JOINT_RELATION_COREFERENCE) {
      return (thrift.adept.common.JointRelationCoreference)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'jointRelationCoreference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setJointRelationCoreference(thrift.adept.common.JointRelationCoreference value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.JOINT_RELATION_COREFERENCE;
    value_ = value;
  }

  public thrift.adept.common.Paraphrase getParaphrase() {
    if (getSetField() == _Fields.PARAPHRASE) {
      return (thrift.adept.common.Paraphrase)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'paraphrase' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setParaphrase(thrift.adept.common.Paraphrase value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PARAPHRASE;
    value_ = value;
  }

  public thrift.adept.common.Relation getRelation() {
    if (getSetField() == _Fields.RELATION) {
      return (thrift.adept.common.Relation)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'relation' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRelation(thrift.adept.common.Relation value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RELATION;
    value_ = value;
  }

  public thrift.adept.common.SentenceSimilarity getSentenceSimilarity() {
    if (getSetField() == _Fields.SENTENCE_SIMILARITY) {
      return (thrift.adept.common.SentenceSimilarity)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'sentenceSimilarity' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSentenceSimilarity(thrift.adept.common.SentenceSimilarity value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SENTENCE_SIMILARITY;
    value_ = value;
  }

  public thrift.adept.common.Token getToken() {
    if (getSetField() == _Fields.TOKEN) {
      return (thrift.adept.common.Token)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'token' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setToken(thrift.adept.common.Token value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TOKEN;
    value_ = value;
  }

  public boolean isSetDocument() {
    return setField_ == _Fields.DOCUMENT;
  }


  public boolean isSetHltContent() {
    return setField_ == _Fields.HLT_CONTENT;
  }


  public boolean isSetAnomalousText() {
    return setField_ == _Fields.ANOMALOUS_TEXT;
  }


  public boolean isSetArgument() {
    return setField_ == _Fields.ARGUMENT;
  }


  public boolean isSetChunk() {
    return setField_ == _Fields.CHUNK;
  }


  public boolean isSetCommittedBelief() {
    return setField_ == _Fields.COMMITTED_BELIEF;
  }


  public boolean isSetDiscourseUnit() {
    return setField_ == _Fields.DISCOURSE_UNIT;
  }


  public boolean isSetEntityMention() {
    return setField_ == _Fields.ENTITY_MENTION;
  }


  public boolean isSetOpinion() {
    return setField_ == _Fields.OPINION;
  }


  public boolean isSetPartOfSpeech() {
    return setField_ == _Fields.PART_OF_SPEECH;
  }


  public boolean isSetPassage() {
    return setField_ == _Fields.PASSAGE;
  }


  public boolean isSetProsodicPhrase() {
    return setField_ == _Fields.PROSODIC_PHRASE;
  }


  public boolean isSetSarcasm() {
    return setField_ == _Fields.SARCASM;
  }


  public boolean isSetSentence() {
    return setField_ == _Fields.SENTENCE;
  }


  public boolean isSetStory() {
    return setField_ == _Fields.STORY;
  }


  public boolean isSetSyntacticChunk() {
    return setField_ == _Fields.SYNTACTIC_CHUNK;
  }


  public boolean isSetUtterance() {
    return setField_ == _Fields.UTTERANCE;
  }


  public boolean isSetCoreference() {
    return setField_ == _Fields.COREFERENCE;
  }


  public boolean isSetDependency() {
    return setField_ == _Fields.DEPENDENCY;
  }


  public boolean isSetEntity() {
    return setField_ == _Fields.ENTITY;
  }


  public boolean isSetHltContentContainer() {
    return setField_ == _Fields.HLT_CONTENT_CONTAINER;
  }


  public boolean isSetInterPausalUnit() {
    return setField_ == _Fields.INTER_PAUSAL_UNIT;
  }


  public boolean isSetJointRelationCoreference() {
    return setField_ == _Fields.JOINT_RELATION_COREFERENCE;
  }


  public boolean isSetParaphrase() {
    return setField_ == _Fields.PARAPHRASE;
  }


  public boolean isSetRelation() {
    return setField_ == _Fields.RELATION;
  }


  public boolean isSetSentenceSimilarity() {
    return setField_ == _Fields.SENTENCE_SIMILARITY;
  }


  public boolean isSetToken() {
    return setField_ == _Fields.TOKEN;
  }


  public boolean equals(Object other) {
    if (other instanceof ItemUnion) {
      return equals((ItemUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(ItemUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ItemUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}