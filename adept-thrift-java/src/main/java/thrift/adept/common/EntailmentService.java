/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EntailmentService {

  public interface Iface extends ItemService.Iface {

    public boolean addJudgmentConfidencePair(EntailmentJudgment judgment, double confidence) throws org.apache.thrift.TException;

    public ChunkUnion getBestJudgment() throws org.apache.thrift.TException;

    public long getEntailmentId() throws org.apache.thrift.TException;

    public Passage getHypothesis() throws org.apache.thrift.TException;

    public Map<EntailmentJudgment,Double> getJudgmentDistribution() throws org.apache.thrift.TException;

    public Passage getText() throws org.apache.thrift.TException;

    public void setHypothesis(Passage hypothesis) throws org.apache.thrift.TException;

    public void setJudgmentDistribution(Map<EntailmentJudgment,Double> judgmentDistribution) throws org.apache.thrift.TException;

    public void setText(Passage text) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ItemService .AsyncIface {

    public void addJudgmentConfidencePair(EntailmentJudgment judgment, double confidence, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addJudgmentConfidencePair_call> resultHandler) throws org.apache.thrift.TException;

    public void getBestJudgment(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBestJudgment_call> resultHandler) throws org.apache.thrift.TException;

    public void getEntailmentId(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEntailmentId_call> resultHandler) throws org.apache.thrift.TException;

    public void getHypothesis(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void getJudgmentDistribution(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJudgmentDistribution_call> resultHandler) throws org.apache.thrift.TException;

    public void getText(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getText_call> resultHandler) throws org.apache.thrift.TException;

    public void setHypothesis(Passage hypothesis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setHypothesis_call> resultHandler) throws org.apache.thrift.TException;

    public void setJudgmentDistribution(Map<EntailmentJudgment,Double> judgmentDistribution, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setJudgmentDistribution_call> resultHandler) throws org.apache.thrift.TException;

    public void setText(Passage text, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setText_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ItemService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addJudgmentConfidencePair(EntailmentJudgment judgment, double confidence) throws org.apache.thrift.TException
    {
      send_addJudgmentConfidencePair(judgment, confidence);
      return recv_addJudgmentConfidencePair();
    }

    public void send_addJudgmentConfidencePair(EntailmentJudgment judgment, double confidence) throws org.apache.thrift.TException
    {
      addJudgmentConfidencePair_args args = new addJudgmentConfidencePair_args();
      args.setJudgment(judgment);
      args.setConfidence(confidence);
      sendBase("addJudgmentConfidencePair", args);
    }

    public boolean recv_addJudgmentConfidencePair() throws org.apache.thrift.TException
    {
      addJudgmentConfidencePair_result result = new addJudgmentConfidencePair_result();
      receiveBase(result, "addJudgmentConfidencePair");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addJudgmentConfidencePair failed: unknown result");
    }

    public ChunkUnion getBestJudgment() throws org.apache.thrift.TException
    {
      send_getBestJudgment();
      return recv_getBestJudgment();
    }

    public void send_getBestJudgment() throws org.apache.thrift.TException
    {
      getBestJudgment_args args = new getBestJudgment_args();
      sendBase("getBestJudgment", args);
    }

    public ChunkUnion recv_getBestJudgment() throws org.apache.thrift.TException
    {
      getBestJudgment_result result = new getBestJudgment_result();
      receiveBase(result, "getBestJudgment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBestJudgment failed: unknown result");
    }

    public long getEntailmentId() throws org.apache.thrift.TException
    {
      send_getEntailmentId();
      return recv_getEntailmentId();
    }

    public void send_getEntailmentId() throws org.apache.thrift.TException
    {
      getEntailmentId_args args = new getEntailmentId_args();
      sendBase("getEntailmentId", args);
    }

    public long recv_getEntailmentId() throws org.apache.thrift.TException
    {
      getEntailmentId_result result = new getEntailmentId_result();
      receiveBase(result, "getEntailmentId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntailmentId failed: unknown result");
    }

    public Passage getHypothesis() throws org.apache.thrift.TException
    {
      send_getHypothesis();
      return recv_getHypothesis();
    }

    public void send_getHypothesis() throws org.apache.thrift.TException
    {
      getHypothesis_args args = new getHypothesis_args();
      sendBase("getHypothesis", args);
    }

    public Passage recv_getHypothesis() throws org.apache.thrift.TException
    {
      getHypothesis_result result = new getHypothesis_result();
      receiveBase(result, "getHypothesis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHypothesis failed: unknown result");
    }

    public Map<EntailmentJudgment,Double> getJudgmentDistribution() throws org.apache.thrift.TException
    {
      send_getJudgmentDistribution();
      return recv_getJudgmentDistribution();
    }

    public void send_getJudgmentDistribution() throws org.apache.thrift.TException
    {
      getJudgmentDistribution_args args = new getJudgmentDistribution_args();
      sendBase("getJudgmentDistribution", args);
    }

    public Map<EntailmentJudgment,Double> recv_getJudgmentDistribution() throws org.apache.thrift.TException
    {
      getJudgmentDistribution_result result = new getJudgmentDistribution_result();
      receiveBase(result, "getJudgmentDistribution");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJudgmentDistribution failed: unknown result");
    }

    public Passage getText() throws org.apache.thrift.TException
    {
      send_getText();
      return recv_getText();
    }

    public void send_getText() throws org.apache.thrift.TException
    {
      getText_args args = new getText_args();
      sendBase("getText", args);
    }

    public Passage recv_getText() throws org.apache.thrift.TException
    {
      getText_result result = new getText_result();
      receiveBase(result, "getText");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getText failed: unknown result");
    }

    public void setHypothesis(Passage hypothesis) throws org.apache.thrift.TException
    {
      send_setHypothesis(hypothesis);
      recv_setHypothesis();
    }

    public void send_setHypothesis(Passage hypothesis) throws org.apache.thrift.TException
    {
      setHypothesis_args args = new setHypothesis_args();
      args.setHypothesis(hypothesis);
      sendBase("setHypothesis", args);
    }

    public void recv_setHypothesis() throws org.apache.thrift.TException
    {
      setHypothesis_result result = new setHypothesis_result();
      receiveBase(result, "setHypothesis");
      return;
    }

    public void setJudgmentDistribution(Map<EntailmentJudgment,Double> judgmentDistribution) throws org.apache.thrift.TException
    {
      send_setJudgmentDistribution(judgmentDistribution);
      recv_setJudgmentDistribution();
    }

    public void send_setJudgmentDistribution(Map<EntailmentJudgment,Double> judgmentDistribution) throws org.apache.thrift.TException
    {
      setJudgmentDistribution_args args = new setJudgmentDistribution_args();
      args.setJudgmentDistribution(judgmentDistribution);
      sendBase("setJudgmentDistribution", args);
    }

    public void recv_setJudgmentDistribution() throws org.apache.thrift.TException
    {
      setJudgmentDistribution_result result = new setJudgmentDistribution_result();
      receiveBase(result, "setJudgmentDistribution");
      return;
    }

    public void setText(Passage text) throws org.apache.thrift.TException
    {
      send_setText(text);
      recv_setText();
    }

    public void send_setText(Passage text) throws org.apache.thrift.TException
    {
      setText_args args = new setText_args();
      args.setText(text);
      sendBase("setText", args);
    }

    public void recv_setText() throws org.apache.thrift.TException
    {
      setText_result result = new setText_result();
      receiveBase(result, "setText");
      return;
    }

  }
  public static class AsyncClient extends ItemService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addJudgmentConfidencePair(EntailmentJudgment judgment, double confidence, org.apache.thrift.async.AsyncMethodCallback<addJudgmentConfidencePair_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addJudgmentConfidencePair_call method_call = new addJudgmentConfidencePair_call(judgment, confidence, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addJudgmentConfidencePair_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EntailmentJudgment judgment;
      private double confidence;
      public addJudgmentConfidencePair_call(EntailmentJudgment judgment, double confidence, org.apache.thrift.async.AsyncMethodCallback<addJudgmentConfidencePair_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.judgment = judgment;
        this.confidence = confidence;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addJudgmentConfidencePair", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addJudgmentConfidencePair_args args = new addJudgmentConfidencePair_args();
        args.setJudgment(judgment);
        args.setConfidence(confidence);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addJudgmentConfidencePair();
      }
    }

    public void getBestJudgment(org.apache.thrift.async.AsyncMethodCallback<getBestJudgment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBestJudgment_call method_call = new getBestJudgment_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBestJudgment_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getBestJudgment_call(org.apache.thrift.async.AsyncMethodCallback<getBestJudgment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBestJudgment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBestJudgment_args args = new getBestJudgment_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChunkUnion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBestJudgment();
      }
    }

    public void getEntailmentId(org.apache.thrift.async.AsyncMethodCallback<getEntailmentId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntailmentId_call method_call = new getEntailmentId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntailmentId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getEntailmentId_call(org.apache.thrift.async.AsyncMethodCallback<getEntailmentId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntailmentId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntailmentId_args args = new getEntailmentId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntailmentId();
      }
    }

    public void getHypothesis(org.apache.thrift.async.AsyncMethodCallback<getHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHypothesis_call method_call = new getHypothesis_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getHypothesis_call(org.apache.thrift.async.AsyncMethodCallback<getHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHypothesis_args args = new getHypothesis_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Passage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHypothesis();
      }
    }

    public void getJudgmentDistribution(org.apache.thrift.async.AsyncMethodCallback<getJudgmentDistribution_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJudgmentDistribution_call method_call = new getJudgmentDistribution_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJudgmentDistribution_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getJudgmentDistribution_call(org.apache.thrift.async.AsyncMethodCallback<getJudgmentDistribution_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJudgmentDistribution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJudgmentDistribution_args args = new getJudgmentDistribution_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<EntailmentJudgment,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJudgmentDistribution();
      }
    }

    public void getText(org.apache.thrift.async.AsyncMethodCallback<getText_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getText_call method_call = new getText_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getText_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getText_call(org.apache.thrift.async.AsyncMethodCallback<getText_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getText", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getText_args args = new getText_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Passage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getText();
      }
    }

    public void setHypothesis(Passage hypothesis, org.apache.thrift.async.AsyncMethodCallback<setHypothesis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setHypothesis_call method_call = new setHypothesis_call(hypothesis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setHypothesis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Passage hypothesis;
      public setHypothesis_call(Passage hypothesis, org.apache.thrift.async.AsyncMethodCallback<setHypothesis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hypothesis = hypothesis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setHypothesis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setHypothesis_args args = new setHypothesis_args();
        args.setHypothesis(hypothesis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setHypothesis();
      }
    }

    public void setJudgmentDistribution(Map<EntailmentJudgment,Double> judgmentDistribution, org.apache.thrift.async.AsyncMethodCallback<setJudgmentDistribution_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setJudgmentDistribution_call method_call = new setJudgmentDistribution_call(judgmentDistribution, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setJudgmentDistribution_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<EntailmentJudgment,Double> judgmentDistribution;
      public setJudgmentDistribution_call(Map<EntailmentJudgment,Double> judgmentDistribution, org.apache.thrift.async.AsyncMethodCallback<setJudgmentDistribution_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.judgmentDistribution = judgmentDistribution;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setJudgmentDistribution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setJudgmentDistribution_args args = new setJudgmentDistribution_args();
        args.setJudgmentDistribution(judgmentDistribution);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setJudgmentDistribution();
      }
    }

    public void setText(Passage text, org.apache.thrift.async.AsyncMethodCallback<setText_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setText_call method_call = new setText_call(text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setText_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Passage text;
      public setText_call(Passage text, org.apache.thrift.async.AsyncMethodCallback<setText_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.text = text;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setText", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setText_args args = new setText_args();
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setText();
      }
    }

  }

  public static class Processor<I extends Iface> extends ItemService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addJudgmentConfidencePair", new addJudgmentConfidencePair());
      processMap.put("getBestJudgment", new getBestJudgment());
      processMap.put("getEntailmentId", new getEntailmentId());
      processMap.put("getHypothesis", new getHypothesis());
      processMap.put("getJudgmentDistribution", new getJudgmentDistribution());
      processMap.put("getText", new getText());
      processMap.put("setHypothesis", new setHypothesis());
      processMap.put("setJudgmentDistribution", new setJudgmentDistribution());
      processMap.put("setText", new setText());
      return processMap;
    }

    public static class addJudgmentConfidencePair<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addJudgmentConfidencePair_args> {
      public addJudgmentConfidencePair() {
        super("addJudgmentConfidencePair");
      }

      public addJudgmentConfidencePair_args getEmptyArgsInstance() {
        return new addJudgmentConfidencePair_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addJudgmentConfidencePair_result getResult(I iface, addJudgmentConfidencePair_args args) throws org.apache.thrift.TException {
        addJudgmentConfidencePair_result result = new addJudgmentConfidencePair_result();
        result.success = iface.addJudgmentConfidencePair(args.judgment, args.confidence);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBestJudgment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBestJudgment_args> {
      public getBestJudgment() {
        super("getBestJudgment");
      }

      public getBestJudgment_args getEmptyArgsInstance() {
        return new getBestJudgment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBestJudgment_result getResult(I iface, getBestJudgment_args args) throws org.apache.thrift.TException {
        getBestJudgment_result result = new getBestJudgment_result();
        result.success = iface.getBestJudgment();
        return result;
      }
    }

    public static class getEntailmentId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntailmentId_args> {
      public getEntailmentId() {
        super("getEntailmentId");
      }

      public getEntailmentId_args getEmptyArgsInstance() {
        return new getEntailmentId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntailmentId_result getResult(I iface, getEntailmentId_args args) throws org.apache.thrift.TException {
        getEntailmentId_result result = new getEntailmentId_result();
        result.success = iface.getEntailmentId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHypothesis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHypothesis_args> {
      public getHypothesis() {
        super("getHypothesis");
      }

      public getHypothesis_args getEmptyArgsInstance() {
        return new getHypothesis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHypothesis_result getResult(I iface, getHypothesis_args args) throws org.apache.thrift.TException {
        getHypothesis_result result = new getHypothesis_result();
        result.success = iface.getHypothesis();
        return result;
      }
    }

    public static class getJudgmentDistribution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJudgmentDistribution_args> {
      public getJudgmentDistribution() {
        super("getJudgmentDistribution");
      }

      public getJudgmentDistribution_args getEmptyArgsInstance() {
        return new getJudgmentDistribution_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJudgmentDistribution_result getResult(I iface, getJudgmentDistribution_args args) throws org.apache.thrift.TException {
        getJudgmentDistribution_result result = new getJudgmentDistribution_result();
        result.success = iface.getJudgmentDistribution();
        return result;
      }
    }

    public static class getText<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getText_args> {
      public getText() {
        super("getText");
      }

      public getText_args getEmptyArgsInstance() {
        return new getText_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getText_result getResult(I iface, getText_args args) throws org.apache.thrift.TException {
        getText_result result = new getText_result();
        result.success = iface.getText();
        return result;
      }
    }

    public static class setHypothesis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setHypothesis_args> {
      public setHypothesis() {
        super("setHypothesis");
      }

      public setHypothesis_args getEmptyArgsInstance() {
        return new setHypothesis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setHypothesis_result getResult(I iface, setHypothesis_args args) throws org.apache.thrift.TException {
        setHypothesis_result result = new setHypothesis_result();
        iface.setHypothesis(args.hypothesis);
        return result;
      }
    }

    public static class setJudgmentDistribution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setJudgmentDistribution_args> {
      public setJudgmentDistribution() {
        super("setJudgmentDistribution");
      }

      public setJudgmentDistribution_args getEmptyArgsInstance() {
        return new setJudgmentDistribution_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setJudgmentDistribution_result getResult(I iface, setJudgmentDistribution_args args) throws org.apache.thrift.TException {
        setJudgmentDistribution_result result = new setJudgmentDistribution_result();
        iface.setJudgmentDistribution(args.judgmentDistribution);
        return result;
      }
    }

    public static class setText<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setText_args> {
      public setText() {
        super("setText");
      }

      public setText_args getEmptyArgsInstance() {
        return new setText_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setText_result getResult(I iface, setText_args args) throws org.apache.thrift.TException {
        setText_result result = new setText_result();
        iface.setText(args.text);
        return result;
      }
    }

  }

  public static class addJudgmentConfidencePair_args implements org.apache.thrift.TBase<addJudgmentConfidencePair_args, addJudgmentConfidencePair_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addJudgmentConfidencePair_args");

    private static final org.apache.thrift.protocol.TField JUDGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("judgment", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addJudgmentConfidencePair_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addJudgmentConfidencePair_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see EntailmentJudgment
     */
    public EntailmentJudgment judgment; // required
    public double confidence; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see EntailmentJudgment
       */
      JUDGMENT((short)1, "judgment"),
      CONFIDENCE((short)2, "confidence");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JUDGMENT
            return JUDGMENT;
          case 2: // CONFIDENCE
            return CONFIDENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIDENCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JUDGMENT, new org.apache.thrift.meta_data.FieldMetaData("judgment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EntailmentJudgment.class)));
      tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addJudgmentConfidencePair_args.class, metaDataMap);
    }

    public addJudgmentConfidencePair_args() {
    }

    public addJudgmentConfidencePair_args(
      EntailmentJudgment judgment,
      double confidence)
    {
      this();
      this.judgment = judgment;
      this.confidence = confidence;
      setConfidenceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addJudgmentConfidencePair_args(addJudgmentConfidencePair_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJudgment()) {
        this.judgment = other.judgment;
      }
      this.confidence = other.confidence;
    }

    public addJudgmentConfidencePair_args deepCopy() {
      return new addJudgmentConfidencePair_args(this);
    }

    @Override
    public void clear() {
      this.judgment = null;
      setConfidenceIsSet(false);
      this.confidence = 0.0;
    }

    /**
     * 
     * @see EntailmentJudgment
     */
    public EntailmentJudgment getJudgment() {
      return this.judgment;
    }

    /**
     * 
     * @see EntailmentJudgment
     */
    public addJudgmentConfidencePair_args setJudgment(EntailmentJudgment judgment) {
      this.judgment = judgment;
      return this;
    }

    public void unsetJudgment() {
      this.judgment = null;
    }

    /** Returns true if field judgment is set (has been assigned a value) and false otherwise */
    public boolean isSetJudgment() {
      return this.judgment != null;
    }

    public void setJudgmentIsSet(boolean value) {
      if (!value) {
        this.judgment = null;
      }
    }

    public double getConfidence() {
      return this.confidence;
    }

    public addJudgmentConfidencePair_args setConfidence(double confidence) {
      this.confidence = confidence;
      setConfidenceIsSet(true);
      return this;
    }

    public void unsetConfidence() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
    }

    /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
    public boolean isSetConfidence() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
    }

    public void setConfidenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JUDGMENT:
        if (value == null) {
          unsetJudgment();
        } else {
          setJudgment((EntailmentJudgment)value);
        }
        break;

      case CONFIDENCE:
        if (value == null) {
          unsetConfidence();
        } else {
          setConfidence((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JUDGMENT:
        return getJudgment();

      case CONFIDENCE:
        return Double.valueOf(getConfidence());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JUDGMENT:
        return isSetJudgment();
      case CONFIDENCE:
        return isSetConfidence();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addJudgmentConfidencePair_args)
        return this.equals((addJudgmentConfidencePair_args)that);
      return false;
    }

    public boolean equals(addJudgmentConfidencePair_args that) {
      if (that == null)
        return false;

      boolean this_present_judgment = true && this.isSetJudgment();
      boolean that_present_judgment = true && that.isSetJudgment();
      if (this_present_judgment || that_present_judgment) {
        if (!(this_present_judgment && that_present_judgment))
          return false;
        if (!this.judgment.equals(that.judgment))
          return false;
      }

      boolean this_present_confidence = true;
      boolean that_present_confidence = true;
      if (this_present_confidence || that_present_confidence) {
        if (!(this_present_confidence && that_present_confidence))
          return false;
        if (this.confidence != that.confidence)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addJudgmentConfidencePair_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addJudgmentConfidencePair_args typedOther = (addJudgmentConfidencePair_args)other;

      lastComparison = Boolean.valueOf(isSetJudgment()).compareTo(typedOther.isSetJudgment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJudgment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judgment, typedOther.judgment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(typedOther.isSetConfidence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfidence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, typedOther.confidence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addJudgmentConfidencePair_args(");
      boolean first = true;

      sb.append("judgment:");
      if (this.judgment == null) {
        sb.append("null");
      } else {
        sb.append(this.judgment);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addJudgmentConfidencePair_argsStandardSchemeFactory implements SchemeFactory {
      public addJudgmentConfidencePair_argsStandardScheme getScheme() {
        return new addJudgmentConfidencePair_argsStandardScheme();
      }
    }

    private static class addJudgmentConfidencePair_argsStandardScheme extends StandardScheme<addJudgmentConfidencePair_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addJudgmentConfidencePair_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JUDGMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.judgment = EntailmentJudgment.findByValue(iprot.readI32());
                struct.setJudgmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIDENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.confidence = iprot.readDouble();
                struct.setConfidenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addJudgmentConfidencePair_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.judgment != null) {
          oprot.writeFieldBegin(JUDGMENT_FIELD_DESC);
          oprot.writeI32(struct.judgment.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addJudgmentConfidencePair_argsTupleSchemeFactory implements SchemeFactory {
      public addJudgmentConfidencePair_argsTupleScheme getScheme() {
        return new addJudgmentConfidencePair_argsTupleScheme();
      }
    }

    private static class addJudgmentConfidencePair_argsTupleScheme extends TupleScheme<addJudgmentConfidencePair_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addJudgmentConfidencePair_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJudgment()) {
          optionals.set(0);
        }
        if (struct.isSetConfidence()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetJudgment()) {
          oprot.writeI32(struct.judgment.getValue());
        }
        if (struct.isSetConfidence()) {
          oprot.writeDouble(struct.confidence);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addJudgmentConfidencePair_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.judgment = EntailmentJudgment.findByValue(iprot.readI32());
          struct.setJudgmentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.confidence = iprot.readDouble();
          struct.setConfidenceIsSet(true);
        }
      }
    }

  }

  public static class addJudgmentConfidencePair_result implements org.apache.thrift.TBase<addJudgmentConfidencePair_result, addJudgmentConfidencePair_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addJudgmentConfidencePair_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addJudgmentConfidencePair_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addJudgmentConfidencePair_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addJudgmentConfidencePair_result.class, metaDataMap);
    }

    public addJudgmentConfidencePair_result() {
    }

    public addJudgmentConfidencePair_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addJudgmentConfidencePair_result(addJudgmentConfidencePair_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addJudgmentConfidencePair_result deepCopy() {
      return new addJudgmentConfidencePair_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addJudgmentConfidencePair_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addJudgmentConfidencePair_result)
        return this.equals((addJudgmentConfidencePair_result)that);
      return false;
    }

    public boolean equals(addJudgmentConfidencePair_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addJudgmentConfidencePair_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addJudgmentConfidencePair_result typedOther = (addJudgmentConfidencePair_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addJudgmentConfidencePair_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addJudgmentConfidencePair_resultStandardSchemeFactory implements SchemeFactory {
      public addJudgmentConfidencePair_resultStandardScheme getScheme() {
        return new addJudgmentConfidencePair_resultStandardScheme();
      }
    }

    private static class addJudgmentConfidencePair_resultStandardScheme extends StandardScheme<addJudgmentConfidencePair_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addJudgmentConfidencePair_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addJudgmentConfidencePair_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addJudgmentConfidencePair_resultTupleSchemeFactory implements SchemeFactory {
      public addJudgmentConfidencePair_resultTupleScheme getScheme() {
        return new addJudgmentConfidencePair_resultTupleScheme();
      }
    }

    private static class addJudgmentConfidencePair_resultTupleScheme extends TupleScheme<addJudgmentConfidencePair_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addJudgmentConfidencePair_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addJudgmentConfidencePair_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBestJudgment_args implements org.apache.thrift.TBase<getBestJudgment_args, getBestJudgment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBestJudgment_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBestJudgment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBestJudgment_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBestJudgment_args.class, metaDataMap);
    }

    public getBestJudgment_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBestJudgment_args(getBestJudgment_args other) {
    }

    public getBestJudgment_args deepCopy() {
      return new getBestJudgment_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBestJudgment_args)
        return this.equals((getBestJudgment_args)that);
      return false;
    }

    public boolean equals(getBestJudgment_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBestJudgment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBestJudgment_args typedOther = (getBestJudgment_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBestJudgment_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBestJudgment_argsStandardSchemeFactory implements SchemeFactory {
      public getBestJudgment_argsStandardScheme getScheme() {
        return new getBestJudgment_argsStandardScheme();
      }
    }

    private static class getBestJudgment_argsStandardScheme extends StandardScheme<getBestJudgment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBestJudgment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBestJudgment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBestJudgment_argsTupleSchemeFactory implements SchemeFactory {
      public getBestJudgment_argsTupleScheme getScheme() {
        return new getBestJudgment_argsTupleScheme();
      }
    }

    private static class getBestJudgment_argsTupleScheme extends TupleScheme<getBestJudgment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBestJudgment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBestJudgment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getBestJudgment_result implements org.apache.thrift.TBase<getBestJudgment_result, getBestJudgment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBestJudgment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBestJudgment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBestJudgment_resultTupleSchemeFactory());
    }

    public ChunkUnion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBestJudgment_result.class, metaDataMap);
    }

    public getBestJudgment_result() {
    }

    public getBestJudgment_result(
      ChunkUnion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBestJudgment_result(getBestJudgment_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChunkUnion(other.success);
      }
    }

    public getBestJudgment_result deepCopy() {
      return new getBestJudgment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ChunkUnion getSuccess() {
      return this.success;
    }

    public getBestJudgment_result setSuccess(ChunkUnion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChunkUnion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBestJudgment_result)
        return this.equals((getBestJudgment_result)that);
      return false;
    }

    public boolean equals(getBestJudgment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBestJudgment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBestJudgment_result typedOther = (getBestJudgment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBestJudgment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBestJudgment_resultStandardSchemeFactory implements SchemeFactory {
      public getBestJudgment_resultStandardScheme getScheme() {
        return new getBestJudgment_resultStandardScheme();
      }
    }

    private static class getBestJudgment_resultStandardScheme extends StandardScheme<getBestJudgment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBestJudgment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChunkUnion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBestJudgment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBestJudgment_resultTupleSchemeFactory implements SchemeFactory {
      public getBestJudgment_resultTupleScheme getScheme() {
        return new getBestJudgment_resultTupleScheme();
      }
    }

    private static class getBestJudgment_resultTupleScheme extends TupleScheme<getBestJudgment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBestJudgment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBestJudgment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ChunkUnion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntailmentId_args implements org.apache.thrift.TBase<getEntailmentId_args, getEntailmentId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntailmentId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntailmentId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntailmentId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntailmentId_args.class, metaDataMap);
    }

    public getEntailmentId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntailmentId_args(getEntailmentId_args other) {
    }

    public getEntailmentId_args deepCopy() {
      return new getEntailmentId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntailmentId_args)
        return this.equals((getEntailmentId_args)that);
      return false;
    }

    public boolean equals(getEntailmentId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntailmentId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntailmentId_args typedOther = (getEntailmentId_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntailmentId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntailmentId_argsStandardSchemeFactory implements SchemeFactory {
      public getEntailmentId_argsStandardScheme getScheme() {
        return new getEntailmentId_argsStandardScheme();
      }
    }

    private static class getEntailmentId_argsStandardScheme extends StandardScheme<getEntailmentId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntailmentId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntailmentId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntailmentId_argsTupleSchemeFactory implements SchemeFactory {
      public getEntailmentId_argsTupleScheme getScheme() {
        return new getEntailmentId_argsTupleScheme();
      }
    }

    private static class getEntailmentId_argsTupleScheme extends TupleScheme<getEntailmentId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntailmentId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntailmentId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getEntailmentId_result implements org.apache.thrift.TBase<getEntailmentId_result, getEntailmentId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntailmentId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntailmentId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntailmentId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntailmentId_result.class, metaDataMap);
    }

    public getEntailmentId_result() {
    }

    public getEntailmentId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntailmentId_result(getEntailmentId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getEntailmentId_result deepCopy() {
      return new getEntailmentId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getEntailmentId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntailmentId_result)
        return this.equals((getEntailmentId_result)that);
      return false;
    }

    public boolean equals(getEntailmentId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntailmentId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntailmentId_result typedOther = (getEntailmentId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntailmentId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntailmentId_resultStandardSchemeFactory implements SchemeFactory {
      public getEntailmentId_resultStandardScheme getScheme() {
        return new getEntailmentId_resultStandardScheme();
      }
    }

    private static class getEntailmentId_resultStandardScheme extends StandardScheme<getEntailmentId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntailmentId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntailmentId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntailmentId_resultTupleSchemeFactory implements SchemeFactory {
      public getEntailmentId_resultTupleScheme getScheme() {
        return new getEntailmentId_resultTupleScheme();
      }
    }

    private static class getEntailmentId_resultTupleScheme extends TupleScheme<getEntailmentId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntailmentId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntailmentId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHypothesis_args implements org.apache.thrift.TBase<getHypothesis_args, getHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesis_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHypothesis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHypothesis_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesis_args.class, metaDataMap);
    }

    public getHypothesis_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesis_args(getHypothesis_args other) {
    }

    public getHypothesis_args deepCopy() {
      return new getHypothesis_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesis_args)
        return this.equals((getHypothesis_args)that);
      return false;
    }

    public boolean equals(getHypothesis_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesis_args typedOther = (getHypothesis_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesis_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHypothesis_argsStandardSchemeFactory implements SchemeFactory {
      public getHypothesis_argsStandardScheme getScheme() {
        return new getHypothesis_argsStandardScheme();
      }
    }

    private static class getHypothesis_argsStandardScheme extends StandardScheme<getHypothesis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHypothesis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHypothesis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHypothesis_argsTupleSchemeFactory implements SchemeFactory {
      public getHypothesis_argsTupleScheme getScheme() {
        return new getHypothesis_argsTupleScheme();
      }
    }

    private static class getHypothesis_argsTupleScheme extends TupleScheme<getHypothesis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getHypothesis_result implements org.apache.thrift.TBase<getHypothesis_result, getHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHypothesis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHypothesis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHypothesis_resultTupleSchemeFactory());
    }

    public Passage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHypothesis_result.class, metaDataMap);
    }

    public getHypothesis_result() {
    }

    public getHypothesis_result(
      Passage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHypothesis_result(getHypothesis_result other) {
      if (other.isSetSuccess()) {
        this.success = new Passage(other.success);
      }
    }

    public getHypothesis_result deepCopy() {
      return new getHypothesis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Passage getSuccess() {
      return this.success;
    }

    public getHypothesis_result setSuccess(Passage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Passage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHypothesis_result)
        return this.equals((getHypothesis_result)that);
      return false;
    }

    public boolean equals(getHypothesis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHypothesis_result typedOther = (getHypothesis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHypothesis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHypothesis_resultStandardSchemeFactory implements SchemeFactory {
      public getHypothesis_resultStandardScheme getScheme() {
        return new getHypothesis_resultStandardScheme();
      }
    }

    private static class getHypothesis_resultStandardScheme extends StandardScheme<getHypothesis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHypothesis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Passage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHypothesis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHypothesis_resultTupleSchemeFactory implements SchemeFactory {
      public getHypothesis_resultTupleScheme getScheme() {
        return new getHypothesis_resultTupleScheme();
      }
    }

    private static class getHypothesis_resultTupleScheme extends TupleScheme<getHypothesis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Passage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getJudgmentDistribution_args implements org.apache.thrift.TBase<getJudgmentDistribution_args, getJudgmentDistribution_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJudgmentDistribution_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJudgmentDistribution_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJudgmentDistribution_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJudgmentDistribution_args.class, metaDataMap);
    }

    public getJudgmentDistribution_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJudgmentDistribution_args(getJudgmentDistribution_args other) {
    }

    public getJudgmentDistribution_args deepCopy() {
      return new getJudgmentDistribution_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJudgmentDistribution_args)
        return this.equals((getJudgmentDistribution_args)that);
      return false;
    }

    public boolean equals(getJudgmentDistribution_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJudgmentDistribution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJudgmentDistribution_args typedOther = (getJudgmentDistribution_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJudgmentDistribution_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJudgmentDistribution_argsStandardSchemeFactory implements SchemeFactory {
      public getJudgmentDistribution_argsStandardScheme getScheme() {
        return new getJudgmentDistribution_argsStandardScheme();
      }
    }

    private static class getJudgmentDistribution_argsStandardScheme extends StandardScheme<getJudgmentDistribution_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJudgmentDistribution_argsTupleSchemeFactory implements SchemeFactory {
      public getJudgmentDistribution_argsTupleScheme getScheme() {
        return new getJudgmentDistribution_argsTupleScheme();
      }
    }

    private static class getJudgmentDistribution_argsTupleScheme extends TupleScheme<getJudgmentDistribution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getJudgmentDistribution_result implements org.apache.thrift.TBase<getJudgmentDistribution_result, getJudgmentDistribution_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJudgmentDistribution_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJudgmentDistribution_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJudgmentDistribution_resultTupleSchemeFactory());
    }

    public Map<EntailmentJudgment,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EntailmentJudgment.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJudgmentDistribution_result.class, metaDataMap);
    }

    public getJudgmentDistribution_result() {
    }

    public getJudgmentDistribution_result(
      Map<EntailmentJudgment,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJudgmentDistribution_result(getJudgmentDistribution_result other) {
      if (other.isSetSuccess()) {
        Map<EntailmentJudgment,Double> __this__success = new HashMap<EntailmentJudgment,Double>();
        for (Map.Entry<EntailmentJudgment, Double> other_element : other.success.entrySet()) {

          EntailmentJudgment other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          EntailmentJudgment __this__success_copy_key = other_element_key;

          Double __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getJudgmentDistribution_result deepCopy() {
      return new getJudgmentDistribution_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(EntailmentJudgment key, double val) {
      if (this.success == null) {
        this.success = new HashMap<EntailmentJudgment,Double>();
      }
      this.success.put(key, val);
    }

    public Map<EntailmentJudgment,Double> getSuccess() {
      return this.success;
    }

    public getJudgmentDistribution_result setSuccess(Map<EntailmentJudgment,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<EntailmentJudgment,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJudgmentDistribution_result)
        return this.equals((getJudgmentDistribution_result)that);
      return false;
    }

    public boolean equals(getJudgmentDistribution_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJudgmentDistribution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJudgmentDistribution_result typedOther = (getJudgmentDistribution_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJudgmentDistribution_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJudgmentDistribution_resultStandardSchemeFactory implements SchemeFactory {
      public getJudgmentDistribution_resultStandardScheme getScheme() {
        return new getJudgmentDistribution_resultStandardScheme();
      }
    }

    private static class getJudgmentDistribution_resultStandardScheme extends StandardScheme<getJudgmentDistribution_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map836 = iprot.readMapBegin();
                  struct.success = new HashMap<EntailmentJudgment,Double>(2*_map836.size);
                  for (int _i837 = 0; _i837 < _map836.size; ++_i837)
                  {
                    EntailmentJudgment _key838; // required
                    double _val839; // required
                    _key838 = EntailmentJudgment.findByValue(iprot.readI32());
                    _val839 = iprot.readDouble();
                    struct.success.put(_key838, _val839);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<EntailmentJudgment, Double> _iter840 : struct.success.entrySet())
            {
              oprot.writeI32(_iter840.getKey().getValue());
              oprot.writeDouble(_iter840.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJudgmentDistribution_resultTupleSchemeFactory implements SchemeFactory {
      public getJudgmentDistribution_resultTupleScheme getScheme() {
        return new getJudgmentDistribution_resultTupleScheme();
      }
    }

    private static class getJudgmentDistribution_resultTupleScheme extends TupleScheme<getJudgmentDistribution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<EntailmentJudgment, Double> _iter841 : struct.success.entrySet())
            {
              oprot.writeI32(_iter841.getKey().getValue());
              oprot.writeDouble(_iter841.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map842 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<EntailmentJudgment,Double>(2*_map842.size);
            for (int _i843 = 0; _i843 < _map842.size; ++_i843)
            {
              EntailmentJudgment _key844; // required
              double _val845; // required
              _key844 = EntailmentJudgment.findByValue(iprot.readI32());
              _val845 = iprot.readDouble();
              struct.success.put(_key844, _val845);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getText_args implements org.apache.thrift.TBase<getText_args, getText_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getText_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getText_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getText_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getText_args.class, metaDataMap);
    }

    public getText_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getText_args(getText_args other) {
    }

    public getText_args deepCopy() {
      return new getText_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getText_args)
        return this.equals((getText_args)that);
      return false;
    }

    public boolean equals(getText_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getText_args typedOther = (getText_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getText_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getText_argsStandardSchemeFactory implements SchemeFactory {
      public getText_argsStandardScheme getScheme() {
        return new getText_argsStandardScheme();
      }
    }

    private static class getText_argsStandardScheme extends StandardScheme<getText_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getText_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getText_argsTupleSchemeFactory implements SchemeFactory {
      public getText_argsTupleScheme getScheme() {
        return new getText_argsTupleScheme();
      }
    }

    private static class getText_argsTupleScheme extends TupleScheme<getText_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getText_result implements org.apache.thrift.TBase<getText_result, getText_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getText_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getText_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getText_resultTupleSchemeFactory());
    }

    public Passage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getText_result.class, metaDataMap);
    }

    public getText_result() {
    }

    public getText_result(
      Passage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getText_result(getText_result other) {
      if (other.isSetSuccess()) {
        this.success = new Passage(other.success);
      }
    }

    public getText_result deepCopy() {
      return new getText_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Passage getSuccess() {
      return this.success;
    }

    public getText_result setSuccess(Passage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Passage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getText_result)
        return this.equals((getText_result)that);
      return false;
    }

    public boolean equals(getText_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getText_result typedOther = (getText_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getText_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getText_resultStandardSchemeFactory implements SchemeFactory {
      public getText_resultStandardScheme getScheme() {
        return new getText_resultStandardScheme();
      }
    }

    private static class getText_resultStandardScheme extends StandardScheme<getText_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Passage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getText_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getText_resultTupleSchemeFactory implements SchemeFactory {
      public getText_resultTupleScheme getScheme() {
        return new getText_resultTupleScheme();
      }
    }

    private static class getText_resultTupleScheme extends TupleScheme<getText_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Passage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setHypothesis_args implements org.apache.thrift.TBase<setHypothesis_args, setHypothesis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setHypothesis_args");

    private static final org.apache.thrift.protocol.TField HYPOTHESIS_FIELD_DESC = new org.apache.thrift.protocol.TField("hypothesis", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setHypothesis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setHypothesis_argsTupleSchemeFactory());
    }

    public Passage hypothesis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HYPOTHESIS((short)1, "hypothesis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HYPOTHESIS
            return HYPOTHESIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HYPOTHESIS, new org.apache.thrift.meta_data.FieldMetaData("hypothesis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setHypothesis_args.class, metaDataMap);
    }

    public setHypothesis_args() {
    }

    public setHypothesis_args(
      Passage hypothesis)
    {
      this();
      this.hypothesis = hypothesis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setHypothesis_args(setHypothesis_args other) {
      if (other.isSetHypothesis()) {
        this.hypothesis = new Passage(other.hypothesis);
      }
    }

    public setHypothesis_args deepCopy() {
      return new setHypothesis_args(this);
    }

    @Override
    public void clear() {
      this.hypothesis = null;
    }

    public Passage getHypothesis() {
      return this.hypothesis;
    }

    public setHypothesis_args setHypothesis(Passage hypothesis) {
      this.hypothesis = hypothesis;
      return this;
    }

    public void unsetHypothesis() {
      this.hypothesis = null;
    }

    /** Returns true if field hypothesis is set (has been assigned a value) and false otherwise */
    public boolean isSetHypothesis() {
      return this.hypothesis != null;
    }

    public void setHypothesisIsSet(boolean value) {
      if (!value) {
        this.hypothesis = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HYPOTHESIS:
        if (value == null) {
          unsetHypothesis();
        } else {
          setHypothesis((Passage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HYPOTHESIS:
        return getHypothesis();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HYPOTHESIS:
        return isSetHypothesis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHypothesis_args)
        return this.equals((setHypothesis_args)that);
      return false;
    }

    public boolean equals(setHypothesis_args that) {
      if (that == null)
        return false;

      boolean this_present_hypothesis = true && this.isSetHypothesis();
      boolean that_present_hypothesis = true && that.isSetHypothesis();
      if (this_present_hypothesis || that_present_hypothesis) {
        if (!(this_present_hypothesis && that_present_hypothesis))
          return false;
        if (!this.hypothesis.equals(that.hypothesis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setHypothesis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setHypothesis_args typedOther = (setHypothesis_args)other;

      lastComparison = Boolean.valueOf(isSetHypothesis()).compareTo(typedOther.isSetHypothesis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHypothesis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hypothesis, typedOther.hypothesis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setHypothesis_args(");
      boolean first = true;

      sb.append("hypothesis:");
      if (this.hypothesis == null) {
        sb.append("null");
      } else {
        sb.append(this.hypothesis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hypothesis != null) {
        hypothesis.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setHypothesis_argsStandardSchemeFactory implements SchemeFactory {
      public setHypothesis_argsStandardScheme getScheme() {
        return new setHypothesis_argsStandardScheme();
      }
    }

    private static class setHypothesis_argsStandardScheme extends StandardScheme<setHypothesis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setHypothesis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HYPOTHESIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hypothesis = new Passage();
                struct.hypothesis.read(iprot);
                struct.setHypothesisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setHypothesis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hypothesis != null) {
          oprot.writeFieldBegin(HYPOTHESIS_FIELD_DESC);
          struct.hypothesis.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setHypothesis_argsTupleSchemeFactory implements SchemeFactory {
      public setHypothesis_argsTupleScheme getScheme() {
        return new setHypothesis_argsTupleScheme();
      }
    }

    private static class setHypothesis_argsTupleScheme extends TupleScheme<setHypothesis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHypothesis()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHypothesis()) {
          struct.hypothesis.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setHypothesis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hypothesis = new Passage();
          struct.hypothesis.read(iprot);
          struct.setHypothesisIsSet(true);
        }
      }
    }

  }

  public static class setHypothesis_result implements org.apache.thrift.TBase<setHypothesis_result, setHypothesis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setHypothesis_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setHypothesis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setHypothesis_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setHypothesis_result.class, metaDataMap);
    }

    public setHypothesis_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setHypothesis_result(setHypothesis_result other) {
    }

    public setHypothesis_result deepCopy() {
      return new setHypothesis_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHypothesis_result)
        return this.equals((setHypothesis_result)that);
      return false;
    }

    public boolean equals(setHypothesis_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setHypothesis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setHypothesis_result typedOther = (setHypothesis_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setHypothesis_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setHypothesis_resultStandardSchemeFactory implements SchemeFactory {
      public setHypothesis_resultStandardScheme getScheme() {
        return new setHypothesis_resultStandardScheme();
      }
    }

    private static class setHypothesis_resultStandardScheme extends StandardScheme<setHypothesis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setHypothesis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setHypothesis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setHypothesis_resultTupleSchemeFactory implements SchemeFactory {
      public setHypothesis_resultTupleScheme getScheme() {
        return new setHypothesis_resultTupleScheme();
      }
    }

    private static class setHypothesis_resultTupleScheme extends TupleScheme<setHypothesis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setHypothesis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setJudgmentDistribution_args implements org.apache.thrift.TBase<setJudgmentDistribution_args, setJudgmentDistribution_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setJudgmentDistribution_args");

    private static final org.apache.thrift.protocol.TField JUDGMENT_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("judgmentDistribution", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setJudgmentDistribution_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setJudgmentDistribution_argsTupleSchemeFactory());
    }

    public Map<EntailmentJudgment,Double> judgmentDistribution; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JUDGMENT_DISTRIBUTION((short)1, "judgmentDistribution");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JUDGMENT_DISTRIBUTION
            return JUDGMENT_DISTRIBUTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JUDGMENT_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("judgmentDistribution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EntailmentJudgment.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setJudgmentDistribution_args.class, metaDataMap);
    }

    public setJudgmentDistribution_args() {
    }

    public setJudgmentDistribution_args(
      Map<EntailmentJudgment,Double> judgmentDistribution)
    {
      this();
      this.judgmentDistribution = judgmentDistribution;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setJudgmentDistribution_args(setJudgmentDistribution_args other) {
      if (other.isSetJudgmentDistribution()) {
        Map<EntailmentJudgment,Double> __this__judgmentDistribution = new HashMap<EntailmentJudgment,Double>();
        for (Map.Entry<EntailmentJudgment, Double> other_element : other.judgmentDistribution.entrySet()) {

          EntailmentJudgment other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          EntailmentJudgment __this__judgmentDistribution_copy_key = other_element_key;

          Double __this__judgmentDistribution_copy_value = other_element_value;

          __this__judgmentDistribution.put(__this__judgmentDistribution_copy_key, __this__judgmentDistribution_copy_value);
        }
        this.judgmentDistribution = __this__judgmentDistribution;
      }
    }

    public setJudgmentDistribution_args deepCopy() {
      return new setJudgmentDistribution_args(this);
    }

    @Override
    public void clear() {
      this.judgmentDistribution = null;
    }

    public int getJudgmentDistributionSize() {
      return (this.judgmentDistribution == null) ? 0 : this.judgmentDistribution.size();
    }

    public void putToJudgmentDistribution(EntailmentJudgment key, double val) {
      if (this.judgmentDistribution == null) {
        this.judgmentDistribution = new HashMap<EntailmentJudgment,Double>();
      }
      this.judgmentDistribution.put(key, val);
    }

    public Map<EntailmentJudgment,Double> getJudgmentDistribution() {
      return this.judgmentDistribution;
    }

    public setJudgmentDistribution_args setJudgmentDistribution(Map<EntailmentJudgment,Double> judgmentDistribution) {
      this.judgmentDistribution = judgmentDistribution;
      return this;
    }

    public void unsetJudgmentDistribution() {
      this.judgmentDistribution = null;
    }

    /** Returns true if field judgmentDistribution is set (has been assigned a value) and false otherwise */
    public boolean isSetJudgmentDistribution() {
      return this.judgmentDistribution != null;
    }

    public void setJudgmentDistributionIsSet(boolean value) {
      if (!value) {
        this.judgmentDistribution = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JUDGMENT_DISTRIBUTION:
        if (value == null) {
          unsetJudgmentDistribution();
        } else {
          setJudgmentDistribution((Map<EntailmentJudgment,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JUDGMENT_DISTRIBUTION:
        return getJudgmentDistribution();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JUDGMENT_DISTRIBUTION:
        return isSetJudgmentDistribution();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setJudgmentDistribution_args)
        return this.equals((setJudgmentDistribution_args)that);
      return false;
    }

    public boolean equals(setJudgmentDistribution_args that) {
      if (that == null)
        return false;

      boolean this_present_judgmentDistribution = true && this.isSetJudgmentDistribution();
      boolean that_present_judgmentDistribution = true && that.isSetJudgmentDistribution();
      if (this_present_judgmentDistribution || that_present_judgmentDistribution) {
        if (!(this_present_judgmentDistribution && that_present_judgmentDistribution))
          return false;
        if (!this.judgmentDistribution.equals(that.judgmentDistribution))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setJudgmentDistribution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setJudgmentDistribution_args typedOther = (setJudgmentDistribution_args)other;

      lastComparison = Boolean.valueOf(isSetJudgmentDistribution()).compareTo(typedOther.isSetJudgmentDistribution());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJudgmentDistribution()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judgmentDistribution, typedOther.judgmentDistribution);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setJudgmentDistribution_args(");
      boolean first = true;

      sb.append("judgmentDistribution:");
      if (this.judgmentDistribution == null) {
        sb.append("null");
      } else {
        sb.append(this.judgmentDistribution);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setJudgmentDistribution_argsStandardSchemeFactory implements SchemeFactory {
      public setJudgmentDistribution_argsStandardScheme getScheme() {
        return new setJudgmentDistribution_argsStandardScheme();
      }
    }

    private static class setJudgmentDistribution_argsStandardScheme extends StandardScheme<setJudgmentDistribution_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JUDGMENT_DISTRIBUTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map846 = iprot.readMapBegin();
                  struct.judgmentDistribution = new HashMap<EntailmentJudgment,Double>(2*_map846.size);
                  for (int _i847 = 0; _i847 < _map846.size; ++_i847)
                  {
                    EntailmentJudgment _key848; // required
                    double _val849; // required
                    _key848 = EntailmentJudgment.findByValue(iprot.readI32());
                    _val849 = iprot.readDouble();
                    struct.judgmentDistribution.put(_key848, _val849);
                  }
                  iprot.readMapEnd();
                }
                struct.setJudgmentDistributionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.judgmentDistribution != null) {
          oprot.writeFieldBegin(JUDGMENT_DISTRIBUTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.judgmentDistribution.size()));
            for (Map.Entry<EntailmentJudgment, Double> _iter850 : struct.judgmentDistribution.entrySet())
            {
              oprot.writeI32(_iter850.getKey().getValue());
              oprot.writeDouble(_iter850.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setJudgmentDistribution_argsTupleSchemeFactory implements SchemeFactory {
      public setJudgmentDistribution_argsTupleScheme getScheme() {
        return new setJudgmentDistribution_argsTupleScheme();
      }
    }

    private static class setJudgmentDistribution_argsTupleScheme extends TupleScheme<setJudgmentDistribution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJudgmentDistribution()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJudgmentDistribution()) {
          {
            oprot.writeI32(struct.judgmentDistribution.size());
            for (Map.Entry<EntailmentJudgment, Double> _iter851 : struct.judgmentDistribution.entrySet())
            {
              oprot.writeI32(_iter851.getKey().getValue());
              oprot.writeDouble(_iter851.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setJudgmentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map852 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.judgmentDistribution = new HashMap<EntailmentJudgment,Double>(2*_map852.size);
            for (int _i853 = 0; _i853 < _map852.size; ++_i853)
            {
              EntailmentJudgment _key854; // required
              double _val855; // required
              _key854 = EntailmentJudgment.findByValue(iprot.readI32());
              _val855 = iprot.readDouble();
              struct.judgmentDistribution.put(_key854, _val855);
            }
          }
          struct.setJudgmentDistributionIsSet(true);
        }
      }
    }

  }

  public static class setJudgmentDistribution_result implements org.apache.thrift.TBase<setJudgmentDistribution_result, setJudgmentDistribution_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setJudgmentDistribution_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setJudgmentDistribution_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setJudgmentDistribution_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setJudgmentDistribution_result.class, metaDataMap);
    }

    public setJudgmentDistribution_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setJudgmentDistribution_result(setJudgmentDistribution_result other) {
    }

    public setJudgmentDistribution_result deepCopy() {
      return new setJudgmentDistribution_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setJudgmentDistribution_result)
        return this.equals((setJudgmentDistribution_result)that);
      return false;
    }

    public boolean equals(setJudgmentDistribution_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setJudgmentDistribution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setJudgmentDistribution_result typedOther = (setJudgmentDistribution_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setJudgmentDistribution_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setJudgmentDistribution_resultStandardSchemeFactory implements SchemeFactory {
      public setJudgmentDistribution_resultStandardScheme getScheme() {
        return new setJudgmentDistribution_resultStandardScheme();
      }
    }

    private static class setJudgmentDistribution_resultStandardScheme extends StandardScheme<setJudgmentDistribution_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setJudgmentDistribution_resultTupleSchemeFactory implements SchemeFactory {
      public setJudgmentDistribution_resultTupleScheme getScheme() {
        return new setJudgmentDistribution_resultTupleScheme();
      }
    }

    private static class setJudgmentDistribution_resultTupleScheme extends TupleScheme<setJudgmentDistribution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setJudgmentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setText_args implements org.apache.thrift.TBase<setText_args, setText_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setText_args");

    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setText_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setText_argsTupleSchemeFactory());
    }

    public Passage text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT((short)1, "text");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setText_args.class, metaDataMap);
    }

    public setText_args() {
    }

    public setText_args(
      Passage text)
    {
      this();
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setText_args(setText_args other) {
      if (other.isSetText()) {
        this.text = new Passage(other.text);
      }
    }

    public setText_args deepCopy() {
      return new setText_args(this);
    }

    @Override
    public void clear() {
      this.text = null;
    }

    public Passage getText() {
      return this.text;
    }

    public setText_args setText(Passage text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((Passage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT:
        return getText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT:
        return isSetText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setText_args)
        return this.equals((setText_args)that);
      return false;
    }

    public boolean equals(setText_args that) {
      if (that == null)
        return false;

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setText_args typedOther = (setText_args)other;

      lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setText_args(");
      boolean first = true;

      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (text != null) {
        text.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setText_argsStandardSchemeFactory implements SchemeFactory {
      public setText_argsStandardScheme getScheme() {
        return new setText_argsStandardScheme();
      }
    }

    private static class setText_argsStandardScheme extends StandardScheme<setText_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.text = new Passage();
                struct.text.read(iprot);
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setText_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          struct.text.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setText_argsTupleSchemeFactory implements SchemeFactory {
      public setText_argsTupleScheme getScheme() {
        return new setText_argsTupleScheme();
      }
    }

    private static class setText_argsTupleScheme extends TupleScheme<setText_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetText()) {
          struct.text.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.text = new Passage();
          struct.text.read(iprot);
          struct.setTextIsSet(true);
        }
      }
    }

  }

  public static class setText_result implements org.apache.thrift.TBase<setText_result, setText_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setText_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setText_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setText_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setText_result.class, metaDataMap);
    }

    public setText_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setText_result(setText_result other) {
    }

    public setText_result deepCopy() {
      return new setText_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setText_result)
        return this.equals((setText_result)that);
      return false;
    }

    public boolean equals(setText_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setText_result typedOther = (setText_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setText_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setText_resultStandardSchemeFactory implements SchemeFactory {
      public setText_resultStandardScheme getScheme() {
        return new setText_resultStandardScheme();
      }
    }

    private static class setText_resultStandardScheme extends StandardScheme<setText_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setText_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setText_resultTupleSchemeFactory implements SchemeFactory {
      public setText_resultTupleScheme getScheme() {
        return new setText_resultTupleScheme();
      }
    }

    private static class setText_resultTupleScheme extends TupleScheme<setText_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
