/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class HltContentContainer.
 */
public class HltContentContainer implements org.apache.thrift.TBase<HltContentContainer, HltContentContainer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HltContentContainer");

  private static final org.apache.thrift.protocol.TField COMMITTED_BELIEFS_FIELD_DESC = new org.apache.thrift.protocol.TField("committedBeliefs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("coreferences", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DEPENDENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencies", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ENTITY_MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMentions", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField JOINT_RELATION_COREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("jointRelationCoreferences", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NAMED_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("namedEntities", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField OPINIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("opinions", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PART_OF_SPEECHS_FIELD_DESC = new org.apache.thrift.protocol.TField("partOfSpeechs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PASSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("passages", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField POSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("posts", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PROSODIC_PHRASES_FIELD_DESC = new org.apache.thrift.protocol.TField("prosodicPhrases", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField RELATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("relations", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField SARCASMS_FIELD_DESC = new org.apache.thrift.protocol.TField("sarcasms", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField SENTENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("sentences", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField SYNTACTIC_CHUNKS_FIELD_DESC = new org.apache.thrift.protocol.TField("syntacticChunks", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("sessions", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField UTTERANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("utterances", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField INTER_PAUSAL_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("interPausalUnits", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("events", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField EVENT_RELATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventRelations", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HltContentContainerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HltContentContainerTupleSchemeFactory());
  }

  /**
   * The headline
   */
  public List<CommittedBelief> committedBeliefs; // required
  /**
   * The headline
   */
  public List<Coreference> coreferences; // required
  /**
   * The headline
   */
  public List<Dependency> dependencies; // required
  /**
   * The entity mentions
   */
  public List<EntityMention> entityMentions; // required
  /**
   * The joint relation coreferences
   */
  public List<JointRelationCoreference> jointRelationCoreferences; // required
  /**
   * The named entities
   */
  public List<EntityMention> namedEntities; // required
  /**
   * The opinions
   */
  public List<Opinion> opinions; // required
  /**
   * The parts of speech
   */
  public List<PartOfSpeech> partOfSpeechs; // required
  /**
   * The passages
   */
  public List<Passage> passages; // required
  /**
   * The posts
   */
  public List<Post> posts; // required
  /**
   * The prosodic phrases
   */
  public List<ProsodicPhrase> prosodicPhrases; // required
  /**
   * The relations
   */
  public List<Relation> relations; // required
  /**
   * The sarcasms
   */
  public List<Sarcasm> sarcasms; // required
  /**
   * The sentences
   */
  public List<Sentence> sentences; // required
  /**
   * The syntactic chunks
   */
  public List<SyntacticChunk> syntacticChunks; // required
  /**
   * The sessions
   */
  public List<Session> sessions; // required
  /**
   * The utterances
   */
  public List<Utterance> utterances; // required
  /**
   * The messages
   */
  public List<Message> messages; // required
  /**
   * The interpausal units
   */
  public List<InterPausalUnit> interPausalUnits; // required
  /**
   * The events
   */
  public List<Event> events; // required
  /**
   * The event relations
   */
  public List<EventRelations> eventRelations; // required
  /**
   * The id
   */
  public ID id; // required
  /**
   * The value
   */
  public String value; // required
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The headline
     */
    COMMITTED_BELIEFS((short)1, "committedBeliefs"),
    /**
     * The headline
     */
    COREFERENCES((short)2, "coreferences"),
    /**
     * The headline
     */
    DEPENDENCIES((short)3, "dependencies"),
    /**
     * The entity mentions
     */
    ENTITY_MENTIONS((short)4, "entityMentions"),
    /**
     * The joint relation coreferences
     */
    JOINT_RELATION_COREFERENCES((short)5, "jointRelationCoreferences"),
    /**
     * The named entities
     */
    NAMED_ENTITIES((short)6, "namedEntities"),
    /**
     * The opinions
     */
    OPINIONS((short)7, "opinions"),
    /**
     * The parts of speech
     */
    PART_OF_SPEECHS((short)8, "partOfSpeechs"),
    /**
     * The passages
     */
    PASSAGES((short)9, "passages"),
    /**
     * The posts
     */
    POSTS((short)10, "posts"),
    /**
     * The prosodic phrases
     */
    PROSODIC_PHRASES((short)11, "prosodicPhrases"),
    /**
     * The relations
     */
    RELATIONS((short)12, "relations"),
    /**
     * The sarcasms
     */
    SARCASMS((short)13, "sarcasms"),
    /**
     * The sentences
     */
    SENTENCES((short)14, "sentences"),
    /**
     * The syntactic chunks
     */
    SYNTACTIC_CHUNKS((short)15, "syntacticChunks"),
    /**
     * The sessions
     */
    SESSIONS((short)16, "sessions"),
    /**
     * The utterances
     */
    UTTERANCES((short)17, "utterances"),
    /**
     * The messages
     */
    MESSAGES((short)18, "messages"),
    /**
     * The interpausal units
     */
    INTER_PAUSAL_UNITS((short)19, "interPausalUnits"),
    /**
     * The events
     */
    EVENTS((short)20, "events"),
    /**
     * The event relations
     */
    EVENT_RELATIONS((short)21, "eventRelations"),
    /**
     * The id
     */
    ID((short)22, "id"),
    /**
     * The value
     */
    VALUE((short)23, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)24, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMITTED_BELIEFS
          return COMMITTED_BELIEFS;
        case 2: // COREFERENCES
          return COREFERENCES;
        case 3: // DEPENDENCIES
          return DEPENDENCIES;
        case 4: // ENTITY_MENTIONS
          return ENTITY_MENTIONS;
        case 5: // JOINT_RELATION_COREFERENCES
          return JOINT_RELATION_COREFERENCES;
        case 6: // NAMED_ENTITIES
          return NAMED_ENTITIES;
        case 7: // OPINIONS
          return OPINIONS;
        case 8: // PART_OF_SPEECHS
          return PART_OF_SPEECHS;
        case 9: // PASSAGES
          return PASSAGES;
        case 10: // POSTS
          return POSTS;
        case 11: // PROSODIC_PHRASES
          return PROSODIC_PHRASES;
        case 12: // RELATIONS
          return RELATIONS;
        case 13: // SARCASMS
          return SARCASMS;
        case 14: // SENTENCES
          return SENTENCES;
        case 15: // SYNTACTIC_CHUNKS
          return SYNTACTIC_CHUNKS;
        case 16: // SESSIONS
          return SESSIONS;
        case 17: // UTTERANCES
          return UTTERANCES;
        case 18: // MESSAGES
          return MESSAGES;
        case 19: // INTER_PAUSAL_UNITS
          return INTER_PAUSAL_UNITS;
        case 20: // EVENTS
          return EVENTS;
        case 21: // EVENT_RELATIONS
          return EVENT_RELATIONS;
        case 22: // ID
          return ID;
        case 23: // VALUE
          return VALUE;
        case 24: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMITTED_BELIEFS, new org.apache.thrift.meta_data.FieldMetaData("committedBeliefs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommittedBelief.class))));
    tmpMap.put(_Fields.COREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("coreferences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coreference.class))));
    tmpMap.put(_Fields.DEPENDENCIES, new org.apache.thrift.meta_data.FieldMetaData("dependencies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dependency.class))));
    tmpMap.put(_Fields.ENTITY_MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("entityMentions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
    tmpMap.put(_Fields.JOINT_RELATION_COREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("jointRelationCoreferences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JointRelationCoreference.class))));
    tmpMap.put(_Fields.NAMED_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("namedEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
    tmpMap.put(_Fields.OPINIONS, new org.apache.thrift.meta_data.FieldMetaData("opinions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Opinion.class))));
    tmpMap.put(_Fields.PART_OF_SPEECHS, new org.apache.thrift.meta_data.FieldMetaData("partOfSpeechs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartOfSpeech.class))));
    tmpMap.put(_Fields.PASSAGES, new org.apache.thrift.meta_data.FieldMetaData("passages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class))));
    tmpMap.put(_Fields.POSTS, new org.apache.thrift.meta_data.FieldMetaData("posts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Post.class))));
    tmpMap.put(_Fields.PROSODIC_PHRASES, new org.apache.thrift.meta_data.FieldMetaData("prosodicPhrases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProsodicPhrase.class))));
    tmpMap.put(_Fields.RELATIONS, new org.apache.thrift.meta_data.FieldMetaData("relations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Relation.class))));
    tmpMap.put(_Fields.SARCASMS, new org.apache.thrift.meta_data.FieldMetaData("sarcasms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sarcasm.class))));
    tmpMap.put(_Fields.SENTENCES, new org.apache.thrift.meta_data.FieldMetaData("sentences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sentence.class))));
    tmpMap.put(_Fields.SYNTACTIC_CHUNKS, new org.apache.thrift.meta_data.FieldMetaData("syntacticChunks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SyntacticChunk.class))));
    tmpMap.put(_Fields.SESSIONS, new org.apache.thrift.meta_data.FieldMetaData("sessions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class))));
    tmpMap.put(_Fields.UTTERANCES, new org.apache.thrift.meta_data.FieldMetaData("utterances", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Utterance.class))));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class))));
    tmpMap.put(_Fields.INTER_PAUSAL_UNITS, new org.apache.thrift.meta_data.FieldMetaData("interPausalUnits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterPausalUnit.class))));
    tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("events", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class))));
    tmpMap.put(_Fields.EVENT_RELATIONS, new org.apache.thrift.meta_data.FieldMetaData("eventRelations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventRelations.class))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HltContentContainer.class, metaDataMap);
  }

  public HltContentContainer() {
  }

  public HltContentContainer(
    List<CommittedBelief> committedBeliefs,
    List<Coreference> coreferences,
    List<Dependency> dependencies,
    List<EntityMention> entityMentions,
    List<JointRelationCoreference> jointRelationCoreferences,
    List<EntityMention> namedEntities,
    List<Opinion> opinions,
    List<PartOfSpeech> partOfSpeechs,
    List<Passage> passages,
    List<Post> posts,
    List<ProsodicPhrase> prosodicPhrases,
    List<Relation> relations,
    List<Sarcasm> sarcasms,
    List<Sentence> sentences,
    List<SyntacticChunk> syntacticChunks,
    List<Session> sessions,
    List<Utterance> utterances,
    List<Message> messages,
    List<InterPausalUnit> interPausalUnits,
    List<Event> events,
    List<EventRelations> eventRelations,
    ID id,
    String value)
  {
    this();
    this.committedBeliefs = committedBeliefs;
    this.coreferences = coreferences;
    this.dependencies = dependencies;
    this.entityMentions = entityMentions;
    this.jointRelationCoreferences = jointRelationCoreferences;
    this.namedEntities = namedEntities;
    this.opinions = opinions;
    this.partOfSpeechs = partOfSpeechs;
    this.passages = passages;
    this.posts = posts;
    this.prosodicPhrases = prosodicPhrases;
    this.relations = relations;
    this.sarcasms = sarcasms;
    this.sentences = sentences;
    this.syntacticChunks = syntacticChunks;
    this.sessions = sessions;
    this.utterances = utterances;
    this.messages = messages;
    this.interPausalUnits = interPausalUnits;
    this.events = events;
    this.eventRelations = eventRelations;
    this.id = id;
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HltContentContainer(HltContentContainer other) {
    if (other.isSetCommittedBeliefs()) {
      List<CommittedBelief> __this__committedBeliefs = new ArrayList<CommittedBelief>();
      for (CommittedBelief other_element : other.committedBeliefs) {
        __this__committedBeliefs.add(new CommittedBelief(other_element));
      }
      this.committedBeliefs = __this__committedBeliefs;
    }
    if (other.isSetCoreferences()) {
      List<Coreference> __this__coreferences = new ArrayList<Coreference>();
      for (Coreference other_element : other.coreferences) {
        __this__coreferences.add(new Coreference(other_element));
      }
      this.coreferences = __this__coreferences;
    }
    if (other.isSetDependencies()) {
      List<Dependency> __this__dependencies = new ArrayList<Dependency>();
      for (Dependency other_element : other.dependencies) {
        __this__dependencies.add(new Dependency(other_element));
      }
      this.dependencies = __this__dependencies;
    }
    if (other.isSetEntityMentions()) {
      List<EntityMention> __this__entityMentions = new ArrayList<EntityMention>();
      for (EntityMention other_element : other.entityMentions) {
        __this__entityMentions.add(new EntityMention(other_element));
      }
      this.entityMentions = __this__entityMentions;
    }
    if (other.isSetJointRelationCoreferences()) {
      List<JointRelationCoreference> __this__jointRelationCoreferences = new ArrayList<JointRelationCoreference>();
      for (JointRelationCoreference other_element : other.jointRelationCoreferences) {
        __this__jointRelationCoreferences.add(new JointRelationCoreference(other_element));
      }
      this.jointRelationCoreferences = __this__jointRelationCoreferences;
    }
    if (other.isSetNamedEntities()) {
      List<EntityMention> __this__namedEntities = new ArrayList<EntityMention>();
      for (EntityMention other_element : other.namedEntities) {
        __this__namedEntities.add(new EntityMention(other_element));
      }
      this.namedEntities = __this__namedEntities;
    }
    if (other.isSetOpinions()) {
      List<Opinion> __this__opinions = new ArrayList<Opinion>();
      for (Opinion other_element : other.opinions) {
        __this__opinions.add(new Opinion(other_element));
      }
      this.opinions = __this__opinions;
    }
    if (other.isSetPartOfSpeechs()) {
      List<PartOfSpeech> __this__partOfSpeechs = new ArrayList<PartOfSpeech>();
      for (PartOfSpeech other_element : other.partOfSpeechs) {
        __this__partOfSpeechs.add(new PartOfSpeech(other_element));
      }
      this.partOfSpeechs = __this__partOfSpeechs;
    }
    if (other.isSetPassages()) {
      List<Passage> __this__passages = new ArrayList<Passage>();
      for (Passage other_element : other.passages) {
        __this__passages.add(new Passage(other_element));
      }
      this.passages = __this__passages;
    }
    if (other.isSetPosts()) {
      List<Post> __this__posts = new ArrayList<Post>();
      for (Post other_element : other.posts) {
        __this__posts.add(new Post(other_element));
      }
      this.posts = __this__posts;
    }
    if (other.isSetProsodicPhrases()) {
      List<ProsodicPhrase> __this__prosodicPhrases = new ArrayList<ProsodicPhrase>();
      for (ProsodicPhrase other_element : other.prosodicPhrases) {
        __this__prosodicPhrases.add(new ProsodicPhrase(other_element));
      }
      this.prosodicPhrases = __this__prosodicPhrases;
    }
    if (other.isSetRelations()) {
      List<Relation> __this__relations = new ArrayList<Relation>();
      for (Relation other_element : other.relations) {
        __this__relations.add(new Relation(other_element));
      }
      this.relations = __this__relations;
    }
    if (other.isSetSarcasms()) {
      List<Sarcasm> __this__sarcasms = new ArrayList<Sarcasm>();
      for (Sarcasm other_element : other.sarcasms) {
        __this__sarcasms.add(new Sarcasm(other_element));
      }
      this.sarcasms = __this__sarcasms;
    }
    if (other.isSetSentences()) {
      List<Sentence> __this__sentences = new ArrayList<Sentence>();
      for (Sentence other_element : other.sentences) {
        __this__sentences.add(new Sentence(other_element));
      }
      this.sentences = __this__sentences;
    }
    if (other.isSetSyntacticChunks()) {
      List<SyntacticChunk> __this__syntacticChunks = new ArrayList<SyntacticChunk>();
      for (SyntacticChunk other_element : other.syntacticChunks) {
        __this__syntacticChunks.add(new SyntacticChunk(other_element));
      }
      this.syntacticChunks = __this__syntacticChunks;
    }
    if (other.isSetSessions()) {
      List<Session> __this__sessions = new ArrayList<Session>();
      for (Session other_element : other.sessions) {
        __this__sessions.add(new Session(other_element));
      }
      this.sessions = __this__sessions;
    }
    if (other.isSetUtterances()) {
      List<Utterance> __this__utterances = new ArrayList<Utterance>();
      for (Utterance other_element : other.utterances) {
        __this__utterances.add(new Utterance(other_element));
      }
      this.utterances = __this__utterances;
    }
    if (other.isSetMessages()) {
      List<Message> __this__messages = new ArrayList<Message>();
      for (Message other_element : other.messages) {
        __this__messages.add(new Message(other_element));
      }
      this.messages = __this__messages;
    }
    if (other.isSetInterPausalUnits()) {
      List<InterPausalUnit> __this__interPausalUnits = new ArrayList<InterPausalUnit>();
      for (InterPausalUnit other_element : other.interPausalUnits) {
        __this__interPausalUnits.add(new InterPausalUnit(other_element));
      }
      this.interPausalUnits = __this__interPausalUnits;
    }
    if (other.isSetEvents()) {
      List<Event> __this__events = new ArrayList<Event>();
      for (Event other_element : other.events) {
        __this__events.add(new Event(other_element));
      }
      this.events = __this__events;
    }
    if (other.isSetEventRelations()) {
      List<EventRelations> __this__eventRelations = new ArrayList<EventRelations>();
      for (EventRelations other_element : other.eventRelations) {
        __this__eventRelations.add(new EventRelations(other_element));
      }
      this.eventRelations = __this__eventRelations;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public HltContentContainer deepCopy() {
    return new HltContentContainer(this);
  }

  @Override
  public void clear() {
    this.committedBeliefs = null;
    this.coreferences = null;
    this.dependencies = null;
    this.entityMentions = null;
    this.jointRelationCoreferences = null;
    this.namedEntities = null;
    this.opinions = null;
    this.partOfSpeechs = null;
    this.passages = null;
    this.posts = null;
    this.prosodicPhrases = null;
    this.relations = null;
    this.sarcasms = null;
    this.sentences = null;
    this.syntacticChunks = null;
    this.sessions = null;
    this.utterances = null;
    this.messages = null;
    this.interPausalUnits = null;
    this.events = null;
    this.eventRelations = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  public int getCommittedBeliefsSize() {
    return (this.committedBeliefs == null) ? 0 : this.committedBeliefs.size();
  }

  public java.util.Iterator<CommittedBelief> getCommittedBeliefsIterator() {
    return (this.committedBeliefs == null) ? null : this.committedBeliefs.iterator();
  }

  public void addToCommittedBeliefs(CommittedBelief elem) {
    if (this.committedBeliefs == null) {
      this.committedBeliefs = new ArrayList<CommittedBelief>();
    }
    this.committedBeliefs.add(elem);
  }

  /**
   * The headline
   */
  public List<CommittedBelief> getCommittedBeliefs() {
    return this.committedBeliefs;
  }

  /**
   * The headline
   */
  public HltContentContainer setCommittedBeliefs(List<CommittedBelief> committedBeliefs) {
    this.committedBeliefs = committedBeliefs;
    return this;
  }

  public void unsetCommittedBeliefs() {
    this.committedBeliefs = null;
  }

  /** Returns true if field committedBeliefs is set (has been assigned a value) and false otherwise */
  public boolean isSetCommittedBeliefs() {
    return this.committedBeliefs != null;
  }

  public void setCommittedBeliefsIsSet(boolean value) {
    if (!value) {
      this.committedBeliefs = null;
    }
  }

  public int getCoreferencesSize() {
    return (this.coreferences == null) ? 0 : this.coreferences.size();
  }

  public java.util.Iterator<Coreference> getCoreferencesIterator() {
    return (this.coreferences == null) ? null : this.coreferences.iterator();
  }

  public void addToCoreferences(Coreference elem) {
    if (this.coreferences == null) {
      this.coreferences = new ArrayList<Coreference>();
    }
    this.coreferences.add(elem);
  }

  /**
   * The headline
   */
  public List<Coreference> getCoreferences() {
    return this.coreferences;
  }

  /**
   * The headline
   */
  public HltContentContainer setCoreferences(List<Coreference> coreferences) {
    this.coreferences = coreferences;
    return this;
  }

  public void unsetCoreferences() {
    this.coreferences = null;
  }

  /** Returns true if field coreferences is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreferences() {
    return this.coreferences != null;
  }

  public void setCoreferencesIsSet(boolean value) {
    if (!value) {
      this.coreferences = null;
    }
  }

  public int getDependenciesSize() {
    return (this.dependencies == null) ? 0 : this.dependencies.size();
  }

  public java.util.Iterator<Dependency> getDependenciesIterator() {
    return (this.dependencies == null) ? null : this.dependencies.iterator();
  }

  public void addToDependencies(Dependency elem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<Dependency>();
    }
    this.dependencies.add(elem);
  }

  /**
   * The headline
   */
  public List<Dependency> getDependencies() {
    return this.dependencies;
  }

  /**
   * The headline
   */
  public HltContentContainer setDependencies(List<Dependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public void unsetDependencies() {
    this.dependencies = null;
  }

  /** Returns true if field dependencies is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencies() {
    return this.dependencies != null;
  }

  public void setDependenciesIsSet(boolean value) {
    if (!value) {
      this.dependencies = null;
    }
  }

  public int getEntityMentionsSize() {
    return (this.entityMentions == null) ? 0 : this.entityMentions.size();
  }

  public java.util.Iterator<EntityMention> getEntityMentionsIterator() {
    return (this.entityMentions == null) ? null : this.entityMentions.iterator();
  }

  public void addToEntityMentions(EntityMention elem) {
    if (this.entityMentions == null) {
      this.entityMentions = new ArrayList<EntityMention>();
    }
    this.entityMentions.add(elem);
  }

  /**
   * The entity mentions
   */
  public List<EntityMention> getEntityMentions() {
    return this.entityMentions;
  }

  /**
   * The entity mentions
   */
  public HltContentContainer setEntityMentions(List<EntityMention> entityMentions) {
    this.entityMentions = entityMentions;
    return this;
  }

  public void unsetEntityMentions() {
    this.entityMentions = null;
  }

  /** Returns true if field entityMentions is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityMentions() {
    return this.entityMentions != null;
  }

  public void setEntityMentionsIsSet(boolean value) {
    if (!value) {
      this.entityMentions = null;
    }
  }

  public int getJointRelationCoreferencesSize() {
    return (this.jointRelationCoreferences == null) ? 0 : this.jointRelationCoreferences.size();
  }

  public java.util.Iterator<JointRelationCoreference> getJointRelationCoreferencesIterator() {
    return (this.jointRelationCoreferences == null) ? null : this.jointRelationCoreferences.iterator();
  }

  public void addToJointRelationCoreferences(JointRelationCoreference elem) {
    if (this.jointRelationCoreferences == null) {
      this.jointRelationCoreferences = new ArrayList<JointRelationCoreference>();
    }
    this.jointRelationCoreferences.add(elem);
  }

  /**
   * The joint relation coreferences
   */
  public List<JointRelationCoreference> getJointRelationCoreferences() {
    return this.jointRelationCoreferences;
  }

  /**
   * The joint relation coreferences
   */
  public HltContentContainer setJointRelationCoreferences(List<JointRelationCoreference> jointRelationCoreferences) {
    this.jointRelationCoreferences = jointRelationCoreferences;
    return this;
  }

  public void unsetJointRelationCoreferences() {
    this.jointRelationCoreferences = null;
  }

  /** Returns true if field jointRelationCoreferences is set (has been assigned a value) and false otherwise */
  public boolean isSetJointRelationCoreferences() {
    return this.jointRelationCoreferences != null;
  }

  public void setJointRelationCoreferencesIsSet(boolean value) {
    if (!value) {
      this.jointRelationCoreferences = null;
    }
  }

  public int getNamedEntitiesSize() {
    return (this.namedEntities == null) ? 0 : this.namedEntities.size();
  }

  public java.util.Iterator<EntityMention> getNamedEntitiesIterator() {
    return (this.namedEntities == null) ? null : this.namedEntities.iterator();
  }

  public void addToNamedEntities(EntityMention elem) {
    if (this.namedEntities == null) {
      this.namedEntities = new ArrayList<EntityMention>();
    }
    this.namedEntities.add(elem);
  }

  /**
   * The named entities
   */
  public List<EntityMention> getNamedEntities() {
    return this.namedEntities;
  }

  /**
   * The named entities
   */
  public HltContentContainer setNamedEntities(List<EntityMention> namedEntities) {
    this.namedEntities = namedEntities;
    return this;
  }

  public void unsetNamedEntities() {
    this.namedEntities = null;
  }

  /** Returns true if field namedEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetNamedEntities() {
    return this.namedEntities != null;
  }

  public void setNamedEntitiesIsSet(boolean value) {
    if (!value) {
      this.namedEntities = null;
    }
  }

  public int getOpinionsSize() {
    return (this.opinions == null) ? 0 : this.opinions.size();
  }

  public java.util.Iterator<Opinion> getOpinionsIterator() {
    return (this.opinions == null) ? null : this.opinions.iterator();
  }

  public void addToOpinions(Opinion elem) {
    if (this.opinions == null) {
      this.opinions = new ArrayList<Opinion>();
    }
    this.opinions.add(elem);
  }

  /**
   * The opinions
   */
  public List<Opinion> getOpinions() {
    return this.opinions;
  }

  /**
   * The opinions
   */
  public HltContentContainer setOpinions(List<Opinion> opinions) {
    this.opinions = opinions;
    return this;
  }

  public void unsetOpinions() {
    this.opinions = null;
  }

  /** Returns true if field opinions is set (has been assigned a value) and false otherwise */
  public boolean isSetOpinions() {
    return this.opinions != null;
  }

  public void setOpinionsIsSet(boolean value) {
    if (!value) {
      this.opinions = null;
    }
  }

  public int getPartOfSpeechsSize() {
    return (this.partOfSpeechs == null) ? 0 : this.partOfSpeechs.size();
  }

  public java.util.Iterator<PartOfSpeech> getPartOfSpeechsIterator() {
    return (this.partOfSpeechs == null) ? null : this.partOfSpeechs.iterator();
  }

  public void addToPartOfSpeechs(PartOfSpeech elem) {
    if (this.partOfSpeechs == null) {
      this.partOfSpeechs = new ArrayList<PartOfSpeech>();
    }
    this.partOfSpeechs.add(elem);
  }

  /**
   * The parts of speech
   */
  public List<PartOfSpeech> getPartOfSpeechs() {
    return this.partOfSpeechs;
  }

  /**
   * The parts of speech
   */
  public HltContentContainer setPartOfSpeechs(List<PartOfSpeech> partOfSpeechs) {
    this.partOfSpeechs = partOfSpeechs;
    return this;
  }

  public void unsetPartOfSpeechs() {
    this.partOfSpeechs = null;
  }

  /** Returns true if field partOfSpeechs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartOfSpeechs() {
    return this.partOfSpeechs != null;
  }

  public void setPartOfSpeechsIsSet(boolean value) {
    if (!value) {
      this.partOfSpeechs = null;
    }
  }

  public int getPassagesSize() {
    return (this.passages == null) ? 0 : this.passages.size();
  }

  public java.util.Iterator<Passage> getPassagesIterator() {
    return (this.passages == null) ? null : this.passages.iterator();
  }

  public void addToPassages(Passage elem) {
    if (this.passages == null) {
      this.passages = new ArrayList<Passage>();
    }
    this.passages.add(elem);
  }

  /**
   * The passages
   */
  public List<Passage> getPassages() {
    return this.passages;
  }

  /**
   * The passages
   */
  public HltContentContainer setPassages(List<Passage> passages) {
    this.passages = passages;
    return this;
  }

  public void unsetPassages() {
    this.passages = null;
  }

  /** Returns true if field passages is set (has been assigned a value) and false otherwise */
  public boolean isSetPassages() {
    return this.passages != null;
  }

  public void setPassagesIsSet(boolean value) {
    if (!value) {
      this.passages = null;
    }
  }

  public int getPostsSize() {
    return (this.posts == null) ? 0 : this.posts.size();
  }

  public java.util.Iterator<Post> getPostsIterator() {
    return (this.posts == null) ? null : this.posts.iterator();
  }

  public void addToPosts(Post elem) {
    if (this.posts == null) {
      this.posts = new ArrayList<Post>();
    }
    this.posts.add(elem);
  }

  /**
   * The posts
   */
  public List<Post> getPosts() {
    return this.posts;
  }

  /**
   * The posts
   */
  public HltContentContainer setPosts(List<Post> posts) {
    this.posts = posts;
    return this;
  }

  public void unsetPosts() {
    this.posts = null;
  }

  /** Returns true if field posts is set (has been assigned a value) and false otherwise */
  public boolean isSetPosts() {
    return this.posts != null;
  }

  public void setPostsIsSet(boolean value) {
    if (!value) {
      this.posts = null;
    }
  }

  public int getProsodicPhrasesSize() {
    return (this.prosodicPhrases == null) ? 0 : this.prosodicPhrases.size();
  }

  public java.util.Iterator<ProsodicPhrase> getProsodicPhrasesIterator() {
    return (this.prosodicPhrases == null) ? null : this.prosodicPhrases.iterator();
  }

  public void addToProsodicPhrases(ProsodicPhrase elem) {
    if (this.prosodicPhrases == null) {
      this.prosodicPhrases = new ArrayList<ProsodicPhrase>();
    }
    this.prosodicPhrases.add(elem);
  }

  /**
   * The prosodic phrases
   */
  public List<ProsodicPhrase> getProsodicPhrases() {
    return this.prosodicPhrases;
  }

  /**
   * The prosodic phrases
   */
  public HltContentContainer setProsodicPhrases(List<ProsodicPhrase> prosodicPhrases) {
    this.prosodicPhrases = prosodicPhrases;
    return this;
  }

  public void unsetProsodicPhrases() {
    this.prosodicPhrases = null;
  }

  /** Returns true if field prosodicPhrases is set (has been assigned a value) and false otherwise */
  public boolean isSetProsodicPhrases() {
    return this.prosodicPhrases != null;
  }

  public void setProsodicPhrasesIsSet(boolean value) {
    if (!value) {
      this.prosodicPhrases = null;
    }
  }

  public int getRelationsSize() {
    return (this.relations == null) ? 0 : this.relations.size();
  }

  public java.util.Iterator<Relation> getRelationsIterator() {
    return (this.relations == null) ? null : this.relations.iterator();
  }

  public void addToRelations(Relation elem) {
    if (this.relations == null) {
      this.relations = new ArrayList<Relation>();
    }
    this.relations.add(elem);
  }

  /**
   * The relations
   */
  public List<Relation> getRelations() {
    return this.relations;
  }

  /**
   * The relations
   */
  public HltContentContainer setRelations(List<Relation> relations) {
    this.relations = relations;
    return this;
  }

  public void unsetRelations() {
    this.relations = null;
  }

  /** Returns true if field relations is set (has been assigned a value) and false otherwise */
  public boolean isSetRelations() {
    return this.relations != null;
  }

  public void setRelationsIsSet(boolean value) {
    if (!value) {
      this.relations = null;
    }
  }

  public int getSarcasmsSize() {
    return (this.sarcasms == null) ? 0 : this.sarcasms.size();
  }

  public java.util.Iterator<Sarcasm> getSarcasmsIterator() {
    return (this.sarcasms == null) ? null : this.sarcasms.iterator();
  }

  public void addToSarcasms(Sarcasm elem) {
    if (this.sarcasms == null) {
      this.sarcasms = new ArrayList<Sarcasm>();
    }
    this.sarcasms.add(elem);
  }

  /**
   * The sarcasms
   */
  public List<Sarcasm> getSarcasms() {
    return this.sarcasms;
  }

  /**
   * The sarcasms
   */
  public HltContentContainer setSarcasms(List<Sarcasm> sarcasms) {
    this.sarcasms = sarcasms;
    return this;
  }

  public void unsetSarcasms() {
    this.sarcasms = null;
  }

  /** Returns true if field sarcasms is set (has been assigned a value) and false otherwise */
  public boolean isSetSarcasms() {
    return this.sarcasms != null;
  }

  public void setSarcasmsIsSet(boolean value) {
    if (!value) {
      this.sarcasms = null;
    }
  }

  public int getSentencesSize() {
    return (this.sentences == null) ? 0 : this.sentences.size();
  }

  public java.util.Iterator<Sentence> getSentencesIterator() {
    return (this.sentences == null) ? null : this.sentences.iterator();
  }

  public void addToSentences(Sentence elem) {
    if (this.sentences == null) {
      this.sentences = new ArrayList<Sentence>();
    }
    this.sentences.add(elem);
  }

  /**
   * The sentences
   */
  public List<Sentence> getSentences() {
    return this.sentences;
  }

  /**
   * The sentences
   */
  public HltContentContainer setSentences(List<Sentence> sentences) {
    this.sentences = sentences;
    return this;
  }

  public void unsetSentences() {
    this.sentences = null;
  }

  /** Returns true if field sentences is set (has been assigned a value) and false otherwise */
  public boolean isSetSentences() {
    return this.sentences != null;
  }

  public void setSentencesIsSet(boolean value) {
    if (!value) {
      this.sentences = null;
    }
  }

  public int getSyntacticChunksSize() {
    return (this.syntacticChunks == null) ? 0 : this.syntacticChunks.size();
  }

  public java.util.Iterator<SyntacticChunk> getSyntacticChunksIterator() {
    return (this.syntacticChunks == null) ? null : this.syntacticChunks.iterator();
  }

  public void addToSyntacticChunks(SyntacticChunk elem) {
    if (this.syntacticChunks == null) {
      this.syntacticChunks = new ArrayList<SyntacticChunk>();
    }
    this.syntacticChunks.add(elem);
  }

  /**
   * The syntactic chunks
   */
  public List<SyntacticChunk> getSyntacticChunks() {
    return this.syntacticChunks;
  }

  /**
   * The syntactic chunks
   */
  public HltContentContainer setSyntacticChunks(List<SyntacticChunk> syntacticChunks) {
    this.syntacticChunks = syntacticChunks;
    return this;
  }

  public void unsetSyntacticChunks() {
    this.syntacticChunks = null;
  }

  /** Returns true if field syntacticChunks is set (has been assigned a value) and false otherwise */
  public boolean isSetSyntacticChunks() {
    return this.syntacticChunks != null;
  }

  public void setSyntacticChunksIsSet(boolean value) {
    if (!value) {
      this.syntacticChunks = null;
    }
  }

  public int getSessionsSize() {
    return (this.sessions == null) ? 0 : this.sessions.size();
  }

  public java.util.Iterator<Session> getSessionsIterator() {
    return (this.sessions == null) ? null : this.sessions.iterator();
  }

  public void addToSessions(Session elem) {
    if (this.sessions == null) {
      this.sessions = new ArrayList<Session>();
    }
    this.sessions.add(elem);
  }

  /**
   * The sessions
   */
  public List<Session> getSessions() {
    return this.sessions;
  }

  /**
   * The sessions
   */
  public HltContentContainer setSessions(List<Session> sessions) {
    this.sessions = sessions;
    return this;
  }

  public void unsetSessions() {
    this.sessions = null;
  }

  /** Returns true if field sessions is set (has been assigned a value) and false otherwise */
  public boolean isSetSessions() {
    return this.sessions != null;
  }

  public void setSessionsIsSet(boolean value) {
    if (!value) {
      this.sessions = null;
    }
  }

  public int getUtterancesSize() {
    return (this.utterances == null) ? 0 : this.utterances.size();
  }

  public java.util.Iterator<Utterance> getUtterancesIterator() {
    return (this.utterances == null) ? null : this.utterances.iterator();
  }

  public void addToUtterances(Utterance elem) {
    if (this.utterances == null) {
      this.utterances = new ArrayList<Utterance>();
    }
    this.utterances.add(elem);
  }

  /**
   * The utterances
   */
  public List<Utterance> getUtterances() {
    return this.utterances;
  }

  /**
   * The utterances
   */
  public HltContentContainer setUtterances(List<Utterance> utterances) {
    this.utterances = utterances;
    return this;
  }

  public void unsetUtterances() {
    this.utterances = null;
  }

  /** Returns true if field utterances is set (has been assigned a value) and false otherwise */
  public boolean isSetUtterances() {
    return this.utterances != null;
  }

  public void setUtterancesIsSet(boolean value) {
    if (!value) {
      this.utterances = null;
    }
  }

  public int getMessagesSize() {
    return (this.messages == null) ? 0 : this.messages.size();
  }

  public java.util.Iterator<Message> getMessagesIterator() {
    return (this.messages == null) ? null : this.messages.iterator();
  }

  public void addToMessages(Message elem) {
    if (this.messages == null) {
      this.messages = new ArrayList<Message>();
    }
    this.messages.add(elem);
  }

  /**
   * The messages
   */
  public List<Message> getMessages() {
    return this.messages;
  }

  /**
   * The messages
   */
  public HltContentContainer setMessages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public void unsetMessages() {
    this.messages = null;
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return this.messages != null;
  }

  public void setMessagesIsSet(boolean value) {
    if (!value) {
      this.messages = null;
    }
  }

  public int getInterPausalUnitsSize() {
    return (this.interPausalUnits == null) ? 0 : this.interPausalUnits.size();
  }

  public java.util.Iterator<InterPausalUnit> getInterPausalUnitsIterator() {
    return (this.interPausalUnits == null) ? null : this.interPausalUnits.iterator();
  }

  public void addToInterPausalUnits(InterPausalUnit elem) {
    if (this.interPausalUnits == null) {
      this.interPausalUnits = new ArrayList<InterPausalUnit>();
    }
    this.interPausalUnits.add(elem);
  }

  /**
   * The interpausal units
   */
  public List<InterPausalUnit> getInterPausalUnits() {
    return this.interPausalUnits;
  }

  /**
   * The interpausal units
   */
  public HltContentContainer setInterPausalUnits(List<InterPausalUnit> interPausalUnits) {
    this.interPausalUnits = interPausalUnits;
    return this;
  }

  public void unsetInterPausalUnits() {
    this.interPausalUnits = null;
  }

  /** Returns true if field interPausalUnits is set (has been assigned a value) and false otherwise */
  public boolean isSetInterPausalUnits() {
    return this.interPausalUnits != null;
  }

  public void setInterPausalUnitsIsSet(boolean value) {
    if (!value) {
      this.interPausalUnits = null;
    }
  }

  public int getEventsSize() {
    return (this.events == null) ? 0 : this.events.size();
  }

  public java.util.Iterator<Event> getEventsIterator() {
    return (this.events == null) ? null : this.events.iterator();
  }

  public void addToEvents(Event elem) {
    if (this.events == null) {
      this.events = new ArrayList<Event>();
    }
    this.events.add(elem);
  }

  /**
   * The events
   */
  public List<Event> getEvents() {
    return this.events;
  }

  /**
   * The events
   */
  public HltContentContainer setEvents(List<Event> events) {
    this.events = events;
    return this;
  }

  public void unsetEvents() {
    this.events = null;
  }

  /** Returns true if field events is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.events = null;
    }
  }

  public int getEventRelationsSize() {
    return (this.eventRelations == null) ? 0 : this.eventRelations.size();
  }

  public java.util.Iterator<EventRelations> getEventRelationsIterator() {
    return (this.eventRelations == null) ? null : this.eventRelations.iterator();
  }

  public void addToEventRelations(EventRelations elem) {
    if (this.eventRelations == null) {
      this.eventRelations = new ArrayList<EventRelations>();
    }
    this.eventRelations.add(elem);
  }

  /**
   * The event relations
   */
  public List<EventRelations> getEventRelations() {
    return this.eventRelations;
  }

  /**
   * The event relations
   */
  public HltContentContainer setEventRelations(List<EventRelations> eventRelations) {
    this.eventRelations = eventRelations;
    return this;
  }

  public void unsetEventRelations() {
    this.eventRelations = null;
  }

  /** Returns true if field eventRelations is set (has been assigned a value) and false otherwise */
  public boolean isSetEventRelations() {
    return this.eventRelations != null;
  }

  public void setEventRelationsIsSet(boolean value) {
    if (!value) {
      this.eventRelations = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public HltContentContainer setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public HltContentContainer setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public HltContentContainer setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMITTED_BELIEFS:
      if (value == null) {
        unsetCommittedBeliefs();
      } else {
        setCommittedBeliefs((List<CommittedBelief>)value);
      }
      break;

    case COREFERENCES:
      if (value == null) {
        unsetCoreferences();
      } else {
        setCoreferences((List<Coreference>)value);
      }
      break;

    case DEPENDENCIES:
      if (value == null) {
        unsetDependencies();
      } else {
        setDependencies((List<Dependency>)value);
      }
      break;

    case ENTITY_MENTIONS:
      if (value == null) {
        unsetEntityMentions();
      } else {
        setEntityMentions((List<EntityMention>)value);
      }
      break;

    case JOINT_RELATION_COREFERENCES:
      if (value == null) {
        unsetJointRelationCoreferences();
      } else {
        setJointRelationCoreferences((List<JointRelationCoreference>)value);
      }
      break;

    case NAMED_ENTITIES:
      if (value == null) {
        unsetNamedEntities();
      } else {
        setNamedEntities((List<EntityMention>)value);
      }
      break;

    case OPINIONS:
      if (value == null) {
        unsetOpinions();
      } else {
        setOpinions((List<Opinion>)value);
      }
      break;

    case PART_OF_SPEECHS:
      if (value == null) {
        unsetPartOfSpeechs();
      } else {
        setPartOfSpeechs((List<PartOfSpeech>)value);
      }
      break;

    case PASSAGES:
      if (value == null) {
        unsetPassages();
      } else {
        setPassages((List<Passage>)value);
      }
      break;

    case POSTS:
      if (value == null) {
        unsetPosts();
      } else {
        setPosts((List<Post>)value);
      }
      break;

    case PROSODIC_PHRASES:
      if (value == null) {
        unsetProsodicPhrases();
      } else {
        setProsodicPhrases((List<ProsodicPhrase>)value);
      }
      break;

    case RELATIONS:
      if (value == null) {
        unsetRelations();
      } else {
        setRelations((List<Relation>)value);
      }
      break;

    case SARCASMS:
      if (value == null) {
        unsetSarcasms();
      } else {
        setSarcasms((List<Sarcasm>)value);
      }
      break;

    case SENTENCES:
      if (value == null) {
        unsetSentences();
      } else {
        setSentences((List<Sentence>)value);
      }
      break;

    case SYNTACTIC_CHUNKS:
      if (value == null) {
        unsetSyntacticChunks();
      } else {
        setSyntacticChunks((List<SyntacticChunk>)value);
      }
      break;

    case SESSIONS:
      if (value == null) {
        unsetSessions();
      } else {
        setSessions((List<Session>)value);
      }
      break;

    case UTTERANCES:
      if (value == null) {
        unsetUtterances();
      } else {
        setUtterances((List<Utterance>)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((List<Message>)value);
      }
      break;

    case INTER_PAUSAL_UNITS:
      if (value == null) {
        unsetInterPausalUnits();
      } else {
        setInterPausalUnits((List<InterPausalUnit>)value);
      }
      break;

    case EVENTS:
      if (value == null) {
        unsetEvents();
      } else {
        setEvents((List<Event>)value);
      }
      break;

    case EVENT_RELATIONS:
      if (value == null) {
        unsetEventRelations();
      } else {
        setEventRelations((List<EventRelations>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMITTED_BELIEFS:
      return getCommittedBeliefs();

    case COREFERENCES:
      return getCoreferences();

    case DEPENDENCIES:
      return getDependencies();

    case ENTITY_MENTIONS:
      return getEntityMentions();

    case JOINT_RELATION_COREFERENCES:
      return getJointRelationCoreferences();

    case NAMED_ENTITIES:
      return getNamedEntities();

    case OPINIONS:
      return getOpinions();

    case PART_OF_SPEECHS:
      return getPartOfSpeechs();

    case PASSAGES:
      return getPassages();

    case POSTS:
      return getPosts();

    case PROSODIC_PHRASES:
      return getProsodicPhrases();

    case RELATIONS:
      return getRelations();

    case SARCASMS:
      return getSarcasms();

    case SENTENCES:
      return getSentences();

    case SYNTACTIC_CHUNKS:
      return getSyntacticChunks();

    case SESSIONS:
      return getSessions();

    case UTTERANCES:
      return getUtterances();

    case MESSAGES:
      return getMessages();

    case INTER_PAUSAL_UNITS:
      return getInterPausalUnits();

    case EVENTS:
      return getEvents();

    case EVENT_RELATIONS:
      return getEventRelations();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMITTED_BELIEFS:
      return isSetCommittedBeliefs();
    case COREFERENCES:
      return isSetCoreferences();
    case DEPENDENCIES:
      return isSetDependencies();
    case ENTITY_MENTIONS:
      return isSetEntityMentions();
    case JOINT_RELATION_COREFERENCES:
      return isSetJointRelationCoreferences();
    case NAMED_ENTITIES:
      return isSetNamedEntities();
    case OPINIONS:
      return isSetOpinions();
    case PART_OF_SPEECHS:
      return isSetPartOfSpeechs();
    case PASSAGES:
      return isSetPassages();
    case POSTS:
      return isSetPosts();
    case PROSODIC_PHRASES:
      return isSetProsodicPhrases();
    case RELATIONS:
      return isSetRelations();
    case SARCASMS:
      return isSetSarcasms();
    case SENTENCES:
      return isSetSentences();
    case SYNTACTIC_CHUNKS:
      return isSetSyntacticChunks();
    case SESSIONS:
      return isSetSessions();
    case UTTERANCES:
      return isSetUtterances();
    case MESSAGES:
      return isSetMessages();
    case INTER_PAUSAL_UNITS:
      return isSetInterPausalUnits();
    case EVENTS:
      return isSetEvents();
    case EVENT_RELATIONS:
      return isSetEventRelations();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HltContentContainer)
      return this.equals((HltContentContainer)that);
    return false;
  }

  public boolean equals(HltContentContainer that) {
    if (that == null)
      return false;

    boolean this_present_committedBeliefs = true && this.isSetCommittedBeliefs();
    boolean that_present_committedBeliefs = true && that.isSetCommittedBeliefs();
    if (this_present_committedBeliefs || that_present_committedBeliefs) {
      if (!(this_present_committedBeliefs && that_present_committedBeliefs))
        return false;
      if (!this.committedBeliefs.equals(that.committedBeliefs))
        return false;
    }

    boolean this_present_coreferences = true && this.isSetCoreferences();
    boolean that_present_coreferences = true && that.isSetCoreferences();
    if (this_present_coreferences || that_present_coreferences) {
      if (!(this_present_coreferences && that_present_coreferences))
        return false;
      if (!this.coreferences.equals(that.coreferences))
        return false;
    }

    boolean this_present_dependencies = true && this.isSetDependencies();
    boolean that_present_dependencies = true && that.isSetDependencies();
    if (this_present_dependencies || that_present_dependencies) {
      if (!(this_present_dependencies && that_present_dependencies))
        return false;
      if (!this.dependencies.equals(that.dependencies))
        return false;
    }

    boolean this_present_entityMentions = true && this.isSetEntityMentions();
    boolean that_present_entityMentions = true && that.isSetEntityMentions();
    if (this_present_entityMentions || that_present_entityMentions) {
      if (!(this_present_entityMentions && that_present_entityMentions))
        return false;
      if (!this.entityMentions.equals(that.entityMentions))
        return false;
    }

    boolean this_present_jointRelationCoreferences = true && this.isSetJointRelationCoreferences();
    boolean that_present_jointRelationCoreferences = true && that.isSetJointRelationCoreferences();
    if (this_present_jointRelationCoreferences || that_present_jointRelationCoreferences) {
      if (!(this_present_jointRelationCoreferences && that_present_jointRelationCoreferences))
        return false;
      if (!this.jointRelationCoreferences.equals(that.jointRelationCoreferences))
        return false;
    }

    boolean this_present_namedEntities = true && this.isSetNamedEntities();
    boolean that_present_namedEntities = true && that.isSetNamedEntities();
    if (this_present_namedEntities || that_present_namedEntities) {
      if (!(this_present_namedEntities && that_present_namedEntities))
        return false;
      if (!this.namedEntities.equals(that.namedEntities))
        return false;
    }

    boolean this_present_opinions = true && this.isSetOpinions();
    boolean that_present_opinions = true && that.isSetOpinions();
    if (this_present_opinions || that_present_opinions) {
      if (!(this_present_opinions && that_present_opinions))
        return false;
      if (!this.opinions.equals(that.opinions))
        return false;
    }

    boolean this_present_partOfSpeechs = true && this.isSetPartOfSpeechs();
    boolean that_present_partOfSpeechs = true && that.isSetPartOfSpeechs();
    if (this_present_partOfSpeechs || that_present_partOfSpeechs) {
      if (!(this_present_partOfSpeechs && that_present_partOfSpeechs))
        return false;
      if (!this.partOfSpeechs.equals(that.partOfSpeechs))
        return false;
    }

    boolean this_present_passages = true && this.isSetPassages();
    boolean that_present_passages = true && that.isSetPassages();
    if (this_present_passages || that_present_passages) {
      if (!(this_present_passages && that_present_passages))
        return false;
      if (!this.passages.equals(that.passages))
        return false;
    }

    boolean this_present_posts = true && this.isSetPosts();
    boolean that_present_posts = true && that.isSetPosts();
    if (this_present_posts || that_present_posts) {
      if (!(this_present_posts && that_present_posts))
        return false;
      if (!this.posts.equals(that.posts))
        return false;
    }

    boolean this_present_prosodicPhrases = true && this.isSetProsodicPhrases();
    boolean that_present_prosodicPhrases = true && that.isSetProsodicPhrases();
    if (this_present_prosodicPhrases || that_present_prosodicPhrases) {
      if (!(this_present_prosodicPhrases && that_present_prosodicPhrases))
        return false;
      if (!this.prosodicPhrases.equals(that.prosodicPhrases))
        return false;
    }

    boolean this_present_relations = true && this.isSetRelations();
    boolean that_present_relations = true && that.isSetRelations();
    if (this_present_relations || that_present_relations) {
      if (!(this_present_relations && that_present_relations))
        return false;
      if (!this.relations.equals(that.relations))
        return false;
    }

    boolean this_present_sarcasms = true && this.isSetSarcasms();
    boolean that_present_sarcasms = true && that.isSetSarcasms();
    if (this_present_sarcasms || that_present_sarcasms) {
      if (!(this_present_sarcasms && that_present_sarcasms))
        return false;
      if (!this.sarcasms.equals(that.sarcasms))
        return false;
    }

    boolean this_present_sentences = true && this.isSetSentences();
    boolean that_present_sentences = true && that.isSetSentences();
    if (this_present_sentences || that_present_sentences) {
      if (!(this_present_sentences && that_present_sentences))
        return false;
      if (!this.sentences.equals(that.sentences))
        return false;
    }

    boolean this_present_syntacticChunks = true && this.isSetSyntacticChunks();
    boolean that_present_syntacticChunks = true && that.isSetSyntacticChunks();
    if (this_present_syntacticChunks || that_present_syntacticChunks) {
      if (!(this_present_syntacticChunks && that_present_syntacticChunks))
        return false;
      if (!this.syntacticChunks.equals(that.syntacticChunks))
        return false;
    }

    boolean this_present_sessions = true && this.isSetSessions();
    boolean that_present_sessions = true && that.isSetSessions();
    if (this_present_sessions || that_present_sessions) {
      if (!(this_present_sessions && that_present_sessions))
        return false;
      if (!this.sessions.equals(that.sessions))
        return false;
    }

    boolean this_present_utterances = true && this.isSetUtterances();
    boolean that_present_utterances = true && that.isSetUtterances();
    if (this_present_utterances || that_present_utterances) {
      if (!(this_present_utterances && that_present_utterances))
        return false;
      if (!this.utterances.equals(that.utterances))
        return false;
    }

    boolean this_present_messages = true && this.isSetMessages();
    boolean that_present_messages = true && that.isSetMessages();
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (!this.messages.equals(that.messages))
        return false;
    }

    boolean this_present_interPausalUnits = true && this.isSetInterPausalUnits();
    boolean that_present_interPausalUnits = true && that.isSetInterPausalUnits();
    if (this_present_interPausalUnits || that_present_interPausalUnits) {
      if (!(this_present_interPausalUnits && that_present_interPausalUnits))
        return false;
      if (!this.interPausalUnits.equals(that.interPausalUnits))
        return false;
    }

    boolean this_present_events = true && this.isSetEvents();
    boolean that_present_events = true && that.isSetEvents();
    if (this_present_events || that_present_events) {
      if (!(this_present_events && that_present_events))
        return false;
      if (!this.events.equals(that.events))
        return false;
    }

    boolean this_present_eventRelations = true && this.isSetEventRelations();
    boolean that_present_eventRelations = true && that.isSetEventRelations();
    if (this_present_eventRelations || that_present_eventRelations) {
      if (!(this_present_eventRelations && that_present_eventRelations))
        return false;
      if (!this.eventRelations.equals(that.eventRelations))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HltContentContainer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HltContentContainer typedOther = (HltContentContainer)other;

    lastComparison = Boolean.valueOf(isSetCommittedBeliefs()).compareTo(typedOther.isSetCommittedBeliefs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommittedBeliefs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committedBeliefs, typedOther.committedBeliefs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoreferences()).compareTo(typedOther.isSetCoreferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreferences, typedOther.coreferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependencies()).compareTo(typedOther.isSetDependencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencies, typedOther.dependencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityMentions()).compareTo(typedOther.isSetEntityMentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityMentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityMentions, typedOther.entityMentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJointRelationCoreferences()).compareTo(typedOther.isSetJointRelationCoreferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointRelationCoreferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointRelationCoreferences, typedOther.jointRelationCoreferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamedEntities()).compareTo(typedOther.isSetNamedEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamedEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namedEntities, typedOther.namedEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpinions()).compareTo(typedOther.isSetOpinions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpinions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinions, typedOther.opinions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartOfSpeechs()).compareTo(typedOther.isSetPartOfSpeechs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartOfSpeechs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partOfSpeechs, typedOther.partOfSpeechs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassages()).compareTo(typedOther.isSetPassages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passages, typedOther.passages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosts()).compareTo(typedOther.isSetPosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posts, typedOther.posts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProsodicPhrases()).compareTo(typedOther.isSetProsodicPhrases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProsodicPhrases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prosodicPhrases, typedOther.prosodicPhrases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelations()).compareTo(typedOther.isSetRelations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relations, typedOther.relations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSarcasms()).compareTo(typedOther.isSetSarcasms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSarcasms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sarcasms, typedOther.sarcasms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentences()).compareTo(typedOther.isSetSentences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentences, typedOther.sentences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyntacticChunks()).compareTo(typedOther.isSetSyntacticChunks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyntacticChunks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syntacticChunks, typedOther.syntacticChunks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessions()).compareTo(typedOther.isSetSessions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessions, typedOther.sessions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtterances()).compareTo(typedOther.isSetUtterances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtterances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utterances, typedOther.utterances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessages()).compareTo(typedOther.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, typedOther.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterPausalUnits()).compareTo(typedOther.isSetInterPausalUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterPausalUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interPausalUnits, typedOther.interPausalUnits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents()).compareTo(typedOther.isSetEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events, typedOther.events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventRelations()).compareTo(typedOther.isSetEventRelations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventRelations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventRelations, typedOther.eventRelations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HltContentContainer(");
    boolean first = true;

    sb.append("committedBeliefs:");
    if (this.committedBeliefs == null) {
      sb.append("null");
    } else {
      sb.append(this.committedBeliefs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coreferences:");
    if (this.coreferences == null) {
      sb.append("null");
    } else {
      sb.append(this.coreferences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dependencies:");
    if (this.dependencies == null) {
      sb.append("null");
    } else {
      sb.append(this.dependencies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entityMentions:");
    if (this.entityMentions == null) {
      sb.append("null");
    } else {
      sb.append(this.entityMentions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointRelationCoreferences:");
    if (this.jointRelationCoreferences == null) {
      sb.append("null");
    } else {
      sb.append(this.jointRelationCoreferences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namedEntities:");
    if (this.namedEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.namedEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opinions:");
    if (this.opinions == null) {
      sb.append("null");
    } else {
      sb.append(this.opinions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partOfSpeechs:");
    if (this.partOfSpeechs == null) {
      sb.append("null");
    } else {
      sb.append(this.partOfSpeechs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passages:");
    if (this.passages == null) {
      sb.append("null");
    } else {
      sb.append(this.passages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("posts:");
    if (this.posts == null) {
      sb.append("null");
    } else {
      sb.append(this.posts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prosodicPhrases:");
    if (this.prosodicPhrases == null) {
      sb.append("null");
    } else {
      sb.append(this.prosodicPhrases);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relations:");
    if (this.relations == null) {
      sb.append("null");
    } else {
      sb.append(this.relations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sarcasms:");
    if (this.sarcasms == null) {
      sb.append("null");
    } else {
      sb.append(this.sarcasms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentences:");
    if (this.sentences == null) {
      sb.append("null");
    } else {
      sb.append(this.sentences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syntacticChunks:");
    if (this.syntacticChunks == null) {
      sb.append("null");
    } else {
      sb.append(this.syntacticChunks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessions:");
    if (this.sessions == null) {
      sb.append("null");
    } else {
      sb.append(this.sessions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("utterances:");
    if (this.utterances == null) {
      sb.append("null");
    } else {
      sb.append(this.utterances);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messages:");
    if (this.messages == null) {
      sb.append("null");
    } else {
      sb.append(this.messages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interPausalUnits:");
    if (this.interPausalUnits == null) {
      sb.append("null");
    } else {
      sb.append(this.interPausalUnits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("events:");
    if (this.events == null) {
      sb.append("null");
    } else {
      sb.append(this.events);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventRelations:");
    if (this.eventRelations == null) {
      sb.append("null");
    } else {
      sb.append(this.eventRelations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HltContentContainerStandardSchemeFactory implements SchemeFactory {
    public HltContentContainerStandardScheme getScheme() {
      return new HltContentContainerStandardScheme();
    }
  }

  private static class HltContentContainerStandardScheme extends StandardScheme<HltContentContainer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HltContentContainer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMITTED_BELIEFS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list260 = iprot.readListBegin();
                struct.committedBeliefs = new ArrayList<CommittedBelief>(_list260.size);
                for (int _i261 = 0; _i261 < _list260.size; ++_i261)
                {
                  CommittedBelief _elem262; // required
                  _elem262 = new CommittedBelief();
                  _elem262.read(iprot);
                  struct.committedBeliefs.add(_elem262);
                }
                iprot.readListEnd();
              }
              struct.setCommittedBeliefsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COREFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list263 = iprot.readListBegin();
                struct.coreferences = new ArrayList<Coreference>(_list263.size);
                for (int _i264 = 0; _i264 < _list263.size; ++_i264)
                {
                  Coreference _elem265; // required
                  _elem265 = new Coreference();
                  _elem265.read(iprot);
                  struct.coreferences.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setCoreferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPENDENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list266 = iprot.readListBegin();
                struct.dependencies = new ArrayList<Dependency>(_list266.size);
                for (int _i267 = 0; _i267 < _list266.size; ++_i267)
                {
                  Dependency _elem268; // required
                  _elem268 = new Dependency();
                  _elem268.read(iprot);
                  struct.dependencies.add(_elem268);
                }
                iprot.readListEnd();
              }
              struct.setDependenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTITY_MENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list269 = iprot.readListBegin();
                struct.entityMentions = new ArrayList<EntityMention>(_list269.size);
                for (int _i270 = 0; _i270 < _list269.size; ++_i270)
                {
                  EntityMention _elem271; // required
                  _elem271 = new EntityMention();
                  _elem271.read(iprot);
                  struct.entityMentions.add(_elem271);
                }
                iprot.readListEnd();
              }
              struct.setEntityMentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOINT_RELATION_COREFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                struct.jointRelationCoreferences = new ArrayList<JointRelationCoreference>(_list272.size);
                for (int _i273 = 0; _i273 < _list272.size; ++_i273)
                {
                  JointRelationCoreference _elem274; // required
                  _elem274 = new JointRelationCoreference();
                  _elem274.read(iprot);
                  struct.jointRelationCoreferences.add(_elem274);
                }
                iprot.readListEnd();
              }
              struct.setJointRelationCoreferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAMED_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list275 = iprot.readListBegin();
                struct.namedEntities = new ArrayList<EntityMention>(_list275.size);
                for (int _i276 = 0; _i276 < _list275.size; ++_i276)
                {
                  EntityMention _elem277; // required
                  _elem277 = new EntityMention();
                  _elem277.read(iprot);
                  struct.namedEntities.add(_elem277);
                }
                iprot.readListEnd();
              }
              struct.setNamedEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPINIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list278 = iprot.readListBegin();
                struct.opinions = new ArrayList<Opinion>(_list278.size);
                for (int _i279 = 0; _i279 < _list278.size; ++_i279)
                {
                  Opinion _elem280; // required
                  _elem280 = new Opinion();
                  _elem280.read(iprot);
                  struct.opinions.add(_elem280);
                }
                iprot.readListEnd();
              }
              struct.setOpinionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PART_OF_SPEECHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list281 = iprot.readListBegin();
                struct.partOfSpeechs = new ArrayList<PartOfSpeech>(_list281.size);
                for (int _i282 = 0; _i282 < _list281.size; ++_i282)
                {
                  PartOfSpeech _elem283; // required
                  _elem283 = new PartOfSpeech();
                  _elem283.read(iprot);
                  struct.partOfSpeechs.add(_elem283);
                }
                iprot.readListEnd();
              }
              struct.setPartOfSpeechsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PASSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list284 = iprot.readListBegin();
                struct.passages = new ArrayList<Passage>(_list284.size);
                for (int _i285 = 0; _i285 < _list284.size; ++_i285)
                {
                  Passage _elem286; // required
                  _elem286 = new Passage();
                  _elem286.read(iprot);
                  struct.passages.add(_elem286);
                }
                iprot.readListEnd();
              }
              struct.setPassagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list287 = iprot.readListBegin();
                struct.posts = new ArrayList<Post>(_list287.size);
                for (int _i288 = 0; _i288 < _list287.size; ++_i288)
                {
                  Post _elem289; // required
                  _elem289 = new Post();
                  _elem289.read(iprot);
                  struct.posts.add(_elem289);
                }
                iprot.readListEnd();
              }
              struct.setPostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PROSODIC_PHRASES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list290 = iprot.readListBegin();
                struct.prosodicPhrases = new ArrayList<ProsodicPhrase>(_list290.size);
                for (int _i291 = 0; _i291 < _list290.size; ++_i291)
                {
                  ProsodicPhrase _elem292; // required
                  _elem292 = new ProsodicPhrase();
                  _elem292.read(iprot);
                  struct.prosodicPhrases.add(_elem292);
                }
                iprot.readListEnd();
              }
              struct.setProsodicPhrasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RELATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list293 = iprot.readListBegin();
                struct.relations = new ArrayList<Relation>(_list293.size);
                for (int _i294 = 0; _i294 < _list293.size; ++_i294)
                {
                  Relation _elem295; // required
                  _elem295 = new Relation();
                  _elem295.read(iprot);
                  struct.relations.add(_elem295);
                }
                iprot.readListEnd();
              }
              struct.setRelationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SARCASMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                struct.sarcasms = new ArrayList<Sarcasm>(_list296.size);
                for (int _i297 = 0; _i297 < _list296.size; ++_i297)
                {
                  Sarcasm _elem298; // required
                  _elem298 = new Sarcasm();
                  _elem298.read(iprot);
                  struct.sarcasms.add(_elem298);
                }
                iprot.readListEnd();
              }
              struct.setSarcasmsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SENTENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list299 = iprot.readListBegin();
                struct.sentences = new ArrayList<Sentence>(_list299.size);
                for (int _i300 = 0; _i300 < _list299.size; ++_i300)
                {
                  Sentence _elem301; // required
                  _elem301 = new Sentence();
                  _elem301.read(iprot);
                  struct.sentences.add(_elem301);
                }
                iprot.readListEnd();
              }
              struct.setSentencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SYNTACTIC_CHUNKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list302 = iprot.readListBegin();
                struct.syntacticChunks = new ArrayList<SyntacticChunk>(_list302.size);
                for (int _i303 = 0; _i303 < _list302.size; ++_i303)
                {
                  SyntacticChunk _elem304; // required
                  _elem304 = new SyntacticChunk();
                  _elem304.read(iprot);
                  struct.syntacticChunks.add(_elem304);
                }
                iprot.readListEnd();
              }
              struct.setSyntacticChunksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SESSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list305 = iprot.readListBegin();
                struct.sessions = new ArrayList<Session>(_list305.size);
                for (int _i306 = 0; _i306 < _list305.size; ++_i306)
                {
                  Session _elem307; // required
                  _elem307 = new Session();
                  _elem307.read(iprot);
                  struct.sessions.add(_elem307);
                }
                iprot.readListEnd();
              }
              struct.setSessionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UTTERANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list308 = iprot.readListBegin();
                struct.utterances = new ArrayList<Utterance>(_list308.size);
                for (int _i309 = 0; _i309 < _list308.size; ++_i309)
                {
                  Utterance _elem310; // required
                  _elem310 = new Utterance();
                  _elem310.read(iprot);
                  struct.utterances.add(_elem310);
                }
                iprot.readListEnd();
              }
              struct.setUtterancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list311 = iprot.readListBegin();
                struct.messages = new ArrayList<Message>(_list311.size);
                for (int _i312 = 0; _i312 < _list311.size; ++_i312)
                {
                  Message _elem313; // required
                  _elem313 = new Message();
                  _elem313.read(iprot);
                  struct.messages.add(_elem313);
                }
                iprot.readListEnd();
              }
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INTER_PAUSAL_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list314 = iprot.readListBegin();
                struct.interPausalUnits = new ArrayList<InterPausalUnit>(_list314.size);
                for (int _i315 = 0; _i315 < _list314.size; ++_i315)
                {
                  InterPausalUnit _elem316; // required
                  _elem316 = new InterPausalUnit();
                  _elem316.read(iprot);
                  struct.interPausalUnits.add(_elem316);
                }
                iprot.readListEnd();
              }
              struct.setInterPausalUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list317 = iprot.readListBegin();
                struct.events = new ArrayList<Event>(_list317.size);
                for (int _i318 = 0; _i318 < _list317.size; ++_i318)
                {
                  Event _elem319; // required
                  _elem319 = new Event();
                  _elem319.read(iprot);
                  struct.events.add(_elem319);
                }
                iprot.readListEnd();
              }
              struct.setEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EVENT_RELATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                struct.eventRelations = new ArrayList<EventRelations>(_list320.size);
                for (int _i321 = 0; _i321 < _list320.size; ++_i321)
                {
                  EventRelations _elem322; // required
                  _elem322 = new EventRelations();
                  _elem322.read(iprot);
                  struct.eventRelations.add(_elem322);
                }
                iprot.readListEnd();
              }
              struct.setEventRelationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HltContentContainer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.committedBeliefs != null) {
        oprot.writeFieldBegin(COMMITTED_BELIEFS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.committedBeliefs.size()));
          for (CommittedBelief _iter323 : struct.committedBeliefs)
          {
            _iter323.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.coreferences != null) {
        oprot.writeFieldBegin(COREFERENCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.coreferences.size()));
          for (Coreference _iter324 : struct.coreferences)
          {
            _iter324.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dependencies != null) {
        oprot.writeFieldBegin(DEPENDENCIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dependencies.size()));
          for (Dependency _iter325 : struct.dependencies)
          {
            _iter325.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.entityMentions != null) {
        oprot.writeFieldBegin(ENTITY_MENTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entityMentions.size()));
          for (EntityMention _iter326 : struct.entityMentions)
          {
            _iter326.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jointRelationCoreferences != null) {
        oprot.writeFieldBegin(JOINT_RELATION_COREFERENCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jointRelationCoreferences.size()));
          for (JointRelationCoreference _iter327 : struct.jointRelationCoreferences)
          {
            _iter327.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.namedEntities != null) {
        oprot.writeFieldBegin(NAMED_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.namedEntities.size()));
          for (EntityMention _iter328 : struct.namedEntities)
          {
            _iter328.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.opinions != null) {
        oprot.writeFieldBegin(OPINIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.opinions.size()));
          for (Opinion _iter329 : struct.opinions)
          {
            _iter329.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partOfSpeechs != null) {
        oprot.writeFieldBegin(PART_OF_SPEECHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partOfSpeechs.size()));
          for (PartOfSpeech _iter330 : struct.partOfSpeechs)
          {
            _iter330.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.passages != null) {
        oprot.writeFieldBegin(PASSAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passages.size()));
          for (Passage _iter331 : struct.passages)
          {
            _iter331.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.posts != null) {
        oprot.writeFieldBegin(POSTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.posts.size()));
          for (Post _iter332 : struct.posts)
          {
            _iter332.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.prosodicPhrases != null) {
        oprot.writeFieldBegin(PROSODIC_PHRASES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.prosodicPhrases.size()));
          for (ProsodicPhrase _iter333 : struct.prosodicPhrases)
          {
            _iter333.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.relations != null) {
        oprot.writeFieldBegin(RELATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.relations.size()));
          for (Relation _iter334 : struct.relations)
          {
            _iter334.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sarcasms != null) {
        oprot.writeFieldBegin(SARCASMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sarcasms.size()));
          for (Sarcasm _iter335 : struct.sarcasms)
          {
            _iter335.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sentences != null) {
        oprot.writeFieldBegin(SENTENCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sentences.size()));
          for (Sentence _iter336 : struct.sentences)
          {
            _iter336.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.syntacticChunks != null) {
        oprot.writeFieldBegin(SYNTACTIC_CHUNKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.syntacticChunks.size()));
          for (SyntacticChunk _iter337 : struct.syntacticChunks)
          {
            _iter337.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sessions != null) {
        oprot.writeFieldBegin(SESSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sessions.size()));
          for (Session _iter338 : struct.sessions)
          {
            _iter338.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.utterances != null) {
        oprot.writeFieldBegin(UTTERANCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.utterances.size()));
          for (Utterance _iter339 : struct.utterances)
          {
            _iter339.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.messages != null) {
        oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
          for (Message _iter340 : struct.messages)
          {
            _iter340.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.interPausalUnits != null) {
        oprot.writeFieldBegin(INTER_PAUSAL_UNITS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.interPausalUnits.size()));
          for (InterPausalUnit _iter341 : struct.interPausalUnits)
          {
            _iter341.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.events != null) {
        oprot.writeFieldBegin(EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.events.size()));
          for (Event _iter342 : struct.events)
          {
            _iter342.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.eventRelations != null) {
        oprot.writeFieldBegin(EVENT_RELATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eventRelations.size()));
          for (EventRelations _iter343 : struct.eventRelations)
          {
            _iter343.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HltContentContainerTupleSchemeFactory implements SchemeFactory {
    public HltContentContainerTupleScheme getScheme() {
      return new HltContentContainerTupleScheme();
    }
  }

  private static class HltContentContainerTupleScheme extends TupleScheme<HltContentContainer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HltContentContainer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommittedBeliefs()) {
        optionals.set(0);
      }
      if (struct.isSetCoreferences()) {
        optionals.set(1);
      }
      if (struct.isSetDependencies()) {
        optionals.set(2);
      }
      if (struct.isSetEntityMentions()) {
        optionals.set(3);
      }
      if (struct.isSetJointRelationCoreferences()) {
        optionals.set(4);
      }
      if (struct.isSetNamedEntities()) {
        optionals.set(5);
      }
      if (struct.isSetOpinions()) {
        optionals.set(6);
      }
      if (struct.isSetPartOfSpeechs()) {
        optionals.set(7);
      }
      if (struct.isSetPassages()) {
        optionals.set(8);
      }
      if (struct.isSetPosts()) {
        optionals.set(9);
      }
      if (struct.isSetProsodicPhrases()) {
        optionals.set(10);
      }
      if (struct.isSetRelations()) {
        optionals.set(11);
      }
      if (struct.isSetSarcasms()) {
        optionals.set(12);
      }
      if (struct.isSetSentences()) {
        optionals.set(13);
      }
      if (struct.isSetSyntacticChunks()) {
        optionals.set(14);
      }
      if (struct.isSetSessions()) {
        optionals.set(15);
      }
      if (struct.isSetUtterances()) {
        optionals.set(16);
      }
      if (struct.isSetMessages()) {
        optionals.set(17);
      }
      if (struct.isSetInterPausalUnits()) {
        optionals.set(18);
      }
      if (struct.isSetEvents()) {
        optionals.set(19);
      }
      if (struct.isSetEventRelations()) {
        optionals.set(20);
      }
      if (struct.isSetId()) {
        optionals.set(21);
      }
      if (struct.isSetValue()) {
        optionals.set(22);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetCommittedBeliefs()) {
        {
          oprot.writeI32(struct.committedBeliefs.size());
          for (CommittedBelief _iter344 : struct.committedBeliefs)
          {
            _iter344.write(oprot);
          }
        }
      }
      if (struct.isSetCoreferences()) {
        {
          oprot.writeI32(struct.coreferences.size());
          for (Coreference _iter345 : struct.coreferences)
          {
            _iter345.write(oprot);
          }
        }
      }
      if (struct.isSetDependencies()) {
        {
          oprot.writeI32(struct.dependencies.size());
          for (Dependency _iter346 : struct.dependencies)
          {
            _iter346.write(oprot);
          }
        }
      }
      if (struct.isSetEntityMentions()) {
        {
          oprot.writeI32(struct.entityMentions.size());
          for (EntityMention _iter347 : struct.entityMentions)
          {
            _iter347.write(oprot);
          }
        }
      }
      if (struct.isSetJointRelationCoreferences()) {
        {
          oprot.writeI32(struct.jointRelationCoreferences.size());
          for (JointRelationCoreference _iter348 : struct.jointRelationCoreferences)
          {
            _iter348.write(oprot);
          }
        }
      }
      if (struct.isSetNamedEntities()) {
        {
          oprot.writeI32(struct.namedEntities.size());
          for (EntityMention _iter349 : struct.namedEntities)
          {
            _iter349.write(oprot);
          }
        }
      }
      if (struct.isSetOpinions()) {
        {
          oprot.writeI32(struct.opinions.size());
          for (Opinion _iter350 : struct.opinions)
          {
            _iter350.write(oprot);
          }
        }
      }
      if (struct.isSetPartOfSpeechs()) {
        {
          oprot.writeI32(struct.partOfSpeechs.size());
          for (PartOfSpeech _iter351 : struct.partOfSpeechs)
          {
            _iter351.write(oprot);
          }
        }
      }
      if (struct.isSetPassages()) {
        {
          oprot.writeI32(struct.passages.size());
          for (Passage _iter352 : struct.passages)
          {
            _iter352.write(oprot);
          }
        }
      }
      if (struct.isSetPosts()) {
        {
          oprot.writeI32(struct.posts.size());
          for (Post _iter353 : struct.posts)
          {
            _iter353.write(oprot);
          }
        }
      }
      if (struct.isSetProsodicPhrases()) {
        {
          oprot.writeI32(struct.prosodicPhrases.size());
          for (ProsodicPhrase _iter354 : struct.prosodicPhrases)
          {
            _iter354.write(oprot);
          }
        }
      }
      if (struct.isSetRelations()) {
        {
          oprot.writeI32(struct.relations.size());
          for (Relation _iter355 : struct.relations)
          {
            _iter355.write(oprot);
          }
        }
      }
      if (struct.isSetSarcasms()) {
        {
          oprot.writeI32(struct.sarcasms.size());
          for (Sarcasm _iter356 : struct.sarcasms)
          {
            _iter356.write(oprot);
          }
        }
      }
      if (struct.isSetSentences()) {
        {
          oprot.writeI32(struct.sentences.size());
          for (Sentence _iter357 : struct.sentences)
          {
            _iter357.write(oprot);
          }
        }
      }
      if (struct.isSetSyntacticChunks()) {
        {
          oprot.writeI32(struct.syntacticChunks.size());
          for (SyntacticChunk _iter358 : struct.syntacticChunks)
          {
            _iter358.write(oprot);
          }
        }
      }
      if (struct.isSetSessions()) {
        {
          oprot.writeI32(struct.sessions.size());
          for (Session _iter359 : struct.sessions)
          {
            _iter359.write(oprot);
          }
        }
      }
      if (struct.isSetUtterances()) {
        {
          oprot.writeI32(struct.utterances.size());
          for (Utterance _iter360 : struct.utterances)
          {
            _iter360.write(oprot);
          }
        }
      }
      if (struct.isSetMessages()) {
        {
          oprot.writeI32(struct.messages.size());
          for (Message _iter361 : struct.messages)
          {
            _iter361.write(oprot);
          }
        }
      }
      if (struct.isSetInterPausalUnits()) {
        {
          oprot.writeI32(struct.interPausalUnits.size());
          for (InterPausalUnit _iter362 : struct.interPausalUnits)
          {
            _iter362.write(oprot);
          }
        }
      }
      if (struct.isSetEvents()) {
        {
          oprot.writeI32(struct.events.size());
          for (Event _iter363 : struct.events)
          {
            _iter363.write(oprot);
          }
        }
      }
      if (struct.isSetEventRelations()) {
        {
          oprot.writeI32(struct.eventRelations.size());
          for (EventRelations _iter364 : struct.eventRelations)
          {
            _iter364.write(oprot);
          }
        }
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HltContentContainer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list365 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.committedBeliefs = new ArrayList<CommittedBelief>(_list365.size);
          for (int _i366 = 0; _i366 < _list365.size; ++_i366)
          {
            CommittedBelief _elem367; // required
            _elem367 = new CommittedBelief();
            _elem367.read(iprot);
            struct.committedBeliefs.add(_elem367);
          }
        }
        struct.setCommittedBeliefsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list368 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.coreferences = new ArrayList<Coreference>(_list368.size);
          for (int _i369 = 0; _i369 < _list368.size; ++_i369)
          {
            Coreference _elem370; // required
            _elem370 = new Coreference();
            _elem370.read(iprot);
            struct.coreferences.add(_elem370);
          }
        }
        struct.setCoreferencesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list371 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dependencies = new ArrayList<Dependency>(_list371.size);
          for (int _i372 = 0; _i372 < _list371.size; ++_i372)
          {
            Dependency _elem373; // required
            _elem373 = new Dependency();
            _elem373.read(iprot);
            struct.dependencies.add(_elem373);
          }
        }
        struct.setDependenciesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list374 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entityMentions = new ArrayList<EntityMention>(_list374.size);
          for (int _i375 = 0; _i375 < _list374.size; ++_i375)
          {
            EntityMention _elem376; // required
            _elem376 = new EntityMention();
            _elem376.read(iprot);
            struct.entityMentions.add(_elem376);
          }
        }
        struct.setEntityMentionsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list377 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jointRelationCoreferences = new ArrayList<JointRelationCoreference>(_list377.size);
          for (int _i378 = 0; _i378 < _list377.size; ++_i378)
          {
            JointRelationCoreference _elem379; // required
            _elem379 = new JointRelationCoreference();
            _elem379.read(iprot);
            struct.jointRelationCoreferences.add(_elem379);
          }
        }
        struct.setJointRelationCoreferencesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list380 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.namedEntities = new ArrayList<EntityMention>(_list380.size);
          for (int _i381 = 0; _i381 < _list380.size; ++_i381)
          {
            EntityMention _elem382; // required
            _elem382 = new EntityMention();
            _elem382.read(iprot);
            struct.namedEntities.add(_elem382);
          }
        }
        struct.setNamedEntitiesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list383 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.opinions = new ArrayList<Opinion>(_list383.size);
          for (int _i384 = 0; _i384 < _list383.size; ++_i384)
          {
            Opinion _elem385; // required
            _elem385 = new Opinion();
            _elem385.read(iprot);
            struct.opinions.add(_elem385);
          }
        }
        struct.setOpinionsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list386 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partOfSpeechs = new ArrayList<PartOfSpeech>(_list386.size);
          for (int _i387 = 0; _i387 < _list386.size; ++_i387)
          {
            PartOfSpeech _elem388; // required
            _elem388 = new PartOfSpeech();
            _elem388.read(iprot);
            struct.partOfSpeechs.add(_elem388);
          }
        }
        struct.setPartOfSpeechsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list389 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.passages = new ArrayList<Passage>(_list389.size);
          for (int _i390 = 0; _i390 < _list389.size; ++_i390)
          {
            Passage _elem391; // required
            _elem391 = new Passage();
            _elem391.read(iprot);
            struct.passages.add(_elem391);
          }
        }
        struct.setPassagesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list392 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.posts = new ArrayList<Post>(_list392.size);
          for (int _i393 = 0; _i393 < _list392.size; ++_i393)
          {
            Post _elem394; // required
            _elem394 = new Post();
            _elem394.read(iprot);
            struct.posts.add(_elem394);
          }
        }
        struct.setPostsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list395 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.prosodicPhrases = new ArrayList<ProsodicPhrase>(_list395.size);
          for (int _i396 = 0; _i396 < _list395.size; ++_i396)
          {
            ProsodicPhrase _elem397; // required
            _elem397 = new ProsodicPhrase();
            _elem397.read(iprot);
            struct.prosodicPhrases.add(_elem397);
          }
        }
        struct.setProsodicPhrasesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list398 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.relations = new ArrayList<Relation>(_list398.size);
          for (int _i399 = 0; _i399 < _list398.size; ++_i399)
          {
            Relation _elem400; // required
            _elem400 = new Relation();
            _elem400.read(iprot);
            struct.relations.add(_elem400);
          }
        }
        struct.setRelationsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list401 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sarcasms = new ArrayList<Sarcasm>(_list401.size);
          for (int _i402 = 0; _i402 < _list401.size; ++_i402)
          {
            Sarcasm _elem403; // required
            _elem403 = new Sarcasm();
            _elem403.read(iprot);
            struct.sarcasms.add(_elem403);
          }
        }
        struct.setSarcasmsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list404 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sentences = new ArrayList<Sentence>(_list404.size);
          for (int _i405 = 0; _i405 < _list404.size; ++_i405)
          {
            Sentence _elem406; // required
            _elem406 = new Sentence();
            _elem406.read(iprot);
            struct.sentences.add(_elem406);
          }
        }
        struct.setSentencesIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list407 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.syntacticChunks = new ArrayList<SyntacticChunk>(_list407.size);
          for (int _i408 = 0; _i408 < _list407.size; ++_i408)
          {
            SyntacticChunk _elem409; // required
            _elem409 = new SyntacticChunk();
            _elem409.read(iprot);
            struct.syntacticChunks.add(_elem409);
          }
        }
        struct.setSyntacticChunksIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list410 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sessions = new ArrayList<Session>(_list410.size);
          for (int _i411 = 0; _i411 < _list410.size; ++_i411)
          {
            Session _elem412; // required
            _elem412 = new Session();
            _elem412.read(iprot);
            struct.sessions.add(_elem412);
          }
        }
        struct.setSessionsIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list413 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.utterances = new ArrayList<Utterance>(_list413.size);
          for (int _i414 = 0; _i414 < _list413.size; ++_i414)
          {
            Utterance _elem415; // required
            _elem415 = new Utterance();
            _elem415.read(iprot);
            struct.utterances.add(_elem415);
          }
        }
        struct.setUtterancesIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list416 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.messages = new ArrayList<Message>(_list416.size);
          for (int _i417 = 0; _i417 < _list416.size; ++_i417)
          {
            Message _elem418; // required
            _elem418 = new Message();
            _elem418.read(iprot);
            struct.messages.add(_elem418);
          }
        }
        struct.setMessagesIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list419 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.interPausalUnits = new ArrayList<InterPausalUnit>(_list419.size);
          for (int _i420 = 0; _i420 < _list419.size; ++_i420)
          {
            InterPausalUnit _elem421; // required
            _elem421 = new InterPausalUnit();
            _elem421.read(iprot);
            struct.interPausalUnits.add(_elem421);
          }
        }
        struct.setInterPausalUnitsIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list422 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.events = new ArrayList<Event>(_list422.size);
          for (int _i423 = 0; _i423 < _list422.size; ++_i423)
          {
            Event _elem424; // required
            _elem424 = new Event();
            _elem424.read(iprot);
            struct.events.add(_elem424);
          }
        }
        struct.setEventsIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list425 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.eventRelations = new ArrayList<EventRelations>(_list425.size);
          for (int _i426 = 0; _i426 < _list425.size; ++_i426)
          {
            EventRelations _elem427; // required
            _elem427 = new EventRelations();
            _elem427.read(iprot);
            struct.eventRelations.add(_elem427);
          }
        }
        struct.setEventRelationsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(23)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}

