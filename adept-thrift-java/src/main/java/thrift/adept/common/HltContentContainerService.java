/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HltContentContainerService {

  public interface Iface extends ItemService.Iface {

    public List<CommittedBelief> getCommittedBeliefs() throws org.apache.thrift.TException;

    public List<Coreference> getCoreferences() throws org.apache.thrift.TException;

    public List<Dependency> getDependencies() throws org.apache.thrift.TException;

    public List<EntityMention> getEntityMentions() throws org.apache.thrift.TException;

    public List<JointRelationCoreference> getJointRelationCoreferences() throws org.apache.thrift.TException;

    public List<EntityMention> getMentions() throws org.apache.thrift.TException;

    public List<EntityMention> getNamedEntities() throws org.apache.thrift.TException;

    public List<Opinion> getOpinions() throws org.apache.thrift.TException;

    public List<PartOfSpeech> getPartOfSpeechs() throws org.apache.thrift.TException;

    public List<Passage> getPassages() throws org.apache.thrift.TException;

    public List<ProsodicPhrase> getProsodicPhrases() throws org.apache.thrift.TException;

    public List<Relation> getRelations() throws org.apache.thrift.TException;

    public List<Sarcasm> getSarcasms() throws org.apache.thrift.TException;

    public List<Sentence> getSentences() throws org.apache.thrift.TException;

    public List<SyntacticChunk> getSyntacticChunks() throws org.apache.thrift.TException;

    public void setCommittedBeliefs(List<CommittedBelief> committedBeliefs) throws org.apache.thrift.TException;

    public void setCoreferences(List<Coreference> coreferences) throws org.apache.thrift.TException;

    public void setDependencies(List<Dependency> dependencies) throws org.apache.thrift.TException;

    public void setEntityMentions(List<EntityMention> entityMentions) throws org.apache.thrift.TException;

    public void setJointRelationCoreferences(List<JointRelationCoreference> jointRelationCoreferences) throws org.apache.thrift.TException;

    public void setMentions(List<EntityMention> entityMentions) throws org.apache.thrift.TException;

    public void setNamedEntities(List<EntityMention> namedEntities) throws org.apache.thrift.TException;

    public void setOpinions(List<Opinion> opinions) throws org.apache.thrift.TException;

    public void setPartOfSpeechs(List<PartOfSpeech> partOfSpeechs) throws org.apache.thrift.TException;

    public void setPassages(List<Passage> passages) throws org.apache.thrift.TException;

    public void setProsodicPhrases(List<ProsodicPhrase> prosodicPhrases) throws org.apache.thrift.TException;

    public void setRelations(List<Relation> relations) throws org.apache.thrift.TException;

    public void setSarcasms(List<Sarcasm> sarcasms) throws org.apache.thrift.TException;

    public void setSentences(List<Sentence> sentences) throws org.apache.thrift.TException;

    public void setSyntacticChunks(List<SyntacticChunk> syntactiChunks) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ItemService .AsyncIface {

    public void getCommittedBeliefs(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCommittedBeliefs_call> resultHandler) throws org.apache.thrift.TException;

    public void getCoreferences(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCoreferences_call> resultHandler) throws org.apache.thrift.TException;

    public void getDependencies(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDependencies_call> resultHandler) throws org.apache.thrift.TException;

    public void getEntityMentions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEntityMentions_call> resultHandler) throws org.apache.thrift.TException;

    public void getJointRelationCoreferences(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJointRelationCoreferences_call> resultHandler) throws org.apache.thrift.TException;

    public void getMentions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMentions_call> resultHandler) throws org.apache.thrift.TException;

    public void getNamedEntities(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getNamedEntities_call> resultHandler) throws org.apache.thrift.TException;

    public void getOpinions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOpinions_call> resultHandler) throws org.apache.thrift.TException;

    public void getPartOfSpeechs(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPartOfSpeechs_call> resultHandler) throws org.apache.thrift.TException;

    public void getPassages(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPassages_call> resultHandler) throws org.apache.thrift.TException;

    public void getProsodicPhrases(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProsodicPhrases_call> resultHandler) throws org.apache.thrift.TException;

    public void getRelations(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRelations_call> resultHandler) throws org.apache.thrift.TException;

    public void getSarcasms(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSarcasms_call> resultHandler) throws org.apache.thrift.TException;

    public void getSentences(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSentences_call> resultHandler) throws org.apache.thrift.TException;

    public void getSyntacticChunks(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSyntacticChunks_call> resultHandler) throws org.apache.thrift.TException;

    public void setCommittedBeliefs(List<CommittedBelief> committedBeliefs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setCommittedBeliefs_call> resultHandler) throws org.apache.thrift.TException;

    public void setCoreferences(List<Coreference> coreferences, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setCoreferences_call> resultHandler) throws org.apache.thrift.TException;

    public void setDependencies(List<Dependency> dependencies, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setDependencies_call> resultHandler) throws org.apache.thrift.TException;

    public void setEntityMentions(List<EntityMention> entityMentions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setEntityMentions_call> resultHandler) throws org.apache.thrift.TException;

    public void setJointRelationCoreferences(List<JointRelationCoreference> jointRelationCoreferences, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setJointRelationCoreferences_call> resultHandler) throws org.apache.thrift.TException;

    public void setMentions(List<EntityMention> entityMentions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setMentions_call> resultHandler) throws org.apache.thrift.TException;

    public void setNamedEntities(List<EntityMention> namedEntities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setNamedEntities_call> resultHandler) throws org.apache.thrift.TException;

    public void setOpinions(List<Opinion> opinions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setOpinions_call> resultHandler) throws org.apache.thrift.TException;

    public void setPartOfSpeechs(List<PartOfSpeech> partOfSpeechs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPartOfSpeechs_call> resultHandler) throws org.apache.thrift.TException;

    public void setPassages(List<Passage> passages, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPassages_call> resultHandler) throws org.apache.thrift.TException;

    public void setProsodicPhrases(List<ProsodicPhrase> prosodicPhrases, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setProsodicPhrases_call> resultHandler) throws org.apache.thrift.TException;

    public void setRelations(List<Relation> relations, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setRelations_call> resultHandler) throws org.apache.thrift.TException;

    public void setSarcasms(List<Sarcasm> sarcasms, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setSarcasms_call> resultHandler) throws org.apache.thrift.TException;

    public void setSentences(List<Sentence> sentences, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setSentences_call> resultHandler) throws org.apache.thrift.TException;

    public void setSyntacticChunks(List<SyntacticChunk> syntactiChunks, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setSyntacticChunks_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ItemService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<CommittedBelief> getCommittedBeliefs() throws org.apache.thrift.TException
    {
      send_getCommittedBeliefs();
      return recv_getCommittedBeliefs();
    }

    public void send_getCommittedBeliefs() throws org.apache.thrift.TException
    {
      getCommittedBeliefs_args args = new getCommittedBeliefs_args();
      sendBase("getCommittedBeliefs", args);
    }

    public List<CommittedBelief> recv_getCommittedBeliefs() throws org.apache.thrift.TException
    {
      getCommittedBeliefs_result result = new getCommittedBeliefs_result();
      receiveBase(result, "getCommittedBeliefs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCommittedBeliefs failed: unknown result");
    }

    public List<Coreference> getCoreferences() throws org.apache.thrift.TException
    {
      send_getCoreferences();
      return recv_getCoreferences();
    }

    public void send_getCoreferences() throws org.apache.thrift.TException
    {
      getCoreferences_args args = new getCoreferences_args();
      sendBase("getCoreferences", args);
    }

    public List<Coreference> recv_getCoreferences() throws org.apache.thrift.TException
    {
      getCoreferences_result result = new getCoreferences_result();
      receiveBase(result, "getCoreferences");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCoreferences failed: unknown result");
    }

    public List<Dependency> getDependencies() throws org.apache.thrift.TException
    {
      send_getDependencies();
      return recv_getDependencies();
    }

    public void send_getDependencies() throws org.apache.thrift.TException
    {
      getDependencies_args args = new getDependencies_args();
      sendBase("getDependencies", args);
    }

    public List<Dependency> recv_getDependencies() throws org.apache.thrift.TException
    {
      getDependencies_result result = new getDependencies_result();
      receiveBase(result, "getDependencies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDependencies failed: unknown result");
    }

    public List<EntityMention> getEntityMentions() throws org.apache.thrift.TException
    {
      send_getEntityMentions();
      return recv_getEntityMentions();
    }

    public void send_getEntityMentions() throws org.apache.thrift.TException
    {
      getEntityMentions_args args = new getEntityMentions_args();
      sendBase("getEntityMentions", args);
    }

    public List<EntityMention> recv_getEntityMentions() throws org.apache.thrift.TException
    {
      getEntityMentions_result result = new getEntityMentions_result();
      receiveBase(result, "getEntityMentions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityMentions failed: unknown result");
    }

    public List<JointRelationCoreference> getJointRelationCoreferences() throws org.apache.thrift.TException
    {
      send_getJointRelationCoreferences();
      return recv_getJointRelationCoreferences();
    }

    public void send_getJointRelationCoreferences() throws org.apache.thrift.TException
    {
      getJointRelationCoreferences_args args = new getJointRelationCoreferences_args();
      sendBase("getJointRelationCoreferences", args);
    }

    public List<JointRelationCoreference> recv_getJointRelationCoreferences() throws org.apache.thrift.TException
    {
      getJointRelationCoreferences_result result = new getJointRelationCoreferences_result();
      receiveBase(result, "getJointRelationCoreferences");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJointRelationCoreferences failed: unknown result");
    }

    public List<EntityMention> getMentions() throws org.apache.thrift.TException
    {
      send_getMentions();
      return recv_getMentions();
    }

    public void send_getMentions() throws org.apache.thrift.TException
    {
      getMentions_args args = new getMentions_args();
      sendBase("getMentions", args);
    }

    public List<EntityMention> recv_getMentions() throws org.apache.thrift.TException
    {
      getMentions_result result = new getMentions_result();
      receiveBase(result, "getMentions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMentions failed: unknown result");
    }

    public List<EntityMention> getNamedEntities() throws org.apache.thrift.TException
    {
      send_getNamedEntities();
      return recv_getNamedEntities();
    }

    public void send_getNamedEntities() throws org.apache.thrift.TException
    {
      getNamedEntities_args args = new getNamedEntities_args();
      sendBase("getNamedEntities", args);
    }

    public List<EntityMention> recv_getNamedEntities() throws org.apache.thrift.TException
    {
      getNamedEntities_result result = new getNamedEntities_result();
      receiveBase(result, "getNamedEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNamedEntities failed: unknown result");
    }

    public List<Opinion> getOpinions() throws org.apache.thrift.TException
    {
      send_getOpinions();
      return recv_getOpinions();
    }

    public void send_getOpinions() throws org.apache.thrift.TException
    {
      getOpinions_args args = new getOpinions_args();
      sendBase("getOpinions", args);
    }

    public List<Opinion> recv_getOpinions() throws org.apache.thrift.TException
    {
      getOpinions_result result = new getOpinions_result();
      receiveBase(result, "getOpinions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOpinions failed: unknown result");
    }

    public List<PartOfSpeech> getPartOfSpeechs() throws org.apache.thrift.TException
    {
      send_getPartOfSpeechs();
      return recv_getPartOfSpeechs();
    }

    public void send_getPartOfSpeechs() throws org.apache.thrift.TException
    {
      getPartOfSpeechs_args args = new getPartOfSpeechs_args();
      sendBase("getPartOfSpeechs", args);
    }

    public List<PartOfSpeech> recv_getPartOfSpeechs() throws org.apache.thrift.TException
    {
      getPartOfSpeechs_result result = new getPartOfSpeechs_result();
      receiveBase(result, "getPartOfSpeechs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartOfSpeechs failed: unknown result");
    }

    public List<Passage> getPassages() throws org.apache.thrift.TException
    {
      send_getPassages();
      return recv_getPassages();
    }

    public void send_getPassages() throws org.apache.thrift.TException
    {
      getPassages_args args = new getPassages_args();
      sendBase("getPassages", args);
    }

    public List<Passage> recv_getPassages() throws org.apache.thrift.TException
    {
      getPassages_result result = new getPassages_result();
      receiveBase(result, "getPassages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPassages failed: unknown result");
    }

    public List<ProsodicPhrase> getProsodicPhrases() throws org.apache.thrift.TException
    {
      send_getProsodicPhrases();
      return recv_getProsodicPhrases();
    }

    public void send_getProsodicPhrases() throws org.apache.thrift.TException
    {
      getProsodicPhrases_args args = new getProsodicPhrases_args();
      sendBase("getProsodicPhrases", args);
    }

    public List<ProsodicPhrase> recv_getProsodicPhrases() throws org.apache.thrift.TException
    {
      getProsodicPhrases_result result = new getProsodicPhrases_result();
      receiveBase(result, "getProsodicPhrases");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProsodicPhrases failed: unknown result");
    }

    public List<Relation> getRelations() throws org.apache.thrift.TException
    {
      send_getRelations();
      return recv_getRelations();
    }

    public void send_getRelations() throws org.apache.thrift.TException
    {
      getRelations_args args = new getRelations_args();
      sendBase("getRelations", args);
    }

    public List<Relation> recv_getRelations() throws org.apache.thrift.TException
    {
      getRelations_result result = new getRelations_result();
      receiveBase(result, "getRelations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRelations failed: unknown result");
    }

    public List<Sarcasm> getSarcasms() throws org.apache.thrift.TException
    {
      send_getSarcasms();
      return recv_getSarcasms();
    }

    public void send_getSarcasms() throws org.apache.thrift.TException
    {
      getSarcasms_args args = new getSarcasms_args();
      sendBase("getSarcasms", args);
    }

    public List<Sarcasm> recv_getSarcasms() throws org.apache.thrift.TException
    {
      getSarcasms_result result = new getSarcasms_result();
      receiveBase(result, "getSarcasms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSarcasms failed: unknown result");
    }

    public List<Sentence> getSentences() throws org.apache.thrift.TException
    {
      send_getSentences();
      return recv_getSentences();
    }

    public void send_getSentences() throws org.apache.thrift.TException
    {
      getSentences_args args = new getSentences_args();
      sendBase("getSentences", args);
    }

    public List<Sentence> recv_getSentences() throws org.apache.thrift.TException
    {
      getSentences_result result = new getSentences_result();
      receiveBase(result, "getSentences");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSentences failed: unknown result");
    }

    public List<SyntacticChunk> getSyntacticChunks() throws org.apache.thrift.TException
    {
      send_getSyntacticChunks();
      return recv_getSyntacticChunks();
    }

    public void send_getSyntacticChunks() throws org.apache.thrift.TException
    {
      getSyntacticChunks_args args = new getSyntacticChunks_args();
      sendBase("getSyntacticChunks", args);
    }

    public List<SyntacticChunk> recv_getSyntacticChunks() throws org.apache.thrift.TException
    {
      getSyntacticChunks_result result = new getSyntacticChunks_result();
      receiveBase(result, "getSyntacticChunks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSyntacticChunks failed: unknown result");
    }

    public void setCommittedBeliefs(List<CommittedBelief> committedBeliefs) throws org.apache.thrift.TException
    {
      send_setCommittedBeliefs(committedBeliefs);
      recv_setCommittedBeliefs();
    }

    public void send_setCommittedBeliefs(List<CommittedBelief> committedBeliefs) throws org.apache.thrift.TException
    {
      setCommittedBeliefs_args args = new setCommittedBeliefs_args();
      args.setCommittedBeliefs(committedBeliefs);
      sendBase("setCommittedBeliefs", args);
    }

    public void recv_setCommittedBeliefs() throws org.apache.thrift.TException
    {
      setCommittedBeliefs_result result = new setCommittedBeliefs_result();
      receiveBase(result, "setCommittedBeliefs");
      return;
    }

    public void setCoreferences(List<Coreference> coreferences) throws org.apache.thrift.TException
    {
      send_setCoreferences(coreferences);
      recv_setCoreferences();
    }

    public void send_setCoreferences(List<Coreference> coreferences) throws org.apache.thrift.TException
    {
      setCoreferences_args args = new setCoreferences_args();
      args.setCoreferences(coreferences);
      sendBase("setCoreferences", args);
    }

    public void recv_setCoreferences() throws org.apache.thrift.TException
    {
      setCoreferences_result result = new setCoreferences_result();
      receiveBase(result, "setCoreferences");
      return;
    }

    public void setDependencies(List<Dependency> dependencies) throws org.apache.thrift.TException
    {
      send_setDependencies(dependencies);
      recv_setDependencies();
    }

    public void send_setDependencies(List<Dependency> dependencies) throws org.apache.thrift.TException
    {
      setDependencies_args args = new setDependencies_args();
      args.setDependencies(dependencies);
      sendBase("setDependencies", args);
    }

    public void recv_setDependencies() throws org.apache.thrift.TException
    {
      setDependencies_result result = new setDependencies_result();
      receiveBase(result, "setDependencies");
      return;
    }

    public void setEntityMentions(List<EntityMention> entityMentions) throws org.apache.thrift.TException
    {
      send_setEntityMentions(entityMentions);
      recv_setEntityMentions();
    }

    public void send_setEntityMentions(List<EntityMention> entityMentions) throws org.apache.thrift.TException
    {
      setEntityMentions_args args = new setEntityMentions_args();
      args.setEntityMentions(entityMentions);
      sendBase("setEntityMentions", args);
    }

    public void recv_setEntityMentions() throws org.apache.thrift.TException
    {
      setEntityMentions_result result = new setEntityMentions_result();
      receiveBase(result, "setEntityMentions");
      return;
    }

    public void setJointRelationCoreferences(List<JointRelationCoreference> jointRelationCoreferences) throws org.apache.thrift.TException
    {
      send_setJointRelationCoreferences(jointRelationCoreferences);
      recv_setJointRelationCoreferences();
    }

    public void send_setJointRelationCoreferences(List<JointRelationCoreference> jointRelationCoreferences) throws org.apache.thrift.TException
    {
      setJointRelationCoreferences_args args = new setJointRelationCoreferences_args();
      args.setJointRelationCoreferences(jointRelationCoreferences);
      sendBase("setJointRelationCoreferences", args);
    }

    public void recv_setJointRelationCoreferences() throws org.apache.thrift.TException
    {
      setJointRelationCoreferences_result result = new setJointRelationCoreferences_result();
      receiveBase(result, "setJointRelationCoreferences");
      return;
    }

    public void setMentions(List<EntityMention> entityMentions) throws org.apache.thrift.TException
    {
      send_setMentions(entityMentions);
      recv_setMentions();
    }

    public void send_setMentions(List<EntityMention> entityMentions) throws org.apache.thrift.TException
    {
      setMentions_args args = new setMentions_args();
      args.setEntityMentions(entityMentions);
      sendBase("setMentions", args);
    }

    public void recv_setMentions() throws org.apache.thrift.TException
    {
      setMentions_result result = new setMentions_result();
      receiveBase(result, "setMentions");
      return;
    }

    public void setNamedEntities(List<EntityMention> namedEntities) throws org.apache.thrift.TException
    {
      send_setNamedEntities(namedEntities);
      recv_setNamedEntities();
    }

    public void send_setNamedEntities(List<EntityMention> namedEntities) throws org.apache.thrift.TException
    {
      setNamedEntities_args args = new setNamedEntities_args();
      args.setNamedEntities(namedEntities);
      sendBase("setNamedEntities", args);
    }

    public void recv_setNamedEntities() throws org.apache.thrift.TException
    {
      setNamedEntities_result result = new setNamedEntities_result();
      receiveBase(result, "setNamedEntities");
      return;
    }

    public void setOpinions(List<Opinion> opinions) throws org.apache.thrift.TException
    {
      send_setOpinions(opinions);
      recv_setOpinions();
    }

    public void send_setOpinions(List<Opinion> opinions) throws org.apache.thrift.TException
    {
      setOpinions_args args = new setOpinions_args();
      args.setOpinions(opinions);
      sendBase("setOpinions", args);
    }

    public void recv_setOpinions() throws org.apache.thrift.TException
    {
      setOpinions_result result = new setOpinions_result();
      receiveBase(result, "setOpinions");
      return;
    }

    public void setPartOfSpeechs(List<PartOfSpeech> partOfSpeechs) throws org.apache.thrift.TException
    {
      send_setPartOfSpeechs(partOfSpeechs);
      recv_setPartOfSpeechs();
    }

    public void send_setPartOfSpeechs(List<PartOfSpeech> partOfSpeechs) throws org.apache.thrift.TException
    {
      setPartOfSpeechs_args args = new setPartOfSpeechs_args();
      args.setPartOfSpeechs(partOfSpeechs);
      sendBase("setPartOfSpeechs", args);
    }

    public void recv_setPartOfSpeechs() throws org.apache.thrift.TException
    {
      setPartOfSpeechs_result result = new setPartOfSpeechs_result();
      receiveBase(result, "setPartOfSpeechs");
      return;
    }

    public void setPassages(List<Passage> passages) throws org.apache.thrift.TException
    {
      send_setPassages(passages);
      recv_setPassages();
    }

    public void send_setPassages(List<Passage> passages) throws org.apache.thrift.TException
    {
      setPassages_args args = new setPassages_args();
      args.setPassages(passages);
      sendBase("setPassages", args);
    }

    public void recv_setPassages() throws org.apache.thrift.TException
    {
      setPassages_result result = new setPassages_result();
      receiveBase(result, "setPassages");
      return;
    }

    public void setProsodicPhrases(List<ProsodicPhrase> prosodicPhrases) throws org.apache.thrift.TException
    {
      send_setProsodicPhrases(prosodicPhrases);
      recv_setProsodicPhrases();
    }

    public void send_setProsodicPhrases(List<ProsodicPhrase> prosodicPhrases) throws org.apache.thrift.TException
    {
      setProsodicPhrases_args args = new setProsodicPhrases_args();
      args.setProsodicPhrases(prosodicPhrases);
      sendBase("setProsodicPhrases", args);
    }

    public void recv_setProsodicPhrases() throws org.apache.thrift.TException
    {
      setProsodicPhrases_result result = new setProsodicPhrases_result();
      receiveBase(result, "setProsodicPhrases");
      return;
    }

    public void setRelations(List<Relation> relations) throws org.apache.thrift.TException
    {
      send_setRelations(relations);
      recv_setRelations();
    }

    public void send_setRelations(List<Relation> relations) throws org.apache.thrift.TException
    {
      setRelations_args args = new setRelations_args();
      args.setRelations(relations);
      sendBase("setRelations", args);
    }

    public void recv_setRelations() throws org.apache.thrift.TException
    {
      setRelations_result result = new setRelations_result();
      receiveBase(result, "setRelations");
      return;
    }

    public void setSarcasms(List<Sarcasm> sarcasms) throws org.apache.thrift.TException
    {
      send_setSarcasms(sarcasms);
      recv_setSarcasms();
    }

    public void send_setSarcasms(List<Sarcasm> sarcasms) throws org.apache.thrift.TException
    {
      setSarcasms_args args = new setSarcasms_args();
      args.setSarcasms(sarcasms);
      sendBase("setSarcasms", args);
    }

    public void recv_setSarcasms() throws org.apache.thrift.TException
    {
      setSarcasms_result result = new setSarcasms_result();
      receiveBase(result, "setSarcasms");
      return;
    }

    public void setSentences(List<Sentence> sentences) throws org.apache.thrift.TException
    {
      send_setSentences(sentences);
      recv_setSentences();
    }

    public void send_setSentences(List<Sentence> sentences) throws org.apache.thrift.TException
    {
      setSentences_args args = new setSentences_args();
      args.setSentences(sentences);
      sendBase("setSentences", args);
    }

    public void recv_setSentences() throws org.apache.thrift.TException
    {
      setSentences_result result = new setSentences_result();
      receiveBase(result, "setSentences");
      return;
    }

    public void setSyntacticChunks(List<SyntacticChunk> syntactiChunks) throws org.apache.thrift.TException
    {
      send_setSyntacticChunks(syntactiChunks);
      recv_setSyntacticChunks();
    }

    public void send_setSyntacticChunks(List<SyntacticChunk> syntactiChunks) throws org.apache.thrift.TException
    {
      setSyntacticChunks_args args = new setSyntacticChunks_args();
      args.setSyntactiChunks(syntactiChunks);
      sendBase("setSyntacticChunks", args);
    }

    public void recv_setSyntacticChunks() throws org.apache.thrift.TException
    {
      setSyntacticChunks_result result = new setSyntacticChunks_result();
      receiveBase(result, "setSyntacticChunks");
      return;
    }

  }
  public static class AsyncClient extends ItemService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCommittedBeliefs(org.apache.thrift.async.AsyncMethodCallback<getCommittedBeliefs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCommittedBeliefs_call method_call = new getCommittedBeliefs_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCommittedBeliefs_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCommittedBeliefs_call(org.apache.thrift.async.AsyncMethodCallback<getCommittedBeliefs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCommittedBeliefs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCommittedBeliefs_args args = new getCommittedBeliefs_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CommittedBelief> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCommittedBeliefs();
      }
    }

    public void getCoreferences(org.apache.thrift.async.AsyncMethodCallback<getCoreferences_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCoreferences_call method_call = new getCoreferences_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCoreferences_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCoreferences_call(org.apache.thrift.async.AsyncMethodCallback<getCoreferences_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCoreferences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCoreferences_args args = new getCoreferences_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Coreference> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCoreferences();
      }
    }

    public void getDependencies(org.apache.thrift.async.AsyncMethodCallback<getDependencies_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDependencies_call method_call = new getDependencies_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDependencies_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getDependencies_call(org.apache.thrift.async.AsyncMethodCallback<getDependencies_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDependencies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDependencies_args args = new getDependencies_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Dependency> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDependencies();
      }
    }

    public void getEntityMentions(org.apache.thrift.async.AsyncMethodCallback<getEntityMentions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityMentions_call method_call = new getEntityMentions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityMentions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getEntityMentions_call(org.apache.thrift.async.AsyncMethodCallback<getEntityMentions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityMentions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityMentions_args args = new getEntityMentions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<EntityMention> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityMentions();
      }
    }

    public void getJointRelationCoreferences(org.apache.thrift.async.AsyncMethodCallback<getJointRelationCoreferences_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJointRelationCoreferences_call method_call = new getJointRelationCoreferences_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJointRelationCoreferences_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getJointRelationCoreferences_call(org.apache.thrift.async.AsyncMethodCallback<getJointRelationCoreferences_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJointRelationCoreferences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJointRelationCoreferences_args args = new getJointRelationCoreferences_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<JointRelationCoreference> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJointRelationCoreferences();
      }
    }

    public void getMentions(org.apache.thrift.async.AsyncMethodCallback<getMentions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMentions_call method_call = new getMentions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMentions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getMentions_call(org.apache.thrift.async.AsyncMethodCallback<getMentions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMentions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMentions_args args = new getMentions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<EntityMention> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMentions();
      }
    }

    public void getNamedEntities(org.apache.thrift.async.AsyncMethodCallback<getNamedEntities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNamedEntities_call method_call = new getNamedEntities_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNamedEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getNamedEntities_call(org.apache.thrift.async.AsyncMethodCallback<getNamedEntities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNamedEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNamedEntities_args args = new getNamedEntities_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<EntityMention> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNamedEntities();
      }
    }

    public void getOpinions(org.apache.thrift.async.AsyncMethodCallback<getOpinions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOpinions_call method_call = new getOpinions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOpinions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getOpinions_call(org.apache.thrift.async.AsyncMethodCallback<getOpinions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOpinions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOpinions_args args = new getOpinions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Opinion> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOpinions();
      }
    }

    public void getPartOfSpeechs(org.apache.thrift.async.AsyncMethodCallback<getPartOfSpeechs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPartOfSpeechs_call method_call = new getPartOfSpeechs_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartOfSpeechs_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getPartOfSpeechs_call(org.apache.thrift.async.AsyncMethodCallback<getPartOfSpeechs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartOfSpeechs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartOfSpeechs_args args = new getPartOfSpeechs_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PartOfSpeech> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartOfSpeechs();
      }
    }

    public void getPassages(org.apache.thrift.async.AsyncMethodCallback<getPassages_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPassages_call method_call = new getPassages_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPassages_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getPassages_call(org.apache.thrift.async.AsyncMethodCallback<getPassages_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPassages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPassages_args args = new getPassages_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Passage> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPassages();
      }
    }

    public void getProsodicPhrases(org.apache.thrift.async.AsyncMethodCallback<getProsodicPhrases_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProsodicPhrases_call method_call = new getProsodicPhrases_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProsodicPhrases_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getProsodicPhrases_call(org.apache.thrift.async.AsyncMethodCallback<getProsodicPhrases_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProsodicPhrases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProsodicPhrases_args args = new getProsodicPhrases_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProsodicPhrase> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProsodicPhrases();
      }
    }

    public void getRelations(org.apache.thrift.async.AsyncMethodCallback<getRelations_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRelations_call method_call = new getRelations_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRelations_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getRelations_call(org.apache.thrift.async.AsyncMethodCallback<getRelations_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRelations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRelations_args args = new getRelations_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Relation> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRelations();
      }
    }

    public void getSarcasms(org.apache.thrift.async.AsyncMethodCallback<getSarcasms_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSarcasms_call method_call = new getSarcasms_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSarcasms_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSarcasms_call(org.apache.thrift.async.AsyncMethodCallback<getSarcasms_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSarcasms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSarcasms_args args = new getSarcasms_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Sarcasm> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSarcasms();
      }
    }

    public void getSentences(org.apache.thrift.async.AsyncMethodCallback<getSentences_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSentences_call method_call = new getSentences_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSentences_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSentences_call(org.apache.thrift.async.AsyncMethodCallback<getSentences_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSentences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSentences_args args = new getSentences_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Sentence> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSentences();
      }
    }

    public void getSyntacticChunks(org.apache.thrift.async.AsyncMethodCallback<getSyntacticChunks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSyntacticChunks_call method_call = new getSyntacticChunks_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSyntacticChunks_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSyntacticChunks_call(org.apache.thrift.async.AsyncMethodCallback<getSyntacticChunks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSyntacticChunks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSyntacticChunks_args args = new getSyntacticChunks_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SyntacticChunk> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSyntacticChunks();
      }
    }

    public void setCommittedBeliefs(List<CommittedBelief> committedBeliefs, org.apache.thrift.async.AsyncMethodCallback<setCommittedBeliefs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setCommittedBeliefs_call method_call = new setCommittedBeliefs_call(committedBeliefs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setCommittedBeliefs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<CommittedBelief> committedBeliefs;
      public setCommittedBeliefs_call(List<CommittedBelief> committedBeliefs, org.apache.thrift.async.AsyncMethodCallback<setCommittedBeliefs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.committedBeliefs = committedBeliefs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCommittedBeliefs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setCommittedBeliefs_args args = new setCommittedBeliefs_args();
        args.setCommittedBeliefs(committedBeliefs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setCommittedBeliefs();
      }
    }

    public void setCoreferences(List<Coreference> coreferences, org.apache.thrift.async.AsyncMethodCallback<setCoreferences_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setCoreferences_call method_call = new setCoreferences_call(coreferences, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setCoreferences_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Coreference> coreferences;
      public setCoreferences_call(List<Coreference> coreferences, org.apache.thrift.async.AsyncMethodCallback<setCoreferences_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.coreferences = coreferences;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCoreferences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setCoreferences_args args = new setCoreferences_args();
        args.setCoreferences(coreferences);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setCoreferences();
      }
    }

    public void setDependencies(List<Dependency> dependencies, org.apache.thrift.async.AsyncMethodCallback<setDependencies_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDependencies_call method_call = new setDependencies_call(dependencies, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDependencies_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Dependency> dependencies;
      public setDependencies_call(List<Dependency> dependencies, org.apache.thrift.async.AsyncMethodCallback<setDependencies_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dependencies = dependencies;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDependencies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDependencies_args args = new setDependencies_args();
        args.setDependencies(dependencies);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setDependencies();
      }
    }

    public void setEntityMentions(List<EntityMention> entityMentions, org.apache.thrift.async.AsyncMethodCallback<setEntityMentions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setEntityMentions_call method_call = new setEntityMentions_call(entityMentions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setEntityMentions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<EntityMention> entityMentions;
      public setEntityMentions_call(List<EntityMention> entityMentions, org.apache.thrift.async.AsyncMethodCallback<setEntityMentions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityMentions = entityMentions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setEntityMentions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setEntityMentions_args args = new setEntityMentions_args();
        args.setEntityMentions(entityMentions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setEntityMentions();
      }
    }

    public void setJointRelationCoreferences(List<JointRelationCoreference> jointRelationCoreferences, org.apache.thrift.async.AsyncMethodCallback<setJointRelationCoreferences_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setJointRelationCoreferences_call method_call = new setJointRelationCoreferences_call(jointRelationCoreferences, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setJointRelationCoreferences_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<JointRelationCoreference> jointRelationCoreferences;
      public setJointRelationCoreferences_call(List<JointRelationCoreference> jointRelationCoreferences, org.apache.thrift.async.AsyncMethodCallback<setJointRelationCoreferences_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jointRelationCoreferences = jointRelationCoreferences;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setJointRelationCoreferences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setJointRelationCoreferences_args args = new setJointRelationCoreferences_args();
        args.setJointRelationCoreferences(jointRelationCoreferences);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setJointRelationCoreferences();
      }
    }

    public void setMentions(List<EntityMention> entityMentions, org.apache.thrift.async.AsyncMethodCallback<setMentions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setMentions_call method_call = new setMentions_call(entityMentions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setMentions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<EntityMention> entityMentions;
      public setMentions_call(List<EntityMention> entityMentions, org.apache.thrift.async.AsyncMethodCallback<setMentions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityMentions = entityMentions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setMentions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setMentions_args args = new setMentions_args();
        args.setEntityMentions(entityMentions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setMentions();
      }
    }

    public void setNamedEntities(List<EntityMention> namedEntities, org.apache.thrift.async.AsyncMethodCallback<setNamedEntities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setNamedEntities_call method_call = new setNamedEntities_call(namedEntities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setNamedEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<EntityMention> namedEntities;
      public setNamedEntities_call(List<EntityMention> namedEntities, org.apache.thrift.async.AsyncMethodCallback<setNamedEntities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.namedEntities = namedEntities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setNamedEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setNamedEntities_args args = new setNamedEntities_args();
        args.setNamedEntities(namedEntities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setNamedEntities();
      }
    }

    public void setOpinions(List<Opinion> opinions, org.apache.thrift.async.AsyncMethodCallback<setOpinions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOpinions_call method_call = new setOpinions_call(opinions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOpinions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Opinion> opinions;
      public setOpinions_call(List<Opinion> opinions, org.apache.thrift.async.AsyncMethodCallback<setOpinions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.opinions = opinions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOpinions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOpinions_args args = new setOpinions_args();
        args.setOpinions(opinions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOpinions();
      }
    }

    public void setPartOfSpeechs(List<PartOfSpeech> partOfSpeechs, org.apache.thrift.async.AsyncMethodCallback<setPartOfSpeechs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPartOfSpeechs_call method_call = new setPartOfSpeechs_call(partOfSpeechs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPartOfSpeechs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<PartOfSpeech> partOfSpeechs;
      public setPartOfSpeechs_call(List<PartOfSpeech> partOfSpeechs, org.apache.thrift.async.AsyncMethodCallback<setPartOfSpeechs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partOfSpeechs = partOfSpeechs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPartOfSpeechs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPartOfSpeechs_args args = new setPartOfSpeechs_args();
        args.setPartOfSpeechs(partOfSpeechs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setPartOfSpeechs();
      }
    }

    public void setPassages(List<Passage> passages, org.apache.thrift.async.AsyncMethodCallback<setPassages_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPassages_call method_call = new setPassages_call(passages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPassages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Passage> passages;
      public setPassages_call(List<Passage> passages, org.apache.thrift.async.AsyncMethodCallback<setPassages_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passages = passages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPassages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPassages_args args = new setPassages_args();
        args.setPassages(passages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setPassages();
      }
    }

    public void setProsodicPhrases(List<ProsodicPhrase> prosodicPhrases, org.apache.thrift.async.AsyncMethodCallback<setProsodicPhrases_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setProsodicPhrases_call method_call = new setProsodicPhrases_call(prosodicPhrases, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setProsodicPhrases_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ProsodicPhrase> prosodicPhrases;
      public setProsodicPhrases_call(List<ProsodicPhrase> prosodicPhrases, org.apache.thrift.async.AsyncMethodCallback<setProsodicPhrases_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prosodicPhrases = prosodicPhrases;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setProsodicPhrases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setProsodicPhrases_args args = new setProsodicPhrases_args();
        args.setProsodicPhrases(prosodicPhrases);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setProsodicPhrases();
      }
    }

    public void setRelations(List<Relation> relations, org.apache.thrift.async.AsyncMethodCallback<setRelations_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRelations_call method_call = new setRelations_call(relations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRelations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Relation> relations;
      public setRelations_call(List<Relation> relations, org.apache.thrift.async.AsyncMethodCallback<setRelations_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.relations = relations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRelations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRelations_args args = new setRelations_args();
        args.setRelations(relations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setRelations();
      }
    }

    public void setSarcasms(List<Sarcasm> sarcasms, org.apache.thrift.async.AsyncMethodCallback<setSarcasms_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSarcasms_call method_call = new setSarcasms_call(sarcasms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSarcasms_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Sarcasm> sarcasms;
      public setSarcasms_call(List<Sarcasm> sarcasms, org.apache.thrift.async.AsyncMethodCallback<setSarcasms_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sarcasms = sarcasms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSarcasms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSarcasms_args args = new setSarcasms_args();
        args.setSarcasms(sarcasms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setSarcasms();
      }
    }

    public void setSentences(List<Sentence> sentences, org.apache.thrift.async.AsyncMethodCallback<setSentences_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSentences_call method_call = new setSentences_call(sentences, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSentences_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Sentence> sentences;
      public setSentences_call(List<Sentence> sentences, org.apache.thrift.async.AsyncMethodCallback<setSentences_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sentences = sentences;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSentences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSentences_args args = new setSentences_args();
        args.setSentences(sentences);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setSentences();
      }
    }

    public void setSyntacticChunks(List<SyntacticChunk> syntactiChunks, org.apache.thrift.async.AsyncMethodCallback<setSyntacticChunks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSyntacticChunks_call method_call = new setSyntacticChunks_call(syntactiChunks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSyntacticChunks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<SyntacticChunk> syntactiChunks;
      public setSyntacticChunks_call(List<SyntacticChunk> syntactiChunks, org.apache.thrift.async.AsyncMethodCallback<setSyntacticChunks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.syntactiChunks = syntactiChunks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSyntacticChunks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSyntacticChunks_args args = new setSyntacticChunks_args();
        args.setSyntactiChunks(syntactiChunks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setSyntacticChunks();
      }
    }

  }

  public static class Processor<I extends Iface> extends ItemService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCommittedBeliefs", new getCommittedBeliefs());
      processMap.put("getCoreferences", new getCoreferences());
      processMap.put("getDependencies", new getDependencies());
      processMap.put("getEntityMentions", new getEntityMentions());
      processMap.put("getJointRelationCoreferences", new getJointRelationCoreferences());
      processMap.put("getMentions", new getMentions());
      processMap.put("getNamedEntities", new getNamedEntities());
      processMap.put("getOpinions", new getOpinions());
      processMap.put("getPartOfSpeechs", new getPartOfSpeechs());
      processMap.put("getPassages", new getPassages());
      processMap.put("getProsodicPhrases", new getProsodicPhrases());
      processMap.put("getRelations", new getRelations());
      processMap.put("getSarcasms", new getSarcasms());
      processMap.put("getSentences", new getSentences());
      processMap.put("getSyntacticChunks", new getSyntacticChunks());
      processMap.put("setCommittedBeliefs", new setCommittedBeliefs());
      processMap.put("setCoreferences", new setCoreferences());
      processMap.put("setDependencies", new setDependencies());
      processMap.put("setEntityMentions", new setEntityMentions());
      processMap.put("setJointRelationCoreferences", new setJointRelationCoreferences());
      processMap.put("setMentions", new setMentions());
      processMap.put("setNamedEntities", new setNamedEntities());
      processMap.put("setOpinions", new setOpinions());
      processMap.put("setPartOfSpeechs", new setPartOfSpeechs());
      processMap.put("setPassages", new setPassages());
      processMap.put("setProsodicPhrases", new setProsodicPhrases());
      processMap.put("setRelations", new setRelations());
      processMap.put("setSarcasms", new setSarcasms());
      processMap.put("setSentences", new setSentences());
      processMap.put("setSyntacticChunks", new setSyntacticChunks());
      return processMap;
    }

    public static class getCommittedBeliefs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCommittedBeliefs_args> {
      public getCommittedBeliefs() {
        super("getCommittedBeliefs");
      }

      public getCommittedBeliefs_args getEmptyArgsInstance() {
        return new getCommittedBeliefs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCommittedBeliefs_result getResult(I iface, getCommittedBeliefs_args args) throws org.apache.thrift.TException {
        getCommittedBeliefs_result result = new getCommittedBeliefs_result();
        result.success = iface.getCommittedBeliefs();
        return result;
      }
    }

    public static class getCoreferences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCoreferences_args> {
      public getCoreferences() {
        super("getCoreferences");
      }

      public getCoreferences_args getEmptyArgsInstance() {
        return new getCoreferences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCoreferences_result getResult(I iface, getCoreferences_args args) throws org.apache.thrift.TException {
        getCoreferences_result result = new getCoreferences_result();
        result.success = iface.getCoreferences();
        return result;
      }
    }

    public static class getDependencies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDependencies_args> {
      public getDependencies() {
        super("getDependencies");
      }

      public getDependencies_args getEmptyArgsInstance() {
        return new getDependencies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDependencies_result getResult(I iface, getDependencies_args args) throws org.apache.thrift.TException {
        getDependencies_result result = new getDependencies_result();
        result.success = iface.getDependencies();
        return result;
      }
    }

    public static class getEntityMentions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityMentions_args> {
      public getEntityMentions() {
        super("getEntityMentions");
      }

      public getEntityMentions_args getEmptyArgsInstance() {
        return new getEntityMentions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityMentions_result getResult(I iface, getEntityMentions_args args) throws org.apache.thrift.TException {
        getEntityMentions_result result = new getEntityMentions_result();
        result.success = iface.getEntityMentions();
        return result;
      }
    }

    public static class getJointRelationCoreferences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJointRelationCoreferences_args> {
      public getJointRelationCoreferences() {
        super("getJointRelationCoreferences");
      }

      public getJointRelationCoreferences_args getEmptyArgsInstance() {
        return new getJointRelationCoreferences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJointRelationCoreferences_result getResult(I iface, getJointRelationCoreferences_args args) throws org.apache.thrift.TException {
        getJointRelationCoreferences_result result = new getJointRelationCoreferences_result();
        result.success = iface.getJointRelationCoreferences();
        return result;
      }
    }

    public static class getMentions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMentions_args> {
      public getMentions() {
        super("getMentions");
      }

      public getMentions_args getEmptyArgsInstance() {
        return new getMentions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMentions_result getResult(I iface, getMentions_args args) throws org.apache.thrift.TException {
        getMentions_result result = new getMentions_result();
        result.success = iface.getMentions();
        return result;
      }
    }

    public static class getNamedEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNamedEntities_args> {
      public getNamedEntities() {
        super("getNamedEntities");
      }

      public getNamedEntities_args getEmptyArgsInstance() {
        return new getNamedEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNamedEntities_result getResult(I iface, getNamedEntities_args args) throws org.apache.thrift.TException {
        getNamedEntities_result result = new getNamedEntities_result();
        result.success = iface.getNamedEntities();
        return result;
      }
    }

    public static class getOpinions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOpinions_args> {
      public getOpinions() {
        super("getOpinions");
      }

      public getOpinions_args getEmptyArgsInstance() {
        return new getOpinions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOpinions_result getResult(I iface, getOpinions_args args) throws org.apache.thrift.TException {
        getOpinions_result result = new getOpinions_result();
        result.success = iface.getOpinions();
        return result;
      }
    }

    public static class getPartOfSpeechs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartOfSpeechs_args> {
      public getPartOfSpeechs() {
        super("getPartOfSpeechs");
      }

      public getPartOfSpeechs_args getEmptyArgsInstance() {
        return new getPartOfSpeechs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartOfSpeechs_result getResult(I iface, getPartOfSpeechs_args args) throws org.apache.thrift.TException {
        getPartOfSpeechs_result result = new getPartOfSpeechs_result();
        result.success = iface.getPartOfSpeechs();
        return result;
      }
    }

    public static class getPassages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPassages_args> {
      public getPassages() {
        super("getPassages");
      }

      public getPassages_args getEmptyArgsInstance() {
        return new getPassages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPassages_result getResult(I iface, getPassages_args args) throws org.apache.thrift.TException {
        getPassages_result result = new getPassages_result();
        result.success = iface.getPassages();
        return result;
      }
    }

    public static class getProsodicPhrases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProsodicPhrases_args> {
      public getProsodicPhrases() {
        super("getProsodicPhrases");
      }

      public getProsodicPhrases_args getEmptyArgsInstance() {
        return new getProsodicPhrases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProsodicPhrases_result getResult(I iface, getProsodicPhrases_args args) throws org.apache.thrift.TException {
        getProsodicPhrases_result result = new getProsodicPhrases_result();
        result.success = iface.getProsodicPhrases();
        return result;
      }
    }

    public static class getRelations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRelations_args> {
      public getRelations() {
        super("getRelations");
      }

      public getRelations_args getEmptyArgsInstance() {
        return new getRelations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRelations_result getResult(I iface, getRelations_args args) throws org.apache.thrift.TException {
        getRelations_result result = new getRelations_result();
        result.success = iface.getRelations();
        return result;
      }
    }

    public static class getSarcasms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSarcasms_args> {
      public getSarcasms() {
        super("getSarcasms");
      }

      public getSarcasms_args getEmptyArgsInstance() {
        return new getSarcasms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSarcasms_result getResult(I iface, getSarcasms_args args) throws org.apache.thrift.TException {
        getSarcasms_result result = new getSarcasms_result();
        result.success = iface.getSarcasms();
        return result;
      }
    }

    public static class getSentences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSentences_args> {
      public getSentences() {
        super("getSentences");
      }

      public getSentences_args getEmptyArgsInstance() {
        return new getSentences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSentences_result getResult(I iface, getSentences_args args) throws org.apache.thrift.TException {
        getSentences_result result = new getSentences_result();
        result.success = iface.getSentences();
        return result;
      }
    }

    public static class getSyntacticChunks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSyntacticChunks_args> {
      public getSyntacticChunks() {
        super("getSyntacticChunks");
      }

      public getSyntacticChunks_args getEmptyArgsInstance() {
        return new getSyntacticChunks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSyntacticChunks_result getResult(I iface, getSyntacticChunks_args args) throws org.apache.thrift.TException {
        getSyntacticChunks_result result = new getSyntacticChunks_result();
        result.success = iface.getSyntacticChunks();
        return result;
      }
    }

    public static class setCommittedBeliefs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCommittedBeliefs_args> {
      public setCommittedBeliefs() {
        super("setCommittedBeliefs");
      }

      public setCommittedBeliefs_args getEmptyArgsInstance() {
        return new setCommittedBeliefs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setCommittedBeliefs_result getResult(I iface, setCommittedBeliefs_args args) throws org.apache.thrift.TException {
        setCommittedBeliefs_result result = new setCommittedBeliefs_result();
        iface.setCommittedBeliefs(args.committedBeliefs);
        return result;
      }
    }

    public static class setCoreferences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCoreferences_args> {
      public setCoreferences() {
        super("setCoreferences");
      }

      public setCoreferences_args getEmptyArgsInstance() {
        return new setCoreferences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setCoreferences_result getResult(I iface, setCoreferences_args args) throws org.apache.thrift.TException {
        setCoreferences_result result = new setCoreferences_result();
        iface.setCoreferences(args.coreferences);
        return result;
      }
    }

    public static class setDependencies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDependencies_args> {
      public setDependencies() {
        super("setDependencies");
      }

      public setDependencies_args getEmptyArgsInstance() {
        return new setDependencies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setDependencies_result getResult(I iface, setDependencies_args args) throws org.apache.thrift.TException {
        setDependencies_result result = new setDependencies_result();
        iface.setDependencies(args.dependencies);
        return result;
      }
    }

    public static class setEntityMentions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setEntityMentions_args> {
      public setEntityMentions() {
        super("setEntityMentions");
      }

      public setEntityMentions_args getEmptyArgsInstance() {
        return new setEntityMentions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setEntityMentions_result getResult(I iface, setEntityMentions_args args) throws org.apache.thrift.TException {
        setEntityMentions_result result = new setEntityMentions_result();
        iface.setEntityMentions(args.entityMentions);
        return result;
      }
    }

    public static class setJointRelationCoreferences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setJointRelationCoreferences_args> {
      public setJointRelationCoreferences() {
        super("setJointRelationCoreferences");
      }

      public setJointRelationCoreferences_args getEmptyArgsInstance() {
        return new setJointRelationCoreferences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setJointRelationCoreferences_result getResult(I iface, setJointRelationCoreferences_args args) throws org.apache.thrift.TException {
        setJointRelationCoreferences_result result = new setJointRelationCoreferences_result();
        iface.setJointRelationCoreferences(args.jointRelationCoreferences);
        return result;
      }
    }

    public static class setMentions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setMentions_args> {
      public setMentions() {
        super("setMentions");
      }

      public setMentions_args getEmptyArgsInstance() {
        return new setMentions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setMentions_result getResult(I iface, setMentions_args args) throws org.apache.thrift.TException {
        setMentions_result result = new setMentions_result();
        iface.setMentions(args.entityMentions);
        return result;
      }
    }

    public static class setNamedEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setNamedEntities_args> {
      public setNamedEntities() {
        super("setNamedEntities");
      }

      public setNamedEntities_args getEmptyArgsInstance() {
        return new setNamedEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setNamedEntities_result getResult(I iface, setNamedEntities_args args) throws org.apache.thrift.TException {
        setNamedEntities_result result = new setNamedEntities_result();
        iface.setNamedEntities(args.namedEntities);
        return result;
      }
    }

    public static class setOpinions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOpinions_args> {
      public setOpinions() {
        super("setOpinions");
      }

      public setOpinions_args getEmptyArgsInstance() {
        return new setOpinions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOpinions_result getResult(I iface, setOpinions_args args) throws org.apache.thrift.TException {
        setOpinions_result result = new setOpinions_result();
        iface.setOpinions(args.opinions);
        return result;
      }
    }

    public static class setPartOfSpeechs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPartOfSpeechs_args> {
      public setPartOfSpeechs() {
        super("setPartOfSpeechs");
      }

      public setPartOfSpeechs_args getEmptyArgsInstance() {
        return new setPartOfSpeechs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPartOfSpeechs_result getResult(I iface, setPartOfSpeechs_args args) throws org.apache.thrift.TException {
        setPartOfSpeechs_result result = new setPartOfSpeechs_result();
        iface.setPartOfSpeechs(args.partOfSpeechs);
        return result;
      }
    }

    public static class setPassages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPassages_args> {
      public setPassages() {
        super("setPassages");
      }

      public setPassages_args getEmptyArgsInstance() {
        return new setPassages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPassages_result getResult(I iface, setPassages_args args) throws org.apache.thrift.TException {
        setPassages_result result = new setPassages_result();
        iface.setPassages(args.passages);
        return result;
      }
    }

    public static class setProsodicPhrases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setProsodicPhrases_args> {
      public setProsodicPhrases() {
        super("setProsodicPhrases");
      }

      public setProsodicPhrases_args getEmptyArgsInstance() {
        return new setProsodicPhrases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setProsodicPhrases_result getResult(I iface, setProsodicPhrases_args args) throws org.apache.thrift.TException {
        setProsodicPhrases_result result = new setProsodicPhrases_result();
        iface.setProsodicPhrases(args.prosodicPhrases);
        return result;
      }
    }

    public static class setRelations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRelations_args> {
      public setRelations() {
        super("setRelations");
      }

      public setRelations_args getEmptyArgsInstance() {
        return new setRelations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setRelations_result getResult(I iface, setRelations_args args) throws org.apache.thrift.TException {
        setRelations_result result = new setRelations_result();
        iface.setRelations(args.relations);
        return result;
      }
    }

    public static class setSarcasms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSarcasms_args> {
      public setSarcasms() {
        super("setSarcasms");
      }

      public setSarcasms_args getEmptyArgsInstance() {
        return new setSarcasms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setSarcasms_result getResult(I iface, setSarcasms_args args) throws org.apache.thrift.TException {
        setSarcasms_result result = new setSarcasms_result();
        iface.setSarcasms(args.sarcasms);
        return result;
      }
    }

    public static class setSentences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSentences_args> {
      public setSentences() {
        super("setSentences");
      }

      public setSentences_args getEmptyArgsInstance() {
        return new setSentences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setSentences_result getResult(I iface, setSentences_args args) throws org.apache.thrift.TException {
        setSentences_result result = new setSentences_result();
        iface.setSentences(args.sentences);
        return result;
      }
    }

    public static class setSyntacticChunks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSyntacticChunks_args> {
      public setSyntacticChunks() {
        super("setSyntacticChunks");
      }

      public setSyntacticChunks_args getEmptyArgsInstance() {
        return new setSyntacticChunks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setSyntacticChunks_result getResult(I iface, setSyntacticChunks_args args) throws org.apache.thrift.TException {
        setSyntacticChunks_result result = new setSyntacticChunks_result();
        iface.setSyntacticChunks(args.syntactiChunks);
        return result;
      }
    }

  }

  public static class getCommittedBeliefs_args implements org.apache.thrift.TBase<getCommittedBeliefs_args, getCommittedBeliefs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCommittedBeliefs_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCommittedBeliefs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCommittedBeliefs_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommittedBeliefs_args.class, metaDataMap);
    }

    public getCommittedBeliefs_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommittedBeliefs_args(getCommittedBeliefs_args other) {
    }

    public getCommittedBeliefs_args deepCopy() {
      return new getCommittedBeliefs_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommittedBeliefs_args)
        return this.equals((getCommittedBeliefs_args)that);
      return false;
    }

    public boolean equals(getCommittedBeliefs_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCommittedBeliefs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCommittedBeliefs_args typedOther = (getCommittedBeliefs_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCommittedBeliefs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCommittedBeliefs_argsStandardSchemeFactory implements SchemeFactory {
      public getCommittedBeliefs_argsStandardScheme getScheme() {
        return new getCommittedBeliefs_argsStandardScheme();
      }
    }

    private static class getCommittedBeliefs_argsStandardScheme extends StandardScheme<getCommittedBeliefs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCommittedBeliefs_argsTupleSchemeFactory implements SchemeFactory {
      public getCommittedBeliefs_argsTupleScheme getScheme() {
        return new getCommittedBeliefs_argsTupleScheme();
      }
    }

    private static class getCommittedBeliefs_argsTupleScheme extends TupleScheme<getCommittedBeliefs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCommittedBeliefs_result implements org.apache.thrift.TBase<getCommittedBeliefs_result, getCommittedBeliefs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCommittedBeliefs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCommittedBeliefs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCommittedBeliefs_resultTupleSchemeFactory());
    }

    public List<CommittedBelief> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommittedBelief.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommittedBeliefs_result.class, metaDataMap);
    }

    public getCommittedBeliefs_result() {
    }

    public getCommittedBeliefs_result(
      List<CommittedBelief> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommittedBeliefs_result(getCommittedBeliefs_result other) {
      if (other.isSetSuccess()) {
        List<CommittedBelief> __this__success = new ArrayList<CommittedBelief>();
        for (CommittedBelief other_element : other.success) {
          __this__success.add(new CommittedBelief(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCommittedBeliefs_result deepCopy() {
      return new getCommittedBeliefs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CommittedBelief> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CommittedBelief elem) {
      if (this.success == null) {
        this.success = new ArrayList<CommittedBelief>();
      }
      this.success.add(elem);
    }

    public List<CommittedBelief> getSuccess() {
      return this.success;
    }

    public getCommittedBeliefs_result setSuccess(List<CommittedBelief> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CommittedBelief>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommittedBeliefs_result)
        return this.equals((getCommittedBeliefs_result)that);
      return false;
    }

    public boolean equals(getCommittedBeliefs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCommittedBeliefs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCommittedBeliefs_result typedOther = (getCommittedBeliefs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCommittedBeliefs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCommittedBeliefs_resultStandardSchemeFactory implements SchemeFactory {
      public getCommittedBeliefs_resultStandardScheme getScheme() {
        return new getCommittedBeliefs_resultStandardScheme();
      }
    }

    private static class getCommittedBeliefs_resultStandardScheme extends StandardScheme<getCommittedBeliefs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list596 = iprot.readListBegin();
                  struct.success = new ArrayList<CommittedBelief>(_list596.size);
                  for (int _i597 = 0; _i597 < _list596.size; ++_i597)
                  {
                    CommittedBelief _elem598; // required
                    _elem598 = new CommittedBelief();
                    _elem598.read(iprot);
                    struct.success.add(_elem598);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CommittedBelief _iter599 : struct.success)
            {
              _iter599.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCommittedBeliefs_resultTupleSchemeFactory implements SchemeFactory {
      public getCommittedBeliefs_resultTupleScheme getScheme() {
        return new getCommittedBeliefs_resultTupleScheme();
      }
    }

    private static class getCommittedBeliefs_resultTupleScheme extends TupleScheme<getCommittedBeliefs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CommittedBelief _iter600 : struct.success)
            {
              _iter600.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list601 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CommittedBelief>(_list601.size);
            for (int _i602 = 0; _i602 < _list601.size; ++_i602)
            {
              CommittedBelief _elem603; // required
              _elem603 = new CommittedBelief();
              _elem603.read(iprot);
              struct.success.add(_elem603);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCoreferences_args implements org.apache.thrift.TBase<getCoreferences_args, getCoreferences_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoreferences_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCoreferences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCoreferences_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreferences_args.class, metaDataMap);
    }

    public getCoreferences_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoreferences_args(getCoreferences_args other) {
    }

    public getCoreferences_args deepCopy() {
      return new getCoreferences_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoreferences_args)
        return this.equals((getCoreferences_args)that);
      return false;
    }

    public boolean equals(getCoreferences_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCoreferences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCoreferences_args typedOther = (getCoreferences_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCoreferences_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoreferences_argsStandardSchemeFactory implements SchemeFactory {
      public getCoreferences_argsStandardScheme getScheme() {
        return new getCoreferences_argsStandardScheme();
      }
    }

    private static class getCoreferences_argsStandardScheme extends StandardScheme<getCoreferences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreferences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreferences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoreferences_argsTupleSchemeFactory implements SchemeFactory {
      public getCoreferences_argsTupleScheme getScheme() {
        return new getCoreferences_argsTupleScheme();
      }
    }

    private static class getCoreferences_argsTupleScheme extends TupleScheme<getCoreferences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCoreferences_result implements org.apache.thrift.TBase<getCoreferences_result, getCoreferences_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoreferences_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCoreferences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCoreferences_resultTupleSchemeFactory());
    }

    public List<Coreference> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coreference.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreferences_result.class, metaDataMap);
    }

    public getCoreferences_result() {
    }

    public getCoreferences_result(
      List<Coreference> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoreferences_result(getCoreferences_result other) {
      if (other.isSetSuccess()) {
        List<Coreference> __this__success = new ArrayList<Coreference>();
        for (Coreference other_element : other.success) {
          __this__success.add(new Coreference(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCoreferences_result deepCopy() {
      return new getCoreferences_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Coreference> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Coreference elem) {
      if (this.success == null) {
        this.success = new ArrayList<Coreference>();
      }
      this.success.add(elem);
    }

    public List<Coreference> getSuccess() {
      return this.success;
    }

    public getCoreferences_result setSuccess(List<Coreference> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Coreference>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoreferences_result)
        return this.equals((getCoreferences_result)that);
      return false;
    }

    public boolean equals(getCoreferences_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCoreferences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCoreferences_result typedOther = (getCoreferences_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCoreferences_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoreferences_resultStandardSchemeFactory implements SchemeFactory {
      public getCoreferences_resultStandardScheme getScheme() {
        return new getCoreferences_resultStandardScheme();
      }
    }

    private static class getCoreferences_resultStandardScheme extends StandardScheme<getCoreferences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreferences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list604 = iprot.readListBegin();
                  struct.success = new ArrayList<Coreference>(_list604.size);
                  for (int _i605 = 0; _i605 < _list604.size; ++_i605)
                  {
                    Coreference _elem606; // required
                    _elem606 = new Coreference();
                    _elem606.read(iprot);
                    struct.success.add(_elem606);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreferences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Coreference _iter607 : struct.success)
            {
              _iter607.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoreferences_resultTupleSchemeFactory implements SchemeFactory {
      public getCoreferences_resultTupleScheme getScheme() {
        return new getCoreferences_resultTupleScheme();
      }
    }

    private static class getCoreferences_resultTupleScheme extends TupleScheme<getCoreferences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Coreference _iter608 : struct.success)
            {
              _iter608.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list609 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Coreference>(_list609.size);
            for (int _i610 = 0; _i610 < _list609.size; ++_i610)
            {
              Coreference _elem611; // required
              _elem611 = new Coreference();
              _elem611.read(iprot);
              struct.success.add(_elem611);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDependencies_args implements org.apache.thrift.TBase<getDependencies_args, getDependencies_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDependencies_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDependencies_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDependencies_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDependencies_args.class, metaDataMap);
    }

    public getDependencies_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDependencies_args(getDependencies_args other) {
    }

    public getDependencies_args deepCopy() {
      return new getDependencies_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDependencies_args)
        return this.equals((getDependencies_args)that);
      return false;
    }

    public boolean equals(getDependencies_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDependencies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDependencies_args typedOther = (getDependencies_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDependencies_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDependencies_argsStandardSchemeFactory implements SchemeFactory {
      public getDependencies_argsStandardScheme getScheme() {
        return new getDependencies_argsStandardScheme();
      }
    }

    private static class getDependencies_argsStandardScheme extends StandardScheme<getDependencies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDependencies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDependencies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDependencies_argsTupleSchemeFactory implements SchemeFactory {
      public getDependencies_argsTupleScheme getScheme() {
        return new getDependencies_argsTupleScheme();
      }
    }

    private static class getDependencies_argsTupleScheme extends TupleScheme<getDependencies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDependencies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDependencies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getDependencies_result implements org.apache.thrift.TBase<getDependencies_result, getDependencies_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDependencies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDependencies_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDependencies_resultTupleSchemeFactory());
    }

    public List<Dependency> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dependency.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDependencies_result.class, metaDataMap);
    }

    public getDependencies_result() {
    }

    public getDependencies_result(
      List<Dependency> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDependencies_result(getDependencies_result other) {
      if (other.isSetSuccess()) {
        List<Dependency> __this__success = new ArrayList<Dependency>();
        for (Dependency other_element : other.success) {
          __this__success.add(new Dependency(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDependencies_result deepCopy() {
      return new getDependencies_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Dependency> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Dependency elem) {
      if (this.success == null) {
        this.success = new ArrayList<Dependency>();
      }
      this.success.add(elem);
    }

    public List<Dependency> getSuccess() {
      return this.success;
    }

    public getDependencies_result setSuccess(List<Dependency> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Dependency>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDependencies_result)
        return this.equals((getDependencies_result)that);
      return false;
    }

    public boolean equals(getDependencies_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDependencies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDependencies_result typedOther = (getDependencies_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDependencies_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDependencies_resultStandardSchemeFactory implements SchemeFactory {
      public getDependencies_resultStandardScheme getScheme() {
        return new getDependencies_resultStandardScheme();
      }
    }

    private static class getDependencies_resultStandardScheme extends StandardScheme<getDependencies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDependencies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list612 = iprot.readListBegin();
                  struct.success = new ArrayList<Dependency>(_list612.size);
                  for (int _i613 = 0; _i613 < _list612.size; ++_i613)
                  {
                    Dependency _elem614; // required
                    _elem614 = new Dependency();
                    _elem614.read(iprot);
                    struct.success.add(_elem614);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDependencies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Dependency _iter615 : struct.success)
            {
              _iter615.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDependencies_resultTupleSchemeFactory implements SchemeFactory {
      public getDependencies_resultTupleScheme getScheme() {
        return new getDependencies_resultTupleScheme();
      }
    }

    private static class getDependencies_resultTupleScheme extends TupleScheme<getDependencies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDependencies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Dependency _iter616 : struct.success)
            {
              _iter616.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDependencies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list617 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Dependency>(_list617.size);
            for (int _i618 = 0; _i618 < _list617.size; ++_i618)
            {
              Dependency _elem619; // required
              _elem619 = new Dependency();
              _elem619.read(iprot);
              struct.success.add(_elem619);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntityMentions_args implements org.apache.thrift.TBase<getEntityMentions_args, getEntityMentions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityMentions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityMentions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityMentions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityMentions_args.class, metaDataMap);
    }

    public getEntityMentions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityMentions_args(getEntityMentions_args other) {
    }

    public getEntityMentions_args deepCopy() {
      return new getEntityMentions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityMentions_args)
        return this.equals((getEntityMentions_args)that);
      return false;
    }

    public boolean equals(getEntityMentions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntityMentions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntityMentions_args typedOther = (getEntityMentions_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityMentions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityMentions_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityMentions_argsStandardScheme getScheme() {
        return new getEntityMentions_argsStandardScheme();
      }
    }

    private static class getEntityMentions_argsStandardScheme extends StandardScheme<getEntityMentions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityMentions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityMentions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityMentions_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityMentions_argsTupleScheme getScheme() {
        return new getEntityMentions_argsTupleScheme();
      }
    }

    private static class getEntityMentions_argsTupleScheme extends TupleScheme<getEntityMentions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getEntityMentions_result implements org.apache.thrift.TBase<getEntityMentions_result, getEntityMentions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityMentions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityMentions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityMentions_resultTupleSchemeFactory());
    }

    public List<EntityMention> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityMentions_result.class, metaDataMap);
    }

    public getEntityMentions_result() {
    }

    public getEntityMentions_result(
      List<EntityMention> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityMentions_result(getEntityMentions_result other) {
      if (other.isSetSuccess()) {
        List<EntityMention> __this__success = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.success) {
          __this__success.add(new EntityMention(other_element));
        }
        this.success = __this__success;
      }
    }

    public getEntityMentions_result deepCopy() {
      return new getEntityMentions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EntityMention> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EntityMention elem) {
      if (this.success == null) {
        this.success = new ArrayList<EntityMention>();
      }
      this.success.add(elem);
    }

    public List<EntityMention> getSuccess() {
      return this.success;
    }

    public getEntityMentions_result setSuccess(List<EntityMention> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityMentions_result)
        return this.equals((getEntityMentions_result)that);
      return false;
    }

    public boolean equals(getEntityMentions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntityMentions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntityMentions_result typedOther = (getEntityMentions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityMentions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityMentions_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityMentions_resultStandardScheme getScheme() {
        return new getEntityMentions_resultStandardScheme();
      }
    }

    private static class getEntityMentions_resultStandardScheme extends StandardScheme<getEntityMentions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityMentions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list620 = iprot.readListBegin();
                  struct.success = new ArrayList<EntityMention>(_list620.size);
                  for (int _i621 = 0; _i621 < _list620.size; ++_i621)
                  {
                    EntityMention _elem622; // required
                    _elem622 = new EntityMention();
                    _elem622.read(iprot);
                    struct.success.add(_elem622);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityMentions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EntityMention _iter623 : struct.success)
            {
              _iter623.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityMentions_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityMentions_resultTupleScheme getScheme() {
        return new getEntityMentions_resultTupleScheme();
      }
    }

    private static class getEntityMentions_resultTupleScheme extends TupleScheme<getEntityMentions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EntityMention _iter624 : struct.success)
            {
              _iter624.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list625 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<EntityMention>(_list625.size);
            for (int _i626 = 0; _i626 < _list625.size; ++_i626)
            {
              EntityMention _elem627; // required
              _elem627 = new EntityMention();
              _elem627.read(iprot);
              struct.success.add(_elem627);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getJointRelationCoreferences_args implements org.apache.thrift.TBase<getJointRelationCoreferences_args, getJointRelationCoreferences_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJointRelationCoreferences_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJointRelationCoreferences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJointRelationCoreferences_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJointRelationCoreferences_args.class, metaDataMap);
    }

    public getJointRelationCoreferences_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJointRelationCoreferences_args(getJointRelationCoreferences_args other) {
    }

    public getJointRelationCoreferences_args deepCopy() {
      return new getJointRelationCoreferences_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJointRelationCoreferences_args)
        return this.equals((getJointRelationCoreferences_args)that);
      return false;
    }

    public boolean equals(getJointRelationCoreferences_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJointRelationCoreferences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJointRelationCoreferences_args typedOther = (getJointRelationCoreferences_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJointRelationCoreferences_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJointRelationCoreferences_argsStandardSchemeFactory implements SchemeFactory {
      public getJointRelationCoreferences_argsStandardScheme getScheme() {
        return new getJointRelationCoreferences_argsStandardScheme();
      }
    }

    private static class getJointRelationCoreferences_argsStandardScheme extends StandardScheme<getJointRelationCoreferences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJointRelationCoreferences_argsTupleSchemeFactory implements SchemeFactory {
      public getJointRelationCoreferences_argsTupleScheme getScheme() {
        return new getJointRelationCoreferences_argsTupleScheme();
      }
    }

    private static class getJointRelationCoreferences_argsTupleScheme extends TupleScheme<getJointRelationCoreferences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getJointRelationCoreferences_result implements org.apache.thrift.TBase<getJointRelationCoreferences_result, getJointRelationCoreferences_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJointRelationCoreferences_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJointRelationCoreferences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJointRelationCoreferences_resultTupleSchemeFactory());
    }

    public List<JointRelationCoreference> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JointRelationCoreference.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJointRelationCoreferences_result.class, metaDataMap);
    }

    public getJointRelationCoreferences_result() {
    }

    public getJointRelationCoreferences_result(
      List<JointRelationCoreference> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJointRelationCoreferences_result(getJointRelationCoreferences_result other) {
      if (other.isSetSuccess()) {
        List<JointRelationCoreference> __this__success = new ArrayList<JointRelationCoreference>();
        for (JointRelationCoreference other_element : other.success) {
          __this__success.add(new JointRelationCoreference(other_element));
        }
        this.success = __this__success;
      }
    }

    public getJointRelationCoreferences_result deepCopy() {
      return new getJointRelationCoreferences_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<JointRelationCoreference> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(JointRelationCoreference elem) {
      if (this.success == null) {
        this.success = new ArrayList<JointRelationCoreference>();
      }
      this.success.add(elem);
    }

    public List<JointRelationCoreference> getSuccess() {
      return this.success;
    }

    public getJointRelationCoreferences_result setSuccess(List<JointRelationCoreference> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<JointRelationCoreference>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJointRelationCoreferences_result)
        return this.equals((getJointRelationCoreferences_result)that);
      return false;
    }

    public boolean equals(getJointRelationCoreferences_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJointRelationCoreferences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJointRelationCoreferences_result typedOther = (getJointRelationCoreferences_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJointRelationCoreferences_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJointRelationCoreferences_resultStandardSchemeFactory implements SchemeFactory {
      public getJointRelationCoreferences_resultStandardScheme getScheme() {
        return new getJointRelationCoreferences_resultStandardScheme();
      }
    }

    private static class getJointRelationCoreferences_resultStandardScheme extends StandardScheme<getJointRelationCoreferences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list628 = iprot.readListBegin();
                  struct.success = new ArrayList<JointRelationCoreference>(_list628.size);
                  for (int _i629 = 0; _i629 < _list628.size; ++_i629)
                  {
                    JointRelationCoreference _elem630; // required
                    _elem630 = new JointRelationCoreference();
                    _elem630.read(iprot);
                    struct.success.add(_elem630);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (JointRelationCoreference _iter631 : struct.success)
            {
              _iter631.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJointRelationCoreferences_resultTupleSchemeFactory implements SchemeFactory {
      public getJointRelationCoreferences_resultTupleScheme getScheme() {
        return new getJointRelationCoreferences_resultTupleScheme();
      }
    }

    private static class getJointRelationCoreferences_resultTupleScheme extends TupleScheme<getJointRelationCoreferences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (JointRelationCoreference _iter632 : struct.success)
            {
              _iter632.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list633 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<JointRelationCoreference>(_list633.size);
            for (int _i634 = 0; _i634 < _list633.size; ++_i634)
            {
              JointRelationCoreference _elem635; // required
              _elem635 = new JointRelationCoreference();
              _elem635.read(iprot);
              struct.success.add(_elem635);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMentions_args implements org.apache.thrift.TBase<getMentions_args, getMentions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentions_args.class, metaDataMap);
    }

    public getMentions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentions_args(getMentions_args other) {
    }

    public getMentions_args deepCopy() {
      return new getMentions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentions_args)
        return this.equals((getMentions_args)that);
      return false;
    }

    public boolean equals(getMentions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMentions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMentions_args typedOther = (getMentions_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentions_argsStandardSchemeFactory implements SchemeFactory {
      public getMentions_argsStandardScheme getScheme() {
        return new getMentions_argsStandardScheme();
      }
    }

    private static class getMentions_argsStandardScheme extends StandardScheme<getMentions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentions_argsTupleSchemeFactory implements SchemeFactory {
      public getMentions_argsTupleScheme getScheme() {
        return new getMentions_argsTupleScheme();
      }
    }

    private static class getMentions_argsTupleScheme extends TupleScheme<getMentions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMentions_result implements org.apache.thrift.TBase<getMentions_result, getMentions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMentions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMentions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMentions_resultTupleSchemeFactory());
    }

    public List<EntityMention> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMentions_result.class, metaDataMap);
    }

    public getMentions_result() {
    }

    public getMentions_result(
      List<EntityMention> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMentions_result(getMentions_result other) {
      if (other.isSetSuccess()) {
        List<EntityMention> __this__success = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.success) {
          __this__success.add(new EntityMention(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMentions_result deepCopy() {
      return new getMentions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EntityMention> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EntityMention elem) {
      if (this.success == null) {
        this.success = new ArrayList<EntityMention>();
      }
      this.success.add(elem);
    }

    public List<EntityMention> getSuccess() {
      return this.success;
    }

    public getMentions_result setSuccess(List<EntityMention> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMentions_result)
        return this.equals((getMentions_result)that);
      return false;
    }

    public boolean equals(getMentions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMentions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMentions_result typedOther = (getMentions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMentions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMentions_resultStandardSchemeFactory implements SchemeFactory {
      public getMentions_resultStandardScheme getScheme() {
        return new getMentions_resultStandardScheme();
      }
    }

    private static class getMentions_resultStandardScheme extends StandardScheme<getMentions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMentions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list636 = iprot.readListBegin();
                  struct.success = new ArrayList<EntityMention>(_list636.size);
                  for (int _i637 = 0; _i637 < _list636.size; ++_i637)
                  {
                    EntityMention _elem638; // required
                    _elem638 = new EntityMention();
                    _elem638.read(iprot);
                    struct.success.add(_elem638);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMentions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EntityMention _iter639 : struct.success)
            {
              _iter639.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMentions_resultTupleSchemeFactory implements SchemeFactory {
      public getMentions_resultTupleScheme getScheme() {
        return new getMentions_resultTupleScheme();
      }
    }

    private static class getMentions_resultTupleScheme extends TupleScheme<getMentions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EntityMention _iter640 : struct.success)
            {
              _iter640.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list641 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<EntityMention>(_list641.size);
            for (int _i642 = 0; _i642 < _list641.size; ++_i642)
            {
              EntityMention _elem643; // required
              _elem643 = new EntityMention();
              _elem643.read(iprot);
              struct.success.add(_elem643);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNamedEntities_args implements org.apache.thrift.TBase<getNamedEntities_args, getNamedEntities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNamedEntities_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNamedEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNamedEntities_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNamedEntities_args.class, metaDataMap);
    }

    public getNamedEntities_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNamedEntities_args(getNamedEntities_args other) {
    }

    public getNamedEntities_args deepCopy() {
      return new getNamedEntities_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNamedEntities_args)
        return this.equals((getNamedEntities_args)that);
      return false;
    }

    public boolean equals(getNamedEntities_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNamedEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNamedEntities_args typedOther = (getNamedEntities_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNamedEntities_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNamedEntities_argsStandardSchemeFactory implements SchemeFactory {
      public getNamedEntities_argsStandardScheme getScheme() {
        return new getNamedEntities_argsStandardScheme();
      }
    }

    private static class getNamedEntities_argsStandardScheme extends StandardScheme<getNamedEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNamedEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNamedEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNamedEntities_argsTupleSchemeFactory implements SchemeFactory {
      public getNamedEntities_argsTupleScheme getScheme() {
        return new getNamedEntities_argsTupleScheme();
      }
    }

    private static class getNamedEntities_argsTupleScheme extends TupleScheme<getNamedEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNamedEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNamedEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getNamedEntities_result implements org.apache.thrift.TBase<getNamedEntities_result, getNamedEntities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNamedEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNamedEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNamedEntities_resultTupleSchemeFactory());
    }

    public List<EntityMention> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNamedEntities_result.class, metaDataMap);
    }

    public getNamedEntities_result() {
    }

    public getNamedEntities_result(
      List<EntityMention> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNamedEntities_result(getNamedEntities_result other) {
      if (other.isSetSuccess()) {
        List<EntityMention> __this__success = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.success) {
          __this__success.add(new EntityMention(other_element));
        }
        this.success = __this__success;
      }
    }

    public getNamedEntities_result deepCopy() {
      return new getNamedEntities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EntityMention> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EntityMention elem) {
      if (this.success == null) {
        this.success = new ArrayList<EntityMention>();
      }
      this.success.add(elem);
    }

    public List<EntityMention> getSuccess() {
      return this.success;
    }

    public getNamedEntities_result setSuccess(List<EntityMention> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNamedEntities_result)
        return this.equals((getNamedEntities_result)that);
      return false;
    }

    public boolean equals(getNamedEntities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNamedEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNamedEntities_result typedOther = (getNamedEntities_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNamedEntities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNamedEntities_resultStandardSchemeFactory implements SchemeFactory {
      public getNamedEntities_resultStandardScheme getScheme() {
        return new getNamedEntities_resultStandardScheme();
      }
    }

    private static class getNamedEntities_resultStandardScheme extends StandardScheme<getNamedEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNamedEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list644 = iprot.readListBegin();
                  struct.success = new ArrayList<EntityMention>(_list644.size);
                  for (int _i645 = 0; _i645 < _list644.size; ++_i645)
                  {
                    EntityMention _elem646; // required
                    _elem646 = new EntityMention();
                    _elem646.read(iprot);
                    struct.success.add(_elem646);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNamedEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EntityMention _iter647 : struct.success)
            {
              _iter647.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNamedEntities_resultTupleSchemeFactory implements SchemeFactory {
      public getNamedEntities_resultTupleScheme getScheme() {
        return new getNamedEntities_resultTupleScheme();
      }
    }

    private static class getNamedEntities_resultTupleScheme extends TupleScheme<getNamedEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNamedEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EntityMention _iter648 : struct.success)
            {
              _iter648.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNamedEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list649 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<EntityMention>(_list649.size);
            for (int _i650 = 0; _i650 < _list649.size; ++_i650)
            {
              EntityMention _elem651; // required
              _elem651 = new EntityMention();
              _elem651.read(iprot);
              struct.success.add(_elem651);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOpinions_args implements org.apache.thrift.TBase<getOpinions_args, getOpinions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOpinions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOpinions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOpinions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOpinions_args.class, metaDataMap);
    }

    public getOpinions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOpinions_args(getOpinions_args other) {
    }

    public getOpinions_args deepCopy() {
      return new getOpinions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOpinions_args)
        return this.equals((getOpinions_args)that);
      return false;
    }

    public boolean equals(getOpinions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOpinions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOpinions_args typedOther = (getOpinions_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOpinions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOpinions_argsStandardSchemeFactory implements SchemeFactory {
      public getOpinions_argsStandardScheme getScheme() {
        return new getOpinions_argsStandardScheme();
      }
    }

    private static class getOpinions_argsStandardScheme extends StandardScheme<getOpinions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOpinions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOpinions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOpinions_argsTupleSchemeFactory implements SchemeFactory {
      public getOpinions_argsTupleScheme getScheme() {
        return new getOpinions_argsTupleScheme();
      }
    }

    private static class getOpinions_argsTupleScheme extends TupleScheme<getOpinions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOpinions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOpinions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOpinions_result implements org.apache.thrift.TBase<getOpinions_result, getOpinions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOpinions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOpinions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOpinions_resultTupleSchemeFactory());
    }

    public List<Opinion> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Opinion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOpinions_result.class, metaDataMap);
    }

    public getOpinions_result() {
    }

    public getOpinions_result(
      List<Opinion> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOpinions_result(getOpinions_result other) {
      if (other.isSetSuccess()) {
        List<Opinion> __this__success = new ArrayList<Opinion>();
        for (Opinion other_element : other.success) {
          __this__success.add(new Opinion(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOpinions_result deepCopy() {
      return new getOpinions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Opinion> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Opinion elem) {
      if (this.success == null) {
        this.success = new ArrayList<Opinion>();
      }
      this.success.add(elem);
    }

    public List<Opinion> getSuccess() {
      return this.success;
    }

    public getOpinions_result setSuccess(List<Opinion> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Opinion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOpinions_result)
        return this.equals((getOpinions_result)that);
      return false;
    }

    public boolean equals(getOpinions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOpinions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOpinions_result typedOther = (getOpinions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOpinions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOpinions_resultStandardSchemeFactory implements SchemeFactory {
      public getOpinions_resultStandardScheme getScheme() {
        return new getOpinions_resultStandardScheme();
      }
    }

    private static class getOpinions_resultStandardScheme extends StandardScheme<getOpinions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOpinions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list652 = iprot.readListBegin();
                  struct.success = new ArrayList<Opinion>(_list652.size);
                  for (int _i653 = 0; _i653 < _list652.size; ++_i653)
                  {
                    Opinion _elem654; // required
                    _elem654 = new Opinion();
                    _elem654.read(iprot);
                    struct.success.add(_elem654);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOpinions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Opinion _iter655 : struct.success)
            {
              _iter655.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOpinions_resultTupleSchemeFactory implements SchemeFactory {
      public getOpinions_resultTupleScheme getScheme() {
        return new getOpinions_resultTupleScheme();
      }
    }

    private static class getOpinions_resultTupleScheme extends TupleScheme<getOpinions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOpinions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Opinion _iter656 : struct.success)
            {
              _iter656.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOpinions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list657 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Opinion>(_list657.size);
            for (int _i658 = 0; _i658 < _list657.size; ++_i658)
            {
              Opinion _elem659; // required
              _elem659 = new Opinion();
              _elem659.read(iprot);
              struct.success.add(_elem659);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPartOfSpeechs_args implements org.apache.thrift.TBase<getPartOfSpeechs_args, getPartOfSpeechs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartOfSpeechs_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartOfSpeechs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartOfSpeechs_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartOfSpeechs_args.class, metaDataMap);
    }

    public getPartOfSpeechs_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartOfSpeechs_args(getPartOfSpeechs_args other) {
    }

    public getPartOfSpeechs_args deepCopy() {
      return new getPartOfSpeechs_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartOfSpeechs_args)
        return this.equals((getPartOfSpeechs_args)that);
      return false;
    }

    public boolean equals(getPartOfSpeechs_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPartOfSpeechs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPartOfSpeechs_args typedOther = (getPartOfSpeechs_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartOfSpeechs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartOfSpeechs_argsStandardSchemeFactory implements SchemeFactory {
      public getPartOfSpeechs_argsStandardScheme getScheme() {
        return new getPartOfSpeechs_argsStandardScheme();
      }
    }

    private static class getPartOfSpeechs_argsStandardScheme extends StandardScheme<getPartOfSpeechs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartOfSpeechs_argsTupleSchemeFactory implements SchemeFactory {
      public getPartOfSpeechs_argsTupleScheme getScheme() {
        return new getPartOfSpeechs_argsTupleScheme();
      }
    }

    private static class getPartOfSpeechs_argsTupleScheme extends TupleScheme<getPartOfSpeechs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPartOfSpeechs_result implements org.apache.thrift.TBase<getPartOfSpeechs_result, getPartOfSpeechs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartOfSpeechs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartOfSpeechs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartOfSpeechs_resultTupleSchemeFactory());
    }

    public List<PartOfSpeech> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartOfSpeech.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartOfSpeechs_result.class, metaDataMap);
    }

    public getPartOfSpeechs_result() {
    }

    public getPartOfSpeechs_result(
      List<PartOfSpeech> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartOfSpeechs_result(getPartOfSpeechs_result other) {
      if (other.isSetSuccess()) {
        List<PartOfSpeech> __this__success = new ArrayList<PartOfSpeech>();
        for (PartOfSpeech other_element : other.success) {
          __this__success.add(new PartOfSpeech(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPartOfSpeechs_result deepCopy() {
      return new getPartOfSpeechs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PartOfSpeech> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PartOfSpeech elem) {
      if (this.success == null) {
        this.success = new ArrayList<PartOfSpeech>();
      }
      this.success.add(elem);
    }

    public List<PartOfSpeech> getSuccess() {
      return this.success;
    }

    public getPartOfSpeechs_result setSuccess(List<PartOfSpeech> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PartOfSpeech>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartOfSpeechs_result)
        return this.equals((getPartOfSpeechs_result)that);
      return false;
    }

    public boolean equals(getPartOfSpeechs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPartOfSpeechs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPartOfSpeechs_result typedOther = (getPartOfSpeechs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartOfSpeechs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartOfSpeechs_resultStandardSchemeFactory implements SchemeFactory {
      public getPartOfSpeechs_resultStandardScheme getScheme() {
        return new getPartOfSpeechs_resultStandardScheme();
      }
    }

    private static class getPartOfSpeechs_resultStandardScheme extends StandardScheme<getPartOfSpeechs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list660 = iprot.readListBegin();
                  struct.success = new ArrayList<PartOfSpeech>(_list660.size);
                  for (int _i661 = 0; _i661 < _list660.size; ++_i661)
                  {
                    PartOfSpeech _elem662; // required
                    _elem662 = new PartOfSpeech();
                    _elem662.read(iprot);
                    struct.success.add(_elem662);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PartOfSpeech _iter663 : struct.success)
            {
              _iter663.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartOfSpeechs_resultTupleSchemeFactory implements SchemeFactory {
      public getPartOfSpeechs_resultTupleScheme getScheme() {
        return new getPartOfSpeechs_resultTupleScheme();
      }
    }

    private static class getPartOfSpeechs_resultTupleScheme extends TupleScheme<getPartOfSpeechs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PartOfSpeech _iter664 : struct.success)
            {
              _iter664.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list665 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PartOfSpeech>(_list665.size);
            for (int _i666 = 0; _i666 < _list665.size; ++_i666)
            {
              PartOfSpeech _elem667; // required
              _elem667 = new PartOfSpeech();
              _elem667.read(iprot);
              struct.success.add(_elem667);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPassages_args implements org.apache.thrift.TBase<getPassages_args, getPassages_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPassages_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPassages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPassages_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPassages_args.class, metaDataMap);
    }

    public getPassages_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPassages_args(getPassages_args other) {
    }

    public getPassages_args deepCopy() {
      return new getPassages_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPassages_args)
        return this.equals((getPassages_args)that);
      return false;
    }

    public boolean equals(getPassages_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPassages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPassages_args typedOther = (getPassages_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPassages_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPassages_argsStandardSchemeFactory implements SchemeFactory {
      public getPassages_argsStandardScheme getScheme() {
        return new getPassages_argsStandardScheme();
      }
    }

    private static class getPassages_argsStandardScheme extends StandardScheme<getPassages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPassages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPassages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPassages_argsTupleSchemeFactory implements SchemeFactory {
      public getPassages_argsTupleScheme getScheme() {
        return new getPassages_argsTupleScheme();
      }
    }

    private static class getPassages_argsTupleScheme extends TupleScheme<getPassages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPassages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPassages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPassages_result implements org.apache.thrift.TBase<getPassages_result, getPassages_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPassages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPassages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPassages_resultTupleSchemeFactory());
    }

    public List<Passage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPassages_result.class, metaDataMap);
    }

    public getPassages_result() {
    }

    public getPassages_result(
      List<Passage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPassages_result(getPassages_result other) {
      if (other.isSetSuccess()) {
        List<Passage> __this__success = new ArrayList<Passage>();
        for (Passage other_element : other.success) {
          __this__success.add(new Passage(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPassages_result deepCopy() {
      return new getPassages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Passage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Passage elem) {
      if (this.success == null) {
        this.success = new ArrayList<Passage>();
      }
      this.success.add(elem);
    }

    public List<Passage> getSuccess() {
      return this.success;
    }

    public getPassages_result setSuccess(List<Passage> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Passage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPassages_result)
        return this.equals((getPassages_result)that);
      return false;
    }

    public boolean equals(getPassages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPassages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPassages_result typedOther = (getPassages_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPassages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPassages_resultStandardSchemeFactory implements SchemeFactory {
      public getPassages_resultStandardScheme getScheme() {
        return new getPassages_resultStandardScheme();
      }
    }

    private static class getPassages_resultStandardScheme extends StandardScheme<getPassages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPassages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list668 = iprot.readListBegin();
                  struct.success = new ArrayList<Passage>(_list668.size);
                  for (int _i669 = 0; _i669 < _list668.size; ++_i669)
                  {
                    Passage _elem670; // required
                    _elem670 = new Passage();
                    _elem670.read(iprot);
                    struct.success.add(_elem670);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPassages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Passage _iter671 : struct.success)
            {
              _iter671.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPassages_resultTupleSchemeFactory implements SchemeFactory {
      public getPassages_resultTupleScheme getScheme() {
        return new getPassages_resultTupleScheme();
      }
    }

    private static class getPassages_resultTupleScheme extends TupleScheme<getPassages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPassages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Passage _iter672 : struct.success)
            {
              _iter672.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPassages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list673 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Passage>(_list673.size);
            for (int _i674 = 0; _i674 < _list673.size; ++_i674)
            {
              Passage _elem675; // required
              _elem675 = new Passage();
              _elem675.read(iprot);
              struct.success.add(_elem675);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProsodicPhrases_args implements org.apache.thrift.TBase<getProsodicPhrases_args, getProsodicPhrases_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProsodicPhrases_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProsodicPhrases_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProsodicPhrases_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProsodicPhrases_args.class, metaDataMap);
    }

    public getProsodicPhrases_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProsodicPhrases_args(getProsodicPhrases_args other) {
    }

    public getProsodicPhrases_args deepCopy() {
      return new getProsodicPhrases_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProsodicPhrases_args)
        return this.equals((getProsodicPhrases_args)that);
      return false;
    }

    public boolean equals(getProsodicPhrases_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProsodicPhrases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProsodicPhrases_args typedOther = (getProsodicPhrases_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProsodicPhrases_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProsodicPhrases_argsStandardSchemeFactory implements SchemeFactory {
      public getProsodicPhrases_argsStandardScheme getScheme() {
        return new getProsodicPhrases_argsStandardScheme();
      }
    }

    private static class getProsodicPhrases_argsStandardScheme extends StandardScheme<getProsodicPhrases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProsodicPhrases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProsodicPhrases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProsodicPhrases_argsTupleSchemeFactory implements SchemeFactory {
      public getProsodicPhrases_argsTupleScheme getScheme() {
        return new getProsodicPhrases_argsTupleScheme();
      }
    }

    private static class getProsodicPhrases_argsTupleScheme extends TupleScheme<getProsodicPhrases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProsodicPhrases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProsodicPhrases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getProsodicPhrases_result implements org.apache.thrift.TBase<getProsodicPhrases_result, getProsodicPhrases_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProsodicPhrases_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProsodicPhrases_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProsodicPhrases_resultTupleSchemeFactory());
    }

    public List<ProsodicPhrase> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProsodicPhrase.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProsodicPhrases_result.class, metaDataMap);
    }

    public getProsodicPhrases_result() {
    }

    public getProsodicPhrases_result(
      List<ProsodicPhrase> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProsodicPhrases_result(getProsodicPhrases_result other) {
      if (other.isSetSuccess()) {
        List<ProsodicPhrase> __this__success = new ArrayList<ProsodicPhrase>();
        for (ProsodicPhrase other_element : other.success) {
          __this__success.add(new ProsodicPhrase(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProsodicPhrases_result deepCopy() {
      return new getProsodicPhrases_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProsodicPhrase> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProsodicPhrase elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProsodicPhrase>();
      }
      this.success.add(elem);
    }

    public List<ProsodicPhrase> getSuccess() {
      return this.success;
    }

    public getProsodicPhrases_result setSuccess(List<ProsodicPhrase> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProsodicPhrase>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProsodicPhrases_result)
        return this.equals((getProsodicPhrases_result)that);
      return false;
    }

    public boolean equals(getProsodicPhrases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProsodicPhrases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProsodicPhrases_result typedOther = (getProsodicPhrases_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProsodicPhrases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProsodicPhrases_resultStandardSchemeFactory implements SchemeFactory {
      public getProsodicPhrases_resultStandardScheme getScheme() {
        return new getProsodicPhrases_resultStandardScheme();
      }
    }

    private static class getProsodicPhrases_resultStandardScheme extends StandardScheme<getProsodicPhrases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProsodicPhrases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list676 = iprot.readListBegin();
                  struct.success = new ArrayList<ProsodicPhrase>(_list676.size);
                  for (int _i677 = 0; _i677 < _list676.size; ++_i677)
                  {
                    ProsodicPhrase _elem678; // required
                    _elem678 = new ProsodicPhrase();
                    _elem678.read(iprot);
                    struct.success.add(_elem678);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProsodicPhrases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProsodicPhrase _iter679 : struct.success)
            {
              _iter679.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProsodicPhrases_resultTupleSchemeFactory implements SchemeFactory {
      public getProsodicPhrases_resultTupleScheme getScheme() {
        return new getProsodicPhrases_resultTupleScheme();
      }
    }

    private static class getProsodicPhrases_resultTupleScheme extends TupleScheme<getProsodicPhrases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProsodicPhrases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProsodicPhrase _iter680 : struct.success)
            {
              _iter680.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProsodicPhrases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list681 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProsodicPhrase>(_list681.size);
            for (int _i682 = 0; _i682 < _list681.size; ++_i682)
            {
              ProsodicPhrase _elem683; // required
              _elem683 = new ProsodicPhrase();
              _elem683.read(iprot);
              struct.success.add(_elem683);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRelations_args implements org.apache.thrift.TBase<getRelations_args, getRelations_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRelations_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRelations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRelations_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRelations_args.class, metaDataMap);
    }

    public getRelations_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelations_args(getRelations_args other) {
    }

    public getRelations_args deepCopy() {
      return new getRelations_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelations_args)
        return this.equals((getRelations_args)that);
      return false;
    }

    public boolean equals(getRelations_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRelations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRelations_args typedOther = (getRelations_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRelations_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRelations_argsStandardSchemeFactory implements SchemeFactory {
      public getRelations_argsStandardScheme getScheme() {
        return new getRelations_argsStandardScheme();
      }
    }

    private static class getRelations_argsStandardScheme extends StandardScheme<getRelations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRelations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRelations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRelations_argsTupleSchemeFactory implements SchemeFactory {
      public getRelations_argsTupleScheme getScheme() {
        return new getRelations_argsTupleScheme();
      }
    }

    private static class getRelations_argsTupleScheme extends TupleScheme<getRelations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRelations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRelations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRelations_result implements org.apache.thrift.TBase<getRelations_result, getRelations_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRelations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRelations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRelations_resultTupleSchemeFactory());
    }

    public List<Relation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Relation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRelations_result.class, metaDataMap);
    }

    public getRelations_result() {
    }

    public getRelations_result(
      List<Relation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelations_result(getRelations_result other) {
      if (other.isSetSuccess()) {
        List<Relation> __this__success = new ArrayList<Relation>();
        for (Relation other_element : other.success) {
          __this__success.add(new Relation(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRelations_result deepCopy() {
      return new getRelations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Relation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Relation elem) {
      if (this.success == null) {
        this.success = new ArrayList<Relation>();
      }
      this.success.add(elem);
    }

    public List<Relation> getSuccess() {
      return this.success;
    }

    public getRelations_result setSuccess(List<Relation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Relation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelations_result)
        return this.equals((getRelations_result)that);
      return false;
    }

    public boolean equals(getRelations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRelations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRelations_result typedOther = (getRelations_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRelations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRelations_resultStandardSchemeFactory implements SchemeFactory {
      public getRelations_resultStandardScheme getScheme() {
        return new getRelations_resultStandardScheme();
      }
    }

    private static class getRelations_resultStandardScheme extends StandardScheme<getRelations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRelations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list684 = iprot.readListBegin();
                  struct.success = new ArrayList<Relation>(_list684.size);
                  for (int _i685 = 0; _i685 < _list684.size; ++_i685)
                  {
                    Relation _elem686; // required
                    _elem686 = new Relation();
                    _elem686.read(iprot);
                    struct.success.add(_elem686);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRelations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Relation _iter687 : struct.success)
            {
              _iter687.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRelations_resultTupleSchemeFactory implements SchemeFactory {
      public getRelations_resultTupleScheme getScheme() {
        return new getRelations_resultTupleScheme();
      }
    }

    private static class getRelations_resultTupleScheme extends TupleScheme<getRelations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRelations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Relation _iter688 : struct.success)
            {
              _iter688.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRelations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list689 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Relation>(_list689.size);
            for (int _i690 = 0; _i690 < _list689.size; ++_i690)
            {
              Relation _elem691; // required
              _elem691 = new Relation();
              _elem691.read(iprot);
              struct.success.add(_elem691);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSarcasms_args implements org.apache.thrift.TBase<getSarcasms_args, getSarcasms_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSarcasms_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSarcasms_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSarcasms_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSarcasms_args.class, metaDataMap);
    }

    public getSarcasms_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSarcasms_args(getSarcasms_args other) {
    }

    public getSarcasms_args deepCopy() {
      return new getSarcasms_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSarcasms_args)
        return this.equals((getSarcasms_args)that);
      return false;
    }

    public boolean equals(getSarcasms_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSarcasms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSarcasms_args typedOther = (getSarcasms_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSarcasms_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSarcasms_argsStandardSchemeFactory implements SchemeFactory {
      public getSarcasms_argsStandardScheme getScheme() {
        return new getSarcasms_argsStandardScheme();
      }
    }

    private static class getSarcasms_argsStandardScheme extends StandardScheme<getSarcasms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSarcasms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSarcasms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSarcasms_argsTupleSchemeFactory implements SchemeFactory {
      public getSarcasms_argsTupleScheme getScheme() {
        return new getSarcasms_argsTupleScheme();
      }
    }

    private static class getSarcasms_argsTupleScheme extends TupleScheme<getSarcasms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSarcasms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSarcasms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSarcasms_result implements org.apache.thrift.TBase<getSarcasms_result, getSarcasms_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSarcasms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSarcasms_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSarcasms_resultTupleSchemeFactory());
    }

    public List<Sarcasm> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sarcasm.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSarcasms_result.class, metaDataMap);
    }

    public getSarcasms_result() {
    }

    public getSarcasms_result(
      List<Sarcasm> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSarcasms_result(getSarcasms_result other) {
      if (other.isSetSuccess()) {
        List<Sarcasm> __this__success = new ArrayList<Sarcasm>();
        for (Sarcasm other_element : other.success) {
          __this__success.add(new Sarcasm(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSarcasms_result deepCopy() {
      return new getSarcasms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Sarcasm> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Sarcasm elem) {
      if (this.success == null) {
        this.success = new ArrayList<Sarcasm>();
      }
      this.success.add(elem);
    }

    public List<Sarcasm> getSuccess() {
      return this.success;
    }

    public getSarcasms_result setSuccess(List<Sarcasm> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Sarcasm>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSarcasms_result)
        return this.equals((getSarcasms_result)that);
      return false;
    }

    public boolean equals(getSarcasms_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSarcasms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSarcasms_result typedOther = (getSarcasms_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSarcasms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSarcasms_resultStandardSchemeFactory implements SchemeFactory {
      public getSarcasms_resultStandardScheme getScheme() {
        return new getSarcasms_resultStandardScheme();
      }
    }

    private static class getSarcasms_resultStandardScheme extends StandardScheme<getSarcasms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSarcasms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list692 = iprot.readListBegin();
                  struct.success = new ArrayList<Sarcasm>(_list692.size);
                  for (int _i693 = 0; _i693 < _list692.size; ++_i693)
                  {
                    Sarcasm _elem694; // required
                    _elem694 = new Sarcasm();
                    _elem694.read(iprot);
                    struct.success.add(_elem694);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSarcasms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Sarcasm _iter695 : struct.success)
            {
              _iter695.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSarcasms_resultTupleSchemeFactory implements SchemeFactory {
      public getSarcasms_resultTupleScheme getScheme() {
        return new getSarcasms_resultTupleScheme();
      }
    }

    private static class getSarcasms_resultTupleScheme extends TupleScheme<getSarcasms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSarcasms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Sarcasm _iter696 : struct.success)
            {
              _iter696.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSarcasms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list697 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Sarcasm>(_list697.size);
            for (int _i698 = 0; _i698 < _list697.size; ++_i698)
            {
              Sarcasm _elem699; // required
              _elem699 = new Sarcasm();
              _elem699.read(iprot);
              struct.success.add(_elem699);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSentences_args implements org.apache.thrift.TBase<getSentences_args, getSentences_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSentences_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSentences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSentences_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSentences_args.class, metaDataMap);
    }

    public getSentences_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSentences_args(getSentences_args other) {
    }

    public getSentences_args deepCopy() {
      return new getSentences_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSentences_args)
        return this.equals((getSentences_args)that);
      return false;
    }

    public boolean equals(getSentences_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSentences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSentences_args typedOther = (getSentences_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSentences_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSentences_argsStandardSchemeFactory implements SchemeFactory {
      public getSentences_argsStandardScheme getScheme() {
        return new getSentences_argsStandardScheme();
      }
    }

    private static class getSentences_argsStandardScheme extends StandardScheme<getSentences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSentences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSentences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSentences_argsTupleSchemeFactory implements SchemeFactory {
      public getSentences_argsTupleScheme getScheme() {
        return new getSentences_argsTupleScheme();
      }
    }

    private static class getSentences_argsTupleScheme extends TupleScheme<getSentences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSentences_result implements org.apache.thrift.TBase<getSentences_result, getSentences_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSentences_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSentences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSentences_resultTupleSchemeFactory());
    }

    public List<Sentence> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sentence.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSentences_result.class, metaDataMap);
    }

    public getSentences_result() {
    }

    public getSentences_result(
      List<Sentence> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSentences_result(getSentences_result other) {
      if (other.isSetSuccess()) {
        List<Sentence> __this__success = new ArrayList<Sentence>();
        for (Sentence other_element : other.success) {
          __this__success.add(new Sentence(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSentences_result deepCopy() {
      return new getSentences_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Sentence> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Sentence elem) {
      if (this.success == null) {
        this.success = new ArrayList<Sentence>();
      }
      this.success.add(elem);
    }

    public List<Sentence> getSuccess() {
      return this.success;
    }

    public getSentences_result setSuccess(List<Sentence> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Sentence>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSentences_result)
        return this.equals((getSentences_result)that);
      return false;
    }

    public boolean equals(getSentences_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSentences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSentences_result typedOther = (getSentences_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSentences_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSentences_resultStandardSchemeFactory implements SchemeFactory {
      public getSentences_resultStandardScheme getScheme() {
        return new getSentences_resultStandardScheme();
      }
    }

    private static class getSentences_resultStandardScheme extends StandardScheme<getSentences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSentences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list700 = iprot.readListBegin();
                  struct.success = new ArrayList<Sentence>(_list700.size);
                  for (int _i701 = 0; _i701 < _list700.size; ++_i701)
                  {
                    Sentence _elem702; // required
                    _elem702 = new Sentence();
                    _elem702.read(iprot);
                    struct.success.add(_elem702);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSentences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Sentence _iter703 : struct.success)
            {
              _iter703.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSentences_resultTupleSchemeFactory implements SchemeFactory {
      public getSentences_resultTupleScheme getScheme() {
        return new getSentences_resultTupleScheme();
      }
    }

    private static class getSentences_resultTupleScheme extends TupleScheme<getSentences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Sentence _iter704 : struct.success)
            {
              _iter704.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list705 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Sentence>(_list705.size);
            for (int _i706 = 0; _i706 < _list705.size; ++_i706)
            {
              Sentence _elem707; // required
              _elem707 = new Sentence();
              _elem707.read(iprot);
              struct.success.add(_elem707);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSyntacticChunks_args implements org.apache.thrift.TBase<getSyntacticChunks_args, getSyntacticChunks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSyntacticChunks_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSyntacticChunks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSyntacticChunks_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSyntacticChunks_args.class, metaDataMap);
    }

    public getSyntacticChunks_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyntacticChunks_args(getSyntacticChunks_args other) {
    }

    public getSyntacticChunks_args deepCopy() {
      return new getSyntacticChunks_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyntacticChunks_args)
        return this.equals((getSyntacticChunks_args)that);
      return false;
    }

    public boolean equals(getSyntacticChunks_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSyntacticChunks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSyntacticChunks_args typedOther = (getSyntacticChunks_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSyntacticChunks_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSyntacticChunks_argsStandardSchemeFactory implements SchemeFactory {
      public getSyntacticChunks_argsStandardScheme getScheme() {
        return new getSyntacticChunks_argsStandardScheme();
      }
    }

    private static class getSyntacticChunks_argsStandardScheme extends StandardScheme<getSyntacticChunks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSyntacticChunks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSyntacticChunks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSyntacticChunks_argsTupleSchemeFactory implements SchemeFactory {
      public getSyntacticChunks_argsTupleScheme getScheme() {
        return new getSyntacticChunks_argsTupleScheme();
      }
    }

    private static class getSyntacticChunks_argsTupleScheme extends TupleScheme<getSyntacticChunks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSyntacticChunks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSyntacticChunks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSyntacticChunks_result implements org.apache.thrift.TBase<getSyntacticChunks_result, getSyntacticChunks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSyntacticChunks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSyntacticChunks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSyntacticChunks_resultTupleSchemeFactory());
    }

    public List<SyntacticChunk> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SyntacticChunk.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSyntacticChunks_result.class, metaDataMap);
    }

    public getSyntacticChunks_result() {
    }

    public getSyntacticChunks_result(
      List<SyntacticChunk> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyntacticChunks_result(getSyntacticChunks_result other) {
      if (other.isSetSuccess()) {
        List<SyntacticChunk> __this__success = new ArrayList<SyntacticChunk>();
        for (SyntacticChunk other_element : other.success) {
          __this__success.add(new SyntacticChunk(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSyntacticChunks_result deepCopy() {
      return new getSyntacticChunks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SyntacticChunk> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SyntacticChunk elem) {
      if (this.success == null) {
        this.success = new ArrayList<SyntacticChunk>();
      }
      this.success.add(elem);
    }

    public List<SyntacticChunk> getSuccess() {
      return this.success;
    }

    public getSyntacticChunks_result setSuccess(List<SyntacticChunk> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SyntacticChunk>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyntacticChunks_result)
        return this.equals((getSyntacticChunks_result)that);
      return false;
    }

    public boolean equals(getSyntacticChunks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSyntacticChunks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSyntacticChunks_result typedOther = (getSyntacticChunks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSyntacticChunks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSyntacticChunks_resultStandardSchemeFactory implements SchemeFactory {
      public getSyntacticChunks_resultStandardScheme getScheme() {
        return new getSyntacticChunks_resultStandardScheme();
      }
    }

    private static class getSyntacticChunks_resultStandardScheme extends StandardScheme<getSyntacticChunks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSyntacticChunks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list708 = iprot.readListBegin();
                  struct.success = new ArrayList<SyntacticChunk>(_list708.size);
                  for (int _i709 = 0; _i709 < _list708.size; ++_i709)
                  {
                    SyntacticChunk _elem710; // required
                    _elem710 = new SyntacticChunk();
                    _elem710.read(iprot);
                    struct.success.add(_elem710);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSyntacticChunks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SyntacticChunk _iter711 : struct.success)
            {
              _iter711.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSyntacticChunks_resultTupleSchemeFactory implements SchemeFactory {
      public getSyntacticChunks_resultTupleScheme getScheme() {
        return new getSyntacticChunks_resultTupleScheme();
      }
    }

    private static class getSyntacticChunks_resultTupleScheme extends TupleScheme<getSyntacticChunks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSyntacticChunks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SyntacticChunk _iter712 : struct.success)
            {
              _iter712.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSyntacticChunks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list713 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SyntacticChunk>(_list713.size);
            for (int _i714 = 0; _i714 < _list713.size; ++_i714)
            {
              SyntacticChunk _elem715; // required
              _elem715 = new SyntacticChunk();
              _elem715.read(iprot);
              struct.success.add(_elem715);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setCommittedBeliefs_args implements org.apache.thrift.TBase<setCommittedBeliefs_args, setCommittedBeliefs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCommittedBeliefs_args");

    private static final org.apache.thrift.protocol.TField COMMITTED_BELIEFS_FIELD_DESC = new org.apache.thrift.protocol.TField("committedBeliefs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCommittedBeliefs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCommittedBeliefs_argsTupleSchemeFactory());
    }

    public List<CommittedBelief> committedBeliefs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMITTED_BELIEFS((short)1, "committedBeliefs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMITTED_BELIEFS
            return COMMITTED_BELIEFS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMITTED_BELIEFS, new org.apache.thrift.meta_data.FieldMetaData("committedBeliefs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommittedBelief.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCommittedBeliefs_args.class, metaDataMap);
    }

    public setCommittedBeliefs_args() {
    }

    public setCommittedBeliefs_args(
      List<CommittedBelief> committedBeliefs)
    {
      this();
      this.committedBeliefs = committedBeliefs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCommittedBeliefs_args(setCommittedBeliefs_args other) {
      if (other.isSetCommittedBeliefs()) {
        List<CommittedBelief> __this__committedBeliefs = new ArrayList<CommittedBelief>();
        for (CommittedBelief other_element : other.committedBeliefs) {
          __this__committedBeliefs.add(new CommittedBelief(other_element));
        }
        this.committedBeliefs = __this__committedBeliefs;
      }
    }

    public setCommittedBeliefs_args deepCopy() {
      return new setCommittedBeliefs_args(this);
    }

    @Override
    public void clear() {
      this.committedBeliefs = null;
    }

    public int getCommittedBeliefsSize() {
      return (this.committedBeliefs == null) ? 0 : this.committedBeliefs.size();
    }

    public java.util.Iterator<CommittedBelief> getCommittedBeliefsIterator() {
      return (this.committedBeliefs == null) ? null : this.committedBeliefs.iterator();
    }

    public void addToCommittedBeliefs(CommittedBelief elem) {
      if (this.committedBeliefs == null) {
        this.committedBeliefs = new ArrayList<CommittedBelief>();
      }
      this.committedBeliefs.add(elem);
    }

    public List<CommittedBelief> getCommittedBeliefs() {
      return this.committedBeliefs;
    }

    public setCommittedBeliefs_args setCommittedBeliefs(List<CommittedBelief> committedBeliefs) {
      this.committedBeliefs = committedBeliefs;
      return this;
    }

    public void unsetCommittedBeliefs() {
      this.committedBeliefs = null;
    }

    /** Returns true if field committedBeliefs is set (has been assigned a value) and false otherwise */
    public boolean isSetCommittedBeliefs() {
      return this.committedBeliefs != null;
    }

    public void setCommittedBeliefsIsSet(boolean value) {
      if (!value) {
        this.committedBeliefs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMITTED_BELIEFS:
        if (value == null) {
          unsetCommittedBeliefs();
        } else {
          setCommittedBeliefs((List<CommittedBelief>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMITTED_BELIEFS:
        return getCommittedBeliefs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMITTED_BELIEFS:
        return isSetCommittedBeliefs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCommittedBeliefs_args)
        return this.equals((setCommittedBeliefs_args)that);
      return false;
    }

    public boolean equals(setCommittedBeliefs_args that) {
      if (that == null)
        return false;

      boolean this_present_committedBeliefs = true && this.isSetCommittedBeliefs();
      boolean that_present_committedBeliefs = true && that.isSetCommittedBeliefs();
      if (this_present_committedBeliefs || that_present_committedBeliefs) {
        if (!(this_present_committedBeliefs && that_present_committedBeliefs))
          return false;
        if (!this.committedBeliefs.equals(that.committedBeliefs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setCommittedBeliefs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setCommittedBeliefs_args typedOther = (setCommittedBeliefs_args)other;

      lastComparison = Boolean.valueOf(isSetCommittedBeliefs()).compareTo(typedOther.isSetCommittedBeliefs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommittedBeliefs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committedBeliefs, typedOther.committedBeliefs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCommittedBeliefs_args(");
      boolean first = true;

      sb.append("committedBeliefs:");
      if (this.committedBeliefs == null) {
        sb.append("null");
      } else {
        sb.append(this.committedBeliefs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCommittedBeliefs_argsStandardSchemeFactory implements SchemeFactory {
      public setCommittedBeliefs_argsStandardScheme getScheme() {
        return new setCommittedBeliefs_argsStandardScheme();
      }
    }

    private static class setCommittedBeliefs_argsStandardScheme extends StandardScheme<setCommittedBeliefs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMITTED_BELIEFS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list716 = iprot.readListBegin();
                  struct.committedBeliefs = new ArrayList<CommittedBelief>(_list716.size);
                  for (int _i717 = 0; _i717 < _list716.size; ++_i717)
                  {
                    CommittedBelief _elem718; // required
                    _elem718 = new CommittedBelief();
                    _elem718.read(iprot);
                    struct.committedBeliefs.add(_elem718);
                  }
                  iprot.readListEnd();
                }
                struct.setCommittedBeliefsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.committedBeliefs != null) {
          oprot.writeFieldBegin(COMMITTED_BELIEFS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.committedBeliefs.size()));
            for (CommittedBelief _iter719 : struct.committedBeliefs)
            {
              _iter719.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCommittedBeliefs_argsTupleSchemeFactory implements SchemeFactory {
      public setCommittedBeliefs_argsTupleScheme getScheme() {
        return new setCommittedBeliefs_argsTupleScheme();
      }
    }

    private static class setCommittedBeliefs_argsTupleScheme extends TupleScheme<setCommittedBeliefs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommittedBeliefs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommittedBeliefs()) {
          {
            oprot.writeI32(struct.committedBeliefs.size());
            for (CommittedBelief _iter720 : struct.committedBeliefs)
            {
              _iter720.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCommittedBeliefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list721 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.committedBeliefs = new ArrayList<CommittedBelief>(_list721.size);
            for (int _i722 = 0; _i722 < _list721.size; ++_i722)
            {
              CommittedBelief _elem723; // required
              _elem723 = new CommittedBelief();
              _elem723.read(iprot);
              struct.committedBeliefs.add(_elem723);
            }
          }
          struct.setCommittedBeliefsIsSet(true);
        }
      }
    }

  }

  public static class setCommittedBeliefs_result implements org.apache.thrift.TBase<setCommittedBeliefs_result, setCommittedBeliefs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCommittedBeliefs_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCommittedBeliefs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCommittedBeliefs_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCommittedBeliefs_result.class, metaDataMap);
    }

    public setCommittedBeliefs_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCommittedBeliefs_result(setCommittedBeliefs_result other) {
    }

    public setCommittedBeliefs_result deepCopy() {
      return new setCommittedBeliefs_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCommittedBeliefs_result)
        return this.equals((setCommittedBeliefs_result)that);
      return false;
    }

    public boolean equals(setCommittedBeliefs_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setCommittedBeliefs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setCommittedBeliefs_result typedOther = (setCommittedBeliefs_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCommittedBeliefs_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCommittedBeliefs_resultStandardSchemeFactory implements SchemeFactory {
      public setCommittedBeliefs_resultStandardScheme getScheme() {
        return new setCommittedBeliefs_resultStandardScheme();
      }
    }

    private static class setCommittedBeliefs_resultStandardScheme extends StandardScheme<setCommittedBeliefs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCommittedBeliefs_resultTupleSchemeFactory implements SchemeFactory {
      public setCommittedBeliefs_resultTupleScheme getScheme() {
        return new setCommittedBeliefs_resultTupleScheme();
      }
    }

    private static class setCommittedBeliefs_resultTupleScheme extends TupleScheme<setCommittedBeliefs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCommittedBeliefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setCoreferences_args implements org.apache.thrift.TBase<setCoreferences_args, setCoreferences_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCoreferences_args");

    private static final org.apache.thrift.protocol.TField COREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("coreferences", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCoreferences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCoreferences_argsTupleSchemeFactory());
    }

    public List<Coreference> coreferences; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COREFERENCES((short)1, "coreferences");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COREFERENCES
            return COREFERENCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("coreferences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coreference.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCoreferences_args.class, metaDataMap);
    }

    public setCoreferences_args() {
    }

    public setCoreferences_args(
      List<Coreference> coreferences)
    {
      this();
      this.coreferences = coreferences;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCoreferences_args(setCoreferences_args other) {
      if (other.isSetCoreferences()) {
        List<Coreference> __this__coreferences = new ArrayList<Coreference>();
        for (Coreference other_element : other.coreferences) {
          __this__coreferences.add(new Coreference(other_element));
        }
        this.coreferences = __this__coreferences;
      }
    }

    public setCoreferences_args deepCopy() {
      return new setCoreferences_args(this);
    }

    @Override
    public void clear() {
      this.coreferences = null;
    }

    public int getCoreferencesSize() {
      return (this.coreferences == null) ? 0 : this.coreferences.size();
    }

    public java.util.Iterator<Coreference> getCoreferencesIterator() {
      return (this.coreferences == null) ? null : this.coreferences.iterator();
    }

    public void addToCoreferences(Coreference elem) {
      if (this.coreferences == null) {
        this.coreferences = new ArrayList<Coreference>();
      }
      this.coreferences.add(elem);
    }

    public List<Coreference> getCoreferences() {
      return this.coreferences;
    }

    public setCoreferences_args setCoreferences(List<Coreference> coreferences) {
      this.coreferences = coreferences;
      return this;
    }

    public void unsetCoreferences() {
      this.coreferences = null;
    }

    /** Returns true if field coreferences is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreferences() {
      return this.coreferences != null;
    }

    public void setCoreferencesIsSet(boolean value) {
      if (!value) {
        this.coreferences = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COREFERENCES:
        if (value == null) {
          unsetCoreferences();
        } else {
          setCoreferences((List<Coreference>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COREFERENCES:
        return getCoreferences();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COREFERENCES:
        return isSetCoreferences();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCoreferences_args)
        return this.equals((setCoreferences_args)that);
      return false;
    }

    public boolean equals(setCoreferences_args that) {
      if (that == null)
        return false;

      boolean this_present_coreferences = true && this.isSetCoreferences();
      boolean that_present_coreferences = true && that.isSetCoreferences();
      if (this_present_coreferences || that_present_coreferences) {
        if (!(this_present_coreferences && that_present_coreferences))
          return false;
        if (!this.coreferences.equals(that.coreferences))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setCoreferences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setCoreferences_args typedOther = (setCoreferences_args)other;

      lastComparison = Boolean.valueOf(isSetCoreferences()).compareTo(typedOther.isSetCoreferences());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreferences()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreferences, typedOther.coreferences);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCoreferences_args(");
      boolean first = true;

      sb.append("coreferences:");
      if (this.coreferences == null) {
        sb.append("null");
      } else {
        sb.append(this.coreferences);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCoreferences_argsStandardSchemeFactory implements SchemeFactory {
      public setCoreferences_argsStandardScheme getScheme() {
        return new setCoreferences_argsStandardScheme();
      }
    }

    private static class setCoreferences_argsStandardScheme extends StandardScheme<setCoreferences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCoreferences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COREFERENCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list724 = iprot.readListBegin();
                  struct.coreferences = new ArrayList<Coreference>(_list724.size);
                  for (int _i725 = 0; _i725 < _list724.size; ++_i725)
                  {
                    Coreference _elem726; // required
                    _elem726 = new Coreference();
                    _elem726.read(iprot);
                    struct.coreferences.add(_elem726);
                  }
                  iprot.readListEnd();
                }
                struct.setCoreferencesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCoreferences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.coreferences != null) {
          oprot.writeFieldBegin(COREFERENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.coreferences.size()));
            for (Coreference _iter727 : struct.coreferences)
            {
              _iter727.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCoreferences_argsTupleSchemeFactory implements SchemeFactory {
      public setCoreferences_argsTupleScheme getScheme() {
        return new setCoreferences_argsTupleScheme();
      }
    }

    private static class setCoreferences_argsTupleScheme extends TupleScheme<setCoreferences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCoreferences()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCoreferences()) {
          {
            oprot.writeI32(struct.coreferences.size());
            for (Coreference _iter728 : struct.coreferences)
            {
              _iter728.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list729 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.coreferences = new ArrayList<Coreference>(_list729.size);
            for (int _i730 = 0; _i730 < _list729.size; ++_i730)
            {
              Coreference _elem731; // required
              _elem731 = new Coreference();
              _elem731.read(iprot);
              struct.coreferences.add(_elem731);
            }
          }
          struct.setCoreferencesIsSet(true);
        }
      }
    }

  }

  public static class setCoreferences_result implements org.apache.thrift.TBase<setCoreferences_result, setCoreferences_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCoreferences_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCoreferences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCoreferences_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCoreferences_result.class, metaDataMap);
    }

    public setCoreferences_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCoreferences_result(setCoreferences_result other) {
    }

    public setCoreferences_result deepCopy() {
      return new setCoreferences_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCoreferences_result)
        return this.equals((setCoreferences_result)that);
      return false;
    }

    public boolean equals(setCoreferences_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setCoreferences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setCoreferences_result typedOther = (setCoreferences_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCoreferences_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCoreferences_resultStandardSchemeFactory implements SchemeFactory {
      public setCoreferences_resultStandardScheme getScheme() {
        return new setCoreferences_resultStandardScheme();
      }
    }

    private static class setCoreferences_resultStandardScheme extends StandardScheme<setCoreferences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCoreferences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCoreferences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCoreferences_resultTupleSchemeFactory implements SchemeFactory {
      public setCoreferences_resultTupleScheme getScheme() {
        return new setCoreferences_resultTupleScheme();
      }
    }

    private static class setCoreferences_resultTupleScheme extends TupleScheme<setCoreferences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setDependencies_args implements org.apache.thrift.TBase<setDependencies_args, setDependencies_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDependencies_args");

    private static final org.apache.thrift.protocol.TField DEPENDENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencies", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDependencies_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDependencies_argsTupleSchemeFactory());
    }

    public List<Dependency> dependencies; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEPENDENCIES((short)1, "dependencies");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEPENDENCIES
            return DEPENDENCIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEPENDENCIES, new org.apache.thrift.meta_data.FieldMetaData("dependencies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dependency.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDependencies_args.class, metaDataMap);
    }

    public setDependencies_args() {
    }

    public setDependencies_args(
      List<Dependency> dependencies)
    {
      this();
      this.dependencies = dependencies;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDependencies_args(setDependencies_args other) {
      if (other.isSetDependencies()) {
        List<Dependency> __this__dependencies = new ArrayList<Dependency>();
        for (Dependency other_element : other.dependencies) {
          __this__dependencies.add(new Dependency(other_element));
        }
        this.dependencies = __this__dependencies;
      }
    }

    public setDependencies_args deepCopy() {
      return new setDependencies_args(this);
    }

    @Override
    public void clear() {
      this.dependencies = null;
    }

    public int getDependenciesSize() {
      return (this.dependencies == null) ? 0 : this.dependencies.size();
    }

    public java.util.Iterator<Dependency> getDependenciesIterator() {
      return (this.dependencies == null) ? null : this.dependencies.iterator();
    }

    public void addToDependencies(Dependency elem) {
      if (this.dependencies == null) {
        this.dependencies = new ArrayList<Dependency>();
      }
      this.dependencies.add(elem);
    }

    public List<Dependency> getDependencies() {
      return this.dependencies;
    }

    public setDependencies_args setDependencies(List<Dependency> dependencies) {
      this.dependencies = dependencies;
      return this;
    }

    public void unsetDependencies() {
      this.dependencies = null;
    }

    /** Returns true if field dependencies is set (has been assigned a value) and false otherwise */
    public boolean isSetDependencies() {
      return this.dependencies != null;
    }

    public void setDependenciesIsSet(boolean value) {
      if (!value) {
        this.dependencies = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEPENDENCIES:
        if (value == null) {
          unsetDependencies();
        } else {
          setDependencies((List<Dependency>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEPENDENCIES:
        return getDependencies();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEPENDENCIES:
        return isSetDependencies();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDependencies_args)
        return this.equals((setDependencies_args)that);
      return false;
    }

    public boolean equals(setDependencies_args that) {
      if (that == null)
        return false;

      boolean this_present_dependencies = true && this.isSetDependencies();
      boolean that_present_dependencies = true && that.isSetDependencies();
      if (this_present_dependencies || that_present_dependencies) {
        if (!(this_present_dependencies && that_present_dependencies))
          return false;
        if (!this.dependencies.equals(that.dependencies))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDependencies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDependencies_args typedOther = (setDependencies_args)other;

      lastComparison = Boolean.valueOf(isSetDependencies()).compareTo(typedOther.isSetDependencies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDependencies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencies, typedOther.dependencies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDependencies_args(");
      boolean first = true;

      sb.append("dependencies:");
      if (this.dependencies == null) {
        sb.append("null");
      } else {
        sb.append(this.dependencies);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDependencies_argsStandardSchemeFactory implements SchemeFactory {
      public setDependencies_argsStandardScheme getScheme() {
        return new setDependencies_argsStandardScheme();
      }
    }

    private static class setDependencies_argsStandardScheme extends StandardScheme<setDependencies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDependencies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEPENDENCIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list732 = iprot.readListBegin();
                  struct.dependencies = new ArrayList<Dependency>(_list732.size);
                  for (int _i733 = 0; _i733 < _list732.size; ++_i733)
                  {
                    Dependency _elem734; // required
                    _elem734 = new Dependency();
                    _elem734.read(iprot);
                    struct.dependencies.add(_elem734);
                  }
                  iprot.readListEnd();
                }
                struct.setDependenciesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDependencies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dependencies != null) {
          oprot.writeFieldBegin(DEPENDENCIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dependencies.size()));
            for (Dependency _iter735 : struct.dependencies)
            {
              _iter735.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDependencies_argsTupleSchemeFactory implements SchemeFactory {
      public setDependencies_argsTupleScheme getScheme() {
        return new setDependencies_argsTupleScheme();
      }
    }

    private static class setDependencies_argsTupleScheme extends TupleScheme<setDependencies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDependencies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDependencies()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDependencies()) {
          {
            oprot.writeI32(struct.dependencies.size());
            for (Dependency _iter736 : struct.dependencies)
            {
              _iter736.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDependencies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list737 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.dependencies = new ArrayList<Dependency>(_list737.size);
            for (int _i738 = 0; _i738 < _list737.size; ++_i738)
            {
              Dependency _elem739; // required
              _elem739 = new Dependency();
              _elem739.read(iprot);
              struct.dependencies.add(_elem739);
            }
          }
          struct.setDependenciesIsSet(true);
        }
      }
    }

  }

  public static class setDependencies_result implements org.apache.thrift.TBase<setDependencies_result, setDependencies_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDependencies_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDependencies_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDependencies_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDependencies_result.class, metaDataMap);
    }

    public setDependencies_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDependencies_result(setDependencies_result other) {
    }

    public setDependencies_result deepCopy() {
      return new setDependencies_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDependencies_result)
        return this.equals((setDependencies_result)that);
      return false;
    }

    public boolean equals(setDependencies_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDependencies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDependencies_result typedOther = (setDependencies_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDependencies_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDependencies_resultStandardSchemeFactory implements SchemeFactory {
      public setDependencies_resultStandardScheme getScheme() {
        return new setDependencies_resultStandardScheme();
      }
    }

    private static class setDependencies_resultStandardScheme extends StandardScheme<setDependencies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDependencies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDependencies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDependencies_resultTupleSchemeFactory implements SchemeFactory {
      public setDependencies_resultTupleScheme getScheme() {
        return new setDependencies_resultTupleScheme();
      }
    }

    private static class setDependencies_resultTupleScheme extends TupleScheme<setDependencies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDependencies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDependencies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setEntityMentions_args implements org.apache.thrift.TBase<setEntityMentions_args, setEntityMentions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEntityMentions_args");

    private static final org.apache.thrift.protocol.TField ENTITY_MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMentions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEntityMentions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEntityMentions_argsTupleSchemeFactory());
    }

    public List<EntityMention> entityMentions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_MENTIONS((short)1, "entityMentions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_MENTIONS
            return ENTITY_MENTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("entityMentions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEntityMentions_args.class, metaDataMap);
    }

    public setEntityMentions_args() {
    }

    public setEntityMentions_args(
      List<EntityMention> entityMentions)
    {
      this();
      this.entityMentions = entityMentions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEntityMentions_args(setEntityMentions_args other) {
      if (other.isSetEntityMentions()) {
        List<EntityMention> __this__entityMentions = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.entityMentions) {
          __this__entityMentions.add(new EntityMention(other_element));
        }
        this.entityMentions = __this__entityMentions;
      }
    }

    public setEntityMentions_args deepCopy() {
      return new setEntityMentions_args(this);
    }

    @Override
    public void clear() {
      this.entityMentions = null;
    }

    public int getEntityMentionsSize() {
      return (this.entityMentions == null) ? 0 : this.entityMentions.size();
    }

    public java.util.Iterator<EntityMention> getEntityMentionsIterator() {
      return (this.entityMentions == null) ? null : this.entityMentions.iterator();
    }

    public void addToEntityMentions(EntityMention elem) {
      if (this.entityMentions == null) {
        this.entityMentions = new ArrayList<EntityMention>();
      }
      this.entityMentions.add(elem);
    }

    public List<EntityMention> getEntityMentions() {
      return this.entityMentions;
    }

    public setEntityMentions_args setEntityMentions(List<EntityMention> entityMentions) {
      this.entityMentions = entityMentions;
      return this;
    }

    public void unsetEntityMentions() {
      this.entityMentions = null;
    }

    /** Returns true if field entityMentions is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityMentions() {
      return this.entityMentions != null;
    }

    public void setEntityMentionsIsSet(boolean value) {
      if (!value) {
        this.entityMentions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_MENTIONS:
        if (value == null) {
          unsetEntityMentions();
        } else {
          setEntityMentions((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_MENTIONS:
        return getEntityMentions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_MENTIONS:
        return isSetEntityMentions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEntityMentions_args)
        return this.equals((setEntityMentions_args)that);
      return false;
    }

    public boolean equals(setEntityMentions_args that) {
      if (that == null)
        return false;

      boolean this_present_entityMentions = true && this.isSetEntityMentions();
      boolean that_present_entityMentions = true && that.isSetEntityMentions();
      if (this_present_entityMentions || that_present_entityMentions) {
        if (!(this_present_entityMentions && that_present_entityMentions))
          return false;
        if (!this.entityMentions.equals(that.entityMentions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setEntityMentions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setEntityMentions_args typedOther = (setEntityMentions_args)other;

      lastComparison = Boolean.valueOf(isSetEntityMentions()).compareTo(typedOther.isSetEntityMentions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityMentions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityMentions, typedOther.entityMentions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEntityMentions_args(");
      boolean first = true;

      sb.append("entityMentions:");
      if (this.entityMentions == null) {
        sb.append("null");
      } else {
        sb.append(this.entityMentions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEntityMentions_argsStandardSchemeFactory implements SchemeFactory {
      public setEntityMentions_argsStandardScheme getScheme() {
        return new setEntityMentions_argsStandardScheme();
      }
    }

    private static class setEntityMentions_argsStandardScheme extends StandardScheme<setEntityMentions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEntityMentions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_MENTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list740 = iprot.readListBegin();
                  struct.entityMentions = new ArrayList<EntityMention>(_list740.size);
                  for (int _i741 = 0; _i741 < _list740.size; ++_i741)
                  {
                    EntityMention _elem742; // required
                    _elem742 = new EntityMention();
                    _elem742.read(iprot);
                    struct.entityMentions.add(_elem742);
                  }
                  iprot.readListEnd();
                }
                struct.setEntityMentionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEntityMentions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entityMentions != null) {
          oprot.writeFieldBegin(ENTITY_MENTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entityMentions.size()));
            for (EntityMention _iter743 : struct.entityMentions)
            {
              _iter743.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEntityMentions_argsTupleSchemeFactory implements SchemeFactory {
      public setEntityMentions_argsTupleScheme getScheme() {
        return new setEntityMentions_argsTupleScheme();
      }
    }

    private static class setEntityMentions_argsTupleScheme extends TupleScheme<setEntityMentions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEntityMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntityMentions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntityMentions()) {
          {
            oprot.writeI32(struct.entityMentions.size());
            for (EntityMention _iter744 : struct.entityMentions)
            {
              _iter744.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEntityMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list745 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.entityMentions = new ArrayList<EntityMention>(_list745.size);
            for (int _i746 = 0; _i746 < _list745.size; ++_i746)
            {
              EntityMention _elem747; // required
              _elem747 = new EntityMention();
              _elem747.read(iprot);
              struct.entityMentions.add(_elem747);
            }
          }
          struct.setEntityMentionsIsSet(true);
        }
      }
    }

  }

  public static class setEntityMentions_result implements org.apache.thrift.TBase<setEntityMentions_result, setEntityMentions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEntityMentions_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEntityMentions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEntityMentions_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEntityMentions_result.class, metaDataMap);
    }

    public setEntityMentions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEntityMentions_result(setEntityMentions_result other) {
    }

    public setEntityMentions_result deepCopy() {
      return new setEntityMentions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEntityMentions_result)
        return this.equals((setEntityMentions_result)that);
      return false;
    }

    public boolean equals(setEntityMentions_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setEntityMentions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setEntityMentions_result typedOther = (setEntityMentions_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEntityMentions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEntityMentions_resultStandardSchemeFactory implements SchemeFactory {
      public setEntityMentions_resultStandardScheme getScheme() {
        return new setEntityMentions_resultStandardScheme();
      }
    }

    private static class setEntityMentions_resultStandardScheme extends StandardScheme<setEntityMentions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEntityMentions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEntityMentions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEntityMentions_resultTupleSchemeFactory implements SchemeFactory {
      public setEntityMentions_resultTupleScheme getScheme() {
        return new setEntityMentions_resultTupleScheme();
      }
    }

    private static class setEntityMentions_resultTupleScheme extends TupleScheme<setEntityMentions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEntityMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEntityMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setJointRelationCoreferences_args implements org.apache.thrift.TBase<setJointRelationCoreferences_args, setJointRelationCoreferences_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setJointRelationCoreferences_args");

    private static final org.apache.thrift.protocol.TField JOINT_RELATION_COREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("jointRelationCoreferences", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setJointRelationCoreferences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setJointRelationCoreferences_argsTupleSchemeFactory());
    }

    public List<JointRelationCoreference> jointRelationCoreferences; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOINT_RELATION_COREFERENCES((short)1, "jointRelationCoreferences");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOINT_RELATION_COREFERENCES
            return JOINT_RELATION_COREFERENCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOINT_RELATION_COREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("jointRelationCoreferences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JointRelationCoreference.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setJointRelationCoreferences_args.class, metaDataMap);
    }

    public setJointRelationCoreferences_args() {
    }

    public setJointRelationCoreferences_args(
      List<JointRelationCoreference> jointRelationCoreferences)
    {
      this();
      this.jointRelationCoreferences = jointRelationCoreferences;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setJointRelationCoreferences_args(setJointRelationCoreferences_args other) {
      if (other.isSetJointRelationCoreferences()) {
        List<JointRelationCoreference> __this__jointRelationCoreferences = new ArrayList<JointRelationCoreference>();
        for (JointRelationCoreference other_element : other.jointRelationCoreferences) {
          __this__jointRelationCoreferences.add(new JointRelationCoreference(other_element));
        }
        this.jointRelationCoreferences = __this__jointRelationCoreferences;
      }
    }

    public setJointRelationCoreferences_args deepCopy() {
      return new setJointRelationCoreferences_args(this);
    }

    @Override
    public void clear() {
      this.jointRelationCoreferences = null;
    }

    public int getJointRelationCoreferencesSize() {
      return (this.jointRelationCoreferences == null) ? 0 : this.jointRelationCoreferences.size();
    }

    public java.util.Iterator<JointRelationCoreference> getJointRelationCoreferencesIterator() {
      return (this.jointRelationCoreferences == null) ? null : this.jointRelationCoreferences.iterator();
    }

    public void addToJointRelationCoreferences(JointRelationCoreference elem) {
      if (this.jointRelationCoreferences == null) {
        this.jointRelationCoreferences = new ArrayList<JointRelationCoreference>();
      }
      this.jointRelationCoreferences.add(elem);
    }

    public List<JointRelationCoreference> getJointRelationCoreferences() {
      return this.jointRelationCoreferences;
    }

    public setJointRelationCoreferences_args setJointRelationCoreferences(List<JointRelationCoreference> jointRelationCoreferences) {
      this.jointRelationCoreferences = jointRelationCoreferences;
      return this;
    }

    public void unsetJointRelationCoreferences() {
      this.jointRelationCoreferences = null;
    }

    /** Returns true if field jointRelationCoreferences is set (has been assigned a value) and false otherwise */
    public boolean isSetJointRelationCoreferences() {
      return this.jointRelationCoreferences != null;
    }

    public void setJointRelationCoreferencesIsSet(boolean value) {
      if (!value) {
        this.jointRelationCoreferences = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOINT_RELATION_COREFERENCES:
        if (value == null) {
          unsetJointRelationCoreferences();
        } else {
          setJointRelationCoreferences((List<JointRelationCoreference>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOINT_RELATION_COREFERENCES:
        return getJointRelationCoreferences();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOINT_RELATION_COREFERENCES:
        return isSetJointRelationCoreferences();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setJointRelationCoreferences_args)
        return this.equals((setJointRelationCoreferences_args)that);
      return false;
    }

    public boolean equals(setJointRelationCoreferences_args that) {
      if (that == null)
        return false;

      boolean this_present_jointRelationCoreferences = true && this.isSetJointRelationCoreferences();
      boolean that_present_jointRelationCoreferences = true && that.isSetJointRelationCoreferences();
      if (this_present_jointRelationCoreferences || that_present_jointRelationCoreferences) {
        if (!(this_present_jointRelationCoreferences && that_present_jointRelationCoreferences))
          return false;
        if (!this.jointRelationCoreferences.equals(that.jointRelationCoreferences))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setJointRelationCoreferences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setJointRelationCoreferences_args typedOther = (setJointRelationCoreferences_args)other;

      lastComparison = Boolean.valueOf(isSetJointRelationCoreferences()).compareTo(typedOther.isSetJointRelationCoreferences());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJointRelationCoreferences()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointRelationCoreferences, typedOther.jointRelationCoreferences);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setJointRelationCoreferences_args(");
      boolean first = true;

      sb.append("jointRelationCoreferences:");
      if (this.jointRelationCoreferences == null) {
        sb.append("null");
      } else {
        sb.append(this.jointRelationCoreferences);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setJointRelationCoreferences_argsStandardSchemeFactory implements SchemeFactory {
      public setJointRelationCoreferences_argsStandardScheme getScheme() {
        return new setJointRelationCoreferences_argsStandardScheme();
      }
    }

    private static class setJointRelationCoreferences_argsStandardScheme extends StandardScheme<setJointRelationCoreferences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOINT_RELATION_COREFERENCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list748 = iprot.readListBegin();
                  struct.jointRelationCoreferences = new ArrayList<JointRelationCoreference>(_list748.size);
                  for (int _i749 = 0; _i749 < _list748.size; ++_i749)
                  {
                    JointRelationCoreference _elem750; // required
                    _elem750 = new JointRelationCoreference();
                    _elem750.read(iprot);
                    struct.jointRelationCoreferences.add(_elem750);
                  }
                  iprot.readListEnd();
                }
                struct.setJointRelationCoreferencesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jointRelationCoreferences != null) {
          oprot.writeFieldBegin(JOINT_RELATION_COREFERENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jointRelationCoreferences.size()));
            for (JointRelationCoreference _iter751 : struct.jointRelationCoreferences)
            {
              _iter751.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setJointRelationCoreferences_argsTupleSchemeFactory implements SchemeFactory {
      public setJointRelationCoreferences_argsTupleScheme getScheme() {
        return new setJointRelationCoreferences_argsTupleScheme();
      }
    }

    private static class setJointRelationCoreferences_argsTupleScheme extends TupleScheme<setJointRelationCoreferences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJointRelationCoreferences()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJointRelationCoreferences()) {
          {
            oprot.writeI32(struct.jointRelationCoreferences.size());
            for (JointRelationCoreference _iter752 : struct.jointRelationCoreferences)
            {
              _iter752.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setJointRelationCoreferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list753 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.jointRelationCoreferences = new ArrayList<JointRelationCoreference>(_list753.size);
            for (int _i754 = 0; _i754 < _list753.size; ++_i754)
            {
              JointRelationCoreference _elem755; // required
              _elem755 = new JointRelationCoreference();
              _elem755.read(iprot);
              struct.jointRelationCoreferences.add(_elem755);
            }
          }
          struct.setJointRelationCoreferencesIsSet(true);
        }
      }
    }

  }

  public static class setJointRelationCoreferences_result implements org.apache.thrift.TBase<setJointRelationCoreferences_result, setJointRelationCoreferences_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setJointRelationCoreferences_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setJointRelationCoreferences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setJointRelationCoreferences_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setJointRelationCoreferences_result.class, metaDataMap);
    }

    public setJointRelationCoreferences_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setJointRelationCoreferences_result(setJointRelationCoreferences_result other) {
    }

    public setJointRelationCoreferences_result deepCopy() {
      return new setJointRelationCoreferences_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setJointRelationCoreferences_result)
        return this.equals((setJointRelationCoreferences_result)that);
      return false;
    }

    public boolean equals(setJointRelationCoreferences_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setJointRelationCoreferences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setJointRelationCoreferences_result typedOther = (setJointRelationCoreferences_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setJointRelationCoreferences_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setJointRelationCoreferences_resultStandardSchemeFactory implements SchemeFactory {
      public setJointRelationCoreferences_resultStandardScheme getScheme() {
        return new setJointRelationCoreferences_resultStandardScheme();
      }
    }

    private static class setJointRelationCoreferences_resultStandardScheme extends StandardScheme<setJointRelationCoreferences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setJointRelationCoreferences_resultTupleSchemeFactory implements SchemeFactory {
      public setJointRelationCoreferences_resultTupleScheme getScheme() {
        return new setJointRelationCoreferences_resultTupleScheme();
      }
    }

    private static class setJointRelationCoreferences_resultTupleScheme extends TupleScheme<setJointRelationCoreferences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setJointRelationCoreferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setMentions_args implements org.apache.thrift.TBase<setMentions_args, setMentions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMentions_args");

    private static final org.apache.thrift.protocol.TField ENTITY_MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMentions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMentions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMentions_argsTupleSchemeFactory());
    }

    public List<EntityMention> entityMentions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_MENTIONS((short)1, "entityMentions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_MENTIONS
            return ENTITY_MENTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("entityMentions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMentions_args.class, metaDataMap);
    }

    public setMentions_args() {
    }

    public setMentions_args(
      List<EntityMention> entityMentions)
    {
      this();
      this.entityMentions = entityMentions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMentions_args(setMentions_args other) {
      if (other.isSetEntityMentions()) {
        List<EntityMention> __this__entityMentions = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.entityMentions) {
          __this__entityMentions.add(new EntityMention(other_element));
        }
        this.entityMentions = __this__entityMentions;
      }
    }

    public setMentions_args deepCopy() {
      return new setMentions_args(this);
    }

    @Override
    public void clear() {
      this.entityMentions = null;
    }

    public int getEntityMentionsSize() {
      return (this.entityMentions == null) ? 0 : this.entityMentions.size();
    }

    public java.util.Iterator<EntityMention> getEntityMentionsIterator() {
      return (this.entityMentions == null) ? null : this.entityMentions.iterator();
    }

    public void addToEntityMentions(EntityMention elem) {
      if (this.entityMentions == null) {
        this.entityMentions = new ArrayList<EntityMention>();
      }
      this.entityMentions.add(elem);
    }

    public List<EntityMention> getEntityMentions() {
      return this.entityMentions;
    }

    public setMentions_args setEntityMentions(List<EntityMention> entityMentions) {
      this.entityMentions = entityMentions;
      return this;
    }

    public void unsetEntityMentions() {
      this.entityMentions = null;
    }

    /** Returns true if field entityMentions is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityMentions() {
      return this.entityMentions != null;
    }

    public void setEntityMentionsIsSet(boolean value) {
      if (!value) {
        this.entityMentions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_MENTIONS:
        if (value == null) {
          unsetEntityMentions();
        } else {
          setEntityMentions((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_MENTIONS:
        return getEntityMentions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_MENTIONS:
        return isSetEntityMentions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMentions_args)
        return this.equals((setMentions_args)that);
      return false;
    }

    public boolean equals(setMentions_args that) {
      if (that == null)
        return false;

      boolean this_present_entityMentions = true && this.isSetEntityMentions();
      boolean that_present_entityMentions = true && that.isSetEntityMentions();
      if (this_present_entityMentions || that_present_entityMentions) {
        if (!(this_present_entityMentions && that_present_entityMentions))
          return false;
        if (!this.entityMentions.equals(that.entityMentions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setMentions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setMentions_args typedOther = (setMentions_args)other;

      lastComparison = Boolean.valueOf(isSetEntityMentions()).compareTo(typedOther.isSetEntityMentions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityMentions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityMentions, typedOther.entityMentions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMentions_args(");
      boolean first = true;

      sb.append("entityMentions:");
      if (this.entityMentions == null) {
        sb.append("null");
      } else {
        sb.append(this.entityMentions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMentions_argsStandardSchemeFactory implements SchemeFactory {
      public setMentions_argsStandardScheme getScheme() {
        return new setMentions_argsStandardScheme();
      }
    }

    private static class setMentions_argsStandardScheme extends StandardScheme<setMentions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMentions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_MENTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list756 = iprot.readListBegin();
                  struct.entityMentions = new ArrayList<EntityMention>(_list756.size);
                  for (int _i757 = 0; _i757 < _list756.size; ++_i757)
                  {
                    EntityMention _elem758; // required
                    _elem758 = new EntityMention();
                    _elem758.read(iprot);
                    struct.entityMentions.add(_elem758);
                  }
                  iprot.readListEnd();
                }
                struct.setEntityMentionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMentions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entityMentions != null) {
          oprot.writeFieldBegin(ENTITY_MENTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entityMentions.size()));
            for (EntityMention _iter759 : struct.entityMentions)
            {
              _iter759.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMentions_argsTupleSchemeFactory implements SchemeFactory {
      public setMentions_argsTupleScheme getScheme() {
        return new setMentions_argsTupleScheme();
      }
    }

    private static class setMentions_argsTupleScheme extends TupleScheme<setMentions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntityMentions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntityMentions()) {
          {
            oprot.writeI32(struct.entityMentions.size());
            for (EntityMention _iter760 : struct.entityMentions)
            {
              _iter760.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list761 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.entityMentions = new ArrayList<EntityMention>(_list761.size);
            for (int _i762 = 0; _i762 < _list761.size; ++_i762)
            {
              EntityMention _elem763; // required
              _elem763 = new EntityMention();
              _elem763.read(iprot);
              struct.entityMentions.add(_elem763);
            }
          }
          struct.setEntityMentionsIsSet(true);
        }
      }
    }

  }

  public static class setMentions_result implements org.apache.thrift.TBase<setMentions_result, setMentions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMentions_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMentions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMentions_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMentions_result.class, metaDataMap);
    }

    public setMentions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMentions_result(setMentions_result other) {
    }

    public setMentions_result deepCopy() {
      return new setMentions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMentions_result)
        return this.equals((setMentions_result)that);
      return false;
    }

    public boolean equals(setMentions_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setMentions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setMentions_result typedOther = (setMentions_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMentions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMentions_resultStandardSchemeFactory implements SchemeFactory {
      public setMentions_resultStandardScheme getScheme() {
        return new setMentions_resultStandardScheme();
      }
    }

    private static class setMentions_resultStandardScheme extends StandardScheme<setMentions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMentions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMentions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMentions_resultTupleSchemeFactory implements SchemeFactory {
      public setMentions_resultTupleScheme getScheme() {
        return new setMentions_resultTupleScheme();
      }
    }

    private static class setMentions_resultTupleScheme extends TupleScheme<setMentions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setNamedEntities_args implements org.apache.thrift.TBase<setNamedEntities_args, setNamedEntities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setNamedEntities_args");

    private static final org.apache.thrift.protocol.TField NAMED_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("namedEntities", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setNamedEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setNamedEntities_argsTupleSchemeFactory());
    }

    public List<EntityMention> namedEntities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAMED_ENTITIES((short)1, "namedEntities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAMED_ENTITIES
            return NAMED_ENTITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAMED_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("namedEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNamedEntities_args.class, metaDataMap);
    }

    public setNamedEntities_args() {
    }

    public setNamedEntities_args(
      List<EntityMention> namedEntities)
    {
      this();
      this.namedEntities = namedEntities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNamedEntities_args(setNamedEntities_args other) {
      if (other.isSetNamedEntities()) {
        List<EntityMention> __this__namedEntities = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.namedEntities) {
          __this__namedEntities.add(new EntityMention(other_element));
        }
        this.namedEntities = __this__namedEntities;
      }
    }

    public setNamedEntities_args deepCopy() {
      return new setNamedEntities_args(this);
    }

    @Override
    public void clear() {
      this.namedEntities = null;
    }

    public int getNamedEntitiesSize() {
      return (this.namedEntities == null) ? 0 : this.namedEntities.size();
    }

    public java.util.Iterator<EntityMention> getNamedEntitiesIterator() {
      return (this.namedEntities == null) ? null : this.namedEntities.iterator();
    }

    public void addToNamedEntities(EntityMention elem) {
      if (this.namedEntities == null) {
        this.namedEntities = new ArrayList<EntityMention>();
      }
      this.namedEntities.add(elem);
    }

    public List<EntityMention> getNamedEntities() {
      return this.namedEntities;
    }

    public setNamedEntities_args setNamedEntities(List<EntityMention> namedEntities) {
      this.namedEntities = namedEntities;
      return this;
    }

    public void unsetNamedEntities() {
      this.namedEntities = null;
    }

    /** Returns true if field namedEntities is set (has been assigned a value) and false otherwise */
    public boolean isSetNamedEntities() {
      return this.namedEntities != null;
    }

    public void setNamedEntitiesIsSet(boolean value) {
      if (!value) {
        this.namedEntities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAMED_ENTITIES:
        if (value == null) {
          unsetNamedEntities();
        } else {
          setNamedEntities((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAMED_ENTITIES:
        return getNamedEntities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAMED_ENTITIES:
        return isSetNamedEntities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNamedEntities_args)
        return this.equals((setNamedEntities_args)that);
      return false;
    }

    public boolean equals(setNamedEntities_args that) {
      if (that == null)
        return false;

      boolean this_present_namedEntities = true && this.isSetNamedEntities();
      boolean that_present_namedEntities = true && that.isSetNamedEntities();
      if (this_present_namedEntities || that_present_namedEntities) {
        if (!(this_present_namedEntities && that_present_namedEntities))
          return false;
        if (!this.namedEntities.equals(that.namedEntities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setNamedEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setNamedEntities_args typedOther = (setNamedEntities_args)other;

      lastComparison = Boolean.valueOf(isSetNamedEntities()).compareTo(typedOther.isSetNamedEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNamedEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namedEntities, typedOther.namedEntities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setNamedEntities_args(");
      boolean first = true;

      sb.append("namedEntities:");
      if (this.namedEntities == null) {
        sb.append("null");
      } else {
        sb.append(this.namedEntities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setNamedEntities_argsStandardSchemeFactory implements SchemeFactory {
      public setNamedEntities_argsStandardScheme getScheme() {
        return new setNamedEntities_argsStandardScheme();
      }
    }

    private static class setNamedEntities_argsStandardScheme extends StandardScheme<setNamedEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setNamedEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAMED_ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list764 = iprot.readListBegin();
                  struct.namedEntities = new ArrayList<EntityMention>(_list764.size);
                  for (int _i765 = 0; _i765 < _list764.size; ++_i765)
                  {
                    EntityMention _elem766; // required
                    _elem766 = new EntityMention();
                    _elem766.read(iprot);
                    struct.namedEntities.add(_elem766);
                  }
                  iprot.readListEnd();
                }
                struct.setNamedEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setNamedEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.namedEntities != null) {
          oprot.writeFieldBegin(NAMED_ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.namedEntities.size()));
            for (EntityMention _iter767 : struct.namedEntities)
            {
              _iter767.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setNamedEntities_argsTupleSchemeFactory implements SchemeFactory {
      public setNamedEntities_argsTupleScheme getScheme() {
        return new setNamedEntities_argsTupleScheme();
      }
    }

    private static class setNamedEntities_argsTupleScheme extends TupleScheme<setNamedEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setNamedEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNamedEntities()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNamedEntities()) {
          {
            oprot.writeI32(struct.namedEntities.size());
            for (EntityMention _iter768 : struct.namedEntities)
            {
              _iter768.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setNamedEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list769 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.namedEntities = new ArrayList<EntityMention>(_list769.size);
            for (int _i770 = 0; _i770 < _list769.size; ++_i770)
            {
              EntityMention _elem771; // required
              _elem771 = new EntityMention();
              _elem771.read(iprot);
              struct.namedEntities.add(_elem771);
            }
          }
          struct.setNamedEntitiesIsSet(true);
        }
      }
    }

  }

  public static class setNamedEntities_result implements org.apache.thrift.TBase<setNamedEntities_result, setNamedEntities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setNamedEntities_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setNamedEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setNamedEntities_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNamedEntities_result.class, metaDataMap);
    }

    public setNamedEntities_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNamedEntities_result(setNamedEntities_result other) {
    }

    public setNamedEntities_result deepCopy() {
      return new setNamedEntities_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNamedEntities_result)
        return this.equals((setNamedEntities_result)that);
      return false;
    }

    public boolean equals(setNamedEntities_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setNamedEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setNamedEntities_result typedOther = (setNamedEntities_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setNamedEntities_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setNamedEntities_resultStandardSchemeFactory implements SchemeFactory {
      public setNamedEntities_resultStandardScheme getScheme() {
        return new setNamedEntities_resultStandardScheme();
      }
    }

    private static class setNamedEntities_resultStandardScheme extends StandardScheme<setNamedEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setNamedEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setNamedEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setNamedEntities_resultTupleSchemeFactory implements SchemeFactory {
      public setNamedEntities_resultTupleScheme getScheme() {
        return new setNamedEntities_resultTupleScheme();
      }
    }

    private static class setNamedEntities_resultTupleScheme extends TupleScheme<setNamedEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setNamedEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setNamedEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setOpinions_args implements org.apache.thrift.TBase<setOpinions_args, setOpinions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOpinions_args");

    private static final org.apache.thrift.protocol.TField OPINIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("opinions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOpinions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOpinions_argsTupleSchemeFactory());
    }

    public List<Opinion> opinions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPINIONS((short)1, "opinions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPINIONS
            return OPINIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPINIONS, new org.apache.thrift.meta_data.FieldMetaData("opinions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Opinion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOpinions_args.class, metaDataMap);
    }

    public setOpinions_args() {
    }

    public setOpinions_args(
      List<Opinion> opinions)
    {
      this();
      this.opinions = opinions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOpinions_args(setOpinions_args other) {
      if (other.isSetOpinions()) {
        List<Opinion> __this__opinions = new ArrayList<Opinion>();
        for (Opinion other_element : other.opinions) {
          __this__opinions.add(new Opinion(other_element));
        }
        this.opinions = __this__opinions;
      }
    }

    public setOpinions_args deepCopy() {
      return new setOpinions_args(this);
    }

    @Override
    public void clear() {
      this.opinions = null;
    }

    public int getOpinionsSize() {
      return (this.opinions == null) ? 0 : this.opinions.size();
    }

    public java.util.Iterator<Opinion> getOpinionsIterator() {
      return (this.opinions == null) ? null : this.opinions.iterator();
    }

    public void addToOpinions(Opinion elem) {
      if (this.opinions == null) {
        this.opinions = new ArrayList<Opinion>();
      }
      this.opinions.add(elem);
    }

    public List<Opinion> getOpinions() {
      return this.opinions;
    }

    public setOpinions_args setOpinions(List<Opinion> opinions) {
      this.opinions = opinions;
      return this;
    }

    public void unsetOpinions() {
      this.opinions = null;
    }

    /** Returns true if field opinions is set (has been assigned a value) and false otherwise */
    public boolean isSetOpinions() {
      return this.opinions != null;
    }

    public void setOpinionsIsSet(boolean value) {
      if (!value) {
        this.opinions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPINIONS:
        if (value == null) {
          unsetOpinions();
        } else {
          setOpinions((List<Opinion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPINIONS:
        return getOpinions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPINIONS:
        return isSetOpinions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOpinions_args)
        return this.equals((setOpinions_args)that);
      return false;
    }

    public boolean equals(setOpinions_args that) {
      if (that == null)
        return false;

      boolean this_present_opinions = true && this.isSetOpinions();
      boolean that_present_opinions = true && that.isSetOpinions();
      if (this_present_opinions || that_present_opinions) {
        if (!(this_present_opinions && that_present_opinions))
          return false;
        if (!this.opinions.equals(that.opinions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setOpinions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setOpinions_args typedOther = (setOpinions_args)other;

      lastComparison = Boolean.valueOf(isSetOpinions()).compareTo(typedOther.isSetOpinions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpinions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinions, typedOther.opinions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOpinions_args(");
      boolean first = true;

      sb.append("opinions:");
      if (this.opinions == null) {
        sb.append("null");
      } else {
        sb.append(this.opinions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOpinions_argsStandardSchemeFactory implements SchemeFactory {
      public setOpinions_argsStandardScheme getScheme() {
        return new setOpinions_argsStandardScheme();
      }
    }

    private static class setOpinions_argsStandardScheme extends StandardScheme<setOpinions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOpinions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPINIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list772 = iprot.readListBegin();
                  struct.opinions = new ArrayList<Opinion>(_list772.size);
                  for (int _i773 = 0; _i773 < _list772.size; ++_i773)
                  {
                    Opinion _elem774; // required
                    _elem774 = new Opinion();
                    _elem774.read(iprot);
                    struct.opinions.add(_elem774);
                  }
                  iprot.readListEnd();
                }
                struct.setOpinionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOpinions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.opinions != null) {
          oprot.writeFieldBegin(OPINIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.opinions.size()));
            for (Opinion _iter775 : struct.opinions)
            {
              _iter775.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOpinions_argsTupleSchemeFactory implements SchemeFactory {
      public setOpinions_argsTupleScheme getScheme() {
        return new setOpinions_argsTupleScheme();
      }
    }

    private static class setOpinions_argsTupleScheme extends TupleScheme<setOpinions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOpinions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOpinions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOpinions()) {
          {
            oprot.writeI32(struct.opinions.size());
            for (Opinion _iter776 : struct.opinions)
            {
              _iter776.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOpinions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list777 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.opinions = new ArrayList<Opinion>(_list777.size);
            for (int _i778 = 0; _i778 < _list777.size; ++_i778)
            {
              Opinion _elem779; // required
              _elem779 = new Opinion();
              _elem779.read(iprot);
              struct.opinions.add(_elem779);
            }
          }
          struct.setOpinionsIsSet(true);
        }
      }
    }

  }

  public static class setOpinions_result implements org.apache.thrift.TBase<setOpinions_result, setOpinions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOpinions_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOpinions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOpinions_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOpinions_result.class, metaDataMap);
    }

    public setOpinions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOpinions_result(setOpinions_result other) {
    }

    public setOpinions_result deepCopy() {
      return new setOpinions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOpinions_result)
        return this.equals((setOpinions_result)that);
      return false;
    }

    public boolean equals(setOpinions_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setOpinions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setOpinions_result typedOther = (setOpinions_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOpinions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOpinions_resultStandardSchemeFactory implements SchemeFactory {
      public setOpinions_resultStandardScheme getScheme() {
        return new setOpinions_resultStandardScheme();
      }
    }

    private static class setOpinions_resultStandardScheme extends StandardScheme<setOpinions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOpinions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOpinions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOpinions_resultTupleSchemeFactory implements SchemeFactory {
      public setOpinions_resultTupleScheme getScheme() {
        return new setOpinions_resultTupleScheme();
      }
    }

    private static class setOpinions_resultTupleScheme extends TupleScheme<setOpinions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOpinions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOpinions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setPartOfSpeechs_args implements org.apache.thrift.TBase<setPartOfSpeechs_args, setPartOfSpeechs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPartOfSpeechs_args");

    private static final org.apache.thrift.protocol.TField PART_OF_SPEECHS_FIELD_DESC = new org.apache.thrift.protocol.TField("partOfSpeechs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPartOfSpeechs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPartOfSpeechs_argsTupleSchemeFactory());
    }

    public List<PartOfSpeech> partOfSpeechs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PART_OF_SPEECHS((short)1, "partOfSpeechs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PART_OF_SPEECHS
            return PART_OF_SPEECHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PART_OF_SPEECHS, new org.apache.thrift.meta_data.FieldMetaData("partOfSpeechs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartOfSpeech.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPartOfSpeechs_args.class, metaDataMap);
    }

    public setPartOfSpeechs_args() {
    }

    public setPartOfSpeechs_args(
      List<PartOfSpeech> partOfSpeechs)
    {
      this();
      this.partOfSpeechs = partOfSpeechs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPartOfSpeechs_args(setPartOfSpeechs_args other) {
      if (other.isSetPartOfSpeechs()) {
        List<PartOfSpeech> __this__partOfSpeechs = new ArrayList<PartOfSpeech>();
        for (PartOfSpeech other_element : other.partOfSpeechs) {
          __this__partOfSpeechs.add(new PartOfSpeech(other_element));
        }
        this.partOfSpeechs = __this__partOfSpeechs;
      }
    }

    public setPartOfSpeechs_args deepCopy() {
      return new setPartOfSpeechs_args(this);
    }

    @Override
    public void clear() {
      this.partOfSpeechs = null;
    }

    public int getPartOfSpeechsSize() {
      return (this.partOfSpeechs == null) ? 0 : this.partOfSpeechs.size();
    }

    public java.util.Iterator<PartOfSpeech> getPartOfSpeechsIterator() {
      return (this.partOfSpeechs == null) ? null : this.partOfSpeechs.iterator();
    }

    public void addToPartOfSpeechs(PartOfSpeech elem) {
      if (this.partOfSpeechs == null) {
        this.partOfSpeechs = new ArrayList<PartOfSpeech>();
      }
      this.partOfSpeechs.add(elem);
    }

    public List<PartOfSpeech> getPartOfSpeechs() {
      return this.partOfSpeechs;
    }

    public setPartOfSpeechs_args setPartOfSpeechs(List<PartOfSpeech> partOfSpeechs) {
      this.partOfSpeechs = partOfSpeechs;
      return this;
    }

    public void unsetPartOfSpeechs() {
      this.partOfSpeechs = null;
    }

    /** Returns true if field partOfSpeechs is set (has been assigned a value) and false otherwise */
    public boolean isSetPartOfSpeechs() {
      return this.partOfSpeechs != null;
    }

    public void setPartOfSpeechsIsSet(boolean value) {
      if (!value) {
        this.partOfSpeechs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PART_OF_SPEECHS:
        if (value == null) {
          unsetPartOfSpeechs();
        } else {
          setPartOfSpeechs((List<PartOfSpeech>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PART_OF_SPEECHS:
        return getPartOfSpeechs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PART_OF_SPEECHS:
        return isSetPartOfSpeechs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPartOfSpeechs_args)
        return this.equals((setPartOfSpeechs_args)that);
      return false;
    }

    public boolean equals(setPartOfSpeechs_args that) {
      if (that == null)
        return false;

      boolean this_present_partOfSpeechs = true && this.isSetPartOfSpeechs();
      boolean that_present_partOfSpeechs = true && that.isSetPartOfSpeechs();
      if (this_present_partOfSpeechs || that_present_partOfSpeechs) {
        if (!(this_present_partOfSpeechs && that_present_partOfSpeechs))
          return false;
        if (!this.partOfSpeechs.equals(that.partOfSpeechs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPartOfSpeechs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPartOfSpeechs_args typedOther = (setPartOfSpeechs_args)other;

      lastComparison = Boolean.valueOf(isSetPartOfSpeechs()).compareTo(typedOther.isSetPartOfSpeechs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartOfSpeechs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partOfSpeechs, typedOther.partOfSpeechs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPartOfSpeechs_args(");
      boolean first = true;

      sb.append("partOfSpeechs:");
      if (this.partOfSpeechs == null) {
        sb.append("null");
      } else {
        sb.append(this.partOfSpeechs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPartOfSpeechs_argsStandardSchemeFactory implements SchemeFactory {
      public setPartOfSpeechs_argsStandardScheme getScheme() {
        return new setPartOfSpeechs_argsStandardScheme();
      }
    }

    private static class setPartOfSpeechs_argsStandardScheme extends StandardScheme<setPartOfSpeechs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PART_OF_SPEECHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list780 = iprot.readListBegin();
                  struct.partOfSpeechs = new ArrayList<PartOfSpeech>(_list780.size);
                  for (int _i781 = 0; _i781 < _list780.size; ++_i781)
                  {
                    PartOfSpeech _elem782; // required
                    _elem782 = new PartOfSpeech();
                    _elem782.read(iprot);
                    struct.partOfSpeechs.add(_elem782);
                  }
                  iprot.readListEnd();
                }
                struct.setPartOfSpeechsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partOfSpeechs != null) {
          oprot.writeFieldBegin(PART_OF_SPEECHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partOfSpeechs.size()));
            for (PartOfSpeech _iter783 : struct.partOfSpeechs)
            {
              _iter783.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPartOfSpeechs_argsTupleSchemeFactory implements SchemeFactory {
      public setPartOfSpeechs_argsTupleScheme getScheme() {
        return new setPartOfSpeechs_argsTupleScheme();
      }
    }

    private static class setPartOfSpeechs_argsTupleScheme extends TupleScheme<setPartOfSpeechs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartOfSpeechs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartOfSpeechs()) {
          {
            oprot.writeI32(struct.partOfSpeechs.size());
            for (PartOfSpeech _iter784 : struct.partOfSpeechs)
            {
              _iter784.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPartOfSpeechs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list785 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.partOfSpeechs = new ArrayList<PartOfSpeech>(_list785.size);
            for (int _i786 = 0; _i786 < _list785.size; ++_i786)
            {
              PartOfSpeech _elem787; // required
              _elem787 = new PartOfSpeech();
              _elem787.read(iprot);
              struct.partOfSpeechs.add(_elem787);
            }
          }
          struct.setPartOfSpeechsIsSet(true);
        }
      }
    }

  }

  public static class setPartOfSpeechs_result implements org.apache.thrift.TBase<setPartOfSpeechs_result, setPartOfSpeechs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPartOfSpeechs_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPartOfSpeechs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPartOfSpeechs_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPartOfSpeechs_result.class, metaDataMap);
    }

    public setPartOfSpeechs_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPartOfSpeechs_result(setPartOfSpeechs_result other) {
    }

    public setPartOfSpeechs_result deepCopy() {
      return new setPartOfSpeechs_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPartOfSpeechs_result)
        return this.equals((setPartOfSpeechs_result)that);
      return false;
    }

    public boolean equals(setPartOfSpeechs_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPartOfSpeechs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPartOfSpeechs_result typedOther = (setPartOfSpeechs_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPartOfSpeechs_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPartOfSpeechs_resultStandardSchemeFactory implements SchemeFactory {
      public setPartOfSpeechs_resultStandardScheme getScheme() {
        return new setPartOfSpeechs_resultStandardScheme();
      }
    }

    private static class setPartOfSpeechs_resultStandardScheme extends StandardScheme<setPartOfSpeechs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPartOfSpeechs_resultTupleSchemeFactory implements SchemeFactory {
      public setPartOfSpeechs_resultTupleScheme getScheme() {
        return new setPartOfSpeechs_resultTupleScheme();
      }
    }

    private static class setPartOfSpeechs_resultTupleScheme extends TupleScheme<setPartOfSpeechs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPartOfSpeechs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setPassages_args implements org.apache.thrift.TBase<setPassages_args, setPassages_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPassages_args");

    private static final org.apache.thrift.protocol.TField PASSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("passages", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPassages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPassages_argsTupleSchemeFactory());
    }

    public List<Passage> passages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PASSAGES((short)1, "passages");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSAGES
            return PASSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSAGES, new org.apache.thrift.meta_data.FieldMetaData("passages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPassages_args.class, metaDataMap);
    }

    public setPassages_args() {
    }

    public setPassages_args(
      List<Passage> passages)
    {
      this();
      this.passages = passages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPassages_args(setPassages_args other) {
      if (other.isSetPassages()) {
        List<Passage> __this__passages = new ArrayList<Passage>();
        for (Passage other_element : other.passages) {
          __this__passages.add(new Passage(other_element));
        }
        this.passages = __this__passages;
      }
    }

    public setPassages_args deepCopy() {
      return new setPassages_args(this);
    }

    @Override
    public void clear() {
      this.passages = null;
    }

    public int getPassagesSize() {
      return (this.passages == null) ? 0 : this.passages.size();
    }

    public java.util.Iterator<Passage> getPassagesIterator() {
      return (this.passages == null) ? null : this.passages.iterator();
    }

    public void addToPassages(Passage elem) {
      if (this.passages == null) {
        this.passages = new ArrayList<Passage>();
      }
      this.passages.add(elem);
    }

    public List<Passage> getPassages() {
      return this.passages;
    }

    public setPassages_args setPassages(List<Passage> passages) {
      this.passages = passages;
      return this;
    }

    public void unsetPassages() {
      this.passages = null;
    }

    /** Returns true if field passages is set (has been assigned a value) and false otherwise */
    public boolean isSetPassages() {
      return this.passages != null;
    }

    public void setPassagesIsSet(boolean value) {
      if (!value) {
        this.passages = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSAGES:
        if (value == null) {
          unsetPassages();
        } else {
          setPassages((List<Passage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSAGES:
        return getPassages();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSAGES:
        return isSetPassages();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPassages_args)
        return this.equals((setPassages_args)that);
      return false;
    }

    public boolean equals(setPassages_args that) {
      if (that == null)
        return false;

      boolean this_present_passages = true && this.isSetPassages();
      boolean that_present_passages = true && that.isSetPassages();
      if (this_present_passages || that_present_passages) {
        if (!(this_present_passages && that_present_passages))
          return false;
        if (!this.passages.equals(that.passages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPassages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPassages_args typedOther = (setPassages_args)other;

      lastComparison = Boolean.valueOf(isSetPassages()).compareTo(typedOther.isSetPassages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passages, typedOther.passages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPassages_args(");
      boolean first = true;

      sb.append("passages:");
      if (this.passages == null) {
        sb.append("null");
      } else {
        sb.append(this.passages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPassages_argsStandardSchemeFactory implements SchemeFactory {
      public setPassages_argsStandardScheme getScheme() {
        return new setPassages_argsStandardScheme();
      }
    }

    private static class setPassages_argsStandardScheme extends StandardScheme<setPassages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPassages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PASSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list788 = iprot.readListBegin();
                  struct.passages = new ArrayList<Passage>(_list788.size);
                  for (int _i789 = 0; _i789 < _list788.size; ++_i789)
                  {
                    Passage _elem790; // required
                    _elem790 = new Passage();
                    _elem790.read(iprot);
                    struct.passages.add(_elem790);
                  }
                  iprot.readListEnd();
                }
                struct.setPassagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPassages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.passages != null) {
          oprot.writeFieldBegin(PASSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passages.size()));
            for (Passage _iter791 : struct.passages)
            {
              _iter791.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPassages_argsTupleSchemeFactory implements SchemeFactory {
      public setPassages_argsTupleScheme getScheme() {
        return new setPassages_argsTupleScheme();
      }
    }

    private static class setPassages_argsTupleScheme extends TupleScheme<setPassages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPassages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPassages()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPassages()) {
          {
            oprot.writeI32(struct.passages.size());
            for (Passage _iter792 : struct.passages)
            {
              _iter792.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPassages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list793 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.passages = new ArrayList<Passage>(_list793.size);
            for (int _i794 = 0; _i794 < _list793.size; ++_i794)
            {
              Passage _elem795; // required
              _elem795 = new Passage();
              _elem795.read(iprot);
              struct.passages.add(_elem795);
            }
          }
          struct.setPassagesIsSet(true);
        }
      }
    }

  }

  public static class setPassages_result implements org.apache.thrift.TBase<setPassages_result, setPassages_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPassages_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPassages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPassages_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPassages_result.class, metaDataMap);
    }

    public setPassages_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPassages_result(setPassages_result other) {
    }

    public setPassages_result deepCopy() {
      return new setPassages_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPassages_result)
        return this.equals((setPassages_result)that);
      return false;
    }

    public boolean equals(setPassages_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPassages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPassages_result typedOther = (setPassages_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPassages_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPassages_resultStandardSchemeFactory implements SchemeFactory {
      public setPassages_resultStandardScheme getScheme() {
        return new setPassages_resultStandardScheme();
      }
    }

    private static class setPassages_resultStandardScheme extends StandardScheme<setPassages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPassages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPassages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPassages_resultTupleSchemeFactory implements SchemeFactory {
      public setPassages_resultTupleScheme getScheme() {
        return new setPassages_resultTupleScheme();
      }
    }

    private static class setPassages_resultTupleScheme extends TupleScheme<setPassages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPassages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPassages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setProsodicPhrases_args implements org.apache.thrift.TBase<setProsodicPhrases_args, setProsodicPhrases_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProsodicPhrases_args");

    private static final org.apache.thrift.protocol.TField PROSODIC_PHRASES_FIELD_DESC = new org.apache.thrift.protocol.TField("prosodicPhrases", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setProsodicPhrases_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setProsodicPhrases_argsTupleSchemeFactory());
    }

    public List<ProsodicPhrase> prosodicPhrases; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROSODIC_PHRASES((short)1, "prosodicPhrases");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROSODIC_PHRASES
            return PROSODIC_PHRASES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROSODIC_PHRASES, new org.apache.thrift.meta_data.FieldMetaData("prosodicPhrases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProsodicPhrase.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProsodicPhrases_args.class, metaDataMap);
    }

    public setProsodicPhrases_args() {
    }

    public setProsodicPhrases_args(
      List<ProsodicPhrase> prosodicPhrases)
    {
      this();
      this.prosodicPhrases = prosodicPhrases;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setProsodicPhrases_args(setProsodicPhrases_args other) {
      if (other.isSetProsodicPhrases()) {
        List<ProsodicPhrase> __this__prosodicPhrases = new ArrayList<ProsodicPhrase>();
        for (ProsodicPhrase other_element : other.prosodicPhrases) {
          __this__prosodicPhrases.add(new ProsodicPhrase(other_element));
        }
        this.prosodicPhrases = __this__prosodicPhrases;
      }
    }

    public setProsodicPhrases_args deepCopy() {
      return new setProsodicPhrases_args(this);
    }

    @Override
    public void clear() {
      this.prosodicPhrases = null;
    }

    public int getProsodicPhrasesSize() {
      return (this.prosodicPhrases == null) ? 0 : this.prosodicPhrases.size();
    }

    public java.util.Iterator<ProsodicPhrase> getProsodicPhrasesIterator() {
      return (this.prosodicPhrases == null) ? null : this.prosodicPhrases.iterator();
    }

    public void addToProsodicPhrases(ProsodicPhrase elem) {
      if (this.prosodicPhrases == null) {
        this.prosodicPhrases = new ArrayList<ProsodicPhrase>();
      }
      this.prosodicPhrases.add(elem);
    }

    public List<ProsodicPhrase> getProsodicPhrases() {
      return this.prosodicPhrases;
    }

    public setProsodicPhrases_args setProsodicPhrases(List<ProsodicPhrase> prosodicPhrases) {
      this.prosodicPhrases = prosodicPhrases;
      return this;
    }

    public void unsetProsodicPhrases() {
      this.prosodicPhrases = null;
    }

    /** Returns true if field prosodicPhrases is set (has been assigned a value) and false otherwise */
    public boolean isSetProsodicPhrases() {
      return this.prosodicPhrases != null;
    }

    public void setProsodicPhrasesIsSet(boolean value) {
      if (!value) {
        this.prosodicPhrases = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROSODIC_PHRASES:
        if (value == null) {
          unsetProsodicPhrases();
        } else {
          setProsodicPhrases((List<ProsodicPhrase>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROSODIC_PHRASES:
        return getProsodicPhrases();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROSODIC_PHRASES:
        return isSetProsodicPhrases();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setProsodicPhrases_args)
        return this.equals((setProsodicPhrases_args)that);
      return false;
    }

    public boolean equals(setProsodicPhrases_args that) {
      if (that == null)
        return false;

      boolean this_present_prosodicPhrases = true && this.isSetProsodicPhrases();
      boolean that_present_prosodicPhrases = true && that.isSetProsodicPhrases();
      if (this_present_prosodicPhrases || that_present_prosodicPhrases) {
        if (!(this_present_prosodicPhrases && that_present_prosodicPhrases))
          return false;
        if (!this.prosodicPhrases.equals(that.prosodicPhrases))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setProsodicPhrases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setProsodicPhrases_args typedOther = (setProsodicPhrases_args)other;

      lastComparison = Boolean.valueOf(isSetProsodicPhrases()).compareTo(typedOther.isSetProsodicPhrases());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProsodicPhrases()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prosodicPhrases, typedOther.prosodicPhrases);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setProsodicPhrases_args(");
      boolean first = true;

      sb.append("prosodicPhrases:");
      if (this.prosodicPhrases == null) {
        sb.append("null");
      } else {
        sb.append(this.prosodicPhrases);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setProsodicPhrases_argsStandardSchemeFactory implements SchemeFactory {
      public setProsodicPhrases_argsStandardScheme getScheme() {
        return new setProsodicPhrases_argsStandardScheme();
      }
    }

    private static class setProsodicPhrases_argsStandardScheme extends StandardScheme<setProsodicPhrases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setProsodicPhrases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROSODIC_PHRASES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list796 = iprot.readListBegin();
                  struct.prosodicPhrases = new ArrayList<ProsodicPhrase>(_list796.size);
                  for (int _i797 = 0; _i797 < _list796.size; ++_i797)
                  {
                    ProsodicPhrase _elem798; // required
                    _elem798 = new ProsodicPhrase();
                    _elem798.read(iprot);
                    struct.prosodicPhrases.add(_elem798);
                  }
                  iprot.readListEnd();
                }
                struct.setProsodicPhrasesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setProsodicPhrases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prosodicPhrases != null) {
          oprot.writeFieldBegin(PROSODIC_PHRASES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.prosodicPhrases.size()));
            for (ProsodicPhrase _iter799 : struct.prosodicPhrases)
            {
              _iter799.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setProsodicPhrases_argsTupleSchemeFactory implements SchemeFactory {
      public setProsodicPhrases_argsTupleScheme getScheme() {
        return new setProsodicPhrases_argsTupleScheme();
      }
    }

    private static class setProsodicPhrases_argsTupleScheme extends TupleScheme<setProsodicPhrases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setProsodicPhrases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProsodicPhrases()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProsodicPhrases()) {
          {
            oprot.writeI32(struct.prosodicPhrases.size());
            for (ProsodicPhrase _iter800 : struct.prosodicPhrases)
            {
              _iter800.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setProsodicPhrases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list801 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.prosodicPhrases = new ArrayList<ProsodicPhrase>(_list801.size);
            for (int _i802 = 0; _i802 < _list801.size; ++_i802)
            {
              ProsodicPhrase _elem803; // required
              _elem803 = new ProsodicPhrase();
              _elem803.read(iprot);
              struct.prosodicPhrases.add(_elem803);
            }
          }
          struct.setProsodicPhrasesIsSet(true);
        }
      }
    }

  }

  public static class setProsodicPhrases_result implements org.apache.thrift.TBase<setProsodicPhrases_result, setProsodicPhrases_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProsodicPhrases_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setProsodicPhrases_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setProsodicPhrases_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProsodicPhrases_result.class, metaDataMap);
    }

    public setProsodicPhrases_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setProsodicPhrases_result(setProsodicPhrases_result other) {
    }

    public setProsodicPhrases_result deepCopy() {
      return new setProsodicPhrases_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setProsodicPhrases_result)
        return this.equals((setProsodicPhrases_result)that);
      return false;
    }

    public boolean equals(setProsodicPhrases_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setProsodicPhrases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setProsodicPhrases_result typedOther = (setProsodicPhrases_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setProsodicPhrases_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setProsodicPhrases_resultStandardSchemeFactory implements SchemeFactory {
      public setProsodicPhrases_resultStandardScheme getScheme() {
        return new setProsodicPhrases_resultStandardScheme();
      }
    }

    private static class setProsodicPhrases_resultStandardScheme extends StandardScheme<setProsodicPhrases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setProsodicPhrases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setProsodicPhrases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setProsodicPhrases_resultTupleSchemeFactory implements SchemeFactory {
      public setProsodicPhrases_resultTupleScheme getScheme() {
        return new setProsodicPhrases_resultTupleScheme();
      }
    }

    private static class setProsodicPhrases_resultTupleScheme extends TupleScheme<setProsodicPhrases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setProsodicPhrases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setProsodicPhrases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setRelations_args implements org.apache.thrift.TBase<setRelations_args, setRelations_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRelations_args");

    private static final org.apache.thrift.protocol.TField RELATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("relations", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRelations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRelations_argsTupleSchemeFactory());
    }

    public List<Relation> relations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RELATIONS((short)1, "relations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RELATIONS
            return RELATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RELATIONS, new org.apache.thrift.meta_data.FieldMetaData("relations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Relation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRelations_args.class, metaDataMap);
    }

    public setRelations_args() {
    }

    public setRelations_args(
      List<Relation> relations)
    {
      this();
      this.relations = relations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRelations_args(setRelations_args other) {
      if (other.isSetRelations()) {
        List<Relation> __this__relations = new ArrayList<Relation>();
        for (Relation other_element : other.relations) {
          __this__relations.add(new Relation(other_element));
        }
        this.relations = __this__relations;
      }
    }

    public setRelations_args deepCopy() {
      return new setRelations_args(this);
    }

    @Override
    public void clear() {
      this.relations = null;
    }

    public int getRelationsSize() {
      return (this.relations == null) ? 0 : this.relations.size();
    }

    public java.util.Iterator<Relation> getRelationsIterator() {
      return (this.relations == null) ? null : this.relations.iterator();
    }

    public void addToRelations(Relation elem) {
      if (this.relations == null) {
        this.relations = new ArrayList<Relation>();
      }
      this.relations.add(elem);
    }

    public List<Relation> getRelations() {
      return this.relations;
    }

    public setRelations_args setRelations(List<Relation> relations) {
      this.relations = relations;
      return this;
    }

    public void unsetRelations() {
      this.relations = null;
    }

    /** Returns true if field relations is set (has been assigned a value) and false otherwise */
    public boolean isSetRelations() {
      return this.relations != null;
    }

    public void setRelationsIsSet(boolean value) {
      if (!value) {
        this.relations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RELATIONS:
        if (value == null) {
          unsetRelations();
        } else {
          setRelations((List<Relation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RELATIONS:
        return getRelations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RELATIONS:
        return isSetRelations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRelations_args)
        return this.equals((setRelations_args)that);
      return false;
    }

    public boolean equals(setRelations_args that) {
      if (that == null)
        return false;

      boolean this_present_relations = true && this.isSetRelations();
      boolean that_present_relations = true && that.isSetRelations();
      if (this_present_relations || that_present_relations) {
        if (!(this_present_relations && that_present_relations))
          return false;
        if (!this.relations.equals(that.relations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setRelations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setRelations_args typedOther = (setRelations_args)other;

      lastComparison = Boolean.valueOf(isSetRelations()).compareTo(typedOther.isSetRelations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relations, typedOther.relations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRelations_args(");
      boolean first = true;

      sb.append("relations:");
      if (this.relations == null) {
        sb.append("null");
      } else {
        sb.append(this.relations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRelations_argsStandardSchemeFactory implements SchemeFactory {
      public setRelations_argsStandardScheme getScheme() {
        return new setRelations_argsStandardScheme();
      }
    }

    private static class setRelations_argsStandardScheme extends StandardScheme<setRelations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRelations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RELATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list804 = iprot.readListBegin();
                  struct.relations = new ArrayList<Relation>(_list804.size);
                  for (int _i805 = 0; _i805 < _list804.size; ++_i805)
                  {
                    Relation _elem806; // required
                    _elem806 = new Relation();
                    _elem806.read(iprot);
                    struct.relations.add(_elem806);
                  }
                  iprot.readListEnd();
                }
                struct.setRelationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRelations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.relations != null) {
          oprot.writeFieldBegin(RELATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.relations.size()));
            for (Relation _iter807 : struct.relations)
            {
              _iter807.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRelations_argsTupleSchemeFactory implements SchemeFactory {
      public setRelations_argsTupleScheme getScheme() {
        return new setRelations_argsTupleScheme();
      }
    }

    private static class setRelations_argsTupleScheme extends TupleScheme<setRelations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRelations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRelations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRelations()) {
          {
            oprot.writeI32(struct.relations.size());
            for (Relation _iter808 : struct.relations)
            {
              _iter808.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRelations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list809 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.relations = new ArrayList<Relation>(_list809.size);
            for (int _i810 = 0; _i810 < _list809.size; ++_i810)
            {
              Relation _elem811; // required
              _elem811 = new Relation();
              _elem811.read(iprot);
              struct.relations.add(_elem811);
            }
          }
          struct.setRelationsIsSet(true);
        }
      }
    }

  }

  public static class setRelations_result implements org.apache.thrift.TBase<setRelations_result, setRelations_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRelations_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRelations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRelations_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRelations_result.class, metaDataMap);
    }

    public setRelations_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRelations_result(setRelations_result other) {
    }

    public setRelations_result deepCopy() {
      return new setRelations_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRelations_result)
        return this.equals((setRelations_result)that);
      return false;
    }

    public boolean equals(setRelations_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setRelations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setRelations_result typedOther = (setRelations_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRelations_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRelations_resultStandardSchemeFactory implements SchemeFactory {
      public setRelations_resultStandardScheme getScheme() {
        return new setRelations_resultStandardScheme();
      }
    }

    private static class setRelations_resultStandardScheme extends StandardScheme<setRelations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRelations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRelations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRelations_resultTupleSchemeFactory implements SchemeFactory {
      public setRelations_resultTupleScheme getScheme() {
        return new setRelations_resultTupleScheme();
      }
    }

    private static class setRelations_resultTupleScheme extends TupleScheme<setRelations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRelations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRelations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setSarcasms_args implements org.apache.thrift.TBase<setSarcasms_args, setSarcasms_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSarcasms_args");

    private static final org.apache.thrift.protocol.TField SARCASMS_FIELD_DESC = new org.apache.thrift.protocol.TField("sarcasms", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSarcasms_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSarcasms_argsTupleSchemeFactory());
    }

    public List<Sarcasm> sarcasms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SARCASMS((short)1, "sarcasms");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SARCASMS
            return SARCASMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SARCASMS, new org.apache.thrift.meta_data.FieldMetaData("sarcasms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sarcasm.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSarcasms_args.class, metaDataMap);
    }

    public setSarcasms_args() {
    }

    public setSarcasms_args(
      List<Sarcasm> sarcasms)
    {
      this();
      this.sarcasms = sarcasms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSarcasms_args(setSarcasms_args other) {
      if (other.isSetSarcasms()) {
        List<Sarcasm> __this__sarcasms = new ArrayList<Sarcasm>();
        for (Sarcasm other_element : other.sarcasms) {
          __this__sarcasms.add(new Sarcasm(other_element));
        }
        this.sarcasms = __this__sarcasms;
      }
    }

    public setSarcasms_args deepCopy() {
      return new setSarcasms_args(this);
    }

    @Override
    public void clear() {
      this.sarcasms = null;
    }

    public int getSarcasmsSize() {
      return (this.sarcasms == null) ? 0 : this.sarcasms.size();
    }

    public java.util.Iterator<Sarcasm> getSarcasmsIterator() {
      return (this.sarcasms == null) ? null : this.sarcasms.iterator();
    }

    public void addToSarcasms(Sarcasm elem) {
      if (this.sarcasms == null) {
        this.sarcasms = new ArrayList<Sarcasm>();
      }
      this.sarcasms.add(elem);
    }

    public List<Sarcasm> getSarcasms() {
      return this.sarcasms;
    }

    public setSarcasms_args setSarcasms(List<Sarcasm> sarcasms) {
      this.sarcasms = sarcasms;
      return this;
    }

    public void unsetSarcasms() {
      this.sarcasms = null;
    }

    /** Returns true if field sarcasms is set (has been assigned a value) and false otherwise */
    public boolean isSetSarcasms() {
      return this.sarcasms != null;
    }

    public void setSarcasmsIsSet(boolean value) {
      if (!value) {
        this.sarcasms = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SARCASMS:
        if (value == null) {
          unsetSarcasms();
        } else {
          setSarcasms((List<Sarcasm>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SARCASMS:
        return getSarcasms();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SARCASMS:
        return isSetSarcasms();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSarcasms_args)
        return this.equals((setSarcasms_args)that);
      return false;
    }

    public boolean equals(setSarcasms_args that) {
      if (that == null)
        return false;

      boolean this_present_sarcasms = true && this.isSetSarcasms();
      boolean that_present_sarcasms = true && that.isSetSarcasms();
      if (this_present_sarcasms || that_present_sarcasms) {
        if (!(this_present_sarcasms && that_present_sarcasms))
          return false;
        if (!this.sarcasms.equals(that.sarcasms))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSarcasms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSarcasms_args typedOther = (setSarcasms_args)other;

      lastComparison = Boolean.valueOf(isSetSarcasms()).compareTo(typedOther.isSetSarcasms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSarcasms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sarcasms, typedOther.sarcasms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSarcasms_args(");
      boolean first = true;

      sb.append("sarcasms:");
      if (this.sarcasms == null) {
        sb.append("null");
      } else {
        sb.append(this.sarcasms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSarcasms_argsStandardSchemeFactory implements SchemeFactory {
      public setSarcasms_argsStandardScheme getScheme() {
        return new setSarcasms_argsStandardScheme();
      }
    }

    private static class setSarcasms_argsStandardScheme extends StandardScheme<setSarcasms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSarcasms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SARCASMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list812 = iprot.readListBegin();
                  struct.sarcasms = new ArrayList<Sarcasm>(_list812.size);
                  for (int _i813 = 0; _i813 < _list812.size; ++_i813)
                  {
                    Sarcasm _elem814; // required
                    _elem814 = new Sarcasm();
                    _elem814.read(iprot);
                    struct.sarcasms.add(_elem814);
                  }
                  iprot.readListEnd();
                }
                struct.setSarcasmsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSarcasms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sarcasms != null) {
          oprot.writeFieldBegin(SARCASMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sarcasms.size()));
            for (Sarcasm _iter815 : struct.sarcasms)
            {
              _iter815.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSarcasms_argsTupleSchemeFactory implements SchemeFactory {
      public setSarcasms_argsTupleScheme getScheme() {
        return new setSarcasms_argsTupleScheme();
      }
    }

    private static class setSarcasms_argsTupleScheme extends TupleScheme<setSarcasms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSarcasms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSarcasms()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSarcasms()) {
          {
            oprot.writeI32(struct.sarcasms.size());
            for (Sarcasm _iter816 : struct.sarcasms)
            {
              _iter816.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSarcasms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list817 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sarcasms = new ArrayList<Sarcasm>(_list817.size);
            for (int _i818 = 0; _i818 < _list817.size; ++_i818)
            {
              Sarcasm _elem819; // required
              _elem819 = new Sarcasm();
              _elem819.read(iprot);
              struct.sarcasms.add(_elem819);
            }
          }
          struct.setSarcasmsIsSet(true);
        }
      }
    }

  }

  public static class setSarcasms_result implements org.apache.thrift.TBase<setSarcasms_result, setSarcasms_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSarcasms_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSarcasms_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSarcasms_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSarcasms_result.class, metaDataMap);
    }

    public setSarcasms_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSarcasms_result(setSarcasms_result other) {
    }

    public setSarcasms_result deepCopy() {
      return new setSarcasms_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSarcasms_result)
        return this.equals((setSarcasms_result)that);
      return false;
    }

    public boolean equals(setSarcasms_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSarcasms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSarcasms_result typedOther = (setSarcasms_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSarcasms_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSarcasms_resultStandardSchemeFactory implements SchemeFactory {
      public setSarcasms_resultStandardScheme getScheme() {
        return new setSarcasms_resultStandardScheme();
      }
    }

    private static class setSarcasms_resultStandardScheme extends StandardScheme<setSarcasms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSarcasms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSarcasms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSarcasms_resultTupleSchemeFactory implements SchemeFactory {
      public setSarcasms_resultTupleScheme getScheme() {
        return new setSarcasms_resultTupleScheme();
      }
    }

    private static class setSarcasms_resultTupleScheme extends TupleScheme<setSarcasms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSarcasms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSarcasms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setSentences_args implements org.apache.thrift.TBase<setSentences_args, setSentences_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSentences_args");

    private static final org.apache.thrift.protocol.TField SENTENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("sentences", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSentences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSentences_argsTupleSchemeFactory());
    }

    public List<Sentence> sentences; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SENTENCES((short)1, "sentences");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SENTENCES
            return SENTENCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SENTENCES, new org.apache.thrift.meta_data.FieldMetaData("sentences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sentence.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSentences_args.class, metaDataMap);
    }

    public setSentences_args() {
    }

    public setSentences_args(
      List<Sentence> sentences)
    {
      this();
      this.sentences = sentences;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSentences_args(setSentences_args other) {
      if (other.isSetSentences()) {
        List<Sentence> __this__sentences = new ArrayList<Sentence>();
        for (Sentence other_element : other.sentences) {
          __this__sentences.add(new Sentence(other_element));
        }
        this.sentences = __this__sentences;
      }
    }

    public setSentences_args deepCopy() {
      return new setSentences_args(this);
    }

    @Override
    public void clear() {
      this.sentences = null;
    }

    public int getSentencesSize() {
      return (this.sentences == null) ? 0 : this.sentences.size();
    }

    public java.util.Iterator<Sentence> getSentencesIterator() {
      return (this.sentences == null) ? null : this.sentences.iterator();
    }

    public void addToSentences(Sentence elem) {
      if (this.sentences == null) {
        this.sentences = new ArrayList<Sentence>();
      }
      this.sentences.add(elem);
    }

    public List<Sentence> getSentences() {
      return this.sentences;
    }

    public setSentences_args setSentences(List<Sentence> sentences) {
      this.sentences = sentences;
      return this;
    }

    public void unsetSentences() {
      this.sentences = null;
    }

    /** Returns true if field sentences is set (has been assigned a value) and false otherwise */
    public boolean isSetSentences() {
      return this.sentences != null;
    }

    public void setSentencesIsSet(boolean value) {
      if (!value) {
        this.sentences = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SENTENCES:
        if (value == null) {
          unsetSentences();
        } else {
          setSentences((List<Sentence>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SENTENCES:
        return getSentences();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SENTENCES:
        return isSetSentences();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSentences_args)
        return this.equals((setSentences_args)that);
      return false;
    }

    public boolean equals(setSentences_args that) {
      if (that == null)
        return false;

      boolean this_present_sentences = true && this.isSetSentences();
      boolean that_present_sentences = true && that.isSetSentences();
      if (this_present_sentences || that_present_sentences) {
        if (!(this_present_sentences && that_present_sentences))
          return false;
        if (!this.sentences.equals(that.sentences))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSentences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSentences_args typedOther = (setSentences_args)other;

      lastComparison = Boolean.valueOf(isSetSentences()).compareTo(typedOther.isSetSentences());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSentences()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentences, typedOther.sentences);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSentences_args(");
      boolean first = true;

      sb.append("sentences:");
      if (this.sentences == null) {
        sb.append("null");
      } else {
        sb.append(this.sentences);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSentences_argsStandardSchemeFactory implements SchemeFactory {
      public setSentences_argsStandardScheme getScheme() {
        return new setSentences_argsStandardScheme();
      }
    }

    private static class setSentences_argsStandardScheme extends StandardScheme<setSentences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSentences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SENTENCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list820 = iprot.readListBegin();
                  struct.sentences = new ArrayList<Sentence>(_list820.size);
                  for (int _i821 = 0; _i821 < _list820.size; ++_i821)
                  {
                    Sentence _elem822; // required
                    _elem822 = new Sentence();
                    _elem822.read(iprot);
                    struct.sentences.add(_elem822);
                  }
                  iprot.readListEnd();
                }
                struct.setSentencesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSentences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sentences != null) {
          oprot.writeFieldBegin(SENTENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sentences.size()));
            for (Sentence _iter823 : struct.sentences)
            {
              _iter823.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSentences_argsTupleSchemeFactory implements SchemeFactory {
      public setSentences_argsTupleScheme getScheme() {
        return new setSentences_argsTupleScheme();
      }
    }

    private static class setSentences_argsTupleScheme extends TupleScheme<setSentences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSentences()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSentences()) {
          {
            oprot.writeI32(struct.sentences.size());
            for (Sentence _iter824 : struct.sentences)
            {
              _iter824.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list825 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sentences = new ArrayList<Sentence>(_list825.size);
            for (int _i826 = 0; _i826 < _list825.size; ++_i826)
            {
              Sentence _elem827; // required
              _elem827 = new Sentence();
              _elem827.read(iprot);
              struct.sentences.add(_elem827);
            }
          }
          struct.setSentencesIsSet(true);
        }
      }
    }

  }

  public static class setSentences_result implements org.apache.thrift.TBase<setSentences_result, setSentences_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSentences_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSentences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSentences_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSentences_result.class, metaDataMap);
    }

    public setSentences_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSentences_result(setSentences_result other) {
    }

    public setSentences_result deepCopy() {
      return new setSentences_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSentences_result)
        return this.equals((setSentences_result)that);
      return false;
    }

    public boolean equals(setSentences_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSentences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSentences_result typedOther = (setSentences_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSentences_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSentences_resultStandardSchemeFactory implements SchemeFactory {
      public setSentences_resultStandardScheme getScheme() {
        return new setSentences_resultStandardScheme();
      }
    }

    private static class setSentences_resultStandardScheme extends StandardScheme<setSentences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSentences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSentences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSentences_resultTupleSchemeFactory implements SchemeFactory {
      public setSentences_resultTupleScheme getScheme() {
        return new setSentences_resultTupleScheme();
      }
    }

    private static class setSentences_resultTupleScheme extends TupleScheme<setSentences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setSyntacticChunks_args implements org.apache.thrift.TBase<setSyntacticChunks_args, setSyntacticChunks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSyntacticChunks_args");

    private static final org.apache.thrift.protocol.TField SYNTACTI_CHUNKS_FIELD_DESC = new org.apache.thrift.protocol.TField("syntactiChunks", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSyntacticChunks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSyntacticChunks_argsTupleSchemeFactory());
    }

    public List<SyntacticChunk> syntactiChunks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYNTACTI_CHUNKS((short)1, "syntactiChunks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYNTACTI_CHUNKS
            return SYNTACTI_CHUNKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYNTACTI_CHUNKS, new org.apache.thrift.meta_data.FieldMetaData("syntactiChunks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SyntacticChunk.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSyntacticChunks_args.class, metaDataMap);
    }

    public setSyntacticChunks_args() {
    }

    public setSyntacticChunks_args(
      List<SyntacticChunk> syntactiChunks)
    {
      this();
      this.syntactiChunks = syntactiChunks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSyntacticChunks_args(setSyntacticChunks_args other) {
      if (other.isSetSyntactiChunks()) {
        List<SyntacticChunk> __this__syntactiChunks = new ArrayList<SyntacticChunk>();
        for (SyntacticChunk other_element : other.syntactiChunks) {
          __this__syntactiChunks.add(new SyntacticChunk(other_element));
        }
        this.syntactiChunks = __this__syntactiChunks;
      }
    }

    public setSyntacticChunks_args deepCopy() {
      return new setSyntacticChunks_args(this);
    }

    @Override
    public void clear() {
      this.syntactiChunks = null;
    }

    public int getSyntactiChunksSize() {
      return (this.syntactiChunks == null) ? 0 : this.syntactiChunks.size();
    }

    public java.util.Iterator<SyntacticChunk> getSyntactiChunksIterator() {
      return (this.syntactiChunks == null) ? null : this.syntactiChunks.iterator();
    }

    public void addToSyntactiChunks(SyntacticChunk elem) {
      if (this.syntactiChunks == null) {
        this.syntactiChunks = new ArrayList<SyntacticChunk>();
      }
      this.syntactiChunks.add(elem);
    }

    public List<SyntacticChunk> getSyntactiChunks() {
      return this.syntactiChunks;
    }

    public setSyntacticChunks_args setSyntactiChunks(List<SyntacticChunk> syntactiChunks) {
      this.syntactiChunks = syntactiChunks;
      return this;
    }

    public void unsetSyntactiChunks() {
      this.syntactiChunks = null;
    }

    /** Returns true if field syntactiChunks is set (has been assigned a value) and false otherwise */
    public boolean isSetSyntactiChunks() {
      return this.syntactiChunks != null;
    }

    public void setSyntactiChunksIsSet(boolean value) {
      if (!value) {
        this.syntactiChunks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYNTACTI_CHUNKS:
        if (value == null) {
          unsetSyntactiChunks();
        } else {
          setSyntactiChunks((List<SyntacticChunk>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYNTACTI_CHUNKS:
        return getSyntactiChunks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYNTACTI_CHUNKS:
        return isSetSyntactiChunks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSyntacticChunks_args)
        return this.equals((setSyntacticChunks_args)that);
      return false;
    }

    public boolean equals(setSyntacticChunks_args that) {
      if (that == null)
        return false;

      boolean this_present_syntactiChunks = true && this.isSetSyntactiChunks();
      boolean that_present_syntactiChunks = true && that.isSetSyntactiChunks();
      if (this_present_syntactiChunks || that_present_syntactiChunks) {
        if (!(this_present_syntactiChunks && that_present_syntactiChunks))
          return false;
        if (!this.syntactiChunks.equals(that.syntactiChunks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSyntacticChunks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSyntacticChunks_args typedOther = (setSyntacticChunks_args)other;

      lastComparison = Boolean.valueOf(isSetSyntactiChunks()).compareTo(typedOther.isSetSyntactiChunks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyntactiChunks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syntactiChunks, typedOther.syntactiChunks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSyntacticChunks_args(");
      boolean first = true;

      sb.append("syntactiChunks:");
      if (this.syntactiChunks == null) {
        sb.append("null");
      } else {
        sb.append(this.syntactiChunks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSyntacticChunks_argsStandardSchemeFactory implements SchemeFactory {
      public setSyntacticChunks_argsStandardScheme getScheme() {
        return new setSyntacticChunks_argsStandardScheme();
      }
    }

    private static class setSyntacticChunks_argsStandardScheme extends StandardScheme<setSyntacticChunks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSyntacticChunks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYNTACTI_CHUNKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list828 = iprot.readListBegin();
                  struct.syntactiChunks = new ArrayList<SyntacticChunk>(_list828.size);
                  for (int _i829 = 0; _i829 < _list828.size; ++_i829)
                  {
                    SyntacticChunk _elem830; // required
                    _elem830 = new SyntacticChunk();
                    _elem830.read(iprot);
                    struct.syntactiChunks.add(_elem830);
                  }
                  iprot.readListEnd();
                }
                struct.setSyntactiChunksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSyntacticChunks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.syntactiChunks != null) {
          oprot.writeFieldBegin(SYNTACTI_CHUNKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.syntactiChunks.size()));
            for (SyntacticChunk _iter831 : struct.syntactiChunks)
            {
              _iter831.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSyntacticChunks_argsTupleSchemeFactory implements SchemeFactory {
      public setSyntacticChunks_argsTupleScheme getScheme() {
        return new setSyntacticChunks_argsTupleScheme();
      }
    }

    private static class setSyntacticChunks_argsTupleScheme extends TupleScheme<setSyntacticChunks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSyntacticChunks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSyntactiChunks()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSyntactiChunks()) {
          {
            oprot.writeI32(struct.syntactiChunks.size());
            for (SyntacticChunk _iter832 : struct.syntactiChunks)
            {
              _iter832.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSyntacticChunks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list833 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.syntactiChunks = new ArrayList<SyntacticChunk>(_list833.size);
            for (int _i834 = 0; _i834 < _list833.size; ++_i834)
            {
              SyntacticChunk _elem835; // required
              _elem835 = new SyntacticChunk();
              _elem835.read(iprot);
              struct.syntactiChunks.add(_elem835);
            }
          }
          struct.setSyntactiChunksIsSet(true);
        }
      }
    }

  }

  public static class setSyntacticChunks_result implements org.apache.thrift.TBase<setSyntacticChunks_result, setSyntacticChunks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSyntacticChunks_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSyntacticChunks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSyntacticChunks_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSyntacticChunks_result.class, metaDataMap);
    }

    public setSyntacticChunks_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSyntacticChunks_result(setSyntacticChunks_result other) {
    }

    public setSyntacticChunks_result deepCopy() {
      return new setSyntacticChunks_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSyntacticChunks_result)
        return this.equals((setSyntacticChunks_result)that);
      return false;
    }

    public boolean equals(setSyntacticChunks_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSyntacticChunks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSyntacticChunks_result typedOther = (setSyntacticChunks_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSyntacticChunks_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSyntacticChunks_resultStandardSchemeFactory implements SchemeFactory {
      public setSyntacticChunks_resultStandardScheme getScheme() {
        return new setSyntacticChunks_resultStandardScheme();
      }
    }

    private static class setSyntacticChunks_resultStandardScheme extends StandardScheme<setSyntacticChunks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSyntacticChunks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSyntacticChunks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSyntacticChunks_resultTupleSchemeFactory implements SchemeFactory {
      public setSyntacticChunks_resultTupleScheme getScheme() {
        return new setSyntacticChunks_resultTupleScheme();
      }
    }

    private static class setSyntacticChunks_resultTupleScheme extends TupleScheme<setSyntacticChunks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSyntacticChunks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSyntacticChunks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
