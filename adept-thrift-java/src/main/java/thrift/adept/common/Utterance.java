/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class Utterance.
 */
public class Utterance implements org.apache.thrift.TBase<Utterance, Utterance._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Utterance");

  private static final org.apache.thrift.protocol.TField TOKEN_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenOffset", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenStream", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CHAR_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("charOffset", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField UTTERANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("utteranceId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SPEAKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("speakerId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ANNOTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("annotation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UtteranceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UtteranceTupleSchemeFactory());
  }

  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset tokenOffset; // required
  /**
   * The token stream
   */
  public TokenStream tokenStream; // required
  /**
   * The char offset
   */
  public CharOffset charOffset; // optional
  /**
   * The utterance id
   */
  public long utteranceId; // required
  /**
   * The speaker id
   */
  public long speakerId; // required
  /**
   * The annotation
   */
  public String annotation; // required
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The token offset which is the index into token stream.
     */
    TOKEN_OFFSET((short)1, "tokenOffset"),
    /**
     * The token stream
     */
    TOKEN_STREAM((short)2, "tokenStream"),
    /**
     * The char offset
     */
    CHAR_OFFSET((short)3, "charOffset"),
    /**
     * The utterance id
     */
    UTTERANCE_ID((short)4, "utteranceId"),
    /**
     * The speaker id
     */
    SPEAKER_ID((short)5, "speakerId"),
    /**
     * The annotation
     */
    ANNOTATION((short)6, "annotation"),
    /**
     * The id
     */
    ID((short)7, "id"),
    /**
     * The value
     */
    VALUE((short)8, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)9, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN_OFFSET
          return TOKEN_OFFSET;
        case 2: // TOKEN_STREAM
          return TOKEN_STREAM;
        case 3: // CHAR_OFFSET
          return CHAR_OFFSET;
        case 4: // UTTERANCE_ID
          return UTTERANCE_ID;
        case 5: // SPEAKER_ID
          return SPEAKER_ID;
        case 6: // ANNOTATION
          return ANNOTATION;
        case 7: // ID
          return ID;
        case 8: // VALUE
          return VALUE;
        case 9: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UTTERANCEID_ISSET_ID = 0;
  private static final int __SPEAKERID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CHAR_OFFSET,_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("tokenOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenOffset.class)));
    tmpMap.put(_Fields.TOKEN_STREAM, new org.apache.thrift.meta_data.FieldMetaData("tokenStream", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenStream.class)));
    tmpMap.put(_Fields.CHAR_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("charOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CharOffset.class)));
    tmpMap.put(_Fields.UTTERANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("utteranceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPEAKER_ID, new org.apache.thrift.meta_data.FieldMetaData("speakerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANNOTATION, new org.apache.thrift.meta_data.FieldMetaData("annotation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Utterance.class, metaDataMap);
  }

  public Utterance() {
  }

  public Utterance(
    TokenOffset tokenOffset,
    TokenStream tokenStream,
    long utteranceId,
    long speakerId,
    String annotation)
  {
    this();
    this.tokenOffset = tokenOffset;
    this.tokenStream = tokenStream;
    this.utteranceId = utteranceId;
    setUtteranceIdIsSet(true);
    this.speakerId = speakerId;
    setSpeakerIdIsSet(true);
    this.annotation = annotation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Utterance(Utterance other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTokenOffset()) {
      this.tokenOffset = new TokenOffset(other.tokenOffset);
    }
    if (other.isSetTokenStream()) {
      this.tokenStream = new TokenStream(other.tokenStream);
    }
    if (other.isSetCharOffset()) {
      this.charOffset = new CharOffset(other.charOffset);
    }
    this.utteranceId = other.utteranceId;
    this.speakerId = other.speakerId;
    if (other.isSetAnnotation()) {
      this.annotation = other.annotation;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public Utterance deepCopy() {
    return new Utterance(this);
  }

  @Override
  public void clear() {
    this.tokenOffset = null;
    this.tokenStream = null;
    this.charOffset = null;
    setUtteranceIdIsSet(false);
    this.utteranceId = 0;
    setSpeakerIdIsSet(false);
    this.speakerId = 0;
    this.annotation = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset getTokenOffset() {
    return this.tokenOffset;
  }

  /**
   * The token offset which is the index into token stream.
   */
  public Utterance setTokenOffset(TokenOffset tokenOffset) {
    this.tokenOffset = tokenOffset;
    return this;
  }

  public void unsetTokenOffset() {
    this.tokenOffset = null;
  }

  /** Returns true if field tokenOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenOffset() {
    return this.tokenOffset != null;
  }

  public void setTokenOffsetIsSet(boolean value) {
    if (!value) {
      this.tokenOffset = null;
    }
  }

  /**
   * The token stream
   */
  public TokenStream getTokenStream() {
    return this.tokenStream;
  }

  /**
   * The token stream
   */
  public Utterance setTokenStream(TokenStream tokenStream) {
    this.tokenStream = tokenStream;
    return this;
  }

  public void unsetTokenStream() {
    this.tokenStream = null;
  }

  /** Returns true if field tokenStream is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenStream() {
    return this.tokenStream != null;
  }

  public void setTokenStreamIsSet(boolean value) {
    if (!value) {
      this.tokenStream = null;
    }
  }

  /**
   * The char offset
   */
  public CharOffset getCharOffset() {
    return this.charOffset;
  }

  /**
   * The char offset
   */
  public Utterance setCharOffset(CharOffset charOffset) {
    this.charOffset = charOffset;
    return this;
  }

  public void unsetCharOffset() {
    this.charOffset = null;
  }

  /** Returns true if field charOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetCharOffset() {
    return this.charOffset != null;
  }

  public void setCharOffsetIsSet(boolean value) {
    if (!value) {
      this.charOffset = null;
    }
  }

  /**
   * The utterance id
   */
  public long getUtteranceId() {
    return this.utteranceId;
  }

  /**
   * The utterance id
   */
  public Utterance setUtteranceId(long utteranceId) {
    this.utteranceId = utteranceId;
    setUtteranceIdIsSet(true);
    return this;
  }

  public void unsetUtteranceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UTTERANCEID_ISSET_ID);
  }

  /** Returns true if field utteranceId is set (has been assigned a value) and false otherwise */
  public boolean isSetUtteranceId() {
    return EncodingUtils.testBit(__isset_bitfield, __UTTERANCEID_ISSET_ID);
  }

  public void setUtteranceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UTTERANCEID_ISSET_ID, value);
  }

  /**
   * The speaker id
   */
  public long getSpeakerId() {
    return this.speakerId;
  }

  /**
   * The speaker id
   */
  public Utterance setSpeakerId(long speakerId) {
    this.speakerId = speakerId;
    setSpeakerIdIsSet(true);
    return this;
  }

  public void unsetSpeakerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEAKERID_ISSET_ID);
  }

  /** Returns true if field speakerId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeakerId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEAKERID_ISSET_ID);
  }

  public void setSpeakerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEAKERID_ISSET_ID, value);
  }

  /**
   * The annotation
   */
  public String getAnnotation() {
    return this.annotation;
  }

  /**
   * The annotation
   */
  public Utterance setAnnotation(String annotation) {
    this.annotation = annotation;
    return this;
  }

  public void unsetAnnotation() {
    this.annotation = null;
  }

  /** Returns true if field annotation is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotation() {
    return this.annotation != null;
  }

  public void setAnnotationIsSet(boolean value) {
    if (!value) {
      this.annotation = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Utterance setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Utterance setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public Utterance setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN_OFFSET:
      if (value == null) {
        unsetTokenOffset();
      } else {
        setTokenOffset((TokenOffset)value);
      }
      break;

    case TOKEN_STREAM:
      if (value == null) {
        unsetTokenStream();
      } else {
        setTokenStream((TokenStream)value);
      }
      break;

    case CHAR_OFFSET:
      if (value == null) {
        unsetCharOffset();
      } else {
        setCharOffset((CharOffset)value);
      }
      break;

    case UTTERANCE_ID:
      if (value == null) {
        unsetUtteranceId();
      } else {
        setUtteranceId((Long)value);
      }
      break;

    case SPEAKER_ID:
      if (value == null) {
        unsetSpeakerId();
      } else {
        setSpeakerId((Long)value);
      }
      break;

    case ANNOTATION:
      if (value == null) {
        unsetAnnotation();
      } else {
        setAnnotation((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN_OFFSET:
      return getTokenOffset();

    case TOKEN_STREAM:
      return getTokenStream();

    case CHAR_OFFSET:
      return getCharOffset();

    case UTTERANCE_ID:
      return Long.valueOf(getUtteranceId());

    case SPEAKER_ID:
      return Long.valueOf(getSpeakerId());

    case ANNOTATION:
      return getAnnotation();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN_OFFSET:
      return isSetTokenOffset();
    case TOKEN_STREAM:
      return isSetTokenStream();
    case CHAR_OFFSET:
      return isSetCharOffset();
    case UTTERANCE_ID:
      return isSetUtteranceId();
    case SPEAKER_ID:
      return isSetSpeakerId();
    case ANNOTATION:
      return isSetAnnotation();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Utterance)
      return this.equals((Utterance)that);
    return false;
  }

  public boolean equals(Utterance that) {
    if (that == null)
      return false;

    boolean this_present_tokenOffset = true && this.isSetTokenOffset();
    boolean that_present_tokenOffset = true && that.isSetTokenOffset();
    if (this_present_tokenOffset || that_present_tokenOffset) {
      if (!(this_present_tokenOffset && that_present_tokenOffset))
        return false;
      if (!this.tokenOffset.equals(that.tokenOffset))
        return false;
    }

    boolean this_present_tokenStream = true && this.isSetTokenStream();
    boolean that_present_tokenStream = true && that.isSetTokenStream();
    if (this_present_tokenStream || that_present_tokenStream) {
      if (!(this_present_tokenStream && that_present_tokenStream))
        return false;
      if (!this.tokenStream.equals(that.tokenStream))
        return false;
    }

    boolean this_present_charOffset = true && this.isSetCharOffset();
    boolean that_present_charOffset = true && that.isSetCharOffset();
    if (this_present_charOffset || that_present_charOffset) {
      if (!(this_present_charOffset && that_present_charOffset))
        return false;
      if (!this.charOffset.equals(that.charOffset))
        return false;
    }

    boolean this_present_utteranceId = true;
    boolean that_present_utteranceId = true;
    if (this_present_utteranceId || that_present_utteranceId) {
      if (!(this_present_utteranceId && that_present_utteranceId))
        return false;
      if (this.utteranceId != that.utteranceId)
        return false;
    }

    boolean this_present_speakerId = true;
    boolean that_present_speakerId = true;
    if (this_present_speakerId || that_present_speakerId) {
      if (!(this_present_speakerId && that_present_speakerId))
        return false;
      if (this.speakerId != that.speakerId)
        return false;
    }

    boolean this_present_annotation = true && this.isSetAnnotation();
    boolean that_present_annotation = true && that.isSetAnnotation();
    if (this_present_annotation || that_present_annotation) {
      if (!(this_present_annotation && that_present_annotation))
        return false;
      if (!this.annotation.equals(that.annotation))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Utterance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Utterance typedOther = (Utterance)other;

    lastComparison = Boolean.valueOf(isSetTokenOffset()).compareTo(typedOther.isSetTokenOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenOffset, typedOther.tokenOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenStream()).compareTo(typedOther.isSetTokenStream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenStream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenStream, typedOther.tokenStream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharOffset()).compareTo(typedOther.isSetCharOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charOffset, typedOther.charOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtteranceId()).compareTo(typedOther.isSetUtteranceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtteranceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utteranceId, typedOther.utteranceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeakerId()).compareTo(typedOther.isSetSpeakerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeakerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speakerId, typedOther.speakerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotation()).compareTo(typedOther.isSetAnnotation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotation, typedOther.annotation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Utterance(");
    boolean first = true;

    sb.append("tokenOffset:");
    if (this.tokenOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenStream:");
    if (this.tokenStream == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenStream);
    }
    first = false;
    if (isSetCharOffset()) {
      if (!first) sb.append(", ");
      sb.append("charOffset:");
      if (this.charOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.charOffset);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("utteranceId:");
    sb.append(this.utteranceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("speakerId:");
    sb.append(this.speakerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("annotation:");
    if (this.annotation == null) {
      sb.append("null");
    } else {
      sb.append(this.annotation);
    }
    first = false;
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tokenOffset == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenOffset' was not present! Struct: " + toString());
    }
    if (tokenStream == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenStream' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'utteranceId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'speakerId' because it's a primitive and you chose the non-beans generator.
    if (annotation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'annotation' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tokenOffset != null) {
      tokenOffset.validate();
    }
    if (tokenStream != null) {
      tokenStream.validate();
    }
    if (charOffset != null) {
      charOffset.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UtteranceStandardSchemeFactory implements SchemeFactory {
    public UtteranceStandardScheme getScheme() {
      return new UtteranceStandardScheme();
    }
  }

  private static class UtteranceStandardScheme extends StandardScheme<Utterance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Utterance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenOffset = new TokenOffset();
              struct.tokenOffset.read(iprot);
              struct.setTokenOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN_STREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenStream = new TokenStream();
              struct.tokenStream.read(iprot);
              struct.setTokenStreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAR_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.charOffset = new CharOffset();
              struct.charOffset.read(iprot);
              struct.setCharOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UTTERANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.utteranceId = iprot.readI64();
              struct.setUtteranceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPEAKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.speakerId = iprot.readI64();
              struct.setSpeakerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ANNOTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.annotation = iprot.readString();
              struct.setAnnotationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUtteranceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'utteranceId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpeakerId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'speakerId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Utterance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tokenOffset != null) {
        oprot.writeFieldBegin(TOKEN_OFFSET_FIELD_DESC);
        struct.tokenOffset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokenStream != null) {
        oprot.writeFieldBegin(TOKEN_STREAM_FIELD_DESC);
        struct.tokenStream.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.charOffset != null) {
        if (struct.isSetCharOffset()) {
          oprot.writeFieldBegin(CHAR_OFFSET_FIELD_DESC);
          struct.charOffset.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(UTTERANCE_ID_FIELD_DESC);
      oprot.writeI64(struct.utteranceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPEAKER_ID_FIELD_DESC);
      oprot.writeI64(struct.speakerId);
      oprot.writeFieldEnd();
      if (struct.annotation != null) {
        oprot.writeFieldBegin(ANNOTATION_FIELD_DESC);
        oprot.writeString(struct.annotation);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UtteranceTupleSchemeFactory implements SchemeFactory {
    public UtteranceTupleScheme getScheme() {
      return new UtteranceTupleScheme();
    }
  }

  private static class UtteranceTupleScheme extends TupleScheme<Utterance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Utterance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.tokenOffset.write(oprot);
      struct.tokenStream.write(oprot);
      oprot.writeI64(struct.utteranceId);
      oprot.writeI64(struct.speakerId);
      oprot.writeString(struct.annotation);
      BitSet optionals = new BitSet();
      if (struct.isSetCharOffset()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCharOffset()) {
        struct.charOffset.write(oprot);
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Utterance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tokenOffset = new TokenOffset();
      struct.tokenOffset.read(iprot);
      struct.setTokenOffsetIsSet(true);
      struct.tokenStream = new TokenStream();
      struct.tokenStream.read(iprot);
      struct.setTokenStreamIsSet(true);
      struct.utteranceId = iprot.readI64();
      struct.setUtteranceIdIsSet(true);
      struct.speakerId = iprot.readI64();
      struct.setSpeakerIdIsSet(true);
      struct.annotation = iprot.readString();
      struct.setAnnotationIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.charOffset = new CharOffset();
        struct.charOffset.read(iprot);
        struct.setCharOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}

