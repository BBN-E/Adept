/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class TokenStream. In thrift, the token stream has
 * a tokenList field rather than extendind List<Token>
 */
public class TokenStream implements org.apache.thrift.TBase<TokenStream, TokenStream._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenStream");

  private static final org.apache.thrift.protocol.TField TOKENIZER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenizerType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSCRIPT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transcriptType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TEXT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("textValue", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ASR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("asrName", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("document", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SERIAL_VERSION_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialVersionUID", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SPEECH_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("speechUnit", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TRANSLATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("translatorName", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TOKEN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenList", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TokenStreamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TokenStreamTupleSchemeFactory());
  }

  /**
   * The tokenizer type
   * 
   * @see TokenizerType
   */
  public TokenizerType tokenizerType; // required
  /**
   * The transcript type
   * 
   * @see TranscriptType
   */
  public TranscriptType transcriptType; // required
  /**
   * The language
   */
  public String language; // required
  /**
   * The channel name
   * 
   * @see ChannelName
   */
  public ChannelName channelName; // required
  /**
   * The content type
   * 
   * @see ContentType
   */
  public ContentType contentType; // required
  /**
   * The text value
   */
  public String textValue; // required
  /**
   * The asr name
   * 
   * @see AsrName
   */
  public AsrName asrName; // optional
  /**
   * The document the token stream is from
   */
  public Document document; // optional
  /**
   * The Constant serialVersionUID
   */
  public long serialVersionUID; // optional
  /**
   * The speech unit
   * 
   * @see SpeechUnit
   */
  public SpeechUnit speechUnit; // optional
  /**
   * The translator name
   * 
   * @see TranslatorName
   */
  public TranslatorName translatorName; // optional
  /**
   * The list of tokens in this token stream
   */
  public List<Token> tokenList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The tokenizer type
     * 
     * @see TokenizerType
     */
    TOKENIZER_TYPE((short)1, "tokenizerType"),
    /**
     * The transcript type
     * 
     * @see TranscriptType
     */
    TRANSCRIPT_TYPE((short)2, "transcriptType"),
    /**
     * The language
     */
    LANGUAGE((short)3, "language"),
    /**
     * The channel name
     * 
     * @see ChannelName
     */
    CHANNEL_NAME((short)4, "channelName"),
    /**
     * The content type
     * 
     * @see ContentType
     */
    CONTENT_TYPE((short)5, "contentType"),
    /**
     * The text value
     */
    TEXT_VALUE((short)6, "textValue"),
    /**
     * The asr name
     * 
     * @see AsrName
     */
    ASR_NAME((short)7, "asrName"),
    /**
     * The document the token stream is from
     */
    DOCUMENT((short)8, "document"),
    /**
     * The Constant serialVersionUID
     */
    SERIAL_VERSION_UID((short)9, "serialVersionUID"),
    /**
     * The speech unit
     * 
     * @see SpeechUnit
     */
    SPEECH_UNIT((short)10, "speechUnit"),
    /**
     * The translator name
     * 
     * @see TranslatorName
     */
    TRANSLATOR_NAME((short)11, "translatorName"),
    /**
     * The list of tokens in this token stream
     */
    TOKEN_LIST((short)12, "tokenList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKENIZER_TYPE
          return TOKENIZER_TYPE;
        case 2: // TRANSCRIPT_TYPE
          return TRANSCRIPT_TYPE;
        case 3: // LANGUAGE
          return LANGUAGE;
        case 4: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 5: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 6: // TEXT_VALUE
          return TEXT_VALUE;
        case 7: // ASR_NAME
          return ASR_NAME;
        case 8: // DOCUMENT
          return DOCUMENT;
        case 9: // SERIAL_VERSION_UID
          return SERIAL_VERSION_UID;
        case 10: // SPEECH_UNIT
          return SPEECH_UNIT;
        case 11: // TRANSLATOR_NAME
          return TRANSLATOR_NAME;
        case 12: // TOKEN_LIST
          return TOKEN_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERIALVERSIONUID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ASR_NAME,_Fields.DOCUMENT,_Fields.SERIAL_VERSION_UID,_Fields.SPEECH_UNIT,_Fields.TRANSLATOR_NAME,_Fields.TOKEN_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKENIZER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tokenizerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TokenizerType.class)));
    tmpMap.put(_Fields.TRANSCRIPT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transcriptType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TranscriptType.class)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChannelName.class)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContentType.class)));
    tmpMap.put(_Fields.TEXT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("textValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASR_NAME, new org.apache.thrift.meta_data.FieldMetaData("asrName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AsrName.class)));
    tmpMap.put(_Fields.DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("document", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Document.class)));
    tmpMap.put(_Fields.SERIAL_VERSION_UID, new org.apache.thrift.meta_data.FieldMetaData("serialVersionUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPEECH_UNIT, new org.apache.thrift.meta_data.FieldMetaData("speechUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SpeechUnit.class)));
    tmpMap.put(_Fields.TRANSLATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("translatorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TranslatorName.class)));
    tmpMap.put(_Fields.TOKEN_LIST, new org.apache.thrift.meta_data.FieldMetaData("tokenList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenStream.class, metaDataMap);
  }

  public TokenStream() {
    this.serialVersionUID = 2407040331925099456L;

  }

  public TokenStream(
    TokenizerType tokenizerType,
    TranscriptType transcriptType,
    String language,
    ChannelName channelName,
    ContentType contentType,
    String textValue)
  {
    this();
    this.tokenizerType = tokenizerType;
    this.transcriptType = transcriptType;
    this.language = language;
    this.channelName = channelName;
    this.contentType = contentType;
    this.textValue = textValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenStream(TokenStream other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTokenizerType()) {
      this.tokenizerType = other.tokenizerType;
    }
    if (other.isSetTranscriptType()) {
      this.transcriptType = other.transcriptType;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetTextValue()) {
      this.textValue = other.textValue;
    }
    if (other.isSetAsrName()) {
      this.asrName = other.asrName;
    }
    if (other.isSetDocument()) {
      this.document = new Document(other.document);
    }
    this.serialVersionUID = other.serialVersionUID;
    if (other.isSetSpeechUnit()) {
      this.speechUnit = other.speechUnit;
    }
    if (other.isSetTranslatorName()) {
      this.translatorName = other.translatorName;
    }
    if (other.isSetTokenList()) {
      List<Token> __this__tokenList = new ArrayList<Token>();
      for (Token other_element : other.tokenList) {
        __this__tokenList.add(new Token(other_element));
      }
      this.tokenList = __this__tokenList;
    }
  }

  public TokenStream deepCopy() {
    return new TokenStream(this);
  }

  @Override
  public void clear() {
    this.tokenizerType = null;
    this.transcriptType = null;
    this.language = null;
    this.channelName = null;
    this.contentType = null;
    this.textValue = null;
    this.asrName = null;
    this.document = null;
    this.serialVersionUID = 2407040331925099456L;

    this.speechUnit = null;
    this.translatorName = null;
    this.tokenList = null;
  }

  /**
   * The tokenizer type
   * 
   * @see TokenizerType
   */
  public TokenizerType getTokenizerType() {
    return this.tokenizerType;
  }

  /**
   * The tokenizer type
   * 
   * @see TokenizerType
   */
  public TokenStream setTokenizerType(TokenizerType tokenizerType) {
    this.tokenizerType = tokenizerType;
    return this;
  }

  public void unsetTokenizerType() {
    this.tokenizerType = null;
  }

  /** Returns true if field tokenizerType is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenizerType() {
    return this.tokenizerType != null;
  }

  public void setTokenizerTypeIsSet(boolean value) {
    if (!value) {
      this.tokenizerType = null;
    }
  }

  /**
   * The transcript type
   * 
   * @see TranscriptType
   */
  public TranscriptType getTranscriptType() {
    return this.transcriptType;
  }

  /**
   * The transcript type
   * 
   * @see TranscriptType
   */
  public TokenStream setTranscriptType(TranscriptType transcriptType) {
    this.transcriptType = transcriptType;
    return this;
  }

  public void unsetTranscriptType() {
    this.transcriptType = null;
  }

  /** Returns true if field transcriptType is set (has been assigned a value) and false otherwise */
  public boolean isSetTranscriptType() {
    return this.transcriptType != null;
  }

  public void setTranscriptTypeIsSet(boolean value) {
    if (!value) {
      this.transcriptType = null;
    }
  }

  /**
   * The language
   */
  public String getLanguage() {
    return this.language;
  }

  /**
   * The language
   */
  public TokenStream setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  /**
   * The channel name
   * 
   * @see ChannelName
   */
  public ChannelName getChannelName() {
    return this.channelName;
  }

  /**
   * The channel name
   * 
   * @see ChannelName
   */
  public TokenStream setChannelName(ChannelName channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  /**
   * The content type
   * 
   * @see ContentType
   */
  public ContentType getContentType() {
    return this.contentType;
  }

  /**
   * The content type
   * 
   * @see ContentType
   */
  public TokenStream setContentType(ContentType contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  /**
   * The text value
   */
  public String getTextValue() {
    return this.textValue;
  }

  /**
   * The text value
   */
  public TokenStream setTextValue(String textValue) {
    this.textValue = textValue;
    return this;
  }

  public void unsetTextValue() {
    this.textValue = null;
  }

  /** Returns true if field textValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTextValue() {
    return this.textValue != null;
  }

  public void setTextValueIsSet(boolean value) {
    if (!value) {
      this.textValue = null;
    }
  }

  /**
   * The asr name
   * 
   * @see AsrName
   */
  public AsrName getAsrName() {
    return this.asrName;
  }

  /**
   * The asr name
   * 
   * @see AsrName
   */
  public TokenStream setAsrName(AsrName asrName) {
    this.asrName = asrName;
    return this;
  }

  public void unsetAsrName() {
    this.asrName = null;
  }

  /** Returns true if field asrName is set (has been assigned a value) and false otherwise */
  public boolean isSetAsrName() {
    return this.asrName != null;
  }

  public void setAsrNameIsSet(boolean value) {
    if (!value) {
      this.asrName = null;
    }
  }

  /**
   * The document the token stream is from
   */
  public Document getDocument() {
    return this.document;
  }

  /**
   * The document the token stream is from
   */
  public TokenStream setDocument(Document document) {
    this.document = document;
    return this;
  }

  public void unsetDocument() {
    this.document = null;
  }

  /** Returns true if field document is set (has been assigned a value) and false otherwise */
  public boolean isSetDocument() {
    return this.document != null;
  }

  public void setDocumentIsSet(boolean value) {
    if (!value) {
      this.document = null;
    }
  }

  /**
   * The Constant serialVersionUID
   */
  public long getSerialVersionUID() {
    return this.serialVersionUID;
  }

  /**
   * The Constant serialVersionUID
   */
  public TokenStream setSerialVersionUID(long serialVersionUID) {
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    return this;
  }

  public void unsetSerialVersionUID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  /** Returns true if field serialVersionUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialVersionUID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  public void setSerialVersionUIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID, value);
  }

  /**
   * The speech unit
   * 
   * @see SpeechUnit
   */
  public SpeechUnit getSpeechUnit() {
    return this.speechUnit;
  }

  /**
   * The speech unit
   * 
   * @see SpeechUnit
   */
  public TokenStream setSpeechUnit(SpeechUnit speechUnit) {
    this.speechUnit = speechUnit;
    return this;
  }

  public void unsetSpeechUnit() {
    this.speechUnit = null;
  }

  /** Returns true if field speechUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeechUnit() {
    return this.speechUnit != null;
  }

  public void setSpeechUnitIsSet(boolean value) {
    if (!value) {
      this.speechUnit = null;
    }
  }

  /**
   * The translator name
   * 
   * @see TranslatorName
   */
  public TranslatorName getTranslatorName() {
    return this.translatorName;
  }

  /**
   * The translator name
   * 
   * @see TranslatorName
   */
  public TokenStream setTranslatorName(TranslatorName translatorName) {
    this.translatorName = translatorName;
    return this;
  }

  public void unsetTranslatorName() {
    this.translatorName = null;
  }

  /** Returns true if field translatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetTranslatorName() {
    return this.translatorName != null;
  }

  public void setTranslatorNameIsSet(boolean value) {
    if (!value) {
      this.translatorName = null;
    }
  }

  public int getTokenListSize() {
    return (this.tokenList == null) ? 0 : this.tokenList.size();
  }

  public java.util.Iterator<Token> getTokenListIterator() {
    return (this.tokenList == null) ? null : this.tokenList.iterator();
  }

  public void addToTokenList(Token elem) {
    if (this.tokenList == null) {
      this.tokenList = new ArrayList<Token>();
    }
    this.tokenList.add(elem);
  }

  /**
   * The list of tokens in this token stream
   */
  public List<Token> getTokenList() {
    return this.tokenList;
  }

  /**
   * The list of tokens in this token stream
   */
  public TokenStream setTokenList(List<Token> tokenList) {
    this.tokenList = tokenList;
    return this;
  }

  public void unsetTokenList() {
    this.tokenList = null;
  }

  /** Returns true if field tokenList is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenList() {
    return this.tokenList != null;
  }

  public void setTokenListIsSet(boolean value) {
    if (!value) {
      this.tokenList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKENIZER_TYPE:
      if (value == null) {
        unsetTokenizerType();
      } else {
        setTokenizerType((TokenizerType)value);
      }
      break;

    case TRANSCRIPT_TYPE:
      if (value == null) {
        unsetTranscriptType();
      } else {
        setTranscriptType((TranscriptType)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannelName();
      } else {
        setChannelName((ChannelName)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((ContentType)value);
      }
      break;

    case TEXT_VALUE:
      if (value == null) {
        unsetTextValue();
      } else {
        setTextValue((String)value);
      }
      break;

    case ASR_NAME:
      if (value == null) {
        unsetAsrName();
      } else {
        setAsrName((AsrName)value);
      }
      break;

    case DOCUMENT:
      if (value == null) {
        unsetDocument();
      } else {
        setDocument((Document)value);
      }
      break;

    case SERIAL_VERSION_UID:
      if (value == null) {
        unsetSerialVersionUID();
      } else {
        setSerialVersionUID((Long)value);
      }
      break;

    case SPEECH_UNIT:
      if (value == null) {
        unsetSpeechUnit();
      } else {
        setSpeechUnit((SpeechUnit)value);
      }
      break;

    case TRANSLATOR_NAME:
      if (value == null) {
        unsetTranslatorName();
      } else {
        setTranslatorName((TranslatorName)value);
      }
      break;

    case TOKEN_LIST:
      if (value == null) {
        unsetTokenList();
      } else {
        setTokenList((List<Token>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKENIZER_TYPE:
      return getTokenizerType();

    case TRANSCRIPT_TYPE:
      return getTranscriptType();

    case LANGUAGE:
      return getLanguage();

    case CHANNEL_NAME:
      return getChannelName();

    case CONTENT_TYPE:
      return getContentType();

    case TEXT_VALUE:
      return getTextValue();

    case ASR_NAME:
      return getAsrName();

    case DOCUMENT:
      return getDocument();

    case SERIAL_VERSION_UID:
      return Long.valueOf(getSerialVersionUID());

    case SPEECH_UNIT:
      return getSpeechUnit();

    case TRANSLATOR_NAME:
      return getTranslatorName();

    case TOKEN_LIST:
      return getTokenList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKENIZER_TYPE:
      return isSetTokenizerType();
    case TRANSCRIPT_TYPE:
      return isSetTranscriptType();
    case LANGUAGE:
      return isSetLanguage();
    case CHANNEL_NAME:
      return isSetChannelName();
    case CONTENT_TYPE:
      return isSetContentType();
    case TEXT_VALUE:
      return isSetTextValue();
    case ASR_NAME:
      return isSetAsrName();
    case DOCUMENT:
      return isSetDocument();
    case SERIAL_VERSION_UID:
      return isSetSerialVersionUID();
    case SPEECH_UNIT:
      return isSetSpeechUnit();
    case TRANSLATOR_NAME:
      return isSetTranslatorName();
    case TOKEN_LIST:
      return isSetTokenList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenStream)
      return this.equals((TokenStream)that);
    return false;
  }

  public boolean equals(TokenStream that) {
    if (that == null)
      return false;

    boolean this_present_tokenizerType = true && this.isSetTokenizerType();
    boolean that_present_tokenizerType = true && that.isSetTokenizerType();
    if (this_present_tokenizerType || that_present_tokenizerType) {
      if (!(this_present_tokenizerType && that_present_tokenizerType))
        return false;
      if (!this.tokenizerType.equals(that.tokenizerType))
        return false;
    }

    boolean this_present_transcriptType = true && this.isSetTranscriptType();
    boolean that_present_transcriptType = true && that.isSetTranscriptType();
    if (this_present_transcriptType || that_present_transcriptType) {
      if (!(this_present_transcriptType && that_present_transcriptType))
        return false;
      if (!this.transcriptType.equals(that.transcriptType))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_textValue = true && this.isSetTextValue();
    boolean that_present_textValue = true && that.isSetTextValue();
    if (this_present_textValue || that_present_textValue) {
      if (!(this_present_textValue && that_present_textValue))
        return false;
      if (!this.textValue.equals(that.textValue))
        return false;
    }

    boolean this_present_asrName = true && this.isSetAsrName();
    boolean that_present_asrName = true && that.isSetAsrName();
    if (this_present_asrName || that_present_asrName) {
      if (!(this_present_asrName && that_present_asrName))
        return false;
      if (!this.asrName.equals(that.asrName))
        return false;
    }

    boolean this_present_document = true && this.isSetDocument();
    boolean that_present_document = true && that.isSetDocument();
    if (this_present_document || that_present_document) {
      if (!(this_present_document && that_present_document))
        return false;
      if (!this.document.equals(that.document))
        return false;
    }

    boolean this_present_serialVersionUID = true && this.isSetSerialVersionUID();
    boolean that_present_serialVersionUID = true && that.isSetSerialVersionUID();
    if (this_present_serialVersionUID || that_present_serialVersionUID) {
      if (!(this_present_serialVersionUID && that_present_serialVersionUID))
        return false;
      if (this.serialVersionUID != that.serialVersionUID)
        return false;
    }

    boolean this_present_speechUnit = true && this.isSetSpeechUnit();
    boolean that_present_speechUnit = true && that.isSetSpeechUnit();
    if (this_present_speechUnit || that_present_speechUnit) {
      if (!(this_present_speechUnit && that_present_speechUnit))
        return false;
      if (!this.speechUnit.equals(that.speechUnit))
        return false;
    }

    boolean this_present_translatorName = true && this.isSetTranslatorName();
    boolean that_present_translatorName = true && that.isSetTranslatorName();
    if (this_present_translatorName || that_present_translatorName) {
      if (!(this_present_translatorName && that_present_translatorName))
        return false;
      if (!this.translatorName.equals(that.translatorName))
        return false;
    }

    boolean this_present_tokenList = true && this.isSetTokenList();
    boolean that_present_tokenList = true && that.isSetTokenList();
    if (this_present_tokenList || that_present_tokenList) {
      if (!(this_present_tokenList && that_present_tokenList))
        return false;
      if (!this.tokenList.equals(that.tokenList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TokenStream other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TokenStream typedOther = (TokenStream)other;

    lastComparison = Boolean.valueOf(isSetTokenizerType()).compareTo(typedOther.isSetTokenizerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenizerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenizerType, typedOther.tokenizerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTranscriptType()).compareTo(typedOther.isSetTranscriptType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranscriptType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transcriptType, typedOther.transcriptType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(typedOther.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, typedOther.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(typedOther.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, typedOther.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextValue()).compareTo(typedOther.isSetTextValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textValue, typedOther.textValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsrName()).compareTo(typedOther.isSetAsrName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsrName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asrName, typedOther.asrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocument()).compareTo(typedOther.isSetDocument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.document, typedOther.document);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialVersionUID()).compareTo(typedOther.isSetSerialVersionUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialVersionUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialVersionUID, typedOther.serialVersionUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeechUnit()).compareTo(typedOther.isSetSpeechUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeechUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speechUnit, typedOther.speechUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTranslatorName()).compareTo(typedOther.isSetTranslatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranslatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.translatorName, typedOther.translatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenList()).compareTo(typedOther.isSetTokenList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenList, typedOther.tokenList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TokenStream(");
    boolean first = true;

    sb.append("tokenizerType:");
    if (this.tokenizerType == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenizerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transcriptType:");
    if (this.transcriptType == null) {
      sb.append("null");
    } else {
      sb.append(this.transcriptType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    if (this.contentType == null) {
      sb.append("null");
    } else {
      sb.append(this.contentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("textValue:");
    if (this.textValue == null) {
      sb.append("null");
    } else {
      sb.append(this.textValue);
    }
    first = false;
    if (isSetAsrName()) {
      if (!first) sb.append(", ");
      sb.append("asrName:");
      if (this.asrName == null) {
        sb.append("null");
      } else {
        sb.append(this.asrName);
      }
      first = false;
    }
    if (isSetDocument()) {
      if (!first) sb.append(", ");
      sb.append("document:");
      if (this.document == null) {
        sb.append("null");
      } else {
        sb.append(this.document);
      }
      first = false;
    }
    if (isSetSerialVersionUID()) {
      if (!first) sb.append(", ");
      sb.append("serialVersionUID:");
      sb.append(this.serialVersionUID);
      first = false;
    }
    if (isSetSpeechUnit()) {
      if (!first) sb.append(", ");
      sb.append("speechUnit:");
      if (this.speechUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.speechUnit);
      }
      first = false;
    }
    if (isSetTranslatorName()) {
      if (!first) sb.append(", ");
      sb.append("translatorName:");
      if (this.translatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.translatorName);
      }
      first = false;
    }
    if (isSetTokenList()) {
      if (!first) sb.append(", ");
      sb.append("tokenList:");
      if (this.tokenList == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tokenizerType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenizerType' was not present! Struct: " + toString());
    }
    if (transcriptType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'transcriptType' was not present! Struct: " + toString());
    }
    if (language == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'language' was not present! Struct: " + toString());
    }
    if (channelName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelName' was not present! Struct: " + toString());
    }
    if (contentType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentType' was not present! Struct: " + toString());
    }
    if (textValue == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'textValue' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (document != null) {
      document.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenStreamStandardSchemeFactory implements SchemeFactory {
    public TokenStreamStandardScheme getScheme() {
      return new TokenStreamStandardScheme();
    }
  }

  private static class TokenStreamStandardScheme extends StandardScheme<TokenStream> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenStream struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKENIZER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tokenizerType = TokenizerType.findByValue(iprot.readI32());
              struct.setTokenizerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSCRIPT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transcriptType = TranscriptType.findByValue(iprot.readI32());
              struct.setTranscriptTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channelName = ChannelName.findByValue(iprot.readI32());
              struct.setChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = ContentType.findByValue(iprot.readI32());
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEXT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textValue = iprot.readString();
              struct.setTextValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ASR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.asrName = AsrName.findByValue(iprot.readI32());
              struct.setAsrNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOCUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.document = new Document();
              struct.document.read(iprot);
              struct.setDocumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SERIAL_VERSION_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serialVersionUID = iprot.readI64();
              struct.setSerialVersionUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPEECH_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.speechUnit = SpeechUnit.findByValue(iprot.readI32());
              struct.setSpeechUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRANSLATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.translatorName = TranslatorName.findByValue(iprot.readI32());
              struct.setTranslatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOKEN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.tokenList = new ArrayList<Token>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  Token _elem22; // required
                  _elem22 = new Token();
                  _elem22.read(iprot);
                  struct.tokenList.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setTokenListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenStream struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tokenizerType != null) {
        oprot.writeFieldBegin(TOKENIZER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.tokenizerType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.transcriptType != null) {
        oprot.writeFieldBegin(TRANSCRIPT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.transcriptType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeI32(struct.channelName.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.contentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.contentType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.textValue != null) {
        oprot.writeFieldBegin(TEXT_VALUE_FIELD_DESC);
        oprot.writeString(struct.textValue);
        oprot.writeFieldEnd();
      }
      if (struct.asrName != null) {
        if (struct.isSetAsrName()) {
          oprot.writeFieldBegin(ASR_NAME_FIELD_DESC);
          oprot.writeI32(struct.asrName.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.document != null) {
        if (struct.isSetDocument()) {
          oprot.writeFieldBegin(DOCUMENT_FIELD_DESC);
          struct.document.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeFieldBegin(SERIAL_VERSION_UID_FIELD_DESC);
        oprot.writeI64(struct.serialVersionUID);
        oprot.writeFieldEnd();
      }
      if (struct.speechUnit != null) {
        if (struct.isSetSpeechUnit()) {
          oprot.writeFieldBegin(SPEECH_UNIT_FIELD_DESC);
          oprot.writeI32(struct.speechUnit.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.translatorName != null) {
        if (struct.isSetTranslatorName()) {
          oprot.writeFieldBegin(TRANSLATOR_NAME_FIELD_DESC);
          oprot.writeI32(struct.translatorName.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tokenList != null) {
        if (struct.isSetTokenList()) {
          oprot.writeFieldBegin(TOKEN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tokenList.size()));
            for (Token _iter23 : struct.tokenList)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenStreamTupleSchemeFactory implements SchemeFactory {
    public TokenStreamTupleScheme getScheme() {
      return new TokenStreamTupleScheme();
    }
  }

  private static class TokenStreamTupleScheme extends TupleScheme<TokenStream> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenStream struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.tokenizerType.getValue());
      oprot.writeI32(struct.transcriptType.getValue());
      oprot.writeString(struct.language);
      oprot.writeI32(struct.channelName.getValue());
      oprot.writeI32(struct.contentType.getValue());
      oprot.writeString(struct.textValue);
      BitSet optionals = new BitSet();
      if (struct.isSetAsrName()) {
        optionals.set(0);
      }
      if (struct.isSetDocument()) {
        optionals.set(1);
      }
      if (struct.isSetSerialVersionUID()) {
        optionals.set(2);
      }
      if (struct.isSetSpeechUnit()) {
        optionals.set(3);
      }
      if (struct.isSetTranslatorName()) {
        optionals.set(4);
      }
      if (struct.isSetTokenList()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAsrName()) {
        oprot.writeI32(struct.asrName.getValue());
      }
      if (struct.isSetDocument()) {
        struct.document.write(oprot);
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeI64(struct.serialVersionUID);
      }
      if (struct.isSetSpeechUnit()) {
        oprot.writeI32(struct.speechUnit.getValue());
      }
      if (struct.isSetTranslatorName()) {
        oprot.writeI32(struct.translatorName.getValue());
      }
      if (struct.isSetTokenList()) {
        {
          oprot.writeI32(struct.tokenList.size());
          for (Token _iter24 : struct.tokenList)
          {
            _iter24.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenStream struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tokenizerType = TokenizerType.findByValue(iprot.readI32());
      struct.setTokenizerTypeIsSet(true);
      struct.transcriptType = TranscriptType.findByValue(iprot.readI32());
      struct.setTranscriptTypeIsSet(true);
      struct.language = iprot.readString();
      struct.setLanguageIsSet(true);
      struct.channelName = ChannelName.findByValue(iprot.readI32());
      struct.setChannelNameIsSet(true);
      struct.contentType = ContentType.findByValue(iprot.readI32());
      struct.setContentTypeIsSet(true);
      struct.textValue = iprot.readString();
      struct.setTextValueIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.asrName = AsrName.findByValue(iprot.readI32());
        struct.setAsrNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.document = new Document();
        struct.document.read(iprot);
        struct.setDocumentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serialVersionUID = iprot.readI64();
        struct.setSerialVersionUIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.speechUnit = SpeechUnit.findByValue(iprot.readI32());
        struct.setSpeechUnitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.translatorName = TranslatorName.findByValue(iprot.readI32());
        struct.setTranslatorNameIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tokenList = new ArrayList<Token>(_list25.size);
          for (int _i26 = 0; _i26 < _list25.size; ++_i26)
          {
            Token _elem27; // required
            _elem27 = new Token();
            _elem27.read(iprot);
            struct.tokenList.add(_elem27);
          }
        }
        struct.setTokenListIsSet(true);
      }
    }
  }

}