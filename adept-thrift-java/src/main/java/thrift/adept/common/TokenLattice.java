/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TokenLattice implements org.apache.thrift.TBase<TokenLattice, TokenLattice._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenLattice");

  private static final org.apache.thrift.protocol.TField START_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startState", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField END_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endState", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARCS_FIELD_DESC = new org.apache.thrift.protocol.TField("arcs", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TokenLatticeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TokenLatticeTupleSchemeFactory());
  }

  /**
   * The start state
   */
  public int startState; // required
  /**
   * The end state
   */
  public int endState; // required
  /**
   * The arcs
   */
  public List<Arc> arcs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The start state
     */
    START_STATE((short)1, "startState"),
    /**
     * The end state
     */
    END_STATE((short)2, "endState"),
    /**
     * The arcs
     */
    ARCS((short)3, "arcs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_STATE
          return START_STATE;
        case 2: // END_STATE
          return END_STATE;
        case 3: // ARCS
          return ARCS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTSTATE_ISSET_ID = 0;
  private static final int __ENDSTATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_STATE, new org.apache.thrift.meta_data.FieldMetaData("startState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_STATE, new org.apache.thrift.meta_data.FieldMetaData("endState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCS, new org.apache.thrift.meta_data.FieldMetaData("arcs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Arc.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenLattice.class, metaDataMap);
  }

  public TokenLattice() {
  }

  public TokenLattice(
    int startState,
    int endState,
    List<Arc> arcs)
  {
    this();
    this.startState = startState;
    setStartStateIsSet(true);
    this.endState = endState;
    setEndStateIsSet(true);
    this.arcs = arcs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenLattice(TokenLattice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startState = other.startState;
    this.endState = other.endState;
    if (other.isSetArcs()) {
      List<Arc> __this__arcs = new ArrayList<Arc>();
      for (Arc other_element : other.arcs) {
        __this__arcs.add(new Arc(other_element));
      }
      this.arcs = __this__arcs;
    }
  }

  public TokenLattice deepCopy() {
    return new TokenLattice(this);
  }

  @Override
  public void clear() {
    setStartStateIsSet(false);
    this.startState = 0;
    setEndStateIsSet(false);
    this.endState = 0;
    this.arcs = null;
  }

  /**
   * The start state
   */
  public int getStartState() {
    return this.startState;
  }

  /**
   * The start state
   */
  public TokenLattice setStartState(int startState) {
    this.startState = startState;
    setStartStateIsSet(true);
    return this;
  }

  public void unsetStartState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTSTATE_ISSET_ID);
  }

  /** Returns true if field startState is set (has been assigned a value) and false otherwise */
  public boolean isSetStartState() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTSTATE_ISSET_ID);
  }

  public void setStartStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTSTATE_ISSET_ID, value);
  }

  /**
   * The end state
   */
  public int getEndState() {
    return this.endState;
  }

  /**
   * The end state
   */
  public TokenLattice setEndState(int endState) {
    this.endState = endState;
    setEndStateIsSet(true);
    return this;
  }

  public void unsetEndState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDSTATE_ISSET_ID);
  }

  /** Returns true if field endState is set (has been assigned a value) and false otherwise */
  public boolean isSetEndState() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDSTATE_ISSET_ID);
  }

  public void setEndStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDSTATE_ISSET_ID, value);
  }

  public int getArcsSize() {
    return (this.arcs == null) ? 0 : this.arcs.size();
  }

  public java.util.Iterator<Arc> getArcsIterator() {
    return (this.arcs == null) ? null : this.arcs.iterator();
  }

  public void addToArcs(Arc elem) {
    if (this.arcs == null) {
      this.arcs = new ArrayList<Arc>();
    }
    this.arcs.add(elem);
  }

  /**
   * The arcs
   */
  public List<Arc> getArcs() {
    return this.arcs;
  }

  /**
   * The arcs
   */
  public TokenLattice setArcs(List<Arc> arcs) {
    this.arcs = arcs;
    return this;
  }

  public void unsetArcs() {
    this.arcs = null;
  }

  /** Returns true if field arcs is set (has been assigned a value) and false otherwise */
  public boolean isSetArcs() {
    return this.arcs != null;
  }

  public void setArcsIsSet(boolean value) {
    if (!value) {
      this.arcs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_STATE:
      if (value == null) {
        unsetStartState();
      } else {
        setStartState((Integer)value);
      }
      break;

    case END_STATE:
      if (value == null) {
        unsetEndState();
      } else {
        setEndState((Integer)value);
      }
      break;

    case ARCS:
      if (value == null) {
        unsetArcs();
      } else {
        setArcs((List<Arc>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_STATE:
      return Integer.valueOf(getStartState());

    case END_STATE:
      return Integer.valueOf(getEndState());

    case ARCS:
      return getArcs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_STATE:
      return isSetStartState();
    case END_STATE:
      return isSetEndState();
    case ARCS:
      return isSetArcs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenLattice)
      return this.equals((TokenLattice)that);
    return false;
  }

  public boolean equals(TokenLattice that) {
    if (that == null)
      return false;

    boolean this_present_startState = true;
    boolean that_present_startState = true;
    if (this_present_startState || that_present_startState) {
      if (!(this_present_startState && that_present_startState))
        return false;
      if (this.startState != that.startState)
        return false;
    }

    boolean this_present_endState = true;
    boolean that_present_endState = true;
    if (this_present_endState || that_present_endState) {
      if (!(this_present_endState && that_present_endState))
        return false;
      if (this.endState != that.endState)
        return false;
    }

    boolean this_present_arcs = true && this.isSetArcs();
    boolean that_present_arcs = true && that.isSetArcs();
    if (this_present_arcs || that_present_arcs) {
      if (!(this_present_arcs && that_present_arcs))
        return false;
      if (!this.arcs.equals(that.arcs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TokenLattice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TokenLattice typedOther = (TokenLattice)other;

    lastComparison = Boolean.valueOf(isSetStartState()).compareTo(typedOther.isSetStartState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startState, typedOther.startState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndState()).compareTo(typedOther.isSetEndState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endState, typedOther.endState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArcs()).compareTo(typedOther.isSetArcs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArcs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arcs, typedOther.arcs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TokenLattice(");
    boolean first = true;

    sb.append("startState:");
    sb.append(this.startState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endState:");
    sb.append(this.endState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arcs:");
    if (this.arcs == null) {
      sb.append("null");
    } else {
      sb.append(this.arcs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenLatticeStandardSchemeFactory implements SchemeFactory {
    public TokenLatticeStandardScheme getScheme() {
      return new TokenLatticeStandardScheme();
    }
  }

  private static class TokenLatticeStandardScheme extends StandardScheme<TokenLattice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenLattice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startState = iprot.readI32();
              struct.setStartStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endState = iprot.readI32();
              struct.setEndStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARCS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.arcs = new ArrayList<Arc>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  Arc _elem30; // required
                  _elem30 = new Arc();
                  _elem30.read(iprot);
                  struct.arcs.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setArcsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenLattice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_STATE_FIELD_DESC);
      oprot.writeI32(struct.startState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_STATE_FIELD_DESC);
      oprot.writeI32(struct.endState);
      oprot.writeFieldEnd();
      if (struct.arcs != null) {
        oprot.writeFieldBegin(ARCS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arcs.size()));
          for (Arc _iter31 : struct.arcs)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenLatticeTupleSchemeFactory implements SchemeFactory {
    public TokenLatticeTupleScheme getScheme() {
      return new TokenLatticeTupleScheme();
    }
  }

  private static class TokenLatticeTupleScheme extends TupleScheme<TokenLattice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenLattice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStartState()) {
        optionals.set(0);
      }
      if (struct.isSetEndState()) {
        optionals.set(1);
      }
      if (struct.isSetArcs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStartState()) {
        oprot.writeI32(struct.startState);
      }
      if (struct.isSetEndState()) {
        oprot.writeI32(struct.endState);
      }
      if (struct.isSetArcs()) {
        {
          oprot.writeI32(struct.arcs.size());
          for (Arc _iter32 : struct.arcs)
          {
            _iter32.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenLattice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.startState = iprot.readI32();
        struct.setStartStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endState = iprot.readI32();
        struct.setEndStateIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.arcs = new ArrayList<Arc>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            Arc _elem35; // required
            _elem35 = new Arc();
            _elem35.read(iprot);
            struct.arcs.add(_elem35);
          }
        }
        struct.setArcsIsSet(true);
      }
    }
  }

}

