/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class Argument.
 */
public class Argument implements org.apache.thrift.TBase<Argument, Argument._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Argument");

  private static final org.apache.thrift.protocol.TField ARGUMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("argumentType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARGUMENT_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("argumentDistribution", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ArgumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ArgumentTupleSchemeFactory());
  }

  /**
   * The argument type
   */
  public Type argumentType; // required
  /**
   * The argument distribution
   */
  public Map<ChunkUnion,Double> argumentDistribution; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithm name
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The argument type
     */
    ARGUMENT_TYPE((short)1, "argumentType"),
    /**
     * The argument distribution
     */
    ARGUMENT_DISTRIBUTION((short)2, "argumentDistribution"),
    /**
     * The id
     */
    ID((short)3, "id"),
    /**
     * The value
     */
    VALUE((short)4, "value"),
    /**
     * The algorithm name
     */
    ALGORITHM_NAME((short)5, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARGUMENT_TYPE
          return ARGUMENT_TYPE;
        case 2: // ARGUMENT_DISTRIBUTION
          return ARGUMENT_DISTRIBUTION;
        case 3: // ID
          return ID;
        case 4: // VALUE
          return VALUE;
        case 5: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ARGUMENT_DISTRIBUTION,_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARGUMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("argumentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Type.class)));
    tmpMap.put(_Fields.ARGUMENT_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("argumentDistribution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Argument.class, metaDataMap);
  }

  public Argument() {
  }

  public Argument(
    Type argumentType)
  {
    this();
    this.argumentType = argumentType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Argument(Argument other) {
    if (other.isSetArgumentType()) {
      this.argumentType = new Type(other.argumentType);
    }
    if (other.isSetArgumentDistribution()) {
      Map<ChunkUnion,Double> __this__argumentDistribution = new HashMap<ChunkUnion,Double>();
      for (Map.Entry<ChunkUnion, Double> other_element : other.argumentDistribution.entrySet()) {

        ChunkUnion other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        ChunkUnion __this__argumentDistribution_copy_key = new ChunkUnion(other_element_key);

        Double __this__argumentDistribution_copy_value = other_element_value;

        __this__argumentDistribution.put(__this__argumentDistribution_copy_key, __this__argumentDistribution_copy_value);
      }
      this.argumentDistribution = __this__argumentDistribution;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public Argument deepCopy() {
    return new Argument(this);
  }

  @Override
  public void clear() {
    this.argumentType = null;
    this.argumentDistribution = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The argument type
   */
  public Type getArgumentType() {
    return this.argumentType;
  }

  /**
   * The argument type
   */
  public Argument setArgumentType(Type argumentType) {
    this.argumentType = argumentType;
    return this;
  }

  public void unsetArgumentType() {
    this.argumentType = null;
  }

  /** Returns true if field argumentType is set (has been assigned a value) and false otherwise */
  public boolean isSetArgumentType() {
    return this.argumentType != null;
  }

  public void setArgumentTypeIsSet(boolean value) {
    if (!value) {
      this.argumentType = null;
    }
  }

  public int getArgumentDistributionSize() {
    return (this.argumentDistribution == null) ? 0 : this.argumentDistribution.size();
  }

  public void putToArgumentDistribution(ChunkUnion key, double val) {
    if (this.argumentDistribution == null) {
      this.argumentDistribution = new HashMap<ChunkUnion,Double>();
    }
    this.argumentDistribution.put(key, val);
  }

  /**
   * The argument distribution
   */
  public Map<ChunkUnion,Double> getArgumentDistribution() {
    return this.argumentDistribution;
  }

  /**
   * The argument distribution
   */
  public Argument setArgumentDistribution(Map<ChunkUnion,Double> argumentDistribution) {
    this.argumentDistribution = argumentDistribution;
    return this;
  }

  public void unsetArgumentDistribution() {
    this.argumentDistribution = null;
  }

  /** Returns true if field argumentDistribution is set (has been assigned a value) and false otherwise */
  public boolean isSetArgumentDistribution() {
    return this.argumentDistribution != null;
  }

  public void setArgumentDistributionIsSet(boolean value) {
    if (!value) {
      this.argumentDistribution = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Argument setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Argument setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithm name
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithm name
   */
  public Argument setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ARGUMENT_TYPE:
      if (value == null) {
        unsetArgumentType();
      } else {
        setArgumentType((Type)value);
      }
      break;

    case ARGUMENT_DISTRIBUTION:
      if (value == null) {
        unsetArgumentDistribution();
      } else {
        setArgumentDistribution((Map<ChunkUnion,Double>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ARGUMENT_TYPE:
      return getArgumentType();

    case ARGUMENT_DISTRIBUTION:
      return getArgumentDistribution();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ARGUMENT_TYPE:
      return isSetArgumentType();
    case ARGUMENT_DISTRIBUTION:
      return isSetArgumentDistribution();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Argument)
      return this.equals((Argument)that);
    return false;
  }

  public boolean equals(Argument that) {
    if (that == null)
      return false;

    boolean this_present_argumentType = true && this.isSetArgumentType();
    boolean that_present_argumentType = true && that.isSetArgumentType();
    if (this_present_argumentType || that_present_argumentType) {
      if (!(this_present_argumentType && that_present_argumentType))
        return false;
      if (!this.argumentType.equals(that.argumentType))
        return false;
    }

    boolean this_present_argumentDistribution = true && this.isSetArgumentDistribution();
    boolean that_present_argumentDistribution = true && that.isSetArgumentDistribution();
    if (this_present_argumentDistribution || that_present_argumentDistribution) {
      if (!(this_present_argumentDistribution && that_present_argumentDistribution))
        return false;
      if (!this.argumentDistribution.equals(that.argumentDistribution))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Argument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Argument typedOther = (Argument)other;

    lastComparison = Boolean.valueOf(isSetArgumentType()).compareTo(typedOther.isSetArgumentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgumentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argumentType, typedOther.argumentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgumentDistribution()).compareTo(typedOther.isSetArgumentDistribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgumentDistribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argumentDistribution, typedOther.argumentDistribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Argument(");
    boolean first = true;

    sb.append("argumentType:");
    if (this.argumentType == null) {
      sb.append("null");
    } else {
      sb.append(this.argumentType);
    }
    first = false;
    if (isSetArgumentDistribution()) {
      if (!first) sb.append(", ");
      sb.append("argumentDistribution:");
      if (this.argumentDistribution == null) {
        sb.append("null");
      } else {
        sb.append(this.argumentDistribution);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (argumentType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argumentType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (argumentType != null) {
      argumentType.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArgumentStandardSchemeFactory implements SchemeFactory {
    public ArgumentStandardScheme getScheme() {
      return new ArgumentStandardScheme();
    }
  }

  private static class ArgumentStandardScheme extends StandardScheme<Argument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Argument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARGUMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.argumentType = new Type();
              struct.argumentType.read(iprot);
              struct.setArgumentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARGUMENT_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map194 = iprot.readMapBegin();
                struct.argumentDistribution = new HashMap<ChunkUnion,Double>(2*_map194.size);
                for (int _i195 = 0; _i195 < _map194.size; ++_i195)
                {
                  ChunkUnion _key196; // required
                  double _val197; // required
                  _key196 = new ChunkUnion();
                  _key196.read(iprot);
                  _val197 = iprot.readDouble();
                  struct.argumentDistribution.put(_key196, _val197);
                }
                iprot.readMapEnd();
              }
              struct.setArgumentDistributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Argument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.argumentType != null) {
        oprot.writeFieldBegin(ARGUMENT_TYPE_FIELD_DESC);
        struct.argumentType.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.argumentDistribution != null) {
        if (struct.isSetArgumentDistribution()) {
          oprot.writeFieldBegin(ARGUMENT_DISTRIBUTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, struct.argumentDistribution.size()));
            for (Map.Entry<ChunkUnion, Double> _iter198 : struct.argumentDistribution.entrySet())
            {
              _iter198.getKey().write(oprot);
              oprot.writeDouble(_iter198.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArgumentTupleSchemeFactory implements SchemeFactory {
    public ArgumentTupleScheme getScheme() {
      return new ArgumentTupleScheme();
    }
  }

  private static class ArgumentTupleScheme extends TupleScheme<Argument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Argument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.argumentType.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetArgumentDistribution()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetArgumentDistribution()) {
        {
          oprot.writeI32(struct.argumentDistribution.size());
          for (Map.Entry<ChunkUnion, Double> _iter199 : struct.argumentDistribution.entrySet())
          {
            _iter199.getKey().write(oprot);
            oprot.writeDouble(_iter199.getValue());
          }
        }
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Argument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.argumentType = new Type();
      struct.argumentType.read(iprot);
      struct.setArgumentTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map200 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.argumentDistribution = new HashMap<ChunkUnion,Double>(2*_map200.size);
          for (int _i201 = 0; _i201 < _map200.size; ++_i201)
          {
            ChunkUnion _key202; // required
            double _val203; // required
            _key202 = new ChunkUnion();
            _key202.read(iprot);
            _val203 = iprot.readDouble();
            struct.argumentDistribution.put(_key202, _val203);
          }
        }
        struct.setArgumentDistributionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}