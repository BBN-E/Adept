/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class InterPausalUnit.
 */
public class InterPausalUnit implements org.apache.thrift.TBase<InterPausalUnit, InterPausalUnit._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterPausalUnit");

  private static final org.apache.thrift.protocol.TField SEQUENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField IPU_AUDIO_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("ipuAudioOffset", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ACOUSTIC_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("acousticFeatures", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InterPausalUnitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InterPausalUnitTupleSchemeFactory());
  }

  /**
   * The sequence id
   */
  public long sequenceId; // required
  /**
   * The ipu audio offset
   */
  public AudioOffset ipuAudioOffset; // required
  /**
   * The acoustic features
   */
  public Map<String,Double> acousticFeatures; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The sequence id
     */
    SEQUENCE_ID((short)1, "sequenceId"),
    /**
     * The ipu audio offset
     */
    IPU_AUDIO_OFFSET((short)2, "ipuAudioOffset"),
    /**
     * The acoustic features
     */
    ACOUSTIC_FEATURES((short)3, "acousticFeatures"),
    /**
     * The id
     */
    ID((short)4, "id"),
    /**
     * The value
     */
    VALUE((short)5, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)6, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_ID
          return SEQUENCE_ID;
        case 2: // IPU_AUDIO_OFFSET
          return IPU_AUDIO_OFFSET;
        case 3: // ACOUSTIC_FEATURES
          return ACOUSTIC_FEATURES;
        case 4: // ID
          return ID;
        case 5: // VALUE
          return VALUE;
        case 6: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ACOUSTIC_FEATURES,_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sequenceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IPU_AUDIO_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("ipuAudioOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioOffset.class)));
    tmpMap.put(_Fields.ACOUSTIC_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("acousticFeatures", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InterPausalUnit.class, metaDataMap);
  }

  public InterPausalUnit() {
  }

  public InterPausalUnit(
    long sequenceId,
    AudioOffset ipuAudioOffset)
  {
    this();
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    this.ipuAudioOffset = ipuAudioOffset;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InterPausalUnit(InterPausalUnit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceId = other.sequenceId;
    if (other.isSetIpuAudioOffset()) {
      this.ipuAudioOffset = new AudioOffset(other.ipuAudioOffset);
    }
    if (other.isSetAcousticFeatures()) {
      Map<String,Double> __this__acousticFeatures = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.acousticFeatures.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__acousticFeatures_copy_key = other_element_key;

        Double __this__acousticFeatures_copy_value = other_element_value;

        __this__acousticFeatures.put(__this__acousticFeatures_copy_key, __this__acousticFeatures_copy_value);
      }
      this.acousticFeatures = __this__acousticFeatures;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public InterPausalUnit deepCopy() {
    return new InterPausalUnit(this);
  }

  @Override
  public void clear() {
    setSequenceIdIsSet(false);
    this.sequenceId = 0;
    this.ipuAudioOffset = null;
    this.acousticFeatures = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The sequence id
   */
  public long getSequenceId() {
    return this.sequenceId;
  }

  /**
   * The sequence id
   */
  public InterPausalUnit setSequenceId(long sequenceId) {
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    return this;
  }

  public void unsetSequenceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  /** Returns true if field sequenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  public void setSequenceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCEID_ISSET_ID, value);
  }

  /**
   * The ipu audio offset
   */
  public AudioOffset getIpuAudioOffset() {
    return this.ipuAudioOffset;
  }

  /**
   * The ipu audio offset
   */
  public InterPausalUnit setIpuAudioOffset(AudioOffset ipuAudioOffset) {
    this.ipuAudioOffset = ipuAudioOffset;
    return this;
  }

  public void unsetIpuAudioOffset() {
    this.ipuAudioOffset = null;
  }

  /** Returns true if field ipuAudioOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetIpuAudioOffset() {
    return this.ipuAudioOffset != null;
  }

  public void setIpuAudioOffsetIsSet(boolean value) {
    if (!value) {
      this.ipuAudioOffset = null;
    }
  }

  public int getAcousticFeaturesSize() {
    return (this.acousticFeatures == null) ? 0 : this.acousticFeatures.size();
  }

  public void putToAcousticFeatures(String key, double val) {
    if (this.acousticFeatures == null) {
      this.acousticFeatures = new HashMap<String,Double>();
    }
    this.acousticFeatures.put(key, val);
  }

  /**
   * The acoustic features
   */
  public Map<String,Double> getAcousticFeatures() {
    return this.acousticFeatures;
  }

  /**
   * The acoustic features
   */
  public InterPausalUnit setAcousticFeatures(Map<String,Double> acousticFeatures) {
    this.acousticFeatures = acousticFeatures;
    return this;
  }

  public void unsetAcousticFeatures() {
    this.acousticFeatures = null;
  }

  /** Returns true if field acousticFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetAcousticFeatures() {
    return this.acousticFeatures != null;
  }

  public void setAcousticFeaturesIsSet(boolean value) {
    if (!value) {
      this.acousticFeatures = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public InterPausalUnit setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public InterPausalUnit setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public InterPausalUnit setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE_ID:
      if (value == null) {
        unsetSequenceId();
      } else {
        setSequenceId((Long)value);
      }
      break;

    case IPU_AUDIO_OFFSET:
      if (value == null) {
        unsetIpuAudioOffset();
      } else {
        setIpuAudioOffset((AudioOffset)value);
      }
      break;

    case ACOUSTIC_FEATURES:
      if (value == null) {
        unsetAcousticFeatures();
      } else {
        setAcousticFeatures((Map<String,Double>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_ID:
      return Long.valueOf(getSequenceId());

    case IPU_AUDIO_OFFSET:
      return getIpuAudioOffset();

    case ACOUSTIC_FEATURES:
      return getAcousticFeatures();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_ID:
      return isSetSequenceId();
    case IPU_AUDIO_OFFSET:
      return isSetIpuAudioOffset();
    case ACOUSTIC_FEATURES:
      return isSetAcousticFeatures();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InterPausalUnit)
      return this.equals((InterPausalUnit)that);
    return false;
  }

  public boolean equals(InterPausalUnit that) {
    if (that == null)
      return false;

    boolean this_present_sequenceId = true;
    boolean that_present_sequenceId = true;
    if (this_present_sequenceId || that_present_sequenceId) {
      if (!(this_present_sequenceId && that_present_sequenceId))
        return false;
      if (this.sequenceId != that.sequenceId)
        return false;
    }

    boolean this_present_ipuAudioOffset = true && this.isSetIpuAudioOffset();
    boolean that_present_ipuAudioOffset = true && that.isSetIpuAudioOffset();
    if (this_present_ipuAudioOffset || that_present_ipuAudioOffset) {
      if (!(this_present_ipuAudioOffset && that_present_ipuAudioOffset))
        return false;
      if (!this.ipuAudioOffset.equals(that.ipuAudioOffset))
        return false;
    }

    boolean this_present_acousticFeatures = true && this.isSetAcousticFeatures();
    boolean that_present_acousticFeatures = true && that.isSetAcousticFeatures();
    if (this_present_acousticFeatures || that_present_acousticFeatures) {
      if (!(this_present_acousticFeatures && that_present_acousticFeatures))
        return false;
      if (!this.acousticFeatures.equals(that.acousticFeatures))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InterPausalUnit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InterPausalUnit typedOther = (InterPausalUnit)other;

    lastComparison = Boolean.valueOf(isSetSequenceId()).compareTo(typedOther.isSetSequenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceId, typedOther.sequenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpuAudioOffset()).compareTo(typedOther.isSetIpuAudioOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpuAudioOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipuAudioOffset, typedOther.ipuAudioOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcousticFeatures()).compareTo(typedOther.isSetAcousticFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcousticFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acousticFeatures, typedOther.acousticFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InterPausalUnit(");
    boolean first = true;

    sb.append("sequenceId:");
    sb.append(this.sequenceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipuAudioOffset:");
    if (this.ipuAudioOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.ipuAudioOffset);
    }
    first = false;
    if (isSetAcousticFeatures()) {
      if (!first) sb.append(", ");
      sb.append("acousticFeatures:");
      if (this.acousticFeatures == null) {
        sb.append("null");
      } else {
        sb.append(this.acousticFeatures);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sequenceId' because it's a primitive and you chose the non-beans generator.
    if (ipuAudioOffset == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipuAudioOffset' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (ipuAudioOffset != null) {
      ipuAudioOffset.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InterPausalUnitStandardSchemeFactory implements SchemeFactory {
    public InterPausalUnitStandardScheme getScheme() {
      return new InterPausalUnitStandardScheme();
    }
  }

  private static class InterPausalUnitStandardScheme extends StandardScheme<InterPausalUnit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InterPausalUnit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceId = iprot.readI64();
              struct.setSequenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IPU_AUDIO_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ipuAudioOffset = new AudioOffset();
              struct.ipuAudioOffset.read(iprot);
              struct.setIpuAudioOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACOUSTIC_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map112 = iprot.readMapBegin();
                struct.acousticFeatures = new HashMap<String,Double>(2*_map112.size);
                for (int _i113 = 0; _i113 < _map112.size; ++_i113)
                {
                  String _key114; // required
                  double _val115; // required
                  _key114 = iprot.readString();
                  _val115 = iprot.readDouble();
                  struct.acousticFeatures.put(_key114, _val115);
                }
                iprot.readMapEnd();
              }
              struct.setAcousticFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSequenceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InterPausalUnit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_ID_FIELD_DESC);
      oprot.writeI64(struct.sequenceId);
      oprot.writeFieldEnd();
      if (struct.ipuAudioOffset != null) {
        oprot.writeFieldBegin(IPU_AUDIO_OFFSET_FIELD_DESC);
        struct.ipuAudioOffset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.acousticFeatures != null) {
        if (struct.isSetAcousticFeatures()) {
          oprot.writeFieldBegin(ACOUSTIC_FEATURES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.acousticFeatures.size()));
            for (Map.Entry<String, Double> _iter116 : struct.acousticFeatures.entrySet())
            {
              oprot.writeString(_iter116.getKey());
              oprot.writeDouble(_iter116.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InterPausalUnitTupleSchemeFactory implements SchemeFactory {
    public InterPausalUnitTupleScheme getScheme() {
      return new InterPausalUnitTupleScheme();
    }
  }

  private static class InterPausalUnitTupleScheme extends TupleScheme<InterPausalUnit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InterPausalUnit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sequenceId);
      struct.ipuAudioOffset.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetAcousticFeatures()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAcousticFeatures()) {
        {
          oprot.writeI32(struct.acousticFeatures.size());
          for (Map.Entry<String, Double> _iter117 : struct.acousticFeatures.entrySet())
          {
            oprot.writeString(_iter117.getKey());
            oprot.writeDouble(_iter117.getValue());
          }
        }
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InterPausalUnit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sequenceId = iprot.readI64();
      struct.setSequenceIdIsSet(true);
      struct.ipuAudioOffset = new AudioOffset();
      struct.ipuAudioOffset.read(iprot);
      struct.setIpuAudioOffsetIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map118 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.acousticFeatures = new HashMap<String,Double>(2*_map118.size);
          for (int _i119 = 0; _i119 < _map118.size; ++_i119)
          {
            String _key120; // required
            double _val121; // required
            _key120 = iprot.readString();
            _val121 = iprot.readDouble();
            struct.acousticFeatures.put(_key120, _val121);
          }
        }
        struct.setAcousticFeaturesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}