/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class PostQuote.
 */
public class PostQuote implements org.apache.thrift.TBase<PostQuote, PostQuote._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PostQuote");

  private static final org.apache.thrift.protocol.TField SEQUENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenOffset", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenStream", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("openTag", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CLOSE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTag", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_QUOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("subQuotes", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CHAR_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("charOffset", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PostQuoteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PostQuoteTupleSchemeFactory());
  }

  /**
   * The sequence id
   */
  public long sequenceId; // required
  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset tokenOffset; // required
  /**
   * The token stream
   */
  public TokenStream tokenStream; // required
  /**
   * The open tag
   */
  public Tag openTag; // required
  /**
   * The close tag
   */
  public Tag closeTag; // required
  /**
   * The quotes
   */
  public List<Integer> subQuotes; // optional
  /**
   * The char offset
   */
  public CharOffset charOffset; // optional
  /**
   * The post id
   */
  public String postId; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The sequence id
     */
    SEQUENCE_ID((short)1, "sequenceId"),
    /**
     * The token offset which is the index into token stream.
     */
    TOKEN_OFFSET((short)2, "tokenOffset"),
    /**
     * The token stream
     */
    TOKEN_STREAM((short)3, "tokenStream"),
    /**
     * The open tag
     */
    OPEN_TAG((short)4, "openTag"),
    /**
     * The close tag
     */
    CLOSE_TAG((short)5, "closeTag"),
    /**
     * The quotes
     */
    SUB_QUOTES((short)6, "subQuotes"),
    /**
     * The char offset
     */
    CHAR_OFFSET((short)7, "charOffset"),
    /**
     * The post id
     */
    POST_ID((short)8, "postId"),
    /**
     * The id
     */
    ID((short)9, "id"),
    /**
     * The value
     */
    VALUE((short)10, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)11, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_ID
          return SEQUENCE_ID;
        case 2: // TOKEN_OFFSET
          return TOKEN_OFFSET;
        case 3: // TOKEN_STREAM
          return TOKEN_STREAM;
        case 4: // OPEN_TAG
          return OPEN_TAG;
        case 5: // CLOSE_TAG
          return CLOSE_TAG;
        case 6: // SUB_QUOTES
          return SUB_QUOTES;
        case 7: // CHAR_OFFSET
          return CHAR_OFFSET;
        case 8: // POST_ID
          return POST_ID;
        case 9: // ID
          return ID;
        case 10: // VALUE
          return VALUE;
        case 11: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_QUOTES,_Fields.CHAR_OFFSET,_Fields.POST_ID,_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sequenceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("tokenOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenOffset.class)));
    tmpMap.put(_Fields.TOKEN_STREAM, new org.apache.thrift.meta_data.FieldMetaData("tokenStream", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenStream.class)));
    tmpMap.put(_Fields.OPEN_TAG, new org.apache.thrift.meta_data.FieldMetaData("openTag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tag.class)));
    tmpMap.put(_Fields.CLOSE_TAG, new org.apache.thrift.meta_data.FieldMetaData("closeTag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tag.class)));
    tmpMap.put(_Fields.SUB_QUOTES, new org.apache.thrift.meta_data.FieldMetaData("subQuotes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CHAR_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("charOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CharOffset.class)));
    tmpMap.put(_Fields.POST_ID, new org.apache.thrift.meta_data.FieldMetaData("postId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PostQuote.class, metaDataMap);
  }

  public PostQuote() {
  }

  public PostQuote(
    long sequenceId,
    TokenOffset tokenOffset,
    TokenStream tokenStream,
    Tag openTag,
    Tag closeTag)
  {
    this();
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    this.tokenOffset = tokenOffset;
    this.tokenStream = tokenStream;
    this.openTag = openTag;
    this.closeTag = closeTag;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PostQuote(PostQuote other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceId = other.sequenceId;
    if (other.isSetTokenOffset()) {
      this.tokenOffset = new TokenOffset(other.tokenOffset);
    }
    if (other.isSetTokenStream()) {
      this.tokenStream = new TokenStream(other.tokenStream);
    }
    if (other.isSetOpenTag()) {
      this.openTag = new Tag(other.openTag);
    }
    if (other.isSetCloseTag()) {
      this.closeTag = new Tag(other.closeTag);
    }
    if (other.isSetSubQuotes()) {
      List<Integer> __this__subQuotes = new ArrayList<Integer>();
      for (Integer other_element : other.subQuotes) {
        __this__subQuotes.add(other_element);
      }
      this.subQuotes = __this__subQuotes;
    }
    if (other.isSetCharOffset()) {
      this.charOffset = new CharOffset(other.charOffset);
    }
    if (other.isSetPostId()) {
      this.postId = other.postId;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public PostQuote deepCopy() {
    return new PostQuote(this);
  }

  @Override
  public void clear() {
    setSequenceIdIsSet(false);
    this.sequenceId = 0;
    this.tokenOffset = null;
    this.tokenStream = null;
    this.openTag = null;
    this.closeTag = null;
    this.subQuotes = null;
    this.charOffset = null;
    this.postId = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The sequence id
   */
  public long getSequenceId() {
    return this.sequenceId;
  }

  /**
   * The sequence id
   */
  public PostQuote setSequenceId(long sequenceId) {
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    return this;
  }

  public void unsetSequenceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  /** Returns true if field sequenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  public void setSequenceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCEID_ISSET_ID, value);
  }

  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset getTokenOffset() {
    return this.tokenOffset;
  }

  /**
   * The token offset which is the index into token stream.
   */
  public PostQuote setTokenOffset(TokenOffset tokenOffset) {
    this.tokenOffset = tokenOffset;
    return this;
  }

  public void unsetTokenOffset() {
    this.tokenOffset = null;
  }

  /** Returns true if field tokenOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenOffset() {
    return this.tokenOffset != null;
  }

  public void setTokenOffsetIsSet(boolean value) {
    if (!value) {
      this.tokenOffset = null;
    }
  }

  /**
   * The token stream
   */
  public TokenStream getTokenStream() {
    return this.tokenStream;
  }

  /**
   * The token stream
   */
  public PostQuote setTokenStream(TokenStream tokenStream) {
    this.tokenStream = tokenStream;
    return this;
  }

  public void unsetTokenStream() {
    this.tokenStream = null;
  }

  /** Returns true if field tokenStream is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenStream() {
    return this.tokenStream != null;
  }

  public void setTokenStreamIsSet(boolean value) {
    if (!value) {
      this.tokenStream = null;
    }
  }

  /**
   * The open tag
   */
  public Tag getOpenTag() {
    return this.openTag;
  }

  /**
   * The open tag
   */
  public PostQuote setOpenTag(Tag openTag) {
    this.openTag = openTag;
    return this;
  }

  public void unsetOpenTag() {
    this.openTag = null;
  }

  /** Returns true if field openTag is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenTag() {
    return this.openTag != null;
  }

  public void setOpenTagIsSet(boolean value) {
    if (!value) {
      this.openTag = null;
    }
  }

  /**
   * The close tag
   */
  public Tag getCloseTag() {
    return this.closeTag;
  }

  /**
   * The close tag
   */
  public PostQuote setCloseTag(Tag closeTag) {
    this.closeTag = closeTag;
    return this;
  }

  public void unsetCloseTag() {
    this.closeTag = null;
  }

  /** Returns true if field closeTag is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTag() {
    return this.closeTag != null;
  }

  public void setCloseTagIsSet(boolean value) {
    if (!value) {
      this.closeTag = null;
    }
  }

  public int getSubQuotesSize() {
    return (this.subQuotes == null) ? 0 : this.subQuotes.size();
  }

  public java.util.Iterator<Integer> getSubQuotesIterator() {
    return (this.subQuotes == null) ? null : this.subQuotes.iterator();
  }

  public void addToSubQuotes(int elem) {
    if (this.subQuotes == null) {
      this.subQuotes = new ArrayList<Integer>();
    }
    this.subQuotes.add(elem);
  }

  /**
   * The quotes
   */
  public List<Integer> getSubQuotes() {
    return this.subQuotes;
  }

  /**
   * The quotes
   */
  public PostQuote setSubQuotes(List<Integer> subQuotes) {
    this.subQuotes = subQuotes;
    return this;
  }

  public void unsetSubQuotes() {
    this.subQuotes = null;
  }

  /** Returns true if field subQuotes is set (has been assigned a value) and false otherwise */
  public boolean isSetSubQuotes() {
    return this.subQuotes != null;
  }

  public void setSubQuotesIsSet(boolean value) {
    if (!value) {
      this.subQuotes = null;
    }
  }

  /**
   * The char offset
   */
  public CharOffset getCharOffset() {
    return this.charOffset;
  }

  /**
   * The char offset
   */
  public PostQuote setCharOffset(CharOffset charOffset) {
    this.charOffset = charOffset;
    return this;
  }

  public void unsetCharOffset() {
    this.charOffset = null;
  }

  /** Returns true if field charOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetCharOffset() {
    return this.charOffset != null;
  }

  public void setCharOffsetIsSet(boolean value) {
    if (!value) {
      this.charOffset = null;
    }
  }

  /**
   * The post id
   */
  public String getPostId() {
    return this.postId;
  }

  /**
   * The post id
   */
  public PostQuote setPostId(String postId) {
    this.postId = postId;
    return this;
  }

  public void unsetPostId() {
    this.postId = null;
  }

  /** Returns true if field postId is set (has been assigned a value) and false otherwise */
  public boolean isSetPostId() {
    return this.postId != null;
  }

  public void setPostIdIsSet(boolean value) {
    if (!value) {
      this.postId = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public PostQuote setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public PostQuote setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public PostQuote setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE_ID:
      if (value == null) {
        unsetSequenceId();
      } else {
        setSequenceId((Long)value);
      }
      break;

    case TOKEN_OFFSET:
      if (value == null) {
        unsetTokenOffset();
      } else {
        setTokenOffset((TokenOffset)value);
      }
      break;

    case TOKEN_STREAM:
      if (value == null) {
        unsetTokenStream();
      } else {
        setTokenStream((TokenStream)value);
      }
      break;

    case OPEN_TAG:
      if (value == null) {
        unsetOpenTag();
      } else {
        setOpenTag((Tag)value);
      }
      break;

    case CLOSE_TAG:
      if (value == null) {
        unsetCloseTag();
      } else {
        setCloseTag((Tag)value);
      }
      break;

    case SUB_QUOTES:
      if (value == null) {
        unsetSubQuotes();
      } else {
        setSubQuotes((List<Integer>)value);
      }
      break;

    case CHAR_OFFSET:
      if (value == null) {
        unsetCharOffset();
      } else {
        setCharOffset((CharOffset)value);
      }
      break;

    case POST_ID:
      if (value == null) {
        unsetPostId();
      } else {
        setPostId((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_ID:
      return Long.valueOf(getSequenceId());

    case TOKEN_OFFSET:
      return getTokenOffset();

    case TOKEN_STREAM:
      return getTokenStream();

    case OPEN_TAG:
      return getOpenTag();

    case CLOSE_TAG:
      return getCloseTag();

    case SUB_QUOTES:
      return getSubQuotes();

    case CHAR_OFFSET:
      return getCharOffset();

    case POST_ID:
      return getPostId();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_ID:
      return isSetSequenceId();
    case TOKEN_OFFSET:
      return isSetTokenOffset();
    case TOKEN_STREAM:
      return isSetTokenStream();
    case OPEN_TAG:
      return isSetOpenTag();
    case CLOSE_TAG:
      return isSetCloseTag();
    case SUB_QUOTES:
      return isSetSubQuotes();
    case CHAR_OFFSET:
      return isSetCharOffset();
    case POST_ID:
      return isSetPostId();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PostQuote)
      return this.equals((PostQuote)that);
    return false;
  }

  public boolean equals(PostQuote that) {
    if (that == null)
      return false;

    boolean this_present_sequenceId = true;
    boolean that_present_sequenceId = true;
    if (this_present_sequenceId || that_present_sequenceId) {
      if (!(this_present_sequenceId && that_present_sequenceId))
        return false;
      if (this.sequenceId != that.sequenceId)
        return false;
    }

    boolean this_present_tokenOffset = true && this.isSetTokenOffset();
    boolean that_present_tokenOffset = true && that.isSetTokenOffset();
    if (this_present_tokenOffset || that_present_tokenOffset) {
      if (!(this_present_tokenOffset && that_present_tokenOffset))
        return false;
      if (!this.tokenOffset.equals(that.tokenOffset))
        return false;
    }

    boolean this_present_tokenStream = true && this.isSetTokenStream();
    boolean that_present_tokenStream = true && that.isSetTokenStream();
    if (this_present_tokenStream || that_present_tokenStream) {
      if (!(this_present_tokenStream && that_present_tokenStream))
        return false;
      if (!this.tokenStream.equals(that.tokenStream))
        return false;
    }

    boolean this_present_openTag = true && this.isSetOpenTag();
    boolean that_present_openTag = true && that.isSetOpenTag();
    if (this_present_openTag || that_present_openTag) {
      if (!(this_present_openTag && that_present_openTag))
        return false;
      if (!this.openTag.equals(that.openTag))
        return false;
    }

    boolean this_present_closeTag = true && this.isSetCloseTag();
    boolean that_present_closeTag = true && that.isSetCloseTag();
    if (this_present_closeTag || that_present_closeTag) {
      if (!(this_present_closeTag && that_present_closeTag))
        return false;
      if (!this.closeTag.equals(that.closeTag))
        return false;
    }

    boolean this_present_subQuotes = true && this.isSetSubQuotes();
    boolean that_present_subQuotes = true && that.isSetSubQuotes();
    if (this_present_subQuotes || that_present_subQuotes) {
      if (!(this_present_subQuotes && that_present_subQuotes))
        return false;
      if (!this.subQuotes.equals(that.subQuotes))
        return false;
    }

    boolean this_present_charOffset = true && this.isSetCharOffset();
    boolean that_present_charOffset = true && that.isSetCharOffset();
    if (this_present_charOffset || that_present_charOffset) {
      if (!(this_present_charOffset && that_present_charOffset))
        return false;
      if (!this.charOffset.equals(that.charOffset))
        return false;
    }

    boolean this_present_postId = true && this.isSetPostId();
    boolean that_present_postId = true && that.isSetPostId();
    if (this_present_postId || that_present_postId) {
      if (!(this_present_postId && that_present_postId))
        return false;
      if (!this.postId.equals(that.postId))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PostQuote other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PostQuote typedOther = (PostQuote)other;

    lastComparison = Boolean.valueOf(isSetSequenceId()).compareTo(typedOther.isSetSequenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceId, typedOther.sequenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenOffset()).compareTo(typedOther.isSetTokenOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenOffset, typedOther.tokenOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenStream()).compareTo(typedOther.isSetTokenStream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenStream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenStream, typedOther.tokenStream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenTag()).compareTo(typedOther.isSetOpenTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTag, typedOther.openTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTag()).compareTo(typedOther.isSetCloseTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTag, typedOther.closeTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubQuotes()).compareTo(typedOther.isSetSubQuotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubQuotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subQuotes, typedOther.subQuotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharOffset()).compareTo(typedOther.isSetCharOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charOffset, typedOther.charOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostId()).compareTo(typedOther.isSetPostId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postId, typedOther.postId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PostQuote(");
    boolean first = true;

    sb.append("sequenceId:");
    sb.append(this.sequenceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenOffset:");
    if (this.tokenOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenStream:");
    if (this.tokenStream == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenStream);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openTag:");
    if (this.openTag == null) {
      sb.append("null");
    } else {
      sb.append(this.openTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeTag:");
    if (this.closeTag == null) {
      sb.append("null");
    } else {
      sb.append(this.closeTag);
    }
    first = false;
    if (isSetSubQuotes()) {
      if (!first) sb.append(", ");
      sb.append("subQuotes:");
      if (this.subQuotes == null) {
        sb.append("null");
      } else {
        sb.append(this.subQuotes);
      }
      first = false;
    }
    if (isSetCharOffset()) {
      if (!first) sb.append(", ");
      sb.append("charOffset:");
      if (this.charOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.charOffset);
      }
      first = false;
    }
    if (isSetPostId()) {
      if (!first) sb.append(", ");
      sb.append("postId:");
      if (this.postId == null) {
        sb.append("null");
      } else {
        sb.append(this.postId);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sequenceId' because it's a primitive and you chose the non-beans generator.
    if (tokenOffset == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenOffset' was not present! Struct: " + toString());
    }
    if (tokenStream == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenStream' was not present! Struct: " + toString());
    }
    if (openTag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'openTag' was not present! Struct: " + toString());
    }
    if (closeTag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'closeTag' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tokenOffset != null) {
      tokenOffset.validate();
    }
    if (tokenStream != null) {
      tokenStream.validate();
    }
    if (openTag != null) {
      openTag.validate();
    }
    if (closeTag != null) {
      closeTag.validate();
    }
    if (charOffset != null) {
      charOffset.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PostQuoteStandardSchemeFactory implements SchemeFactory {
    public PostQuoteStandardScheme getScheme() {
      return new PostQuoteStandardScheme();
    }
  }

  private static class PostQuoteStandardScheme extends StandardScheme<PostQuote> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PostQuote struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceId = iprot.readI64();
              struct.setSequenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenOffset = new TokenOffset();
              struct.tokenOffset.read(iprot);
              struct.setTokenOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN_STREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenStream = new TokenStream();
              struct.tokenStream.read(iprot);
              struct.setTokenStreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.openTag = new Tag();
              struct.openTag.read(iprot);
              struct.setOpenTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLOSE_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.closeTag = new Tag();
              struct.closeTag.read(iprot);
              struct.setCloseTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_QUOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                struct.subQuotes = new ArrayList<Integer>(_list122.size);
                for (int _i123 = 0; _i123 < _list122.size; ++_i123)
                {
                  int _elem124; // required
                  _elem124 = iprot.readI32();
                  struct.subQuotes.add(_elem124);
                }
                iprot.readListEnd();
              }
              struct.setSubQuotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHAR_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.charOffset = new CharOffset();
              struct.charOffset.read(iprot);
              struct.setCharOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postId = iprot.readString();
              struct.setPostIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSequenceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PostQuote struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_ID_FIELD_DESC);
      oprot.writeI64(struct.sequenceId);
      oprot.writeFieldEnd();
      if (struct.tokenOffset != null) {
        oprot.writeFieldBegin(TOKEN_OFFSET_FIELD_DESC);
        struct.tokenOffset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokenStream != null) {
        oprot.writeFieldBegin(TOKEN_STREAM_FIELD_DESC);
        struct.tokenStream.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.openTag != null) {
        oprot.writeFieldBegin(OPEN_TAG_FIELD_DESC);
        struct.openTag.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.closeTag != null) {
        oprot.writeFieldBegin(CLOSE_TAG_FIELD_DESC);
        struct.closeTag.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.subQuotes != null) {
        if (struct.isSetSubQuotes()) {
          oprot.writeFieldBegin(SUB_QUOTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.subQuotes.size()));
            for (int _iter125 : struct.subQuotes)
            {
              oprot.writeI32(_iter125);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.charOffset != null) {
        if (struct.isSetCharOffset()) {
          oprot.writeFieldBegin(CHAR_OFFSET_FIELD_DESC);
          struct.charOffset.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.postId != null) {
        if (struct.isSetPostId()) {
          oprot.writeFieldBegin(POST_ID_FIELD_DESC);
          oprot.writeString(struct.postId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PostQuoteTupleSchemeFactory implements SchemeFactory {
    public PostQuoteTupleScheme getScheme() {
      return new PostQuoteTupleScheme();
    }
  }

  private static class PostQuoteTupleScheme extends TupleScheme<PostQuote> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PostQuote struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sequenceId);
      struct.tokenOffset.write(oprot);
      struct.tokenStream.write(oprot);
      struct.openTag.write(oprot);
      struct.closeTag.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetSubQuotes()) {
        optionals.set(0);
      }
      if (struct.isSetCharOffset()) {
        optionals.set(1);
      }
      if (struct.isSetPostId()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetValue()) {
        optionals.set(4);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSubQuotes()) {
        {
          oprot.writeI32(struct.subQuotes.size());
          for (int _iter126 : struct.subQuotes)
          {
            oprot.writeI32(_iter126);
          }
        }
      }
      if (struct.isSetCharOffset()) {
        struct.charOffset.write(oprot);
      }
      if (struct.isSetPostId()) {
        oprot.writeString(struct.postId);
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PostQuote struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sequenceId = iprot.readI64();
      struct.setSequenceIdIsSet(true);
      struct.tokenOffset = new TokenOffset();
      struct.tokenOffset.read(iprot);
      struct.setTokenOffsetIsSet(true);
      struct.tokenStream = new TokenStream();
      struct.tokenStream.read(iprot);
      struct.setTokenStreamIsSet(true);
      struct.openTag = new Tag();
      struct.openTag.read(iprot);
      struct.setOpenTagIsSet(true);
      struct.closeTag = new Tag();
      struct.closeTag.read(iprot);
      struct.setCloseTagIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.subQuotes = new ArrayList<Integer>(_list127.size);
          for (int _i128 = 0; _i128 < _list127.size; ++_i128)
          {
            int _elem129; // required
            _elem129 = iprot.readI32();
            struct.subQuotes.add(_elem129);
          }
        }
        struct.setSubQuotesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.charOffset = new CharOffset();
        struct.charOffset.read(iprot);
        struct.setCharOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.postId = iprot.readString();
        struct.setPostIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}