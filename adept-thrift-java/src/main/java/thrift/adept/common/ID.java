/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class ID defines an identifier for all instances of objects used in the
 * ADEPT framework. The ID is generated as a universally unique identifier
 * (UUID)
 */
public class ID implements org.apache.thrift.TBase<ID, ID._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ID");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("idStr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAX__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MAX_ID", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MIN__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MIN_ID", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IDStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IDTupleSchemeFactory());
  }

  /**
   * The id
   */
  public String id; // required
  /**
   * The id string
   */
  public String idStr; // required
  /**
   * The maximum possible id
   */
  public long MAX_ID; // required
  /**
   * The minimum possible id
   */
  public long MIN_ID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The id
     */
    ID((short)1, "id"),
    /**
     * The id string
     */
    ID_STR((short)2, "idStr"),
    /**
     * The maximum possible id
     */
    MAX__ID((short)3, "MAX_ID"),
    /**
     * The minimum possible id
     */
    MIN__ID((short)4, "MIN_ID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ID_STR
          return ID_STR;
        case 3: // MAX__ID
          return MAX__ID;
        case 4: // MIN__ID
          return MIN__ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_ID_ISSET_ID = 0;
  private static final int __MIN_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_STR, new org.apache.thrift.meta_data.FieldMetaData("idStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX__ID, new org.apache.thrift.meta_data.FieldMetaData("MAX_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN__ID, new org.apache.thrift.meta_data.FieldMetaData("MIN_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ID.class, metaDataMap);
  }

  public ID() {
  }

  public ID(
    String id,
    String idStr,
    long MAX_ID,
    long MIN_ID)
  {
    this();
    this.id = id;
    this.idStr = idStr;
    this.MAX_ID = MAX_ID;
    setMAX_IDIsSet(true);
    this.MIN_ID = MIN_ID;
    setMIN_IDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ID(ID other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetIdStr()) {
      this.idStr = other.idStr;
    }
    this.MAX_ID = other.MAX_ID;
    this.MIN_ID = other.MIN_ID;
  }

  public ID deepCopy() {
    return new ID(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.idStr = null;
    setMAX_IDIsSet(false);
    this.MAX_ID = 0;
    setMIN_IDIsSet(false);
    this.MIN_ID = 0;
  }

  /**
   * The id
   */
  public String getId() {
    return this.id;
  }

  /**
   * The id
   */
  public ID setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The id string
   */
  public String getIdStr() {
    return this.idStr;
  }

  /**
   * The id string
   */
  public ID setIdStr(String idStr) {
    this.idStr = idStr;
    return this;
  }

  public void unsetIdStr() {
    this.idStr = null;
  }

  /** Returns true if field idStr is set (has been assigned a value) and false otherwise */
  public boolean isSetIdStr() {
    return this.idStr != null;
  }

  public void setIdStrIsSet(boolean value) {
    if (!value) {
      this.idStr = null;
    }
  }

  /**
   * The maximum possible id
   */
  public long getMAX_ID() {
    return this.MAX_ID;
  }

  /**
   * The maximum possible id
   */
  public ID setMAX_ID(long MAX_ID) {
    this.MAX_ID = MAX_ID;
    setMAX_IDIsSet(true);
    return this;
  }

  public void unsetMAX_ID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ID_ISSET_ID);
  }

  /** Returns true if field MAX_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetMAX_ID() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ID_ISSET_ID);
  }

  public void setMAX_IDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ID_ISSET_ID, value);
  }

  /**
   * The minimum possible id
   */
  public long getMIN_ID() {
    return this.MIN_ID;
  }

  /**
   * The minimum possible id
   */
  public ID setMIN_ID(long MIN_ID) {
    this.MIN_ID = MIN_ID;
    setMIN_IDIsSet(true);
    return this;
  }

  public void unsetMIN_ID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ID_ISSET_ID);
  }

  /** Returns true if field MIN_ID is set (has been assigned a value) and false otherwise */
  public boolean isSetMIN_ID() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ID_ISSET_ID);
  }

  public void setMIN_IDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case ID_STR:
      if (value == null) {
        unsetIdStr();
      } else {
        setIdStr((String)value);
      }
      break;

    case MAX__ID:
      if (value == null) {
        unsetMAX_ID();
      } else {
        setMAX_ID((Long)value);
      }
      break;

    case MIN__ID:
      if (value == null) {
        unsetMIN_ID();
      } else {
        setMIN_ID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ID_STR:
      return getIdStr();

    case MAX__ID:
      return Long.valueOf(getMAX_ID());

    case MIN__ID:
      return Long.valueOf(getMIN_ID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ID_STR:
      return isSetIdStr();
    case MAX__ID:
      return isSetMAX_ID();
    case MIN__ID:
      return isSetMIN_ID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ID)
      return this.equals((ID)that);
    return false;
  }

  public boolean equals(ID that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_idStr = true && this.isSetIdStr();
    boolean that_present_idStr = true && that.isSetIdStr();
    if (this_present_idStr || that_present_idStr) {
      if (!(this_present_idStr && that_present_idStr))
        return false;
      if (!this.idStr.equals(that.idStr))
        return false;
    }

    boolean this_present_MAX_ID = true;
    boolean that_present_MAX_ID = true;
    if (this_present_MAX_ID || that_present_MAX_ID) {
      if (!(this_present_MAX_ID && that_present_MAX_ID))
        return false;
      if (this.MAX_ID != that.MAX_ID)
        return false;
    }

    boolean this_present_MIN_ID = true;
    boolean that_present_MIN_ID = true;
    if (this_present_MIN_ID || that_present_MIN_ID) {
      if (!(this_present_MIN_ID && that_present_MIN_ID))
        return false;
      if (this.MIN_ID != that.MIN_ID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ID other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ID typedOther = (ID)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdStr()).compareTo(typedOther.isSetIdStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idStr, typedOther.idStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMAX_ID()).compareTo(typedOther.isSetMAX_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMAX_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MAX_ID, typedOther.MAX_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMIN_ID()).compareTo(typedOther.isSetMIN_ID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIN_ID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MIN_ID, typedOther.MIN_ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ID(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idStr:");
    if (this.idStr == null) {
      sb.append("null");
    } else {
      sb.append(this.idStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MAX_ID:");
    sb.append(this.MAX_ID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MIN_ID:");
    sb.append(this.MIN_ID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IDStandardSchemeFactory implements SchemeFactory {
    public IDStandardScheme getScheme() {
      return new IDStandardScheme();
    }
  }

  private static class IDStandardScheme extends StandardScheme<ID> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ID struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idStr = iprot.readString();
              struct.setIdStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.MAX_ID = iprot.readI64();
              struct.setMAX_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.MIN_ID = iprot.readI64();
              struct.setMIN_IDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ID struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.idStr != null) {
        oprot.writeFieldBegin(ID_STR_FIELD_DESC);
        oprot.writeString(struct.idStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX__ID_FIELD_DESC);
      oprot.writeI64(struct.MAX_ID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN__ID_FIELD_DESC);
      oprot.writeI64(struct.MIN_ID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IDTupleSchemeFactory implements SchemeFactory {
    public IDTupleScheme getScheme() {
      return new IDTupleScheme();
    }
  }

  private static class IDTupleScheme extends TupleScheme<ID> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ID struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetIdStr()) {
        optionals.set(1);
      }
      if (struct.isSetMAX_ID()) {
        optionals.set(2);
      }
      if (struct.isSetMIN_ID()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetIdStr()) {
        oprot.writeString(struct.idStr);
      }
      if (struct.isSetMAX_ID()) {
        oprot.writeI64(struct.MAX_ID);
      }
      if (struct.isSetMIN_ID()) {
        oprot.writeI64(struct.MIN_ID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ID struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.idStr = iprot.readString();
        struct.setIdStrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.MAX_ID = iprot.readI64();
        struct.setMAX_IDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.MIN_ID = iprot.readI64();
        struct.setMIN_IDIsSet(true);
      }
    }
  }

}