/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ArgumentService {

  public interface Iface {

    public boolean addArgumentConfidencePair(ChunkUnion argument, double confidence) throws org.apache.thrift.TException;

    public Map<ChunkUnion,Double> getArgumentDistribution() throws org.apache.thrift.TException;

    public String getArgumentType() throws org.apache.thrift.TException;

    public ChunkUnion getBestArgument() throws org.apache.thrift.TException;

    public void setArgumentDistribution(Map<ChunkUnion,Double> argumentDistribution) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addArgumentConfidencePair(ChunkUnion argument, double confidence, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addArgumentConfidencePair_call> resultHandler) throws org.apache.thrift.TException;

    public void getArgumentDistribution(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getArgumentDistribution_call> resultHandler) throws org.apache.thrift.TException;

    public void getArgumentType(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getArgumentType_call> resultHandler) throws org.apache.thrift.TException;

    public void getBestArgument(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBestArgument_call> resultHandler) throws org.apache.thrift.TException;

    public void setArgumentDistribution(Map<ChunkUnion,Double> argumentDistribution, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setArgumentDistribution_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addArgumentConfidencePair(ChunkUnion argument, double confidence) throws org.apache.thrift.TException
    {
      send_addArgumentConfidencePair(argument, confidence);
      return recv_addArgumentConfidencePair();
    }

    public void send_addArgumentConfidencePair(ChunkUnion argument, double confidence) throws org.apache.thrift.TException
    {
      addArgumentConfidencePair_args args = new addArgumentConfidencePair_args();
      args.setArgument(argument);
      args.setConfidence(confidence);
      sendBase("addArgumentConfidencePair", args);
    }

    public boolean recv_addArgumentConfidencePair() throws org.apache.thrift.TException
    {
      addArgumentConfidencePair_result result = new addArgumentConfidencePair_result();
      receiveBase(result, "addArgumentConfidencePair");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addArgumentConfidencePair failed: unknown result");
    }

    public Map<ChunkUnion,Double> getArgumentDistribution() throws org.apache.thrift.TException
    {
      send_getArgumentDistribution();
      return recv_getArgumentDistribution();
    }

    public void send_getArgumentDistribution() throws org.apache.thrift.TException
    {
      getArgumentDistribution_args args = new getArgumentDistribution_args();
      sendBase("getArgumentDistribution", args);
    }

    public Map<ChunkUnion,Double> recv_getArgumentDistribution() throws org.apache.thrift.TException
    {
      getArgumentDistribution_result result = new getArgumentDistribution_result();
      receiveBase(result, "getArgumentDistribution");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArgumentDistribution failed: unknown result");
    }

    public String getArgumentType() throws org.apache.thrift.TException
    {
      send_getArgumentType();
      return recv_getArgumentType();
    }

    public void send_getArgumentType() throws org.apache.thrift.TException
    {
      getArgumentType_args args = new getArgumentType_args();
      sendBase("getArgumentType", args);
    }

    public String recv_getArgumentType() throws org.apache.thrift.TException
    {
      getArgumentType_result result = new getArgumentType_result();
      receiveBase(result, "getArgumentType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArgumentType failed: unknown result");
    }

    public ChunkUnion getBestArgument() throws org.apache.thrift.TException
    {
      send_getBestArgument();
      return recv_getBestArgument();
    }

    public void send_getBestArgument() throws org.apache.thrift.TException
    {
      getBestArgument_args args = new getBestArgument_args();
      sendBase("getBestArgument", args);
    }

    public ChunkUnion recv_getBestArgument() throws org.apache.thrift.TException
    {
      getBestArgument_result result = new getBestArgument_result();
      receiveBase(result, "getBestArgument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBestArgument failed: unknown result");
    }

    public void setArgumentDistribution(Map<ChunkUnion,Double> argumentDistribution) throws org.apache.thrift.TException
    {
      send_setArgumentDistribution(argumentDistribution);
      recv_setArgumentDistribution();
    }

    public void send_setArgumentDistribution(Map<ChunkUnion,Double> argumentDistribution) throws org.apache.thrift.TException
    {
      setArgumentDistribution_args args = new setArgumentDistribution_args();
      args.setArgumentDistribution(argumentDistribution);
      sendBase("setArgumentDistribution", args);
    }

    public void recv_setArgumentDistribution() throws org.apache.thrift.TException
    {
      setArgumentDistribution_result result = new setArgumentDistribution_result();
      receiveBase(result, "setArgumentDistribution");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addArgumentConfidencePair(ChunkUnion argument, double confidence, org.apache.thrift.async.AsyncMethodCallback<addArgumentConfidencePair_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addArgumentConfidencePair_call method_call = new addArgumentConfidencePair_call(argument, confidence, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addArgumentConfidencePair_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChunkUnion argument;
      private double confidence;
      public addArgumentConfidencePair_call(ChunkUnion argument, double confidence, org.apache.thrift.async.AsyncMethodCallback<addArgumentConfidencePair_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.argument = argument;
        this.confidence = confidence;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addArgumentConfidencePair", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addArgumentConfidencePair_args args = new addArgumentConfidencePair_args();
        args.setArgument(argument);
        args.setConfidence(confidence);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addArgumentConfidencePair();
      }
    }

    public void getArgumentDistribution(org.apache.thrift.async.AsyncMethodCallback<getArgumentDistribution_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArgumentDistribution_call method_call = new getArgumentDistribution_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArgumentDistribution_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getArgumentDistribution_call(org.apache.thrift.async.AsyncMethodCallback<getArgumentDistribution_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArgumentDistribution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArgumentDistribution_args args = new getArgumentDistribution_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<ChunkUnion,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArgumentDistribution();
      }
    }

    public void getArgumentType(org.apache.thrift.async.AsyncMethodCallback<getArgumentType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArgumentType_call method_call = new getArgumentType_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArgumentType_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getArgumentType_call(org.apache.thrift.async.AsyncMethodCallback<getArgumentType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArgumentType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArgumentType_args args = new getArgumentType_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArgumentType();
      }
    }

    public void getBestArgument(org.apache.thrift.async.AsyncMethodCallback<getBestArgument_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBestArgument_call method_call = new getBestArgument_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBestArgument_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getBestArgument_call(org.apache.thrift.async.AsyncMethodCallback<getBestArgument_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBestArgument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBestArgument_args args = new getBestArgument_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChunkUnion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBestArgument();
      }
    }

    public void setArgumentDistribution(Map<ChunkUnion,Double> argumentDistribution, org.apache.thrift.async.AsyncMethodCallback<setArgumentDistribution_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setArgumentDistribution_call method_call = new setArgumentDistribution_call(argumentDistribution, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setArgumentDistribution_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<ChunkUnion,Double> argumentDistribution;
      public setArgumentDistribution_call(Map<ChunkUnion,Double> argumentDistribution, org.apache.thrift.async.AsyncMethodCallback<setArgumentDistribution_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.argumentDistribution = argumentDistribution;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setArgumentDistribution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setArgumentDistribution_args args = new setArgumentDistribution_args();
        args.setArgumentDistribution(argumentDistribution);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setArgumentDistribution();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addArgumentConfidencePair", new addArgumentConfidencePair());
      processMap.put("getArgumentDistribution", new getArgumentDistribution());
      processMap.put("getArgumentType", new getArgumentType());
      processMap.put("getBestArgument", new getBestArgument());
      processMap.put("setArgumentDistribution", new setArgumentDistribution());
      return processMap;
    }

    public static class addArgumentConfidencePair<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addArgumentConfidencePair_args> {
      public addArgumentConfidencePair() {
        super("addArgumentConfidencePair");
      }

      public addArgumentConfidencePair_args getEmptyArgsInstance() {
        return new addArgumentConfidencePair_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addArgumentConfidencePair_result getResult(I iface, addArgumentConfidencePair_args args) throws org.apache.thrift.TException {
        addArgumentConfidencePair_result result = new addArgumentConfidencePair_result();
        result.success = iface.addArgumentConfidencePair(args.argument, args.confidence);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getArgumentDistribution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArgumentDistribution_args> {
      public getArgumentDistribution() {
        super("getArgumentDistribution");
      }

      public getArgumentDistribution_args getEmptyArgsInstance() {
        return new getArgumentDistribution_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getArgumentDistribution_result getResult(I iface, getArgumentDistribution_args args) throws org.apache.thrift.TException {
        getArgumentDistribution_result result = new getArgumentDistribution_result();
        result.success = iface.getArgumentDistribution();
        return result;
      }
    }

    public static class getArgumentType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArgumentType_args> {
      public getArgumentType() {
        super("getArgumentType");
      }

      public getArgumentType_args getEmptyArgsInstance() {
        return new getArgumentType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getArgumentType_result getResult(I iface, getArgumentType_args args) throws org.apache.thrift.TException {
        getArgumentType_result result = new getArgumentType_result();
        result.success = iface.getArgumentType();
        return result;
      }
    }

    public static class getBestArgument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBestArgument_args> {
      public getBestArgument() {
        super("getBestArgument");
      }

      public getBestArgument_args getEmptyArgsInstance() {
        return new getBestArgument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBestArgument_result getResult(I iface, getBestArgument_args args) throws org.apache.thrift.TException {
        getBestArgument_result result = new getBestArgument_result();
        result.success = iface.getBestArgument();
        return result;
      }
    }

    public static class setArgumentDistribution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setArgumentDistribution_args> {
      public setArgumentDistribution() {
        super("setArgumentDistribution");
      }

      public setArgumentDistribution_args getEmptyArgsInstance() {
        return new setArgumentDistribution_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setArgumentDistribution_result getResult(I iface, setArgumentDistribution_args args) throws org.apache.thrift.TException {
        setArgumentDistribution_result result = new setArgumentDistribution_result();
        iface.setArgumentDistribution(args.argumentDistribution);
        return result;
      }
    }

  }

  public static class addArgumentConfidencePair_args implements org.apache.thrift.TBase<addArgumentConfidencePair_args, addArgumentConfidencePair_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addArgumentConfidencePair_args");

    private static final org.apache.thrift.protocol.TField ARGUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("argument", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addArgumentConfidencePair_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addArgumentConfidencePair_argsTupleSchemeFactory());
    }

    public ChunkUnion argument; // required
    public double confidence; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARGUMENT((short)1, "argument"),
      CONFIDENCE((short)2, "confidence");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARGUMENT
            return ARGUMENT;
          case 2: // CONFIDENCE
            return CONFIDENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONFIDENCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARGUMENT, new org.apache.thrift.meta_data.FieldMetaData("argument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class)));
      tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addArgumentConfidencePair_args.class, metaDataMap);
    }

    public addArgumentConfidencePair_args() {
    }

    public addArgumentConfidencePair_args(
      ChunkUnion argument,
      double confidence)
    {
      this();
      this.argument = argument;
      this.confidence = confidence;
      setConfidenceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addArgumentConfidencePair_args(addArgumentConfidencePair_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetArgument()) {
        this.argument = new ChunkUnion(other.argument);
      }
      this.confidence = other.confidence;
    }

    public addArgumentConfidencePair_args deepCopy() {
      return new addArgumentConfidencePair_args(this);
    }

    @Override
    public void clear() {
      this.argument = null;
      setConfidenceIsSet(false);
      this.confidence = 0.0;
    }

    public ChunkUnion getArgument() {
      return this.argument;
    }

    public addArgumentConfidencePair_args setArgument(ChunkUnion argument) {
      this.argument = argument;
      return this;
    }

    public void unsetArgument() {
      this.argument = null;
    }

    /** Returns true if field argument is set (has been assigned a value) and false otherwise */
    public boolean isSetArgument() {
      return this.argument != null;
    }

    public void setArgumentIsSet(boolean value) {
      if (!value) {
        this.argument = null;
      }
    }

    public double getConfidence() {
      return this.confidence;
    }

    public addArgumentConfidencePair_args setConfidence(double confidence) {
      this.confidence = confidence;
      setConfidenceIsSet(true);
      return this;
    }

    public void unsetConfidence() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
    }

    /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
    public boolean isSetConfidence() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
    }

    public void setConfidenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARGUMENT:
        if (value == null) {
          unsetArgument();
        } else {
          setArgument((ChunkUnion)value);
        }
        break;

      case CONFIDENCE:
        if (value == null) {
          unsetConfidence();
        } else {
          setConfidence((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARGUMENT:
        return getArgument();

      case CONFIDENCE:
        return Double.valueOf(getConfidence());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARGUMENT:
        return isSetArgument();
      case CONFIDENCE:
        return isSetConfidence();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addArgumentConfidencePair_args)
        return this.equals((addArgumentConfidencePair_args)that);
      return false;
    }

    public boolean equals(addArgumentConfidencePair_args that) {
      if (that == null)
        return false;

      boolean this_present_argument = true && this.isSetArgument();
      boolean that_present_argument = true && that.isSetArgument();
      if (this_present_argument || that_present_argument) {
        if (!(this_present_argument && that_present_argument))
          return false;
        if (!this.argument.equals(that.argument))
          return false;
      }

      boolean this_present_confidence = true;
      boolean that_present_confidence = true;
      if (this_present_confidence || that_present_confidence) {
        if (!(this_present_confidence && that_present_confidence))
          return false;
        if (this.confidence != that.confidence)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addArgumentConfidencePair_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addArgumentConfidencePair_args typedOther = (addArgumentConfidencePair_args)other;

      lastComparison = Boolean.valueOf(isSetArgument()).compareTo(typedOther.isSetArgument());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgument()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argument, typedOther.argument);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(typedOther.isSetConfidence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfidence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, typedOther.confidence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addArgumentConfidencePair_args(");
      boolean first = true;

      sb.append("argument:");
      if (this.argument == null) {
        sb.append("null");
      } else {
        sb.append(this.argument);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addArgumentConfidencePair_argsStandardSchemeFactory implements SchemeFactory {
      public addArgumentConfidencePair_argsStandardScheme getScheme() {
        return new addArgumentConfidencePair_argsStandardScheme();
      }
    }

    private static class addArgumentConfidencePair_argsStandardScheme extends StandardScheme<addArgumentConfidencePair_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addArgumentConfidencePair_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARGUMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.argument = new ChunkUnion();
                struct.argument.read(iprot);
                struct.setArgumentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIDENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.confidence = iprot.readDouble();
                struct.setConfidenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addArgumentConfidencePair_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.argument != null) {
          oprot.writeFieldBegin(ARGUMENT_FIELD_DESC);
          struct.argument.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addArgumentConfidencePair_argsTupleSchemeFactory implements SchemeFactory {
      public addArgumentConfidencePair_argsTupleScheme getScheme() {
        return new addArgumentConfidencePair_argsTupleScheme();
      }
    }

    private static class addArgumentConfidencePair_argsTupleScheme extends TupleScheme<addArgumentConfidencePair_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addArgumentConfidencePair_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArgument()) {
          optionals.set(0);
        }
        if (struct.isSetConfidence()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetArgument()) {
          struct.argument.write(oprot);
        }
        if (struct.isSetConfidence()) {
          oprot.writeDouble(struct.confidence);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addArgumentConfidencePair_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.argument = new ChunkUnion();
          struct.argument.read(iprot);
          struct.setArgumentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.confidence = iprot.readDouble();
          struct.setConfidenceIsSet(true);
        }
      }
    }

  }

  public static class addArgumentConfidencePair_result implements org.apache.thrift.TBase<addArgumentConfidencePair_result, addArgumentConfidencePair_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addArgumentConfidencePair_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addArgumentConfidencePair_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addArgumentConfidencePair_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addArgumentConfidencePair_result.class, metaDataMap);
    }

    public addArgumentConfidencePair_result() {
    }

    public addArgumentConfidencePair_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addArgumentConfidencePair_result(addArgumentConfidencePair_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addArgumentConfidencePair_result deepCopy() {
      return new addArgumentConfidencePair_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addArgumentConfidencePair_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addArgumentConfidencePair_result)
        return this.equals((addArgumentConfidencePair_result)that);
      return false;
    }

    public boolean equals(addArgumentConfidencePair_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addArgumentConfidencePair_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addArgumentConfidencePair_result typedOther = (addArgumentConfidencePair_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addArgumentConfidencePair_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addArgumentConfidencePair_resultStandardSchemeFactory implements SchemeFactory {
      public addArgumentConfidencePair_resultStandardScheme getScheme() {
        return new addArgumentConfidencePair_resultStandardScheme();
      }
    }

    private static class addArgumentConfidencePair_resultStandardScheme extends StandardScheme<addArgumentConfidencePair_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addArgumentConfidencePair_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addArgumentConfidencePair_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addArgumentConfidencePair_resultTupleSchemeFactory implements SchemeFactory {
      public addArgumentConfidencePair_resultTupleScheme getScheme() {
        return new addArgumentConfidencePair_resultTupleScheme();
      }
    }

    private static class addArgumentConfidencePair_resultTupleScheme extends TupleScheme<addArgumentConfidencePair_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addArgumentConfidencePair_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addArgumentConfidencePair_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getArgumentDistribution_args implements org.apache.thrift.TBase<getArgumentDistribution_args, getArgumentDistribution_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArgumentDistribution_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArgumentDistribution_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArgumentDistribution_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArgumentDistribution_args.class, metaDataMap);
    }

    public getArgumentDistribution_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArgumentDistribution_args(getArgumentDistribution_args other) {
    }

    public getArgumentDistribution_args deepCopy() {
      return new getArgumentDistribution_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArgumentDistribution_args)
        return this.equals((getArgumentDistribution_args)that);
      return false;
    }

    public boolean equals(getArgumentDistribution_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getArgumentDistribution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getArgumentDistribution_args typedOther = (getArgumentDistribution_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArgumentDistribution_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArgumentDistribution_argsStandardSchemeFactory implements SchemeFactory {
      public getArgumentDistribution_argsStandardScheme getScheme() {
        return new getArgumentDistribution_argsStandardScheme();
      }
    }

    private static class getArgumentDistribution_argsStandardScheme extends StandardScheme<getArgumentDistribution_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArgumentDistribution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArgumentDistribution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArgumentDistribution_argsTupleSchemeFactory implements SchemeFactory {
      public getArgumentDistribution_argsTupleScheme getScheme() {
        return new getArgumentDistribution_argsTupleScheme();
      }
    }

    private static class getArgumentDistribution_argsTupleScheme extends TupleScheme<getArgumentDistribution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArgumentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArgumentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getArgumentDistribution_result implements org.apache.thrift.TBase<getArgumentDistribution_result, getArgumentDistribution_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArgumentDistribution_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArgumentDistribution_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArgumentDistribution_resultTupleSchemeFactory());
    }

    public Map<ChunkUnion,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArgumentDistribution_result.class, metaDataMap);
    }

    public getArgumentDistribution_result() {
    }

    public getArgumentDistribution_result(
      Map<ChunkUnion,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArgumentDistribution_result(getArgumentDistribution_result other) {
      if (other.isSetSuccess()) {
        Map<ChunkUnion,Double> __this__success = new HashMap<ChunkUnion,Double>();
        for (Map.Entry<ChunkUnion, Double> other_element : other.success.entrySet()) {

          ChunkUnion other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          ChunkUnion __this__success_copy_key = new ChunkUnion(other_element_key);

          Double __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getArgumentDistribution_result deepCopy() {
      return new getArgumentDistribution_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(ChunkUnion key, double val) {
      if (this.success == null) {
        this.success = new HashMap<ChunkUnion,Double>();
      }
      this.success.put(key, val);
    }

    public Map<ChunkUnion,Double> getSuccess() {
      return this.success;
    }

    public getArgumentDistribution_result setSuccess(Map<ChunkUnion,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<ChunkUnion,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArgumentDistribution_result)
        return this.equals((getArgumentDistribution_result)that);
      return false;
    }

    public boolean equals(getArgumentDistribution_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getArgumentDistribution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getArgumentDistribution_result typedOther = (getArgumentDistribution_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArgumentDistribution_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArgumentDistribution_resultStandardSchemeFactory implements SchemeFactory {
      public getArgumentDistribution_resultStandardScheme getScheme() {
        return new getArgumentDistribution_resultStandardScheme();
      }
    }

    private static class getArgumentDistribution_resultStandardScheme extends StandardScheme<getArgumentDistribution_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArgumentDistribution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map552 = iprot.readMapBegin();
                  struct.success = new HashMap<ChunkUnion,Double>(2*_map552.size);
                  for (int _i553 = 0; _i553 < _map552.size; ++_i553)
                  {
                    ChunkUnion _key554; // required
                    double _val555; // required
                    _key554 = new ChunkUnion();
                    _key554.read(iprot);
                    _val555 = iprot.readDouble();
                    struct.success.put(_key554, _val555);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArgumentDistribution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<ChunkUnion, Double> _iter556 : struct.success.entrySet())
            {
              _iter556.getKey().write(oprot);
              oprot.writeDouble(_iter556.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArgumentDistribution_resultTupleSchemeFactory implements SchemeFactory {
      public getArgumentDistribution_resultTupleScheme getScheme() {
        return new getArgumentDistribution_resultTupleScheme();
      }
    }

    private static class getArgumentDistribution_resultTupleScheme extends TupleScheme<getArgumentDistribution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArgumentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<ChunkUnion, Double> _iter557 : struct.success.entrySet())
            {
              _iter557.getKey().write(oprot);
              oprot.writeDouble(_iter557.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArgumentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map558 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<ChunkUnion,Double>(2*_map558.size);
            for (int _i559 = 0; _i559 < _map558.size; ++_i559)
            {
              ChunkUnion _key560; // required
              double _val561; // required
              _key560 = new ChunkUnion();
              _key560.read(iprot);
              _val561 = iprot.readDouble();
              struct.success.put(_key560, _val561);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getArgumentType_args implements org.apache.thrift.TBase<getArgumentType_args, getArgumentType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArgumentType_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArgumentType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArgumentType_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArgumentType_args.class, metaDataMap);
    }

    public getArgumentType_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArgumentType_args(getArgumentType_args other) {
    }

    public getArgumentType_args deepCopy() {
      return new getArgumentType_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArgumentType_args)
        return this.equals((getArgumentType_args)that);
      return false;
    }

    public boolean equals(getArgumentType_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getArgumentType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getArgumentType_args typedOther = (getArgumentType_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArgumentType_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArgumentType_argsStandardSchemeFactory implements SchemeFactory {
      public getArgumentType_argsStandardScheme getScheme() {
        return new getArgumentType_argsStandardScheme();
      }
    }

    private static class getArgumentType_argsStandardScheme extends StandardScheme<getArgumentType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArgumentType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArgumentType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArgumentType_argsTupleSchemeFactory implements SchemeFactory {
      public getArgumentType_argsTupleScheme getScheme() {
        return new getArgumentType_argsTupleScheme();
      }
    }

    private static class getArgumentType_argsTupleScheme extends TupleScheme<getArgumentType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArgumentType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArgumentType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getArgumentType_result implements org.apache.thrift.TBase<getArgumentType_result, getArgumentType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArgumentType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArgumentType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArgumentType_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArgumentType_result.class, metaDataMap);
    }

    public getArgumentType_result() {
    }

    public getArgumentType_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArgumentType_result(getArgumentType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getArgumentType_result deepCopy() {
      return new getArgumentType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getArgumentType_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArgumentType_result)
        return this.equals((getArgumentType_result)that);
      return false;
    }

    public boolean equals(getArgumentType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getArgumentType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getArgumentType_result typedOther = (getArgumentType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArgumentType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArgumentType_resultStandardSchemeFactory implements SchemeFactory {
      public getArgumentType_resultStandardScheme getScheme() {
        return new getArgumentType_resultStandardScheme();
      }
    }

    private static class getArgumentType_resultStandardScheme extends StandardScheme<getArgumentType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArgumentType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArgumentType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArgumentType_resultTupleSchemeFactory implements SchemeFactory {
      public getArgumentType_resultTupleScheme getScheme() {
        return new getArgumentType_resultTupleScheme();
      }
    }

    private static class getArgumentType_resultTupleScheme extends TupleScheme<getArgumentType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArgumentType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArgumentType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBestArgument_args implements org.apache.thrift.TBase<getBestArgument_args, getBestArgument_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBestArgument_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBestArgument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBestArgument_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBestArgument_args.class, metaDataMap);
    }

    public getBestArgument_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBestArgument_args(getBestArgument_args other) {
    }

    public getBestArgument_args deepCopy() {
      return new getBestArgument_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBestArgument_args)
        return this.equals((getBestArgument_args)that);
      return false;
    }

    public boolean equals(getBestArgument_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBestArgument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBestArgument_args typedOther = (getBestArgument_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBestArgument_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBestArgument_argsStandardSchemeFactory implements SchemeFactory {
      public getBestArgument_argsStandardScheme getScheme() {
        return new getBestArgument_argsStandardScheme();
      }
    }

    private static class getBestArgument_argsStandardScheme extends StandardScheme<getBestArgument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBestArgument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBestArgument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBestArgument_argsTupleSchemeFactory implements SchemeFactory {
      public getBestArgument_argsTupleScheme getScheme() {
        return new getBestArgument_argsTupleScheme();
      }
    }

    private static class getBestArgument_argsTupleScheme extends TupleScheme<getBestArgument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBestArgument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBestArgument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getBestArgument_result implements org.apache.thrift.TBase<getBestArgument_result, getBestArgument_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBestArgument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBestArgument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBestArgument_resultTupleSchemeFactory());
    }

    public ChunkUnion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBestArgument_result.class, metaDataMap);
    }

    public getBestArgument_result() {
    }

    public getBestArgument_result(
      ChunkUnion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBestArgument_result(getBestArgument_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChunkUnion(other.success);
      }
    }

    public getBestArgument_result deepCopy() {
      return new getBestArgument_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ChunkUnion getSuccess() {
      return this.success;
    }

    public getBestArgument_result setSuccess(ChunkUnion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChunkUnion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBestArgument_result)
        return this.equals((getBestArgument_result)that);
      return false;
    }

    public boolean equals(getBestArgument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBestArgument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBestArgument_result typedOther = (getBestArgument_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBestArgument_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBestArgument_resultStandardSchemeFactory implements SchemeFactory {
      public getBestArgument_resultStandardScheme getScheme() {
        return new getBestArgument_resultStandardScheme();
      }
    }

    private static class getBestArgument_resultStandardScheme extends StandardScheme<getBestArgument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBestArgument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChunkUnion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBestArgument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBestArgument_resultTupleSchemeFactory implements SchemeFactory {
      public getBestArgument_resultTupleScheme getScheme() {
        return new getBestArgument_resultTupleScheme();
      }
    }

    private static class getBestArgument_resultTupleScheme extends TupleScheme<getBestArgument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBestArgument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBestArgument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ChunkUnion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setArgumentDistribution_args implements org.apache.thrift.TBase<setArgumentDistribution_args, setArgumentDistribution_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setArgumentDistribution_args");

    private static final org.apache.thrift.protocol.TField ARGUMENT_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("argumentDistribution", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setArgumentDistribution_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setArgumentDistribution_argsTupleSchemeFactory());
    }

    public Map<ChunkUnion,Double> argumentDistribution; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARGUMENT_DISTRIBUTION((short)1, "argumentDistribution");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARGUMENT_DISTRIBUTION
            return ARGUMENT_DISTRIBUTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARGUMENT_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("argumentDistribution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setArgumentDistribution_args.class, metaDataMap);
    }

    public setArgumentDistribution_args() {
    }

    public setArgumentDistribution_args(
      Map<ChunkUnion,Double> argumentDistribution)
    {
      this();
      this.argumentDistribution = argumentDistribution;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setArgumentDistribution_args(setArgumentDistribution_args other) {
      if (other.isSetArgumentDistribution()) {
        Map<ChunkUnion,Double> __this__argumentDistribution = new HashMap<ChunkUnion,Double>();
        for (Map.Entry<ChunkUnion, Double> other_element : other.argumentDistribution.entrySet()) {

          ChunkUnion other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          ChunkUnion __this__argumentDistribution_copy_key = new ChunkUnion(other_element_key);

          Double __this__argumentDistribution_copy_value = other_element_value;

          __this__argumentDistribution.put(__this__argumentDistribution_copy_key, __this__argumentDistribution_copy_value);
        }
        this.argumentDistribution = __this__argumentDistribution;
      }
    }

    public setArgumentDistribution_args deepCopy() {
      return new setArgumentDistribution_args(this);
    }

    @Override
    public void clear() {
      this.argumentDistribution = null;
    }

    public int getArgumentDistributionSize() {
      return (this.argumentDistribution == null) ? 0 : this.argumentDistribution.size();
    }

    public void putToArgumentDistribution(ChunkUnion key, double val) {
      if (this.argumentDistribution == null) {
        this.argumentDistribution = new HashMap<ChunkUnion,Double>();
      }
      this.argumentDistribution.put(key, val);
    }

    public Map<ChunkUnion,Double> getArgumentDistribution() {
      return this.argumentDistribution;
    }

    public setArgumentDistribution_args setArgumentDistribution(Map<ChunkUnion,Double> argumentDistribution) {
      this.argumentDistribution = argumentDistribution;
      return this;
    }

    public void unsetArgumentDistribution() {
      this.argumentDistribution = null;
    }

    /** Returns true if field argumentDistribution is set (has been assigned a value) and false otherwise */
    public boolean isSetArgumentDistribution() {
      return this.argumentDistribution != null;
    }

    public void setArgumentDistributionIsSet(boolean value) {
      if (!value) {
        this.argumentDistribution = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARGUMENT_DISTRIBUTION:
        if (value == null) {
          unsetArgumentDistribution();
        } else {
          setArgumentDistribution((Map<ChunkUnion,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARGUMENT_DISTRIBUTION:
        return getArgumentDistribution();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARGUMENT_DISTRIBUTION:
        return isSetArgumentDistribution();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setArgumentDistribution_args)
        return this.equals((setArgumentDistribution_args)that);
      return false;
    }

    public boolean equals(setArgumentDistribution_args that) {
      if (that == null)
        return false;

      boolean this_present_argumentDistribution = true && this.isSetArgumentDistribution();
      boolean that_present_argumentDistribution = true && that.isSetArgumentDistribution();
      if (this_present_argumentDistribution || that_present_argumentDistribution) {
        if (!(this_present_argumentDistribution && that_present_argumentDistribution))
          return false;
        if (!this.argumentDistribution.equals(that.argumentDistribution))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setArgumentDistribution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setArgumentDistribution_args typedOther = (setArgumentDistribution_args)other;

      lastComparison = Boolean.valueOf(isSetArgumentDistribution()).compareTo(typedOther.isSetArgumentDistribution());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgumentDistribution()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argumentDistribution, typedOther.argumentDistribution);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setArgumentDistribution_args(");
      boolean first = true;

      sb.append("argumentDistribution:");
      if (this.argumentDistribution == null) {
        sb.append("null");
      } else {
        sb.append(this.argumentDistribution);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setArgumentDistribution_argsStandardSchemeFactory implements SchemeFactory {
      public setArgumentDistribution_argsStandardScheme getScheme() {
        return new setArgumentDistribution_argsStandardScheme();
      }
    }

    private static class setArgumentDistribution_argsStandardScheme extends StandardScheme<setArgumentDistribution_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setArgumentDistribution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARGUMENT_DISTRIBUTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map562 = iprot.readMapBegin();
                  struct.argumentDistribution = new HashMap<ChunkUnion,Double>(2*_map562.size);
                  for (int _i563 = 0; _i563 < _map562.size; ++_i563)
                  {
                    ChunkUnion _key564; // required
                    double _val565; // required
                    _key564 = new ChunkUnion();
                    _key564.read(iprot);
                    _val565 = iprot.readDouble();
                    struct.argumentDistribution.put(_key564, _val565);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentDistributionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setArgumentDistribution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.argumentDistribution != null) {
          oprot.writeFieldBegin(ARGUMENT_DISTRIBUTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, struct.argumentDistribution.size()));
            for (Map.Entry<ChunkUnion, Double> _iter566 : struct.argumentDistribution.entrySet())
            {
              _iter566.getKey().write(oprot);
              oprot.writeDouble(_iter566.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setArgumentDistribution_argsTupleSchemeFactory implements SchemeFactory {
      public setArgumentDistribution_argsTupleScheme getScheme() {
        return new setArgumentDistribution_argsTupleScheme();
      }
    }

    private static class setArgumentDistribution_argsTupleScheme extends TupleScheme<setArgumentDistribution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setArgumentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArgumentDistribution()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArgumentDistribution()) {
          {
            oprot.writeI32(struct.argumentDistribution.size());
            for (Map.Entry<ChunkUnion, Double> _iter567 : struct.argumentDistribution.entrySet())
            {
              _iter567.getKey().write(oprot);
              oprot.writeDouble(_iter567.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setArgumentDistribution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map568 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.argumentDistribution = new HashMap<ChunkUnion,Double>(2*_map568.size);
            for (int _i569 = 0; _i569 < _map568.size; ++_i569)
            {
              ChunkUnion _key570; // required
              double _val571; // required
              _key570 = new ChunkUnion();
              _key570.read(iprot);
              _val571 = iprot.readDouble();
              struct.argumentDistribution.put(_key570, _val571);
            }
          }
          struct.setArgumentDistributionIsSet(true);
        }
      }
    }

  }

  public static class setArgumentDistribution_result implements org.apache.thrift.TBase<setArgumentDistribution_result, setArgumentDistribution_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setArgumentDistribution_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setArgumentDistribution_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setArgumentDistribution_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setArgumentDistribution_result.class, metaDataMap);
    }

    public setArgumentDistribution_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setArgumentDistribution_result(setArgumentDistribution_result other) {
    }

    public setArgumentDistribution_result deepCopy() {
      return new setArgumentDistribution_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setArgumentDistribution_result)
        return this.equals((setArgumentDistribution_result)that);
      return false;
    }

    public boolean equals(setArgumentDistribution_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setArgumentDistribution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setArgumentDistribution_result typedOther = (setArgumentDistribution_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setArgumentDistribution_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setArgumentDistribution_resultStandardSchemeFactory implements SchemeFactory {
      public setArgumentDistribution_resultStandardScheme getScheme() {
        return new setArgumentDistribution_resultStandardScheme();
      }
    }

    private static class setArgumentDistribution_resultStandardScheme extends StandardScheme<setArgumentDistribution_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setArgumentDistribution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setArgumentDistribution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setArgumentDistribution_resultTupleSchemeFactory implements SchemeFactory {
      public setArgumentDistribution_resultTupleScheme getScheme() {
        return new setArgumentDistribution_resultTupleScheme();
      }
    }

    private static class setArgumentDistribution_resultTupleScheme extends TupleScheme<setArgumentDistribution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setArgumentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setArgumentDistribution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}