/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class Message extends Passage and includes additional
 * fields present in online communications.
 */
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField SEQUENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenOffset", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenStream", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sender", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RECIPIENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("recipients", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField CC_RECIPIENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("ccRecipients", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField BCC_RECIPIENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bccRecipients", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField USER_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAgent", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyTo", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reference", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField RETURN_PATH_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("returnPathAddress", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public long sequenceId; // required
  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset tokenOffset; // required
  /**
   * The token stream
   */
  public TokenStream tokenStream; // required
  /**
   * The sender
   */
  public EmailAddress sender; // optional
  /**
   * The recipients
   */
  public List<EmailAddress> recipients; // optional
  /**
   * The cc recipients
   */
  public List<EmailAddress> ccRecipients; // optional
  /**
   * The Bcc recipients
   */
  public List<EmailAddress> bccRecipients; // optional
  /**
   * The sent date
   */
  public String sentDate; // optional
  /**
   * The priority
   */
  public String priority; // optional
  /**
   * The subject
   */
  public String subject; // optional
  /**
   * The content type
   */
  public String contentType; // optional
  /**
   * The message id
   */
  public String messageId; // optional
  /**
   * The user agent
   */
  public String userAgent; // optional
  /**
   * The list of addresses the message is in reply to
   */
  public List<String> inReplyTo; // optional
  /**
   * The reference
   */
  public List<String> reference; // optional
  /**
   * The return path address
   */
  public EmailAddress returnPathAddress; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQUENCE_ID((short)1, "sequenceId"),
    /**
     * The token offset which is the index into token stream.
     */
    TOKEN_OFFSET((short)2, "tokenOffset"),
    /**
     * The token stream
     */
    TOKEN_STREAM((short)3, "tokenStream"),
    /**
     * The sender
     */
    SENDER((short)4, "sender"),
    /**
     * The recipients
     */
    RECIPIENTS((short)5, "recipients"),
    /**
     * The cc recipients
     */
    CC_RECIPIENTS((short)6, "ccRecipients"),
    /**
     * The Bcc recipients
     */
    BCC_RECIPIENTS((short)7, "bccRecipients"),
    /**
     * The sent date
     */
    SENT_DATE((short)8, "sentDate"),
    /**
     * The priority
     */
    PRIORITY((short)9, "priority"),
    /**
     * The subject
     */
    SUBJECT((short)10, "subject"),
    /**
     * The content type
     */
    CONTENT_TYPE((short)11, "contentType"),
    /**
     * The message id
     */
    MESSAGE_ID((short)13, "messageId"),
    /**
     * The user agent
     */
    USER_AGENT((short)14, "userAgent"),
    /**
     * The list of addresses the message is in reply to
     */
    IN_REPLY_TO((short)15, "inReplyTo"),
    /**
     * The reference
     */
    REFERENCE((short)16, "reference"),
    /**
     * The return path address
     */
    RETURN_PATH_ADDRESS((short)17, "returnPathAddress"),
    /**
     * The id
     */
    ID((short)18, "id"),
    /**
     * The value
     */
    VALUE((short)19, "value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_ID
          return SEQUENCE_ID;
        case 2: // TOKEN_OFFSET
          return TOKEN_OFFSET;
        case 3: // TOKEN_STREAM
          return TOKEN_STREAM;
        case 4: // SENDER
          return SENDER;
        case 5: // RECIPIENTS
          return RECIPIENTS;
        case 6: // CC_RECIPIENTS
          return CC_RECIPIENTS;
        case 7: // BCC_RECIPIENTS
          return BCC_RECIPIENTS;
        case 8: // SENT_DATE
          return SENT_DATE;
        case 9: // PRIORITY
          return PRIORITY;
        case 10: // SUBJECT
          return SUBJECT;
        case 11: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 13: // MESSAGE_ID
          return MESSAGE_ID;
        case 14: // USER_AGENT
          return USER_AGENT;
        case 15: // IN_REPLY_TO
          return IN_REPLY_TO;
        case 16: // REFERENCE
          return REFERENCE;
        case 17: // RETURN_PATH_ADDRESS
          return RETURN_PATH_ADDRESS;
        case 18: // ID
          return ID;
        case 19: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SENDER,_Fields.RECIPIENTS,_Fields.CC_RECIPIENTS,_Fields.BCC_RECIPIENTS,_Fields.SENT_DATE,_Fields.PRIORITY,_Fields.SUBJECT,_Fields.CONTENT_TYPE,_Fields.MESSAGE_ID,_Fields.USER_AGENT,_Fields.IN_REPLY_TO,_Fields.REFERENCE,_Fields.RETURN_PATH_ADDRESS,_Fields.ID,_Fields.VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sequenceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("tokenOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenOffset.class)));
    tmpMap.put(_Fields.TOKEN_STREAM, new org.apache.thrift.meta_data.FieldMetaData("tokenStream", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenStream.class)));
    tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("sender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmailAddress.class)));
    tmpMap.put(_Fields.RECIPIENTS, new org.apache.thrift.meta_data.FieldMetaData("recipients", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmailAddress.class))));
    tmpMap.put(_Fields.CC_RECIPIENTS, new org.apache.thrift.meta_data.FieldMetaData("ccRecipients", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmailAddress.class))));
    tmpMap.put(_Fields.BCC_RECIPIENTS, new org.apache.thrift.meta_data.FieldMetaData("bccRecipients", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmailAddress.class))));
    tmpMap.put(_Fields.SENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("sentDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_AGENT, new org.apache.thrift.meta_data.FieldMetaData("userAgent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_REPLY_TO, new org.apache.thrift.meta_data.FieldMetaData("inReplyTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("reference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RETURN_PATH_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("returnPathAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmailAddress.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    long sequenceId,
    TokenOffset tokenOffset,
    TokenStream tokenStream)
  {
    this();
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    this.tokenOffset = tokenOffset;
    this.tokenStream = tokenStream;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceId = other.sequenceId;
    if (other.isSetTokenOffset()) {
      this.tokenOffset = new TokenOffset(other.tokenOffset);
    }
    if (other.isSetTokenStream()) {
      this.tokenStream = new TokenStream(other.tokenStream);
    }
    if (other.isSetSender()) {
      this.sender = new EmailAddress(other.sender);
    }
    if (other.isSetRecipients()) {
      List<EmailAddress> __this__recipients = new ArrayList<EmailAddress>();
      for (EmailAddress other_element : other.recipients) {
        __this__recipients.add(new EmailAddress(other_element));
      }
      this.recipients = __this__recipients;
    }
    if (other.isSetCcRecipients()) {
      List<EmailAddress> __this__ccRecipients = new ArrayList<EmailAddress>();
      for (EmailAddress other_element : other.ccRecipients) {
        __this__ccRecipients.add(new EmailAddress(other_element));
      }
      this.ccRecipients = __this__ccRecipients;
    }
    if (other.isSetBccRecipients()) {
      List<EmailAddress> __this__bccRecipients = new ArrayList<EmailAddress>();
      for (EmailAddress other_element : other.bccRecipients) {
        __this__bccRecipients.add(new EmailAddress(other_element));
      }
      this.bccRecipients = __this__bccRecipients;
    }
    if (other.isSetSentDate()) {
      this.sentDate = other.sentDate;
    }
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetMessageId()) {
      this.messageId = other.messageId;
    }
    if (other.isSetUserAgent()) {
      this.userAgent = other.userAgent;
    }
    if (other.isSetInReplyTo()) {
      List<String> __this__inReplyTo = new ArrayList<String>();
      for (String other_element : other.inReplyTo) {
        __this__inReplyTo.add(other_element);
      }
      this.inReplyTo = __this__inReplyTo;
    }
    if (other.isSetReference()) {
      List<String> __this__reference = new ArrayList<String>();
      for (String other_element : other.reference) {
        __this__reference.add(other_element);
      }
      this.reference = __this__reference;
    }
    if (other.isSetReturnPathAddress()) {
      this.returnPathAddress = new EmailAddress(other.returnPathAddress);
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    setSequenceIdIsSet(false);
    this.sequenceId = 0;
    this.tokenOffset = null;
    this.tokenStream = null;
    this.sender = null;
    this.recipients = null;
    this.ccRecipients = null;
    this.bccRecipients = null;
    this.sentDate = null;
    this.priority = null;
    this.subject = null;
    this.contentType = null;
    this.messageId = null;
    this.userAgent = null;
    this.inReplyTo = null;
    this.reference = null;
    this.returnPathAddress = null;
    this.id = null;
    this.value = null;
  }

  public long getSequenceId() {
    return this.sequenceId;
  }

  public Message setSequenceId(long sequenceId) {
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    return this;
  }

  public void unsetSequenceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  /** Returns true if field sequenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  public void setSequenceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCEID_ISSET_ID, value);
  }

  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset getTokenOffset() {
    return this.tokenOffset;
  }

  /**
   * The token offset which is the index into token stream.
   */
  public Message setTokenOffset(TokenOffset tokenOffset) {
    this.tokenOffset = tokenOffset;
    return this;
  }

  public void unsetTokenOffset() {
    this.tokenOffset = null;
  }

  /** Returns true if field tokenOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenOffset() {
    return this.tokenOffset != null;
  }

  public void setTokenOffsetIsSet(boolean value) {
    if (!value) {
      this.tokenOffset = null;
    }
  }

  /**
   * The token stream
   */
  public TokenStream getTokenStream() {
    return this.tokenStream;
  }

  /**
   * The token stream
   */
  public Message setTokenStream(TokenStream tokenStream) {
    this.tokenStream = tokenStream;
    return this;
  }

  public void unsetTokenStream() {
    this.tokenStream = null;
  }

  /** Returns true if field tokenStream is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenStream() {
    return this.tokenStream != null;
  }

  public void setTokenStreamIsSet(boolean value) {
    if (!value) {
      this.tokenStream = null;
    }
  }

  /**
   * The sender
   */
  public EmailAddress getSender() {
    return this.sender;
  }

  /**
   * The sender
   */
  public Message setSender(EmailAddress sender) {
    this.sender = sender;
    return this;
  }

  public void unsetSender() {
    this.sender = null;
  }

  /** Returns true if field sender is set (has been assigned a value) and false otherwise */
  public boolean isSetSender() {
    return this.sender != null;
  }

  public void setSenderIsSet(boolean value) {
    if (!value) {
      this.sender = null;
    }
  }

  public int getRecipientsSize() {
    return (this.recipients == null) ? 0 : this.recipients.size();
  }

  public java.util.Iterator<EmailAddress> getRecipientsIterator() {
    return (this.recipients == null) ? null : this.recipients.iterator();
  }

  public void addToRecipients(EmailAddress elem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<EmailAddress>();
    }
    this.recipients.add(elem);
  }

  /**
   * The recipients
   */
  public List<EmailAddress> getRecipients() {
    return this.recipients;
  }

  /**
   * The recipients
   */
  public Message setRecipients(List<EmailAddress> recipients) {
    this.recipients = recipients;
    return this;
  }

  public void unsetRecipients() {
    this.recipients = null;
  }

  /** Returns true if field recipients is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipients() {
    return this.recipients != null;
  }

  public void setRecipientsIsSet(boolean value) {
    if (!value) {
      this.recipients = null;
    }
  }

  public int getCcRecipientsSize() {
    return (this.ccRecipients == null) ? 0 : this.ccRecipients.size();
  }

  public java.util.Iterator<EmailAddress> getCcRecipientsIterator() {
    return (this.ccRecipients == null) ? null : this.ccRecipients.iterator();
  }

  public void addToCcRecipients(EmailAddress elem) {
    if (this.ccRecipients == null) {
      this.ccRecipients = new ArrayList<EmailAddress>();
    }
    this.ccRecipients.add(elem);
  }

  /**
   * The cc recipients
   */
  public List<EmailAddress> getCcRecipients() {
    return this.ccRecipients;
  }

  /**
   * The cc recipients
   */
  public Message setCcRecipients(List<EmailAddress> ccRecipients) {
    this.ccRecipients = ccRecipients;
    return this;
  }

  public void unsetCcRecipients() {
    this.ccRecipients = null;
  }

  /** Returns true if field ccRecipients is set (has been assigned a value) and false otherwise */
  public boolean isSetCcRecipients() {
    return this.ccRecipients != null;
  }

  public void setCcRecipientsIsSet(boolean value) {
    if (!value) {
      this.ccRecipients = null;
    }
  }

  public int getBccRecipientsSize() {
    return (this.bccRecipients == null) ? 0 : this.bccRecipients.size();
  }

  public java.util.Iterator<EmailAddress> getBccRecipientsIterator() {
    return (this.bccRecipients == null) ? null : this.bccRecipients.iterator();
  }

  public void addToBccRecipients(EmailAddress elem) {
    if (this.bccRecipients == null) {
      this.bccRecipients = new ArrayList<EmailAddress>();
    }
    this.bccRecipients.add(elem);
  }

  /**
   * The Bcc recipients
   */
  public List<EmailAddress> getBccRecipients() {
    return this.bccRecipients;
  }

  /**
   * The Bcc recipients
   */
  public Message setBccRecipients(List<EmailAddress> bccRecipients) {
    this.bccRecipients = bccRecipients;
    return this;
  }

  public void unsetBccRecipients() {
    this.bccRecipients = null;
  }

  /** Returns true if field bccRecipients is set (has been assigned a value) and false otherwise */
  public boolean isSetBccRecipients() {
    return this.bccRecipients != null;
  }

  public void setBccRecipientsIsSet(boolean value) {
    if (!value) {
      this.bccRecipients = null;
    }
  }

  /**
   * The sent date
   */
  public String getSentDate() {
    return this.sentDate;
  }

  /**
   * The sent date
   */
  public Message setSentDate(String sentDate) {
    this.sentDate = sentDate;
    return this;
  }

  public void unsetSentDate() {
    this.sentDate = null;
  }

  /** Returns true if field sentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSentDate() {
    return this.sentDate != null;
  }

  public void setSentDateIsSet(boolean value) {
    if (!value) {
      this.sentDate = null;
    }
  }

  /**
   * The priority
   */
  public String getPriority() {
    return this.priority;
  }

  /**
   * The priority
   */
  public Message setPriority(String priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  /**
   * The subject
   */
  public String getSubject() {
    return this.subject;
  }

  /**
   * The subject
   */
  public Message setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  /**
   * The content type
   */
  public String getContentType() {
    return this.contentType;
  }

  /**
   * The content type
   */
  public Message setContentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  /**
   * The message id
   */
  public String getMessageId() {
    return this.messageId;
  }

  /**
   * The message id
   */
  public Message setMessageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  public void unsetMessageId() {
    this.messageId = null;
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return this.messageId != null;
  }

  public void setMessageIdIsSet(boolean value) {
    if (!value) {
      this.messageId = null;
    }
  }

  /**
   * The user agent
   */
  public String getUserAgent() {
    return this.userAgent;
  }

  /**
   * The user agent
   */
  public Message setUserAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  public void unsetUserAgent() {
    this.userAgent = null;
  }

  /** Returns true if field userAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAgent() {
    return this.userAgent != null;
  }

  public void setUserAgentIsSet(boolean value) {
    if (!value) {
      this.userAgent = null;
    }
  }

  public int getInReplyToSize() {
    return (this.inReplyTo == null) ? 0 : this.inReplyTo.size();
  }

  public java.util.Iterator<String> getInReplyToIterator() {
    return (this.inReplyTo == null) ? null : this.inReplyTo.iterator();
  }

  public void addToInReplyTo(String elem) {
    if (this.inReplyTo == null) {
      this.inReplyTo = new ArrayList<String>();
    }
    this.inReplyTo.add(elem);
  }

  /**
   * The list of addresses the message is in reply to
   */
  public List<String> getInReplyTo() {
    return this.inReplyTo;
  }

  /**
   * The list of addresses the message is in reply to
   */
  public Message setInReplyTo(List<String> inReplyTo) {
    this.inReplyTo = inReplyTo;
    return this;
  }

  public void unsetInReplyTo() {
    this.inReplyTo = null;
  }

  /** Returns true if field inReplyTo is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyTo() {
    return this.inReplyTo != null;
  }

  public void setInReplyToIsSet(boolean value) {
    if (!value) {
      this.inReplyTo = null;
    }
  }

  public int getReferenceSize() {
    return (this.reference == null) ? 0 : this.reference.size();
  }

  public java.util.Iterator<String> getReferenceIterator() {
    return (this.reference == null) ? null : this.reference.iterator();
  }

  public void addToReference(String elem) {
    if (this.reference == null) {
      this.reference = new ArrayList<String>();
    }
    this.reference.add(elem);
  }

  /**
   * The reference
   */
  public List<String> getReference() {
    return this.reference;
  }

  /**
   * The reference
   */
  public Message setReference(List<String> reference) {
    this.reference = reference;
    return this;
  }

  public void unsetReference() {
    this.reference = null;
  }

  /** Returns true if field reference is set (has been assigned a value) and false otherwise */
  public boolean isSetReference() {
    return this.reference != null;
  }

  public void setReferenceIsSet(boolean value) {
    if (!value) {
      this.reference = null;
    }
  }

  /**
   * The return path address
   */
  public EmailAddress getReturnPathAddress() {
    return this.returnPathAddress;
  }

  /**
   * The return path address
   */
  public Message setReturnPathAddress(EmailAddress returnPathAddress) {
    this.returnPathAddress = returnPathAddress;
    return this;
  }

  public void unsetReturnPathAddress() {
    this.returnPathAddress = null;
  }

  /** Returns true if field returnPathAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnPathAddress() {
    return this.returnPathAddress != null;
  }

  public void setReturnPathAddressIsSet(boolean value) {
    if (!value) {
      this.returnPathAddress = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Message setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Message setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE_ID:
      if (value == null) {
        unsetSequenceId();
      } else {
        setSequenceId((Long)value);
      }
      break;

    case TOKEN_OFFSET:
      if (value == null) {
        unsetTokenOffset();
      } else {
        setTokenOffset((TokenOffset)value);
      }
      break;

    case TOKEN_STREAM:
      if (value == null) {
        unsetTokenStream();
      } else {
        setTokenStream((TokenStream)value);
      }
      break;

    case SENDER:
      if (value == null) {
        unsetSender();
      } else {
        setSender((EmailAddress)value);
      }
      break;

    case RECIPIENTS:
      if (value == null) {
        unsetRecipients();
      } else {
        setRecipients((List<EmailAddress>)value);
      }
      break;

    case CC_RECIPIENTS:
      if (value == null) {
        unsetCcRecipients();
      } else {
        setCcRecipients((List<EmailAddress>)value);
      }
      break;

    case BCC_RECIPIENTS:
      if (value == null) {
        unsetBccRecipients();
      } else {
        setBccRecipients((List<EmailAddress>)value);
      }
      break;

    case SENT_DATE:
      if (value == null) {
        unsetSentDate();
      } else {
        setSentDate((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((String)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((String)value);
      }
      break;

    case MESSAGE_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        setMessageId((String)value);
      }
      break;

    case USER_AGENT:
      if (value == null) {
        unsetUserAgent();
      } else {
        setUserAgent((String)value);
      }
      break;

    case IN_REPLY_TO:
      if (value == null) {
        unsetInReplyTo();
      } else {
        setInReplyTo((List<String>)value);
      }
      break;

    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((List<String>)value);
      }
      break;

    case RETURN_PATH_ADDRESS:
      if (value == null) {
        unsetReturnPathAddress();
      } else {
        setReturnPathAddress((EmailAddress)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_ID:
      return Long.valueOf(getSequenceId());

    case TOKEN_OFFSET:
      return getTokenOffset();

    case TOKEN_STREAM:
      return getTokenStream();

    case SENDER:
      return getSender();

    case RECIPIENTS:
      return getRecipients();

    case CC_RECIPIENTS:
      return getCcRecipients();

    case BCC_RECIPIENTS:
      return getBccRecipients();

    case SENT_DATE:
      return getSentDate();

    case PRIORITY:
      return getPriority();

    case SUBJECT:
      return getSubject();

    case CONTENT_TYPE:
      return getContentType();

    case MESSAGE_ID:
      return getMessageId();

    case USER_AGENT:
      return getUserAgent();

    case IN_REPLY_TO:
      return getInReplyTo();

    case REFERENCE:
      return getReference();

    case RETURN_PATH_ADDRESS:
      return getReturnPathAddress();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_ID:
      return isSetSequenceId();
    case TOKEN_OFFSET:
      return isSetTokenOffset();
    case TOKEN_STREAM:
      return isSetTokenStream();
    case SENDER:
      return isSetSender();
    case RECIPIENTS:
      return isSetRecipients();
    case CC_RECIPIENTS:
      return isSetCcRecipients();
    case BCC_RECIPIENTS:
      return isSetBccRecipients();
    case SENT_DATE:
      return isSetSentDate();
    case PRIORITY:
      return isSetPriority();
    case SUBJECT:
      return isSetSubject();
    case CONTENT_TYPE:
      return isSetContentType();
    case MESSAGE_ID:
      return isSetMessageId();
    case USER_AGENT:
      return isSetUserAgent();
    case IN_REPLY_TO:
      return isSetInReplyTo();
    case REFERENCE:
      return isSetReference();
    case RETURN_PATH_ADDRESS:
      return isSetReturnPathAddress();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_sequenceId = true;
    boolean that_present_sequenceId = true;
    if (this_present_sequenceId || that_present_sequenceId) {
      if (!(this_present_sequenceId && that_present_sequenceId))
        return false;
      if (this.sequenceId != that.sequenceId)
        return false;
    }

    boolean this_present_tokenOffset = true && this.isSetTokenOffset();
    boolean that_present_tokenOffset = true && that.isSetTokenOffset();
    if (this_present_tokenOffset || that_present_tokenOffset) {
      if (!(this_present_tokenOffset && that_present_tokenOffset))
        return false;
      if (!this.tokenOffset.equals(that.tokenOffset))
        return false;
    }

    boolean this_present_tokenStream = true && this.isSetTokenStream();
    boolean that_present_tokenStream = true && that.isSetTokenStream();
    if (this_present_tokenStream || that_present_tokenStream) {
      if (!(this_present_tokenStream && that_present_tokenStream))
        return false;
      if (!this.tokenStream.equals(that.tokenStream))
        return false;
    }

    boolean this_present_sender = true && this.isSetSender();
    boolean that_present_sender = true && that.isSetSender();
    if (this_present_sender || that_present_sender) {
      if (!(this_present_sender && that_present_sender))
        return false;
      if (!this.sender.equals(that.sender))
        return false;
    }

    boolean this_present_recipients = true && this.isSetRecipients();
    boolean that_present_recipients = true && that.isSetRecipients();
    if (this_present_recipients || that_present_recipients) {
      if (!(this_present_recipients && that_present_recipients))
        return false;
      if (!this.recipients.equals(that.recipients))
        return false;
    }

    boolean this_present_ccRecipients = true && this.isSetCcRecipients();
    boolean that_present_ccRecipients = true && that.isSetCcRecipients();
    if (this_present_ccRecipients || that_present_ccRecipients) {
      if (!(this_present_ccRecipients && that_present_ccRecipients))
        return false;
      if (!this.ccRecipients.equals(that.ccRecipients))
        return false;
    }

    boolean this_present_bccRecipients = true && this.isSetBccRecipients();
    boolean that_present_bccRecipients = true && that.isSetBccRecipients();
    if (this_present_bccRecipients || that_present_bccRecipients) {
      if (!(this_present_bccRecipients && that_present_bccRecipients))
        return false;
      if (!this.bccRecipients.equals(that.bccRecipients))
        return false;
    }

    boolean this_present_sentDate = true && this.isSetSentDate();
    boolean that_present_sentDate = true && that.isSetSentDate();
    if (this_present_sentDate || that_present_sentDate) {
      if (!(this_present_sentDate && that_present_sentDate))
        return false;
      if (!this.sentDate.equals(that.sentDate))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_messageId = true && this.isSetMessageId();
    boolean that_present_messageId = true && that.isSetMessageId();
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (!this.messageId.equals(that.messageId))
        return false;
    }

    boolean this_present_userAgent = true && this.isSetUserAgent();
    boolean that_present_userAgent = true && that.isSetUserAgent();
    if (this_present_userAgent || that_present_userAgent) {
      if (!(this_present_userAgent && that_present_userAgent))
        return false;
      if (!this.userAgent.equals(that.userAgent))
        return false;
    }

    boolean this_present_inReplyTo = true && this.isSetInReplyTo();
    boolean that_present_inReplyTo = true && that.isSetInReplyTo();
    if (this_present_inReplyTo || that_present_inReplyTo) {
      if (!(this_present_inReplyTo && that_present_inReplyTo))
        return false;
      if (!this.inReplyTo.equals(that.inReplyTo))
        return false;
    }

    boolean this_present_reference = true && this.isSetReference();
    boolean that_present_reference = true && that.isSetReference();
    if (this_present_reference || that_present_reference) {
      if (!(this_present_reference && that_present_reference))
        return false;
      if (!this.reference.equals(that.reference))
        return false;
    }

    boolean this_present_returnPathAddress = true && this.isSetReturnPathAddress();
    boolean that_present_returnPathAddress = true && that.isSetReturnPathAddress();
    if (this_present_returnPathAddress || that_present_returnPathAddress) {
      if (!(this_present_returnPathAddress && that_present_returnPathAddress))
        return false;
      if (!this.returnPathAddress.equals(that.returnPathAddress))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Message typedOther = (Message)other;

    lastComparison = Boolean.valueOf(isSetSequenceId()).compareTo(typedOther.isSetSequenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceId, typedOther.sequenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenOffset()).compareTo(typedOther.isSetTokenOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenOffset, typedOther.tokenOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenStream()).compareTo(typedOther.isSetTokenStream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenStream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenStream, typedOther.tokenStream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSender()).compareTo(typedOther.isSetSender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender, typedOther.sender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipients()).compareTo(typedOther.isSetRecipients());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipients()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipients, typedOther.recipients);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCcRecipients()).compareTo(typedOther.isSetCcRecipients());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCcRecipients()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ccRecipients, typedOther.ccRecipients);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBccRecipients()).compareTo(typedOther.isSetBccRecipients());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBccRecipients()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bccRecipients, typedOther.bccRecipients);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentDate()).compareTo(typedOther.isSetSentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentDate, typedOther.sentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(typedOther.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, typedOther.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(typedOther.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, typedOther.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAgent()).compareTo(typedOther.isSetUserAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAgent, typedOther.userAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInReplyTo()).compareTo(typedOther.isSetInReplyTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyTo, typedOther.inReplyTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReference()).compareTo(typedOther.isSetReference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference, typedOther.reference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnPathAddress()).compareTo(typedOther.isSetReturnPathAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnPathAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnPathAddress, typedOther.returnPathAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("sequenceId:");
    sb.append(this.sequenceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenOffset:");
    if (this.tokenOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenStream:");
    if (this.tokenStream == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenStream);
    }
    first = false;
    if (isSetSender()) {
      if (!first) sb.append(", ");
      sb.append("sender:");
      if (this.sender == null) {
        sb.append("null");
      } else {
        sb.append(this.sender);
      }
      first = false;
    }
    if (isSetRecipients()) {
      if (!first) sb.append(", ");
      sb.append("recipients:");
      if (this.recipients == null) {
        sb.append("null");
      } else {
        sb.append(this.recipients);
      }
      first = false;
    }
    if (isSetCcRecipients()) {
      if (!first) sb.append(", ");
      sb.append("ccRecipients:");
      if (this.ccRecipients == null) {
        sb.append("null");
      } else {
        sb.append(this.ccRecipients);
      }
      first = false;
    }
    if (isSetBccRecipients()) {
      if (!first) sb.append(", ");
      sb.append("bccRecipients:");
      if (this.bccRecipients == null) {
        sb.append("null");
      } else {
        sb.append(this.bccRecipients);
      }
      first = false;
    }
    if (isSetSentDate()) {
      if (!first) sb.append(", ");
      sb.append("sentDate:");
      if (this.sentDate == null) {
        sb.append("null");
      } else {
        sb.append(this.sentDate);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetSubject()) {
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
    }
    if (isSetContentType()) {
      if (!first) sb.append(", ");
      sb.append("contentType:");
      if (this.contentType == null) {
        sb.append("null");
      } else {
        sb.append(this.contentType);
      }
      first = false;
    }
    if (isSetMessageId()) {
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
    }
    if (isSetUserAgent()) {
      if (!first) sb.append(", ");
      sb.append("userAgent:");
      if (this.userAgent == null) {
        sb.append("null");
      } else {
        sb.append(this.userAgent);
      }
      first = false;
    }
    if (isSetInReplyTo()) {
      if (!first) sb.append(", ");
      sb.append("inReplyTo:");
      if (this.inReplyTo == null) {
        sb.append("null");
      } else {
        sb.append(this.inReplyTo);
      }
      first = false;
    }
    if (isSetReference()) {
      if (!first) sb.append(", ");
      sb.append("reference:");
      if (this.reference == null) {
        sb.append("null");
      } else {
        sb.append(this.reference);
      }
      first = false;
    }
    if (isSetReturnPathAddress()) {
      if (!first) sb.append(", ");
      sb.append("returnPathAddress:");
      if (this.returnPathAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.returnPathAddress);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sequenceId' because it's a primitive and you chose the non-beans generator.
    if (tokenOffset == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenOffset' was not present! Struct: " + toString());
    }
    if (tokenStream == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenStream' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tokenOffset != null) {
      tokenOffset.validate();
    }
    if (tokenStream != null) {
      tokenStream.validate();
    }
    if (sender != null) {
      sender.validate();
    }
    if (returnPathAddress != null) {
      returnPathAddress.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceId = iprot.readI64();
              struct.setSequenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenOffset = new TokenOffset();
              struct.tokenOffset.read(iprot);
              struct.setTokenOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN_STREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenStream = new TokenStream();
              struct.tokenStream.read(iprot);
              struct.setTokenStreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sender = new EmailAddress();
              struct.sender.read(iprot);
              struct.setSenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECIPIENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.recipients = new ArrayList<EmailAddress>(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  EmailAddress _elem64; // required
                  _elem64 = new EmailAddress();
                  _elem64.read(iprot);
                  struct.recipients.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setRecipientsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CC_RECIPIENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list65 = iprot.readListBegin();
                struct.ccRecipients = new ArrayList<EmailAddress>(_list65.size);
                for (int _i66 = 0; _i66 < _list65.size; ++_i66)
                {
                  EmailAddress _elem67; // required
                  _elem67 = new EmailAddress();
                  _elem67.read(iprot);
                  struct.ccRecipients.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setCcRecipientsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BCC_RECIPIENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.bccRecipients = new ArrayList<EmailAddress>(_list68.size);
                for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                {
                  EmailAddress _elem70; // required
                  _elem70 = new EmailAddress();
                  _elem70.read(iprot);
                  struct.bccRecipients.add(_elem70);
                }
                iprot.readListEnd();
              }
              struct.setBccRecipientsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sentDate = iprot.readString();
              struct.setSentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priority = iprot.readString();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentType = iprot.readString();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageId = iprot.readString();
              struct.setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userAgent = iprot.readString();
              struct.setUserAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IN_REPLY_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
                struct.inReplyTo = new ArrayList<String>(_list71.size);
                for (int _i72 = 0; _i72 < _list71.size; ++_i72)
                {
                  String _elem73; // required
                  _elem73 = iprot.readString();
                  struct.inReplyTo.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setInReplyToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                struct.reference = new ArrayList<String>(_list74.size);
                for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                {
                  String _elem76; // required
                  _elem76 = iprot.readString();
                  struct.reference.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setReferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RETURN_PATH_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.returnPathAddress = new EmailAddress();
              struct.returnPathAddress.read(iprot);
              struct.setReturnPathAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSequenceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_ID_FIELD_DESC);
      oprot.writeI64(struct.sequenceId);
      oprot.writeFieldEnd();
      if (struct.tokenOffset != null) {
        oprot.writeFieldBegin(TOKEN_OFFSET_FIELD_DESC);
        struct.tokenOffset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokenStream != null) {
        oprot.writeFieldBegin(TOKEN_STREAM_FIELD_DESC);
        struct.tokenStream.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sender != null) {
        if (struct.isSetSender()) {
          oprot.writeFieldBegin(SENDER_FIELD_DESC);
          struct.sender.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recipients != null) {
        if (struct.isSetRecipients()) {
          oprot.writeFieldBegin(RECIPIENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.recipients.size()));
            for (EmailAddress _iter77 : struct.recipients)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ccRecipients != null) {
        if (struct.isSetCcRecipients()) {
          oprot.writeFieldBegin(CC_RECIPIENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ccRecipients.size()));
            for (EmailAddress _iter78 : struct.ccRecipients)
            {
              _iter78.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bccRecipients != null) {
        if (struct.isSetBccRecipients()) {
          oprot.writeFieldBegin(BCC_RECIPIENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bccRecipients.size()));
            for (EmailAddress _iter79 : struct.bccRecipients)
            {
              _iter79.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sentDate != null) {
        if (struct.isSetSentDate()) {
          oprot.writeFieldBegin(SENT_DATE_FIELD_DESC);
          oprot.writeString(struct.sentDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeString(struct.priority);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subject != null) {
        if (struct.isSetSubject()) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentType != null) {
        if (struct.isSetContentType()) {
          oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.contentType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.messageId != null) {
        if (struct.isSetMessageId()) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userAgent != null) {
        if (struct.isSetUserAgent()) {
          oprot.writeFieldBegin(USER_AGENT_FIELD_DESC);
          oprot.writeString(struct.userAgent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inReplyTo != null) {
        if (struct.isSetInReplyTo()) {
          oprot.writeFieldBegin(IN_REPLY_TO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.inReplyTo.size()));
            for (String _iter80 : struct.inReplyTo)
            {
              oprot.writeString(_iter80);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.reference != null) {
        if (struct.isSetReference()) {
          oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reference.size()));
            for (String _iter81 : struct.reference)
            {
              oprot.writeString(_iter81);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.returnPathAddress != null) {
        if (struct.isSetReturnPathAddress()) {
          oprot.writeFieldBegin(RETURN_PATH_ADDRESS_FIELD_DESC);
          struct.returnPathAddress.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sequenceId);
      struct.tokenOffset.write(oprot);
      struct.tokenStream.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetSender()) {
        optionals.set(0);
      }
      if (struct.isSetRecipients()) {
        optionals.set(1);
      }
      if (struct.isSetCcRecipients()) {
        optionals.set(2);
      }
      if (struct.isSetBccRecipients()) {
        optionals.set(3);
      }
      if (struct.isSetSentDate()) {
        optionals.set(4);
      }
      if (struct.isSetPriority()) {
        optionals.set(5);
      }
      if (struct.isSetSubject()) {
        optionals.set(6);
      }
      if (struct.isSetContentType()) {
        optionals.set(7);
      }
      if (struct.isSetMessageId()) {
        optionals.set(8);
      }
      if (struct.isSetUserAgent()) {
        optionals.set(9);
      }
      if (struct.isSetInReplyTo()) {
        optionals.set(10);
      }
      if (struct.isSetReference()) {
        optionals.set(11);
      }
      if (struct.isSetReturnPathAddress()) {
        optionals.set(12);
      }
      if (struct.isSetId()) {
        optionals.set(13);
      }
      if (struct.isSetValue()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetSender()) {
        struct.sender.write(oprot);
      }
      if (struct.isSetRecipients()) {
        {
          oprot.writeI32(struct.recipients.size());
          for (EmailAddress _iter82 : struct.recipients)
          {
            _iter82.write(oprot);
          }
        }
      }
      if (struct.isSetCcRecipients()) {
        {
          oprot.writeI32(struct.ccRecipients.size());
          for (EmailAddress _iter83 : struct.ccRecipients)
          {
            _iter83.write(oprot);
          }
        }
      }
      if (struct.isSetBccRecipients()) {
        {
          oprot.writeI32(struct.bccRecipients.size());
          for (EmailAddress _iter84 : struct.bccRecipients)
          {
            _iter84.write(oprot);
          }
        }
      }
      if (struct.isSetSentDate()) {
        oprot.writeString(struct.sentDate);
      }
      if (struct.isSetPriority()) {
        oprot.writeString(struct.priority);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetContentType()) {
        oprot.writeString(struct.contentType);
      }
      if (struct.isSetMessageId()) {
        oprot.writeString(struct.messageId);
      }
      if (struct.isSetUserAgent()) {
        oprot.writeString(struct.userAgent);
      }
      if (struct.isSetInReplyTo()) {
        {
          oprot.writeI32(struct.inReplyTo.size());
          for (String _iter85 : struct.inReplyTo)
          {
            oprot.writeString(_iter85);
          }
        }
      }
      if (struct.isSetReference()) {
        {
          oprot.writeI32(struct.reference.size());
          for (String _iter86 : struct.reference)
          {
            oprot.writeString(_iter86);
          }
        }
      }
      if (struct.isSetReturnPathAddress()) {
        struct.returnPathAddress.write(oprot);
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sequenceId = iprot.readI64();
      struct.setSequenceIdIsSet(true);
      struct.tokenOffset = new TokenOffset();
      struct.tokenOffset.read(iprot);
      struct.setTokenOffsetIsSet(true);
      struct.tokenStream = new TokenStream();
      struct.tokenStream.read(iprot);
      struct.setTokenStreamIsSet(true);
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.sender = new EmailAddress();
        struct.sender.read(iprot);
        struct.setSenderIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.recipients = new ArrayList<EmailAddress>(_list87.size);
          for (int _i88 = 0; _i88 < _list87.size; ++_i88)
          {
            EmailAddress _elem89; // required
            _elem89 = new EmailAddress();
            _elem89.read(iprot);
            struct.recipients.add(_elem89);
          }
        }
        struct.setRecipientsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ccRecipients = new ArrayList<EmailAddress>(_list90.size);
          for (int _i91 = 0; _i91 < _list90.size; ++_i91)
          {
            EmailAddress _elem92; // required
            _elem92 = new EmailAddress();
            _elem92.read(iprot);
            struct.ccRecipients.add(_elem92);
          }
        }
        struct.setCcRecipientsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bccRecipients = new ArrayList<EmailAddress>(_list93.size);
          for (int _i94 = 0; _i94 < _list93.size; ++_i94)
          {
            EmailAddress _elem95; // required
            _elem95 = new EmailAddress();
            _elem95.read(iprot);
            struct.bccRecipients.add(_elem95);
          }
        }
        struct.setBccRecipientsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sentDate = iprot.readString();
        struct.setSentDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.priority = iprot.readString();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contentType = iprot.readString();
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.userAgent = iprot.readString();
        struct.setUserAgentIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list96 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.inReplyTo = new ArrayList<String>(_list96.size);
          for (int _i97 = 0; _i97 < _list96.size; ++_i97)
          {
            String _elem98; // required
            _elem98 = iprot.readString();
            struct.inReplyTo.add(_elem98);
          }
        }
        struct.setInReplyToIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.reference = new ArrayList<String>(_list99.size);
          for (int _i100 = 0; _i100 < _list99.size; ++_i100)
          {
            String _elem101; // required
            _elem101 = iprot.readString();
            struct.reference.add(_elem101);
          }
        }
        struct.setReferenceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.returnPathAddress = new EmailAddress();
        struct.returnPathAddress.read(iprot);
        struct.setReturnPathAddressIsSet(true);
      }
      if (incoming.get(13)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
    }
  }

}

