/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Offset class captures begin and end double positions of audio
 * spans.
 */
public class AudioOffset implements org.apache.thrift.TBase<AudioOffset, AudioOffset._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AudioOffset");

  private static final org.apache.thrift.protocol.TField BEGIN_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("beginIndex", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField END_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("endIndex", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AudioOffsetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AudioOffsetTupleSchemeFactory());
  }

  /**
   * The begin index
   */
  public double beginIndex; // required
  /**
   * The end index
   */
  public double endIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The begin index
     */
    BEGIN_INDEX((short)1, "beginIndex"),
    /**
     * The end index
     */
    END_INDEX((short)2, "endIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEGIN_INDEX
          return BEGIN_INDEX;
        case 2: // END_INDEX
          return END_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGININDEX_ISSET_ID = 0;
  private static final int __ENDINDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEGIN_INDEX, new org.apache.thrift.meta_data.FieldMetaData("beginIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.END_INDEX, new org.apache.thrift.meta_data.FieldMetaData("endIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AudioOffset.class, metaDataMap);
  }

  public AudioOffset() {
  }

  public AudioOffset(
    double beginIndex,
    double endIndex)
  {
    this();
    this.beginIndex = beginIndex;
    setBeginIndexIsSet(true);
    this.endIndex = endIndex;
    setEndIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AudioOffset(AudioOffset other) {
    __isset_bitfield = other.__isset_bitfield;
    this.beginIndex = other.beginIndex;
    this.endIndex = other.endIndex;
  }

  public AudioOffset deepCopy() {
    return new AudioOffset(this);
  }

  @Override
  public void clear() {
    setBeginIndexIsSet(false);
    this.beginIndex = 0.0;
    setEndIndexIsSet(false);
    this.endIndex = 0.0;
  }

  /**
   * The begin index
   */
  public double getBeginIndex() {
    return this.beginIndex;
  }

  /**
   * The begin index
   */
  public AudioOffset setBeginIndex(double beginIndex) {
    this.beginIndex = beginIndex;
    setBeginIndexIsSet(true);
    return this;
  }

  public void unsetBeginIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGININDEX_ISSET_ID);
  }

  /** Returns true if field beginIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGININDEX_ISSET_ID);
  }

  public void setBeginIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGININDEX_ISSET_ID, value);
  }

  /**
   * The end index
   */
  public double getEndIndex() {
    return this.endIndex;
  }

  /**
   * The end index
   */
  public AudioOffset setEndIndex(double endIndex) {
    this.endIndex = endIndex;
    setEndIndexIsSet(true);
    return this;
  }

  public void unsetEndIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDINDEX_ISSET_ID);
  }

  /** Returns true if field endIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetEndIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDINDEX_ISSET_ID);
  }

  public void setEndIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEGIN_INDEX:
      if (value == null) {
        unsetBeginIndex();
      } else {
        setBeginIndex((Double)value);
      }
      break;

    case END_INDEX:
      if (value == null) {
        unsetEndIndex();
      } else {
        setEndIndex((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEGIN_INDEX:
      return Double.valueOf(getBeginIndex());

    case END_INDEX:
      return Double.valueOf(getEndIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEGIN_INDEX:
      return isSetBeginIndex();
    case END_INDEX:
      return isSetEndIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AudioOffset)
      return this.equals((AudioOffset)that);
    return false;
  }

  public boolean equals(AudioOffset that) {
    if (that == null)
      return false;

    boolean this_present_beginIndex = true;
    boolean that_present_beginIndex = true;
    if (this_present_beginIndex || that_present_beginIndex) {
      if (!(this_present_beginIndex && that_present_beginIndex))
        return false;
      if (this.beginIndex != that.beginIndex)
        return false;
    }

    boolean this_present_endIndex = true;
    boolean that_present_endIndex = true;
    if (this_present_endIndex || that_present_endIndex) {
      if (!(this_present_endIndex && that_present_endIndex))
        return false;
      if (this.endIndex != that.endIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AudioOffset other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AudioOffset typedOther = (AudioOffset)other;

    lastComparison = Boolean.valueOf(isSetBeginIndex()).compareTo(typedOther.isSetBeginIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginIndex, typedOther.beginIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndIndex()).compareTo(typedOther.isSetEndIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endIndex, typedOther.endIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AudioOffset(");
    boolean first = true;

    sb.append("beginIndex:");
    sb.append(this.beginIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endIndex:");
    sb.append(this.endIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'beginIndex' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endIndex' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AudioOffsetStandardSchemeFactory implements SchemeFactory {
    public AudioOffsetStandardScheme getScheme() {
      return new AudioOffsetStandardScheme();
    }
  }

  private static class AudioOffsetStandardScheme extends StandardScheme<AudioOffset> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AudioOffset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEGIN_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.beginIndex = iprot.readDouble();
              struct.setBeginIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.endIndex = iprot.readDouble();
              struct.setEndIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBeginIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'beginIndex' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endIndex' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AudioOffset struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BEGIN_INDEX_FIELD_DESC);
      oprot.writeDouble(struct.beginIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_INDEX_FIELD_DESC);
      oprot.writeDouble(struct.endIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AudioOffsetTupleSchemeFactory implements SchemeFactory {
    public AudioOffsetTupleScheme getScheme() {
      return new AudioOffsetTupleScheme();
    }
  }

  private static class AudioOffsetTupleScheme extends TupleScheme<AudioOffset> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AudioOffset struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.beginIndex);
      oprot.writeDouble(struct.endIndex);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AudioOffset struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.beginIndex = iprot.readDouble();
      struct.setBeginIndexIsSet(true);
      struct.endIndex = iprot.readDouble();
      struct.setEndIndexIsSet(true);
    }
  }

}

