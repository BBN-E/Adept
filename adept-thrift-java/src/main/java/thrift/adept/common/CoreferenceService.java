/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CoreferenceService {

  public interface Iface extends ItemService.Iface {

    public long getCoreferenceId() throws org.apache.thrift.TException;

    public List<Entity> getEntities() throws org.apache.thrift.TException;

    public List<EntityMention> getResolvedMentions() throws org.apache.thrift.TException;

    public void setEntities(List<Entity> entities) throws org.apache.thrift.TException;

    public void setResolvedMentions(List<EntityMention> resolvedEntityMentions) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ItemService .AsyncIface {

    public void getCoreferenceId(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCoreferenceId_call> resultHandler) throws org.apache.thrift.TException;

    public void getEntities(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEntities_call> resultHandler) throws org.apache.thrift.TException;

    public void getResolvedMentions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getResolvedMentions_call> resultHandler) throws org.apache.thrift.TException;

    public void setEntities(List<Entity> entities, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setEntities_call> resultHandler) throws org.apache.thrift.TException;

    public void setResolvedMentions(List<EntityMention> resolvedEntityMentions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setResolvedMentions_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ItemService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getCoreferenceId() throws org.apache.thrift.TException
    {
      send_getCoreferenceId();
      return recv_getCoreferenceId();
    }

    public void send_getCoreferenceId() throws org.apache.thrift.TException
    {
      getCoreferenceId_args args = new getCoreferenceId_args();
      sendBase("getCoreferenceId", args);
    }

    public long recv_getCoreferenceId() throws org.apache.thrift.TException
    {
      getCoreferenceId_result result = new getCoreferenceId_result();
      receiveBase(result, "getCoreferenceId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCoreferenceId failed: unknown result");
    }

    public List<Entity> getEntities() throws org.apache.thrift.TException
    {
      send_getEntities();
      return recv_getEntities();
    }

    public void send_getEntities() throws org.apache.thrift.TException
    {
      getEntities_args args = new getEntities_args();
      sendBase("getEntities", args);
    }

    public List<Entity> recv_getEntities() throws org.apache.thrift.TException
    {
      getEntities_result result = new getEntities_result();
      receiveBase(result, "getEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntities failed: unknown result");
    }

    public List<EntityMention> getResolvedMentions() throws org.apache.thrift.TException
    {
      send_getResolvedMentions();
      return recv_getResolvedMentions();
    }

    public void send_getResolvedMentions() throws org.apache.thrift.TException
    {
      getResolvedMentions_args args = new getResolvedMentions_args();
      sendBase("getResolvedMentions", args);
    }

    public List<EntityMention> recv_getResolvedMentions() throws org.apache.thrift.TException
    {
      getResolvedMentions_result result = new getResolvedMentions_result();
      receiveBase(result, "getResolvedMentions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResolvedMentions failed: unknown result");
    }

    public void setEntities(List<Entity> entities) throws org.apache.thrift.TException
    {
      send_setEntities(entities);
      recv_setEntities();
    }

    public void send_setEntities(List<Entity> entities) throws org.apache.thrift.TException
    {
      setEntities_args args = new setEntities_args();
      args.setEntities(entities);
      sendBase("setEntities", args);
    }

    public void recv_setEntities() throws org.apache.thrift.TException
    {
      setEntities_result result = new setEntities_result();
      receiveBase(result, "setEntities");
      return;
    }

    public void setResolvedMentions(List<EntityMention> resolvedEntityMentions) throws org.apache.thrift.TException
    {
      send_setResolvedMentions(resolvedEntityMentions);
      recv_setResolvedMentions();
    }

    public void send_setResolvedMentions(List<EntityMention> resolvedEntityMentions) throws org.apache.thrift.TException
    {
      setResolvedMentions_args args = new setResolvedMentions_args();
      args.setResolvedEntityMentions(resolvedEntityMentions);
      sendBase("setResolvedMentions", args);
    }

    public void recv_setResolvedMentions() throws org.apache.thrift.TException
    {
      setResolvedMentions_result result = new setResolvedMentions_result();
      receiveBase(result, "setResolvedMentions");
      return;
    }

  }
  public static class AsyncClient extends ItemService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCoreferenceId(org.apache.thrift.async.AsyncMethodCallback<getCoreferenceId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCoreferenceId_call method_call = new getCoreferenceId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCoreferenceId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCoreferenceId_call(org.apache.thrift.async.AsyncMethodCallback<getCoreferenceId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCoreferenceId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCoreferenceId_args args = new getCoreferenceId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCoreferenceId();
      }
    }

    public void getEntities(org.apache.thrift.async.AsyncMethodCallback<getEntities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntities_call method_call = new getEntities_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getEntities_call(org.apache.thrift.async.AsyncMethodCallback<getEntities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntities_args args = new getEntities_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Entity> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntities();
      }
    }

    public void getResolvedMentions(org.apache.thrift.async.AsyncMethodCallback<getResolvedMentions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getResolvedMentions_call method_call = new getResolvedMentions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getResolvedMentions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getResolvedMentions_call(org.apache.thrift.async.AsyncMethodCallback<getResolvedMentions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResolvedMentions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getResolvedMentions_args args = new getResolvedMentions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<EntityMention> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getResolvedMentions();
      }
    }

    public void setEntities(List<Entity> entities, org.apache.thrift.async.AsyncMethodCallback<setEntities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setEntities_call method_call = new setEntities_call(entities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Entity> entities;
      public setEntities_call(List<Entity> entities, org.apache.thrift.async.AsyncMethodCallback<setEntities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entities = entities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setEntities_args args = new setEntities_args();
        args.setEntities(entities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setEntities();
      }
    }

    public void setResolvedMentions(List<EntityMention> resolvedEntityMentions, org.apache.thrift.async.AsyncMethodCallback<setResolvedMentions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setResolvedMentions_call method_call = new setResolvedMentions_call(resolvedEntityMentions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setResolvedMentions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<EntityMention> resolvedEntityMentions;
      public setResolvedMentions_call(List<EntityMention> resolvedEntityMentions, org.apache.thrift.async.AsyncMethodCallback<setResolvedMentions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resolvedEntityMentions = resolvedEntityMentions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setResolvedMentions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setResolvedMentions_args args = new setResolvedMentions_args();
        args.setResolvedEntityMentions(resolvedEntityMentions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setResolvedMentions();
      }
    }

  }

  public static class Processor<I extends Iface> extends ItemService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCoreferenceId", new getCoreferenceId());
      processMap.put("getEntities", new getEntities());
      processMap.put("getResolvedMentions", new getResolvedMentions());
      processMap.put("setEntities", new setEntities());
      processMap.put("setResolvedMentions", new setResolvedMentions());
      return processMap;
    }

    public static class getCoreferenceId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCoreferenceId_args> {
      public getCoreferenceId() {
        super("getCoreferenceId");
      }

      public getCoreferenceId_args getEmptyArgsInstance() {
        return new getCoreferenceId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCoreferenceId_result getResult(I iface, getCoreferenceId_args args) throws org.apache.thrift.TException {
        getCoreferenceId_result result = new getCoreferenceId_result();
        result.success = iface.getCoreferenceId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntities_args> {
      public getEntities() {
        super("getEntities");
      }

      public getEntities_args getEmptyArgsInstance() {
        return new getEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntities_result getResult(I iface, getEntities_args args) throws org.apache.thrift.TException {
        getEntities_result result = new getEntities_result();
        result.success = iface.getEntities();
        return result;
      }
    }

    public static class getResolvedMentions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResolvedMentions_args> {
      public getResolvedMentions() {
        super("getResolvedMentions");
      }

      public getResolvedMentions_args getEmptyArgsInstance() {
        return new getResolvedMentions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getResolvedMentions_result getResult(I iface, getResolvedMentions_args args) throws org.apache.thrift.TException {
        getResolvedMentions_result result = new getResolvedMentions_result();
        result.success = iface.getResolvedMentions();
        return result;
      }
    }

    public static class setEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setEntities_args> {
      public setEntities() {
        super("setEntities");
      }

      public setEntities_args getEmptyArgsInstance() {
        return new setEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setEntities_result getResult(I iface, setEntities_args args) throws org.apache.thrift.TException {
        setEntities_result result = new setEntities_result();
        iface.setEntities(args.entities);
        return result;
      }
    }

    public static class setResolvedMentions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setResolvedMentions_args> {
      public setResolvedMentions() {
        super("setResolvedMentions");
      }

      public setResolvedMentions_args getEmptyArgsInstance() {
        return new setResolvedMentions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setResolvedMentions_result getResult(I iface, setResolvedMentions_args args) throws org.apache.thrift.TException {
        setResolvedMentions_result result = new setResolvedMentions_result();
        iface.setResolvedMentions(args.resolvedEntityMentions);
        return result;
      }
    }

  }

  public static class getCoreferenceId_args implements org.apache.thrift.TBase<getCoreferenceId_args, getCoreferenceId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoreferenceId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCoreferenceId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCoreferenceId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreferenceId_args.class, metaDataMap);
    }

    public getCoreferenceId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoreferenceId_args(getCoreferenceId_args other) {
    }

    public getCoreferenceId_args deepCopy() {
      return new getCoreferenceId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoreferenceId_args)
        return this.equals((getCoreferenceId_args)that);
      return false;
    }

    public boolean equals(getCoreferenceId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCoreferenceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCoreferenceId_args typedOther = (getCoreferenceId_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCoreferenceId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoreferenceId_argsStandardSchemeFactory implements SchemeFactory {
      public getCoreferenceId_argsStandardScheme getScheme() {
        return new getCoreferenceId_argsStandardScheme();
      }
    }

    private static class getCoreferenceId_argsStandardScheme extends StandardScheme<getCoreferenceId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreferenceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreferenceId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoreferenceId_argsTupleSchemeFactory implements SchemeFactory {
      public getCoreferenceId_argsTupleScheme getScheme() {
        return new getCoreferenceId_argsTupleScheme();
      }
    }

    private static class getCoreferenceId_argsTupleScheme extends TupleScheme<getCoreferenceId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoreferenceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoreferenceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCoreferenceId_result implements org.apache.thrift.TBase<getCoreferenceId_result, getCoreferenceId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCoreferenceId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCoreferenceId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCoreferenceId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCoreferenceId_result.class, metaDataMap);
    }

    public getCoreferenceId_result() {
    }

    public getCoreferenceId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoreferenceId_result(getCoreferenceId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCoreferenceId_result deepCopy() {
      return new getCoreferenceId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getCoreferenceId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoreferenceId_result)
        return this.equals((getCoreferenceId_result)that);
      return false;
    }

    public boolean equals(getCoreferenceId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCoreferenceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCoreferenceId_result typedOther = (getCoreferenceId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCoreferenceId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCoreferenceId_resultStandardSchemeFactory implements SchemeFactory {
      public getCoreferenceId_resultStandardScheme getScheme() {
        return new getCoreferenceId_resultStandardScheme();
      }
    }

    private static class getCoreferenceId_resultStandardScheme extends StandardScheme<getCoreferenceId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCoreferenceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCoreferenceId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCoreferenceId_resultTupleSchemeFactory implements SchemeFactory {
      public getCoreferenceId_resultTupleScheme getScheme() {
        return new getCoreferenceId_resultTupleScheme();
      }
    }

    private static class getCoreferenceId_resultTupleScheme extends TupleScheme<getCoreferenceId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCoreferenceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCoreferenceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntities_args implements org.apache.thrift.TBase<getEntities_args, getEntities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntities_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntities_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntities_args.class, metaDataMap);
    }

    public getEntities_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntities_args(getEntities_args other) {
    }

    public getEntities_args deepCopy() {
      return new getEntities_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntities_args)
        return this.equals((getEntities_args)that);
      return false;
    }

    public boolean equals(getEntities_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntities_args typedOther = (getEntities_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntities_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntities_argsStandardSchemeFactory implements SchemeFactory {
      public getEntities_argsStandardScheme getScheme() {
        return new getEntities_argsStandardScheme();
      }
    }

    private static class getEntities_argsStandardScheme extends StandardScheme<getEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntities_argsTupleSchemeFactory implements SchemeFactory {
      public getEntities_argsTupleScheme getScheme() {
        return new getEntities_argsTupleScheme();
      }
    }

    private static class getEntities_argsTupleScheme extends TupleScheme<getEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getEntities_result implements org.apache.thrift.TBase<getEntities_result, getEntities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntities_resultTupleSchemeFactory());
    }

    public List<Entity> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entity.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntities_result.class, metaDataMap);
    }

    public getEntities_result() {
    }

    public getEntities_result(
      List<Entity> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntities_result(getEntities_result other) {
      if (other.isSetSuccess()) {
        List<Entity> __this__success = new ArrayList<Entity>();
        for (Entity other_element : other.success) {
          __this__success.add(new Entity(other_element));
        }
        this.success = __this__success;
      }
    }

    public getEntities_result deepCopy() {
      return new getEntities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Entity> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Entity elem) {
      if (this.success == null) {
        this.success = new ArrayList<Entity>();
      }
      this.success.add(elem);
    }

    public List<Entity> getSuccess() {
      return this.success;
    }

    public getEntities_result setSuccess(List<Entity> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Entity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntities_result)
        return this.equals((getEntities_result)that);
      return false;
    }

    public boolean equals(getEntities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEntities_result typedOther = (getEntities_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntities_resultStandardSchemeFactory implements SchemeFactory {
      public getEntities_resultStandardScheme getScheme() {
        return new getEntities_resultStandardScheme();
      }
    }

    private static class getEntities_resultStandardScheme extends StandardScheme<getEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list436 = iprot.readListBegin();
                  struct.success = new ArrayList<Entity>(_list436.size);
                  for (int _i437 = 0; _i437 < _list436.size; ++_i437)
                  {
                    Entity _elem438; // required
                    _elem438 = new Entity();
                    _elem438.read(iprot);
                    struct.success.add(_elem438);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Entity _iter439 : struct.success)
            {
              _iter439.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntities_resultTupleSchemeFactory implements SchemeFactory {
      public getEntities_resultTupleScheme getScheme() {
        return new getEntities_resultTupleScheme();
      }
    }

    private static class getEntities_resultTupleScheme extends TupleScheme<getEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Entity _iter440 : struct.success)
            {
              _iter440.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list441 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Entity>(_list441.size);
            for (int _i442 = 0; _i442 < _list441.size; ++_i442)
            {
              Entity _elem443; // required
              _elem443 = new Entity();
              _elem443.read(iprot);
              struct.success.add(_elem443);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getResolvedMentions_args implements org.apache.thrift.TBase<getResolvedMentions_args, getResolvedMentions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResolvedMentions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResolvedMentions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResolvedMentions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResolvedMentions_args.class, metaDataMap);
    }

    public getResolvedMentions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResolvedMentions_args(getResolvedMentions_args other) {
    }

    public getResolvedMentions_args deepCopy() {
      return new getResolvedMentions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResolvedMentions_args)
        return this.equals((getResolvedMentions_args)that);
      return false;
    }

    public boolean equals(getResolvedMentions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getResolvedMentions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResolvedMentions_args typedOther = (getResolvedMentions_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResolvedMentions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResolvedMentions_argsStandardSchemeFactory implements SchemeFactory {
      public getResolvedMentions_argsStandardScheme getScheme() {
        return new getResolvedMentions_argsStandardScheme();
      }
    }

    private static class getResolvedMentions_argsStandardScheme extends StandardScheme<getResolvedMentions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResolvedMentions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResolvedMentions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResolvedMentions_argsTupleSchemeFactory implements SchemeFactory {
      public getResolvedMentions_argsTupleScheme getScheme() {
        return new getResolvedMentions_argsTupleScheme();
      }
    }

    private static class getResolvedMentions_argsTupleScheme extends TupleScheme<getResolvedMentions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResolvedMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResolvedMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getResolvedMentions_result implements org.apache.thrift.TBase<getResolvedMentions_result, getResolvedMentions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResolvedMentions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResolvedMentions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResolvedMentions_resultTupleSchemeFactory());
    }

    public List<EntityMention> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResolvedMentions_result.class, metaDataMap);
    }

    public getResolvedMentions_result() {
    }

    public getResolvedMentions_result(
      List<EntityMention> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResolvedMentions_result(getResolvedMentions_result other) {
      if (other.isSetSuccess()) {
        List<EntityMention> __this__success = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.success) {
          __this__success.add(new EntityMention(other_element));
        }
        this.success = __this__success;
      }
    }

    public getResolvedMentions_result deepCopy() {
      return new getResolvedMentions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EntityMention> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EntityMention elem) {
      if (this.success == null) {
        this.success = new ArrayList<EntityMention>();
      }
      this.success.add(elem);
    }

    public List<EntityMention> getSuccess() {
      return this.success;
    }

    public getResolvedMentions_result setSuccess(List<EntityMention> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResolvedMentions_result)
        return this.equals((getResolvedMentions_result)that);
      return false;
    }

    public boolean equals(getResolvedMentions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getResolvedMentions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResolvedMentions_result typedOther = (getResolvedMentions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResolvedMentions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResolvedMentions_resultStandardSchemeFactory implements SchemeFactory {
      public getResolvedMentions_resultStandardScheme getScheme() {
        return new getResolvedMentions_resultStandardScheme();
      }
    }

    private static class getResolvedMentions_resultStandardScheme extends StandardScheme<getResolvedMentions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResolvedMentions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list444 = iprot.readListBegin();
                  struct.success = new ArrayList<EntityMention>(_list444.size);
                  for (int _i445 = 0; _i445 < _list444.size; ++_i445)
                  {
                    EntityMention _elem446; // required
                    _elem446 = new EntityMention();
                    _elem446.read(iprot);
                    struct.success.add(_elem446);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResolvedMentions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EntityMention _iter447 : struct.success)
            {
              _iter447.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResolvedMentions_resultTupleSchemeFactory implements SchemeFactory {
      public getResolvedMentions_resultTupleScheme getScheme() {
        return new getResolvedMentions_resultTupleScheme();
      }
    }

    private static class getResolvedMentions_resultTupleScheme extends TupleScheme<getResolvedMentions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResolvedMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EntityMention _iter448 : struct.success)
            {
              _iter448.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResolvedMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list449 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<EntityMention>(_list449.size);
            for (int _i450 = 0; _i450 < _list449.size; ++_i450)
            {
              EntityMention _elem451; // required
              _elem451 = new EntityMention();
              _elem451.read(iprot);
              struct.success.add(_elem451);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setEntities_args implements org.apache.thrift.TBase<setEntities_args, setEntities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEntities_args");

    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEntities_argsTupleSchemeFactory());
    }

    public List<Entity> entities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITIES((short)1, "entities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITIES
            return ENTITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entity.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEntities_args.class, metaDataMap);
    }

    public setEntities_args() {
    }

    public setEntities_args(
      List<Entity> entities)
    {
      this();
      this.entities = entities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEntities_args(setEntities_args other) {
      if (other.isSetEntities()) {
        List<Entity> __this__entities = new ArrayList<Entity>();
        for (Entity other_element : other.entities) {
          __this__entities.add(new Entity(other_element));
        }
        this.entities = __this__entities;
      }
    }

    public setEntities_args deepCopy() {
      return new setEntities_args(this);
    }

    @Override
    public void clear() {
      this.entities = null;
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<Entity> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(Entity elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<Entity>();
      }
      this.entities.add(elem);
    }

    public List<Entity> getEntities() {
      return this.entities;
    }

    public setEntities_args setEntities(List<Entity> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<Entity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITIES:
        return getEntities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITIES:
        return isSetEntities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEntities_args)
        return this.equals((setEntities_args)that);
      return false;
    }

    public boolean equals(setEntities_args that) {
      if (that == null)
        return false;

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setEntities_args typedOther = (setEntities_args)other;

      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(typedOther.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, typedOther.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEntities_args(");
      boolean first = true;

      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEntities_argsStandardSchemeFactory implements SchemeFactory {
      public setEntities_argsStandardScheme getScheme() {
        return new setEntities_argsStandardScheme();
      }
    }

    private static class setEntities_argsStandardScheme extends StandardScheme<setEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list452 = iprot.readListBegin();
                  struct.entities = new ArrayList<Entity>(_list452.size);
                  for (int _i453 = 0; _i453 < _list452.size; ++_i453)
                  {
                    Entity _elem454; // required
                    _elem454 = new Entity();
                    _elem454.read(iprot);
                    struct.entities.add(_elem454);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entities.size()));
            for (Entity _iter455 : struct.entities)
            {
              _iter455.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEntities_argsTupleSchemeFactory implements SchemeFactory {
      public setEntities_argsTupleScheme getScheme() {
        return new setEntities_argsTupleScheme();
      }
    }

    private static class setEntities_argsTupleScheme extends TupleScheme<setEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntities()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (Entity _iter456 : struct.entities)
            {
              _iter456.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list457 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.entities = new ArrayList<Entity>(_list457.size);
            for (int _i458 = 0; _i458 < _list457.size; ++_i458)
            {
              Entity _elem459; // required
              _elem459 = new Entity();
              _elem459.read(iprot);
              struct.entities.add(_elem459);
            }
          }
          struct.setEntitiesIsSet(true);
        }
      }
    }

  }

  public static class setEntities_result implements org.apache.thrift.TBase<setEntities_result, setEntities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEntities_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEntities_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEntities_result.class, metaDataMap);
    }

    public setEntities_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEntities_result(setEntities_result other) {
    }

    public setEntities_result deepCopy() {
      return new setEntities_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEntities_result)
        return this.equals((setEntities_result)that);
      return false;
    }

    public boolean equals(setEntities_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setEntities_result typedOther = (setEntities_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEntities_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEntities_resultStandardSchemeFactory implements SchemeFactory {
      public setEntities_resultStandardScheme getScheme() {
        return new setEntities_resultStandardScheme();
      }
    }

    private static class setEntities_resultStandardScheme extends StandardScheme<setEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEntities_resultTupleSchemeFactory implements SchemeFactory {
      public setEntities_resultTupleScheme getScheme() {
        return new setEntities_resultTupleScheme();
      }
    }

    private static class setEntities_resultTupleScheme extends TupleScheme<setEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setResolvedMentions_args implements org.apache.thrift.TBase<setResolvedMentions_args, setResolvedMentions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setResolvedMentions_args");

    private static final org.apache.thrift.protocol.TField RESOLVED_ENTITY_MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("resolvedEntityMentions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setResolvedMentions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setResolvedMentions_argsTupleSchemeFactory());
    }

    public List<EntityMention> resolvedEntityMentions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOLVED_ENTITY_MENTIONS((short)1, "resolvedEntityMentions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOLVED_ENTITY_MENTIONS
            return RESOLVED_ENTITY_MENTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOLVED_ENTITY_MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("resolvedEntityMentions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setResolvedMentions_args.class, metaDataMap);
    }

    public setResolvedMentions_args() {
    }

    public setResolvedMentions_args(
      List<EntityMention> resolvedEntityMentions)
    {
      this();
      this.resolvedEntityMentions = resolvedEntityMentions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setResolvedMentions_args(setResolvedMentions_args other) {
      if (other.isSetResolvedEntityMentions()) {
        List<EntityMention> __this__resolvedEntityMentions = new ArrayList<EntityMention>();
        for (EntityMention other_element : other.resolvedEntityMentions) {
          __this__resolvedEntityMentions.add(new EntityMention(other_element));
        }
        this.resolvedEntityMentions = __this__resolvedEntityMentions;
      }
    }

    public setResolvedMentions_args deepCopy() {
      return new setResolvedMentions_args(this);
    }

    @Override
    public void clear() {
      this.resolvedEntityMentions = null;
    }

    public int getResolvedEntityMentionsSize() {
      return (this.resolvedEntityMentions == null) ? 0 : this.resolvedEntityMentions.size();
    }

    public java.util.Iterator<EntityMention> getResolvedEntityMentionsIterator() {
      return (this.resolvedEntityMentions == null) ? null : this.resolvedEntityMentions.iterator();
    }

    public void addToResolvedEntityMentions(EntityMention elem) {
      if (this.resolvedEntityMentions == null) {
        this.resolvedEntityMentions = new ArrayList<EntityMention>();
      }
      this.resolvedEntityMentions.add(elem);
    }

    public List<EntityMention> getResolvedEntityMentions() {
      return this.resolvedEntityMentions;
    }

    public setResolvedMentions_args setResolvedEntityMentions(List<EntityMention> resolvedEntityMentions) {
      this.resolvedEntityMentions = resolvedEntityMentions;
      return this;
    }

    public void unsetResolvedEntityMentions() {
      this.resolvedEntityMentions = null;
    }

    /** Returns true if field resolvedEntityMentions is set (has been assigned a value) and false otherwise */
    public boolean isSetResolvedEntityMentions() {
      return this.resolvedEntityMentions != null;
    }

    public void setResolvedEntityMentionsIsSet(boolean value) {
      if (!value) {
        this.resolvedEntityMentions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESOLVED_ENTITY_MENTIONS:
        if (value == null) {
          unsetResolvedEntityMentions();
        } else {
          setResolvedEntityMentions((List<EntityMention>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOLVED_ENTITY_MENTIONS:
        return getResolvedEntityMentions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESOLVED_ENTITY_MENTIONS:
        return isSetResolvedEntityMentions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setResolvedMentions_args)
        return this.equals((setResolvedMentions_args)that);
      return false;
    }

    public boolean equals(setResolvedMentions_args that) {
      if (that == null)
        return false;

      boolean this_present_resolvedEntityMentions = true && this.isSetResolvedEntityMentions();
      boolean that_present_resolvedEntityMentions = true && that.isSetResolvedEntityMentions();
      if (this_present_resolvedEntityMentions || that_present_resolvedEntityMentions) {
        if (!(this_present_resolvedEntityMentions && that_present_resolvedEntityMentions))
          return false;
        if (!this.resolvedEntityMentions.equals(that.resolvedEntityMentions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setResolvedMentions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setResolvedMentions_args typedOther = (setResolvedMentions_args)other;

      lastComparison = Boolean.valueOf(isSetResolvedEntityMentions()).compareTo(typedOther.isSetResolvedEntityMentions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResolvedEntityMentions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolvedEntityMentions, typedOther.resolvedEntityMentions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setResolvedMentions_args(");
      boolean first = true;

      sb.append("resolvedEntityMentions:");
      if (this.resolvedEntityMentions == null) {
        sb.append("null");
      } else {
        sb.append(this.resolvedEntityMentions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setResolvedMentions_argsStandardSchemeFactory implements SchemeFactory {
      public setResolvedMentions_argsStandardScheme getScheme() {
        return new setResolvedMentions_argsStandardScheme();
      }
    }

    private static class setResolvedMentions_argsStandardScheme extends StandardScheme<setResolvedMentions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setResolvedMentions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOLVED_ENTITY_MENTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list460 = iprot.readListBegin();
                  struct.resolvedEntityMentions = new ArrayList<EntityMention>(_list460.size);
                  for (int _i461 = 0; _i461 < _list460.size; ++_i461)
                  {
                    EntityMention _elem462; // required
                    _elem462 = new EntityMention();
                    _elem462.read(iprot);
                    struct.resolvedEntityMentions.add(_elem462);
                  }
                  iprot.readListEnd();
                }
                struct.setResolvedEntityMentionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setResolvedMentions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.resolvedEntityMentions != null) {
          oprot.writeFieldBegin(RESOLVED_ENTITY_MENTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resolvedEntityMentions.size()));
            for (EntityMention _iter463 : struct.resolvedEntityMentions)
            {
              _iter463.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setResolvedMentions_argsTupleSchemeFactory implements SchemeFactory {
      public setResolvedMentions_argsTupleScheme getScheme() {
        return new setResolvedMentions_argsTupleScheme();
      }
    }

    private static class setResolvedMentions_argsTupleScheme extends TupleScheme<setResolvedMentions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setResolvedMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResolvedEntityMentions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResolvedEntityMentions()) {
          {
            oprot.writeI32(struct.resolvedEntityMentions.size());
            for (EntityMention _iter464 : struct.resolvedEntityMentions)
            {
              _iter464.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setResolvedMentions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list465 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.resolvedEntityMentions = new ArrayList<EntityMention>(_list465.size);
            for (int _i466 = 0; _i466 < _list465.size; ++_i466)
            {
              EntityMention _elem467; // required
              _elem467 = new EntityMention();
              _elem467.read(iprot);
              struct.resolvedEntityMentions.add(_elem467);
            }
          }
          struct.setResolvedEntityMentionsIsSet(true);
        }
      }
    }

  }

  public static class setResolvedMentions_result implements org.apache.thrift.TBase<setResolvedMentions_result, setResolvedMentions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setResolvedMentions_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setResolvedMentions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setResolvedMentions_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setResolvedMentions_result.class, metaDataMap);
    }

    public setResolvedMentions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setResolvedMentions_result(setResolvedMentions_result other) {
    }

    public setResolvedMentions_result deepCopy() {
      return new setResolvedMentions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setResolvedMentions_result)
        return this.equals((setResolvedMentions_result)that);
      return false;
    }

    public boolean equals(setResolvedMentions_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setResolvedMentions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setResolvedMentions_result typedOther = (setResolvedMentions_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setResolvedMentions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setResolvedMentions_resultStandardSchemeFactory implements SchemeFactory {
      public setResolvedMentions_resultStandardScheme getScheme() {
        return new setResolvedMentions_resultStandardScheme();
      }
    }

    private static class setResolvedMentions_resultStandardScheme extends StandardScheme<setResolvedMentions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setResolvedMentions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setResolvedMentions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setResolvedMentions_resultTupleSchemeFactory implements SchemeFactory {
      public setResolvedMentions_resultTupleScheme getScheme() {
        return new setResolvedMentions_resultTupleScheme();
      }
    }

    private static class setResolvedMentions_resultTupleScheme extends TupleScheme<setResolvedMentions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setResolvedMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setResolvedMentions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
