/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class Token.
 */
public class Token implements org.apache.thrift.TBase<Token, Token._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Token");

  private static final org.apache.thrift.protocol.TField SEQUENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHAR_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("charOffset", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUDIO_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("audioOffset", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField LEMMA_FIELD_DESC = new org.apache.thrift.protocol.TField("lemma", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOKEN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TokenStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TokenTupleSchemeFactory());
  }

  /**
   * The sequence id
   */
  public long sequenceId; // required
  /**
   * The char offset
   */
  public CharOffset charOffset; // required
  /**
   * The value
   */
  public String value; // required
  /**
   * The audio offset
   */
  public AudioOffset audioOffset; // optional
  /**
   * The confidence
   */
  public double confidence; // optional
  /**
   * The lemma
   */
  public String lemma; // optional
  /**
   * The token type
   * 
   * @see TokenType
   */
  public TokenType tokenType; // optional
  /**
   * The id
   */
  public ID id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The sequence id
     */
    SEQUENCE_ID((short)1, "sequenceId"),
    /**
     * The char offset
     */
    CHAR_OFFSET((short)2, "charOffset"),
    /**
     * The value
     */
    VALUE((short)3, "value"),
    /**
     * The audio offset
     */
    AUDIO_OFFSET((short)4, "audioOffset"),
    /**
     * The confidence
     */
    CONFIDENCE((short)5, "confidence"),
    /**
     * The lemma
     */
    LEMMA((short)6, "lemma"),
    /**
     * The token type
     * 
     * @see TokenType
     */
    TOKEN_TYPE((short)7, "tokenType"),
    /**
     * The id
     */
    ID((short)8, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_ID
          return SEQUENCE_ID;
        case 2: // CHAR_OFFSET
          return CHAR_OFFSET;
        case 3: // VALUE
          return VALUE;
        case 4: // AUDIO_OFFSET
          return AUDIO_OFFSET;
        case 5: // CONFIDENCE
          return CONFIDENCE;
        case 6: // LEMMA
          return LEMMA;
        case 7: // TOKEN_TYPE
          return TOKEN_TYPE;
        case 8: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCEID_ISSET_ID = 0;
  private static final int __CONFIDENCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.AUDIO_OFFSET,_Fields.CONFIDENCE,_Fields.LEMMA,_Fields.TOKEN_TYPE,_Fields.ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sequenceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHAR_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("charOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CharOffset.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIO_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("audioOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioOffset.class)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEMMA, new org.apache.thrift.meta_data.FieldMetaData("lemma", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tokenType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TokenType.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Token.class, metaDataMap);
  }

  public Token() {
  }

  public Token(
    long sequenceId,
    CharOffset charOffset,
    String value)
  {
    this();
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    this.charOffset = charOffset;
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Token(Token other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceId = other.sequenceId;
    if (other.isSetCharOffset()) {
      this.charOffset = new CharOffset(other.charOffset);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAudioOffset()) {
      this.audioOffset = new AudioOffset(other.audioOffset);
    }
    this.confidence = other.confidence;
    if (other.isSetLemma()) {
      this.lemma = other.lemma;
    }
    if (other.isSetTokenType()) {
      this.tokenType = other.tokenType;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
  }

  public Token deepCopy() {
    return new Token(this);
  }

  @Override
  public void clear() {
    setSequenceIdIsSet(false);
    this.sequenceId = 0;
    this.charOffset = null;
    this.value = null;
    this.audioOffset = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
    this.lemma = null;
    this.tokenType = null;
    this.id = null;
  }

  /**
   * The sequence id
   */
  public long getSequenceId() {
    return this.sequenceId;
  }

  /**
   * The sequence id
   */
  public Token setSequenceId(long sequenceId) {
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    return this;
  }

  public void unsetSequenceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  /** Returns true if field sequenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  public void setSequenceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCEID_ISSET_ID, value);
  }

  /**
   * The char offset
   */
  public CharOffset getCharOffset() {
    return this.charOffset;
  }

  /**
   * The char offset
   */
  public Token setCharOffset(CharOffset charOffset) {
    this.charOffset = charOffset;
    return this;
  }

  public void unsetCharOffset() {
    this.charOffset = null;
  }

  /** Returns true if field charOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetCharOffset() {
    return this.charOffset != null;
  }

  public void setCharOffsetIsSet(boolean value) {
    if (!value) {
      this.charOffset = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Token setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The audio offset
   */
  public AudioOffset getAudioOffset() {
    return this.audioOffset;
  }

  /**
   * The audio offset
   */
  public Token setAudioOffset(AudioOffset audioOffset) {
    this.audioOffset = audioOffset;
    return this;
  }

  public void unsetAudioOffset() {
    this.audioOffset = null;
  }

  /** Returns true if field audioOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioOffset() {
    return this.audioOffset != null;
  }

  public void setAudioOffsetIsSet(boolean value) {
    if (!value) {
      this.audioOffset = null;
    }
  }

  /**
   * The confidence
   */
  public double getConfidence() {
    return this.confidence;
  }

  /**
   * The confidence
   */
  public Token setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  /**
   * The lemma
   */
  public String getLemma() {
    return this.lemma;
  }

  /**
   * The lemma
   */
  public Token setLemma(String lemma) {
    this.lemma = lemma;
    return this;
  }

  public void unsetLemma() {
    this.lemma = null;
  }

  /** Returns true if field lemma is set (has been assigned a value) and false otherwise */
  public boolean isSetLemma() {
    return this.lemma != null;
  }

  public void setLemmaIsSet(boolean value) {
    if (!value) {
      this.lemma = null;
    }
  }

  /**
   * The token type
   * 
   * @see TokenType
   */
  public TokenType getTokenType() {
    return this.tokenType;
  }

  /**
   * The token type
   * 
   * @see TokenType
   */
  public Token setTokenType(TokenType tokenType) {
    this.tokenType = tokenType;
    return this;
  }

  public void unsetTokenType() {
    this.tokenType = null;
  }

  /** Returns true if field tokenType is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenType() {
    return this.tokenType != null;
  }

  public void setTokenTypeIsSet(boolean value) {
    if (!value) {
      this.tokenType = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Token setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE_ID:
      if (value == null) {
        unsetSequenceId();
      } else {
        setSequenceId((Long)value);
      }
      break;

    case CHAR_OFFSET:
      if (value == null) {
        unsetCharOffset();
      } else {
        setCharOffset((CharOffset)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case AUDIO_OFFSET:
      if (value == null) {
        unsetAudioOffset();
      } else {
        setAudioOffset((AudioOffset)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Double)value);
      }
      break;

    case LEMMA:
      if (value == null) {
        unsetLemma();
      } else {
        setLemma((String)value);
      }
      break;

    case TOKEN_TYPE:
      if (value == null) {
        unsetTokenType();
      } else {
        setTokenType((TokenType)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_ID:
      return Long.valueOf(getSequenceId());

    case CHAR_OFFSET:
      return getCharOffset();

    case VALUE:
      return getValue();

    case AUDIO_OFFSET:
      return getAudioOffset();

    case CONFIDENCE:
      return Double.valueOf(getConfidence());

    case LEMMA:
      return getLemma();

    case TOKEN_TYPE:
      return getTokenType();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_ID:
      return isSetSequenceId();
    case CHAR_OFFSET:
      return isSetCharOffset();
    case VALUE:
      return isSetValue();
    case AUDIO_OFFSET:
      return isSetAudioOffset();
    case CONFIDENCE:
      return isSetConfidence();
    case LEMMA:
      return isSetLemma();
    case TOKEN_TYPE:
      return isSetTokenType();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Token)
      return this.equals((Token)that);
    return false;
  }

  public boolean equals(Token that) {
    if (that == null)
      return false;

    boolean this_present_sequenceId = true;
    boolean that_present_sequenceId = true;
    if (this_present_sequenceId || that_present_sequenceId) {
      if (!(this_present_sequenceId && that_present_sequenceId))
        return false;
      if (this.sequenceId != that.sequenceId)
        return false;
    }

    boolean this_present_charOffset = true && this.isSetCharOffset();
    boolean that_present_charOffset = true && that.isSetCharOffset();
    if (this_present_charOffset || that_present_charOffset) {
      if (!(this_present_charOffset && that_present_charOffset))
        return false;
      if (!this.charOffset.equals(that.charOffset))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_audioOffset = true && this.isSetAudioOffset();
    boolean that_present_audioOffset = true && that.isSetAudioOffset();
    if (this_present_audioOffset || that_present_audioOffset) {
      if (!(this_present_audioOffset && that_present_audioOffset))
        return false;
      if (!this.audioOffset.equals(that.audioOffset))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_lemma = true && this.isSetLemma();
    boolean that_present_lemma = true && that.isSetLemma();
    if (this_present_lemma || that_present_lemma) {
      if (!(this_present_lemma && that_present_lemma))
        return false;
      if (!this.lemma.equals(that.lemma))
        return false;
    }

    boolean this_present_tokenType = true && this.isSetTokenType();
    boolean that_present_tokenType = true && that.isSetTokenType();
    if (this_present_tokenType || that_present_tokenType) {
      if (!(this_present_tokenType && that_present_tokenType))
        return false;
      if (!this.tokenType.equals(that.tokenType))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Token other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Token typedOther = (Token)other;

    lastComparison = Boolean.valueOf(isSetSequenceId()).compareTo(typedOther.isSetSequenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceId, typedOther.sequenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharOffset()).compareTo(typedOther.isSetCharOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charOffset, typedOther.charOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioOffset()).compareTo(typedOther.isSetAudioOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioOffset, typedOther.audioOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(typedOther.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, typedOther.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLemma()).compareTo(typedOther.isSetLemma());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLemma()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lemma, typedOther.lemma);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenType()).compareTo(typedOther.isSetTokenType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenType, typedOther.tokenType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Token(");
    boolean first = true;

    sb.append("sequenceId:");
    sb.append(this.sequenceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charOffset:");
    if (this.charOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.charOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (isSetAudioOffset()) {
      if (!first) sb.append(", ");
      sb.append("audioOffset:");
      if (this.audioOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.audioOffset);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    if (isSetLemma()) {
      if (!first) sb.append(", ");
      sb.append("lemma:");
      if (this.lemma == null) {
        sb.append("null");
      } else {
        sb.append(this.lemma);
      }
      first = false;
    }
    if (isSetTokenType()) {
      if (!first) sb.append(", ");
      sb.append("tokenType:");
      if (this.tokenType == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenType);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sequenceId' because it's a primitive and you chose the non-beans generator.
    if (charOffset == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'charOffset' was not present! Struct: " + toString());
    }
    if (value == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (charOffset != null) {
      charOffset.validate();
    }
    if (audioOffset != null) {
      audioOffset.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenStandardSchemeFactory implements SchemeFactory {
    public TokenStandardScheme getScheme() {
      return new TokenStandardScheme();
    }
  }

  private static class TokenStandardScheme extends StandardScheme<Token> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Token struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceId = iprot.readI64();
              struct.setSequenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAR_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.charOffset = new CharOffset();
              struct.charOffset.read(iprot);
              struct.setCharOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUDIO_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audioOffset = new AudioOffset();
              struct.audioOffset.read(iprot);
              struct.setAudioOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEMMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lemma = iprot.readString();
              struct.setLemmaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOKEN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tokenType = TokenType.findByValue(iprot.readI32());
              struct.setTokenTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSequenceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Token struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_ID_FIELD_DESC);
      oprot.writeI64(struct.sequenceId);
      oprot.writeFieldEnd();
      if (struct.charOffset != null) {
        oprot.writeFieldBegin(CHAR_OFFSET_FIELD_DESC);
        struct.charOffset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.audioOffset != null) {
        if (struct.isSetAudioOffset()) {
          oprot.writeFieldBegin(AUDIO_OFFSET_FIELD_DESC);
          struct.audioOffset.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      if (struct.lemma != null) {
        if (struct.isSetLemma()) {
          oprot.writeFieldBegin(LEMMA_FIELD_DESC);
          oprot.writeString(struct.lemma);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tokenType != null) {
        if (struct.isSetTokenType()) {
          oprot.writeFieldBegin(TOKEN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.tokenType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenTupleSchemeFactory implements SchemeFactory {
    public TokenTupleScheme getScheme() {
      return new TokenTupleScheme();
    }
  }

  private static class TokenTupleScheme extends TupleScheme<Token> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Token struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sequenceId);
      struct.charOffset.write(oprot);
      oprot.writeString(struct.value);
      BitSet optionals = new BitSet();
      if (struct.isSetAudioOffset()) {
        optionals.set(0);
      }
      if (struct.isSetConfidence()) {
        optionals.set(1);
      }
      if (struct.isSetLemma()) {
        optionals.set(2);
      }
      if (struct.isSetTokenType()) {
        optionals.set(3);
      }
      if (struct.isSetId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAudioOffset()) {
        struct.audioOffset.write(oprot);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
      if (struct.isSetLemma()) {
        oprot.writeString(struct.lemma);
      }
      if (struct.isSetTokenType()) {
        oprot.writeI32(struct.tokenType.getValue());
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Token struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sequenceId = iprot.readI64();
      struct.setSequenceIdIsSet(true);
      struct.charOffset = new CharOffset();
      struct.charOffset.read(iprot);
      struct.setCharOffsetIsSet(true);
      struct.value = iprot.readString();
      struct.setValueIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.audioOffset = new AudioOffset();
        struct.audioOffset.read(iprot);
        struct.setAudioOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lemma = iprot.readString();
        struct.setLemmaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tokenType = TokenType.findByValue(iprot.readI32());
        struct.setTokenTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
    }
  }

}