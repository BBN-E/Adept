/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Audio implements org.apache.thrift.TBase<Audio, Audio._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Audio");

  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AUDIO_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("audioBuffer", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUDIO_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("audioType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSpan", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AudioStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AudioTupleSchemeFactory());
  }

  /**
   * The uri
   */
  public String uri; // required
  /**
   * The audioBuffer
   */
  public ByteBuffer audioBuffer; // required
  /**
   * The audio type
   * 
   * @see AudioFileType
   */
  public AudioFileType audioType; // required
  /**
   * The time span
   */
  public AudioOffset timeSpan; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The uri
     */
    URI((short)1, "uri"),
    /**
     * The audioBuffer
     */
    AUDIO_BUFFER((short)2, "audioBuffer"),
    /**
     * The audio type
     * 
     * @see AudioFileType
     */
    AUDIO_TYPE((short)3, "audioType"),
    /**
     * The time span
     */
    TIME_SPAN((short)4, "timeSpan");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URI
          return URI;
        case 2: // AUDIO_BUFFER
          return AUDIO_BUFFER;
        case 3: // AUDIO_TYPE
          return AUDIO_TYPE;
        case 4: // TIME_SPAN
          return TIME_SPAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIO_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("audioBuffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.AUDIO_TYPE, new org.apache.thrift.meta_data.FieldMetaData("audioType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AudioFileType.class)));
    tmpMap.put(_Fields.TIME_SPAN, new org.apache.thrift.meta_data.FieldMetaData("timeSpan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioOffset.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Audio.class, metaDataMap);
  }

  public Audio() {
  }

  public Audio(
    String uri,
    ByteBuffer audioBuffer,
    AudioFileType audioType,
    AudioOffset timeSpan)
  {
    this();
    this.uri = uri;
    this.audioBuffer = audioBuffer;
    this.audioType = audioType;
    this.timeSpan = timeSpan;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Audio(Audio other) {
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetAudioBuffer()) {
      this.audioBuffer = org.apache.thrift.TBaseHelper.copyBinary(other.audioBuffer);
;
    }
    if (other.isSetAudioType()) {
      this.audioType = other.audioType;
    }
    if (other.isSetTimeSpan()) {
      this.timeSpan = new AudioOffset(other.timeSpan);
    }
  }

  public Audio deepCopy() {
    return new Audio(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    this.audioBuffer = null;
    this.audioType = null;
    this.timeSpan = null;
  }

  /**
   * The uri
   */
  public String getUri() {
    return this.uri;
  }

  /**
   * The uri
   */
  public Audio setUri(String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  /**
   * The audioBuffer
   */
  public byte[] getAudioBuffer() {
    setAudioBuffer(org.apache.thrift.TBaseHelper.rightSize(audioBuffer));
    return audioBuffer == null ? null : audioBuffer.array();
  }

  public ByteBuffer bufferForAudioBuffer() {
    return audioBuffer;
  }

  /**
   * The audioBuffer
   */
  public Audio setAudioBuffer(byte[] audioBuffer) {
    setAudioBuffer(audioBuffer == null ? (ByteBuffer)null : ByteBuffer.wrap(audioBuffer));
    return this;
  }

  public Audio setAudioBuffer(ByteBuffer audioBuffer) {
    this.audioBuffer = audioBuffer;
    return this;
  }

  public void unsetAudioBuffer() {
    this.audioBuffer = null;
  }

  /** Returns true if field audioBuffer is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioBuffer() {
    return this.audioBuffer != null;
  }

  public void setAudioBufferIsSet(boolean value) {
    if (!value) {
      this.audioBuffer = null;
    }
  }

  /**
   * The audio type
   * 
   * @see AudioFileType
   */
  public AudioFileType getAudioType() {
    return this.audioType;
  }

  /**
   * The audio type
   * 
   * @see AudioFileType
   */
  public Audio setAudioType(AudioFileType audioType) {
    this.audioType = audioType;
    return this;
  }

  public void unsetAudioType() {
    this.audioType = null;
  }

  /** Returns true if field audioType is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioType() {
    return this.audioType != null;
  }

  public void setAudioTypeIsSet(boolean value) {
    if (!value) {
      this.audioType = null;
    }
  }

  /**
   * The time span
   */
  public AudioOffset getTimeSpan() {
    return this.timeSpan;
  }

  /**
   * The time span
   */
  public Audio setTimeSpan(AudioOffset timeSpan) {
    this.timeSpan = timeSpan;
    return this;
  }

  public void unsetTimeSpan() {
    this.timeSpan = null;
  }

  /** Returns true if field timeSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSpan() {
    return this.timeSpan != null;
  }

  public void setTimeSpanIsSet(boolean value) {
    if (!value) {
      this.timeSpan = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((String)value);
      }
      break;

    case AUDIO_BUFFER:
      if (value == null) {
        unsetAudioBuffer();
      } else {
        setAudioBuffer((ByteBuffer)value);
      }
      break;

    case AUDIO_TYPE:
      if (value == null) {
        unsetAudioType();
      } else {
        setAudioType((AudioFileType)value);
      }
      break;

    case TIME_SPAN:
      if (value == null) {
        unsetTimeSpan();
      } else {
        setTimeSpan((AudioOffset)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case AUDIO_BUFFER:
      return getAudioBuffer();

    case AUDIO_TYPE:
      return getAudioType();

    case TIME_SPAN:
      return getTimeSpan();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URI:
      return isSetUri();
    case AUDIO_BUFFER:
      return isSetAudioBuffer();
    case AUDIO_TYPE:
      return isSetAudioType();
    case TIME_SPAN:
      return isSetTimeSpan();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Audio)
      return this.equals((Audio)that);
    return false;
  }

  public boolean equals(Audio that) {
    if (that == null)
      return false;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_audioBuffer = true && this.isSetAudioBuffer();
    boolean that_present_audioBuffer = true && that.isSetAudioBuffer();
    if (this_present_audioBuffer || that_present_audioBuffer) {
      if (!(this_present_audioBuffer && that_present_audioBuffer))
        return false;
      if (!this.audioBuffer.equals(that.audioBuffer))
        return false;
    }

    boolean this_present_audioType = true && this.isSetAudioType();
    boolean that_present_audioType = true && that.isSetAudioType();
    if (this_present_audioType || that_present_audioType) {
      if (!(this_present_audioType && that_present_audioType))
        return false;
      if (!this.audioType.equals(that.audioType))
        return false;
    }

    boolean this_present_timeSpan = true && this.isSetTimeSpan();
    boolean that_present_timeSpan = true && that.isSetTimeSpan();
    if (this_present_timeSpan || that_present_timeSpan) {
      if (!(this_present_timeSpan && that_present_timeSpan))
        return false;
      if (!this.timeSpan.equals(that.timeSpan))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Audio other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Audio typedOther = (Audio)other;

    lastComparison = Boolean.valueOf(isSetUri()).compareTo(typedOther.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, typedOther.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioBuffer()).compareTo(typedOther.isSetAudioBuffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioBuffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioBuffer, typedOther.audioBuffer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioType()).compareTo(typedOther.isSetAudioType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioType, typedOther.audioType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeSpan()).compareTo(typedOther.isSetTimeSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSpan, typedOther.timeSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Audio(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audioBuffer:");
    if (this.audioBuffer == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.audioBuffer, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audioType:");
    if (this.audioType == null) {
      sb.append("null");
    } else {
      sb.append(this.audioType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeSpan:");
    if (this.timeSpan == null) {
      sb.append("null");
    } else {
      sb.append(this.timeSpan);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (timeSpan != null) {
      timeSpan.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AudioStandardSchemeFactory implements SchemeFactory {
    public AudioStandardScheme getScheme() {
      return new AudioStandardScheme();
    }
  }

  private static class AudioStandardScheme extends StandardScheme<Audio> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Audio struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUDIO_BUFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audioBuffer = iprot.readBinary();
              struct.setAudioBufferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUDIO_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.audioType = AudioFileType.findByValue(iprot.readI32());
              struct.setAudioTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeSpan = new AudioOffset();
              struct.timeSpan.read(iprot);
              struct.setTimeSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Audio struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      if (struct.audioBuffer != null) {
        oprot.writeFieldBegin(AUDIO_BUFFER_FIELD_DESC);
        oprot.writeBinary(struct.audioBuffer);
        oprot.writeFieldEnd();
      }
      if (struct.audioType != null) {
        oprot.writeFieldBegin(AUDIO_TYPE_FIELD_DESC);
        oprot.writeI32(struct.audioType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.timeSpan != null) {
        oprot.writeFieldBegin(TIME_SPAN_FIELD_DESC);
        struct.timeSpan.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AudioTupleSchemeFactory implements SchemeFactory {
    public AudioTupleScheme getScheme() {
      return new AudioTupleScheme();
    }
  }

  private static class AudioTupleScheme extends TupleScheme<Audio> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Audio struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUri()) {
        optionals.set(0);
      }
      if (struct.isSetAudioBuffer()) {
        optionals.set(1);
      }
      if (struct.isSetAudioType()) {
        optionals.set(2);
      }
      if (struct.isSetTimeSpan()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetAudioBuffer()) {
        oprot.writeBinary(struct.audioBuffer);
      }
      if (struct.isSetAudioType()) {
        oprot.writeI32(struct.audioType.getValue());
      }
      if (struct.isSetTimeSpan()) {
        struct.timeSpan.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Audio struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.audioBuffer = iprot.readBinary();
        struct.setAudioBufferIsSet(true);
      }
      if (incoming.get(2)) {
        struct.audioType = AudioFileType.findByValue(iprot.readI32());
        struct.setAudioTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timeSpan = new AudioOffset();
        struct.timeSpan.read(iprot);
        struct.setTimeSpanIsSet(true);
      }
    }
  }

}

