/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class Dependency.
 */
public class Dependency implements org.apache.thrift.TBase<Dependency, Dependency._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dependency");

  private static final org.apache.thrift.protocol.TField GOVERNOR_FIELD_DESC = new org.apache.thrift.protocol.TField("governor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DEPENDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("dependent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DEPENDENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencyType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DependencyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DependencyTupleSchemeFactory());
  }

  /**
   * The governor
   */
  public ChunkUnion governor; // required
  /**
   * The dependent
   */
  public ChunkUnion dependent; // required
  /**
   * The dependency type
   */
  public String dependencyType; // required
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The governor
     */
    GOVERNOR((short)1, "governor"),
    /**
     * The dependent
     */
    DEPENDENT((short)2, "dependent"),
    /**
     * The dependency type
     */
    DEPENDENCY_TYPE((short)3, "dependencyType"),
    /**
     * The id
     */
    ID((short)4, "id"),
    /**
     * The value
     */
    VALUE((short)5, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)6, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GOVERNOR
          return GOVERNOR;
        case 2: // DEPENDENT
          return DEPENDENT;
        case 3: // DEPENDENCY_TYPE
          return DEPENDENCY_TYPE;
        case 4: // ID
          return ID;
        case 5: // VALUE
          return VALUE;
        case 6: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GOVERNOR, new org.apache.thrift.meta_data.FieldMetaData("governor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class)));
    tmpMap.put(_Fields.DEPENDENT, new org.apache.thrift.meta_data.FieldMetaData("dependent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChunkUnion.class)));
    tmpMap.put(_Fields.DEPENDENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dependencyType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dependency.class, metaDataMap);
  }

  public Dependency() {
  }

  public Dependency(
    ChunkUnion governor,
    ChunkUnion dependent,
    String dependencyType)
  {
    this();
    this.governor = governor;
    this.dependent = dependent;
    this.dependencyType = dependencyType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dependency(Dependency other) {
    if (other.isSetGovernor()) {
      this.governor = new ChunkUnion(other.governor);
    }
    if (other.isSetDependent()) {
      this.dependent = new ChunkUnion(other.dependent);
    }
    if (other.isSetDependencyType()) {
      this.dependencyType = other.dependencyType;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public Dependency deepCopy() {
    return new Dependency(this);
  }

  @Override
  public void clear() {
    this.governor = null;
    this.dependent = null;
    this.dependencyType = null;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The governor
   */
  public ChunkUnion getGovernor() {
    return this.governor;
  }

  /**
   * The governor
   */
  public Dependency setGovernor(ChunkUnion governor) {
    this.governor = governor;
    return this;
  }

  public void unsetGovernor() {
    this.governor = null;
  }

  /** Returns true if field governor is set (has been assigned a value) and false otherwise */
  public boolean isSetGovernor() {
    return this.governor != null;
  }

  public void setGovernorIsSet(boolean value) {
    if (!value) {
      this.governor = null;
    }
  }

  /**
   * The dependent
   */
  public ChunkUnion getDependent() {
    return this.dependent;
  }

  /**
   * The dependent
   */
  public Dependency setDependent(ChunkUnion dependent) {
    this.dependent = dependent;
    return this;
  }

  public void unsetDependent() {
    this.dependent = null;
  }

  /** Returns true if field dependent is set (has been assigned a value) and false otherwise */
  public boolean isSetDependent() {
    return this.dependent != null;
  }

  public void setDependentIsSet(boolean value) {
    if (!value) {
      this.dependent = null;
    }
  }

  /**
   * The dependency type
   */
  public String getDependencyType() {
    return this.dependencyType;
  }

  /**
   * The dependency type
   */
  public Dependency setDependencyType(String dependencyType) {
    this.dependencyType = dependencyType;
    return this;
  }

  public void unsetDependencyType() {
    this.dependencyType = null;
  }

  /** Returns true if field dependencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencyType() {
    return this.dependencyType != null;
  }

  public void setDependencyTypeIsSet(boolean value) {
    if (!value) {
      this.dependencyType = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Dependency setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Dependency setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public Dependency setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GOVERNOR:
      if (value == null) {
        unsetGovernor();
      } else {
        setGovernor((ChunkUnion)value);
      }
      break;

    case DEPENDENT:
      if (value == null) {
        unsetDependent();
      } else {
        setDependent((ChunkUnion)value);
      }
      break;

    case DEPENDENCY_TYPE:
      if (value == null) {
        unsetDependencyType();
      } else {
        setDependencyType((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GOVERNOR:
      return getGovernor();

    case DEPENDENT:
      return getDependent();

    case DEPENDENCY_TYPE:
      return getDependencyType();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GOVERNOR:
      return isSetGovernor();
    case DEPENDENT:
      return isSetDependent();
    case DEPENDENCY_TYPE:
      return isSetDependencyType();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dependency)
      return this.equals((Dependency)that);
    return false;
  }

  public boolean equals(Dependency that) {
    if (that == null)
      return false;

    boolean this_present_governor = true && this.isSetGovernor();
    boolean that_present_governor = true && that.isSetGovernor();
    if (this_present_governor || that_present_governor) {
      if (!(this_present_governor && that_present_governor))
        return false;
      if (!this.governor.equals(that.governor))
        return false;
    }

    boolean this_present_dependent = true && this.isSetDependent();
    boolean that_present_dependent = true && that.isSetDependent();
    if (this_present_dependent || that_present_dependent) {
      if (!(this_present_dependent && that_present_dependent))
        return false;
      if (!this.dependent.equals(that.dependent))
        return false;
    }

    boolean this_present_dependencyType = true && this.isSetDependencyType();
    boolean that_present_dependencyType = true && that.isSetDependencyType();
    if (this_present_dependencyType || that_present_dependencyType) {
      if (!(this_present_dependencyType && that_present_dependencyType))
        return false;
      if (!this.dependencyType.equals(that.dependencyType))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dependency other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dependency typedOther = (Dependency)other;

    lastComparison = Boolean.valueOf(isSetGovernor()).compareTo(typedOther.isSetGovernor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGovernor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.governor, typedOther.governor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependent()).compareTo(typedOther.isSetDependent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependent, typedOther.dependent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependencyType()).compareTo(typedOther.isSetDependencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencyType, typedOther.dependencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dependency(");
    boolean first = true;

    sb.append("governor:");
    if (this.governor == null) {
      sb.append("null");
    } else {
      sb.append(this.governor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dependent:");
    if (this.dependent == null) {
      sb.append("null");
    } else {
      sb.append(this.dependent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dependencyType:");
    if (this.dependencyType == null) {
      sb.append("null");
    } else {
      sb.append(this.dependencyType);
    }
    first = false;
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (governor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'governor' was not present! Struct: " + toString());
    }
    if (dependent == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dependent' was not present! Struct: " + toString());
    }
    if (dependencyType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dependencyType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DependencyStandardSchemeFactory implements SchemeFactory {
    public DependencyStandardScheme getScheme() {
      return new DependencyStandardScheme();
    }
  }

  private static class DependencyStandardScheme extends StandardScheme<Dependency> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dependency struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GOVERNOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.governor = new ChunkUnion();
              struct.governor.read(iprot);
              struct.setGovernorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPENDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dependent = new ChunkUnion();
              struct.dependent.read(iprot);
              struct.setDependentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPENDENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dependencyType = iprot.readString();
              struct.setDependencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dependency struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.governor != null) {
        oprot.writeFieldBegin(GOVERNOR_FIELD_DESC);
        struct.governor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dependent != null) {
        oprot.writeFieldBegin(DEPENDENT_FIELD_DESC);
        struct.dependent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dependencyType != null) {
        oprot.writeFieldBegin(DEPENDENCY_TYPE_FIELD_DESC);
        oprot.writeString(struct.dependencyType);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DependencyTupleSchemeFactory implements SchemeFactory {
    public DependencyTupleScheme getScheme() {
      return new DependencyTupleScheme();
    }
  }

  private static class DependencyTupleScheme extends TupleScheme<Dependency> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dependency struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.governor.write(oprot);
      struct.dependent.write(oprot);
      oprot.writeString(struct.dependencyType);
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetValue()) {
        optionals.set(1);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dependency struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.governor = new ChunkUnion();
      struct.governor.read(iprot);
      struct.setGovernorIsSet(true);
      struct.dependent = new ChunkUnion();
      struct.dependent.read(iprot);
      struct.setDependentIsSet(true);
      struct.dependencyType = iprot.readString();
      struct.setDependencyTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}