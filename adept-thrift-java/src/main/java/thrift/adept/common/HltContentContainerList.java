/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class HltContentContainerList contains a list of HltContentContainers
 * and a unique ID.
 */
public class HltContentContainerList implements org.apache.thrift.TBase<HltContentContainerList, HltContentContainerList._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HltContentContainerList");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SERIAL_VERSION_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialVersionUID", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField HLT_CONTENT_CONTAINER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("hltContentContainerList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HltContentContainerListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HltContentContainerListTupleSchemeFactory());
  }

  /**
   * The id
   */
  public ID id; // required
  /**
   * The constant serialVersionUID
   */
  public long serialVersionUID; // required
  /**
   * The list of HltContentContainers
   */
  public List<HltContentContainer> hltContentContainerList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The id
     */
    ID((short)1, "id"),
    /**
     * The constant serialVersionUID
     */
    SERIAL_VERSION_UID((short)2, "serialVersionUID"),
    /**
     * The list of HltContentContainers
     */
    HLT_CONTENT_CONTAINER_LIST((short)3, "hltContentContainerList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SERIAL_VERSION_UID
          return SERIAL_VERSION_UID;
        case 3: // HLT_CONTENT_CONTAINER_LIST
          return HLT_CONTENT_CONTAINER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERIALVERSIONUID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.SERIAL_VERSION_UID, new org.apache.thrift.meta_data.FieldMetaData("serialVersionUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HLT_CONTENT_CONTAINER_LIST, new org.apache.thrift.meta_data.FieldMetaData("hltContentContainerList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HltContentContainer.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HltContentContainerList.class, metaDataMap);
  }

  public HltContentContainerList() {
    this.serialVersionUID = 651655831447893195L;

  }

  public HltContentContainerList(
    ID id,
    long serialVersionUID,
    List<HltContentContainer> hltContentContainerList)
  {
    this();
    this.id = id;
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    this.hltContentContainerList = hltContentContainerList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HltContentContainerList(HltContentContainerList other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    this.serialVersionUID = other.serialVersionUID;
    if (other.isSetHltContentContainerList()) {
      List<HltContentContainer> __this__hltContentContainerList = new ArrayList<HltContentContainer>();
      for (HltContentContainer other_element : other.hltContentContainerList) {
        __this__hltContentContainerList.add(new HltContentContainer(other_element));
      }
      this.hltContentContainerList = __this__hltContentContainerList;
    }
  }

  public HltContentContainerList deepCopy() {
    return new HltContentContainerList(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.serialVersionUID = 651655831447893195L;

    this.hltContentContainerList = null;
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public HltContentContainerList setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The constant serialVersionUID
   */
  public long getSerialVersionUID() {
    return this.serialVersionUID;
  }

  /**
   * The constant serialVersionUID
   */
  public HltContentContainerList setSerialVersionUID(long serialVersionUID) {
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    return this;
  }

  public void unsetSerialVersionUID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  /** Returns true if field serialVersionUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialVersionUID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  public void setSerialVersionUIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID, value);
  }

  public int getHltContentContainerListSize() {
    return (this.hltContentContainerList == null) ? 0 : this.hltContentContainerList.size();
  }

  public java.util.Iterator<HltContentContainer> getHltContentContainerListIterator() {
    return (this.hltContentContainerList == null) ? null : this.hltContentContainerList.iterator();
  }

  public void addToHltContentContainerList(HltContentContainer elem) {
    if (this.hltContentContainerList == null) {
      this.hltContentContainerList = new ArrayList<HltContentContainer>();
    }
    this.hltContentContainerList.add(elem);
  }

  /**
   * The list of HltContentContainers
   */
  public List<HltContentContainer> getHltContentContainerList() {
    return this.hltContentContainerList;
  }

  /**
   * The list of HltContentContainers
   */
  public HltContentContainerList setHltContentContainerList(List<HltContentContainer> hltContentContainerList) {
    this.hltContentContainerList = hltContentContainerList;
    return this;
  }

  public void unsetHltContentContainerList() {
    this.hltContentContainerList = null;
  }

  /** Returns true if field hltContentContainerList is set (has been assigned a value) and false otherwise */
  public boolean isSetHltContentContainerList() {
    return this.hltContentContainerList != null;
  }

  public void setHltContentContainerListIsSet(boolean value) {
    if (!value) {
      this.hltContentContainerList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case SERIAL_VERSION_UID:
      if (value == null) {
        unsetSerialVersionUID();
      } else {
        setSerialVersionUID((Long)value);
      }
      break;

    case HLT_CONTENT_CONTAINER_LIST:
      if (value == null) {
        unsetHltContentContainerList();
      } else {
        setHltContentContainerList((List<HltContentContainer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SERIAL_VERSION_UID:
      return Long.valueOf(getSerialVersionUID());

    case HLT_CONTENT_CONTAINER_LIST:
      return getHltContentContainerList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SERIAL_VERSION_UID:
      return isSetSerialVersionUID();
    case HLT_CONTENT_CONTAINER_LIST:
      return isSetHltContentContainerList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HltContentContainerList)
      return this.equals((HltContentContainerList)that);
    return false;
  }

  public boolean equals(HltContentContainerList that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_serialVersionUID = true;
    boolean that_present_serialVersionUID = true;
    if (this_present_serialVersionUID || that_present_serialVersionUID) {
      if (!(this_present_serialVersionUID && that_present_serialVersionUID))
        return false;
      if (this.serialVersionUID != that.serialVersionUID)
        return false;
    }

    boolean this_present_hltContentContainerList = true && this.isSetHltContentContainerList();
    boolean that_present_hltContentContainerList = true && that.isSetHltContentContainerList();
    if (this_present_hltContentContainerList || that_present_hltContentContainerList) {
      if (!(this_present_hltContentContainerList && that_present_hltContentContainerList))
        return false;
      if (!this.hltContentContainerList.equals(that.hltContentContainerList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HltContentContainerList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HltContentContainerList typedOther = (HltContentContainerList)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialVersionUID()).compareTo(typedOther.isSetSerialVersionUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialVersionUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialVersionUID, typedOther.serialVersionUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHltContentContainerList()).compareTo(typedOther.isSetHltContentContainerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHltContentContainerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hltContentContainerList, typedOther.hltContentContainerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HltContentContainerList(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialVersionUID:");
    sb.append(this.serialVersionUID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hltContentContainerList:");
    if (this.hltContentContainerList == null) {
      sb.append("null");
    } else {
      sb.append(this.hltContentContainerList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HltContentContainerListStandardSchemeFactory implements SchemeFactory {
    public HltContentContainerListStandardScheme getScheme() {
      return new HltContentContainerListStandardScheme();
    }
  }

  private static class HltContentContainerListStandardScheme extends StandardScheme<HltContentContainerList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HltContentContainerList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERIAL_VERSION_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serialVersionUID = iprot.readI64();
              struct.setSerialVersionUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HLT_CONTENT_CONTAINER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list428 = iprot.readListBegin();
                struct.hltContentContainerList = new ArrayList<HltContentContainer>(_list428.size);
                for (int _i429 = 0; _i429 < _list428.size; ++_i429)
                {
                  HltContentContainer _elem430; // required
                  _elem430 = new HltContentContainer();
                  _elem430.read(iprot);
                  struct.hltContentContainerList.add(_elem430);
                }
                iprot.readListEnd();
              }
              struct.setHltContentContainerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HltContentContainerList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERIAL_VERSION_UID_FIELD_DESC);
      oprot.writeI64(struct.serialVersionUID);
      oprot.writeFieldEnd();
      if (struct.hltContentContainerList != null) {
        oprot.writeFieldBegin(HLT_CONTENT_CONTAINER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hltContentContainerList.size()));
          for (HltContentContainer _iter431 : struct.hltContentContainerList)
          {
            _iter431.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HltContentContainerListTupleSchemeFactory implements SchemeFactory {
    public HltContentContainerListTupleScheme getScheme() {
      return new HltContentContainerListTupleScheme();
    }
  }

  private static class HltContentContainerListTupleScheme extends TupleScheme<HltContentContainerList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HltContentContainerList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSerialVersionUID()) {
        optionals.set(1);
      }
      if (struct.isSetHltContentContainerList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeI64(struct.serialVersionUID);
      }
      if (struct.isSetHltContentContainerList()) {
        {
          oprot.writeI32(struct.hltContentContainerList.size());
          for (HltContentContainer _iter432 : struct.hltContentContainerList)
          {
            _iter432.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HltContentContainerList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serialVersionUID = iprot.readI64();
        struct.setSerialVersionUIDIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list433 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hltContentContainerList = new ArrayList<HltContentContainer>(_list433.size);
          for (int _i434 = 0; _i434 < _list433.size; ++_i434)
          {
            HltContentContainer _elem435; // required
            _elem435 = new HltContentContainer();
            _elem435.read(iprot);
            struct.hltContentContainerList.add(_elem435);
          }
        }
        struct.setHltContentContainerListIsSet(true);
      }
    }
  }

}