/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class TextDocument.
 */
public class Document implements org.apache.thrift.TBase<Document, Document._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Document");

  private static final org.apache.thrift.protocol.TField DOC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("docId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CORPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("corpus", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DOC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("docType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUDIO_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("audioUri", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GENRE_FIELD_DESC = new org.apache.thrift.protocol.TField("genre", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("headline", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DocumentTupleSchemeFactory());
  }

  /**
   * The doc id
   */
  public String docId; // required
  /**
   * The corpus
   */
  public Corpus corpus; // required
  /**
   * The doc type
   */
  public String docType; // required
  /**
   * The uri to the location of text or transcript.
   */
  public String uri; // required
  /**
   * The language
   */
  public String language; // required
  /**
   * The audio uri
   */
  public String audioUri; // optional
  /**
   * The genre
   */
  public String genre; // optional
  /**
   * The headlinemap
   */
  public String headline; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The doc id
     */
    DOC_ID((short)1, "docId"),
    /**
     * The corpus
     */
    CORPUS((short)2, "corpus"),
    /**
     * The doc type
     */
    DOC_TYPE((short)3, "docType"),
    /**
     * The uri to the location of text or transcript.
     */
    URI((short)4, "uri"),
    /**
     * The language
     */
    LANGUAGE((short)5, "language"),
    /**
     * The audio uri
     */
    AUDIO_URI((short)6, "audioUri"),
    /**
     * The genre
     */
    GENRE((short)7, "genre"),
    /**
     * The headlinemap
     */
    HEADLINE((short)8, "headline"),
    /**
     * The id
     */
    ID((short)9, "id"),
    /**
     * The value
     */
    VALUE((short)10, "value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOC_ID
          return DOC_ID;
        case 2: // CORPUS
          return CORPUS;
        case 3: // DOC_TYPE
          return DOC_TYPE;
        case 4: // URI
          return URI;
        case 5: // LANGUAGE
          return LANGUAGE;
        case 6: // AUDIO_URI
          return AUDIO_URI;
        case 7: // GENRE
          return GENRE;
        case 8: // HEADLINE
          return HEADLINE;
        case 9: // ID
          return ID;
        case 10: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.AUDIO_URI,_Fields.GENRE,_Fields.HEADLINE,_Fields.ID,_Fields.VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOC_ID, new org.apache.thrift.meta_data.FieldMetaData("docId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORPUS, new org.apache.thrift.meta_data.FieldMetaData("corpus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Corpus.class)));
    tmpMap.put(_Fields.DOC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("docType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIO_URI, new org.apache.thrift.meta_data.FieldMetaData("audioUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENRE, new org.apache.thrift.meta_data.FieldMetaData("genre", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADLINE, new org.apache.thrift.meta_data.FieldMetaData("headline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Document.class, metaDataMap);
  }

  public Document() {
  }

  public Document(
    String docId,
    Corpus corpus,
    String docType,
    String uri,
    String language)
  {
    this();
    this.docId = docId;
    this.corpus = corpus;
    this.docType = docType;
    this.uri = uri;
    this.language = language;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Document(Document other) {
    if (other.isSetDocId()) {
      this.docId = other.docId;
    }
    if (other.isSetCorpus()) {
      this.corpus = new Corpus(other.corpus);
    }
    if (other.isSetDocType()) {
      this.docType = other.docType;
    }
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetAudioUri()) {
      this.audioUri = other.audioUri;
    }
    if (other.isSetGenre()) {
      this.genre = other.genre;
    }
    if (other.isSetHeadline()) {
      this.headline = other.headline;
    }
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
  }

  public Document deepCopy() {
    return new Document(this);
  }

  @Override
  public void clear() {
    this.docId = null;
    this.corpus = null;
    this.docType = null;
    this.uri = null;
    this.language = null;
    this.audioUri = null;
    this.genre = null;
    this.headline = null;
    this.id = null;
    this.value = null;
  }

  /**
   * The doc id
   */
  public String getDocId() {
    return this.docId;
  }

  /**
   * The doc id
   */
  public Document setDocId(String docId) {
    this.docId = docId;
    return this;
  }

  public void unsetDocId() {
    this.docId = null;
  }

  /** Returns true if field docId is set (has been assigned a value) and false otherwise */
  public boolean isSetDocId() {
    return this.docId != null;
  }

  public void setDocIdIsSet(boolean value) {
    if (!value) {
      this.docId = null;
    }
  }

  /**
   * The corpus
   */
  public Corpus getCorpus() {
    return this.corpus;
  }

  /**
   * The corpus
   */
  public Document setCorpus(Corpus corpus) {
    this.corpus = corpus;
    return this;
  }

  public void unsetCorpus() {
    this.corpus = null;
  }

  /** Returns true if field corpus is set (has been assigned a value) and false otherwise */
  public boolean isSetCorpus() {
    return this.corpus != null;
  }

  public void setCorpusIsSet(boolean value) {
    if (!value) {
      this.corpus = null;
    }
  }

  /**
   * The doc type
   */
  public String getDocType() {
    return this.docType;
  }

  /**
   * The doc type
   */
  public Document setDocType(String docType) {
    this.docType = docType;
    return this;
  }

  public void unsetDocType() {
    this.docType = null;
  }

  /** Returns true if field docType is set (has been assigned a value) and false otherwise */
  public boolean isSetDocType() {
    return this.docType != null;
  }

  public void setDocTypeIsSet(boolean value) {
    if (!value) {
      this.docType = null;
    }
  }

  /**
   * The uri to the location of text or transcript.
   */
  public String getUri() {
    return this.uri;
  }

  /**
   * The uri to the location of text or transcript.
   */
  public Document setUri(String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  /**
   * The language
   */
  public String getLanguage() {
    return this.language;
  }

  /**
   * The language
   */
  public Document setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  /**
   * The audio uri
   */
  public String getAudioUri() {
    return this.audioUri;
  }

  /**
   * The audio uri
   */
  public Document setAudioUri(String audioUri) {
    this.audioUri = audioUri;
    return this;
  }

  public void unsetAudioUri() {
    this.audioUri = null;
  }

  /** Returns true if field audioUri is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioUri() {
    return this.audioUri != null;
  }

  public void setAudioUriIsSet(boolean value) {
    if (!value) {
      this.audioUri = null;
    }
  }

  /**
   * The genre
   */
  public String getGenre() {
    return this.genre;
  }

  /**
   * The genre
   */
  public Document setGenre(String genre) {
    this.genre = genre;
    return this;
  }

  public void unsetGenre() {
    this.genre = null;
  }

  /** Returns true if field genre is set (has been assigned a value) and false otherwise */
  public boolean isSetGenre() {
    return this.genre != null;
  }

  public void setGenreIsSet(boolean value) {
    if (!value) {
      this.genre = null;
    }
  }

  /**
   * The headlinemap
   */
  public String getHeadline() {
    return this.headline;
  }

  /**
   * The headlinemap
   */
  public Document setHeadline(String headline) {
    this.headline = headline;
    return this;
  }

  public void unsetHeadline() {
    this.headline = null;
  }

  /** Returns true if field headline is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadline() {
    return this.headline != null;
  }

  public void setHeadlineIsSet(boolean value) {
    if (!value) {
      this.headline = null;
    }
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Document setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Document setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOC_ID:
      if (value == null) {
        unsetDocId();
      } else {
        setDocId((String)value);
      }
      break;

    case CORPUS:
      if (value == null) {
        unsetCorpus();
      } else {
        setCorpus((Corpus)value);
      }
      break;

    case DOC_TYPE:
      if (value == null) {
        unsetDocType();
      } else {
        setDocType((String)value);
      }
      break;

    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case AUDIO_URI:
      if (value == null) {
        unsetAudioUri();
      } else {
        setAudioUri((String)value);
      }
      break;

    case GENRE:
      if (value == null) {
        unsetGenre();
      } else {
        setGenre((String)value);
      }
      break;

    case HEADLINE:
      if (value == null) {
        unsetHeadline();
      } else {
        setHeadline((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOC_ID:
      return getDocId();

    case CORPUS:
      return getCorpus();

    case DOC_TYPE:
      return getDocType();

    case URI:
      return getUri();

    case LANGUAGE:
      return getLanguage();

    case AUDIO_URI:
      return getAudioUri();

    case GENRE:
      return getGenre();

    case HEADLINE:
      return getHeadline();

    case ID:
      return getId();

    case VALUE:
      return getValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOC_ID:
      return isSetDocId();
    case CORPUS:
      return isSetCorpus();
    case DOC_TYPE:
      return isSetDocType();
    case URI:
      return isSetUri();
    case LANGUAGE:
      return isSetLanguage();
    case AUDIO_URI:
      return isSetAudioUri();
    case GENRE:
      return isSetGenre();
    case HEADLINE:
      return isSetHeadline();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Document)
      return this.equals((Document)that);
    return false;
  }

  public boolean equals(Document that) {
    if (that == null)
      return false;

    boolean this_present_docId = true && this.isSetDocId();
    boolean that_present_docId = true && that.isSetDocId();
    if (this_present_docId || that_present_docId) {
      if (!(this_present_docId && that_present_docId))
        return false;
      if (!this.docId.equals(that.docId))
        return false;
    }

    boolean this_present_corpus = true && this.isSetCorpus();
    boolean that_present_corpus = true && that.isSetCorpus();
    if (this_present_corpus || that_present_corpus) {
      if (!(this_present_corpus && that_present_corpus))
        return false;
      if (!this.corpus.equals(that.corpus))
        return false;
    }

    boolean this_present_docType = true && this.isSetDocType();
    boolean that_present_docType = true && that.isSetDocType();
    if (this_present_docType || that_present_docType) {
      if (!(this_present_docType && that_present_docType))
        return false;
      if (!this.docType.equals(that.docType))
        return false;
    }

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_audioUri = true && this.isSetAudioUri();
    boolean that_present_audioUri = true && that.isSetAudioUri();
    if (this_present_audioUri || that_present_audioUri) {
      if (!(this_present_audioUri && that_present_audioUri))
        return false;
      if (!this.audioUri.equals(that.audioUri))
        return false;
    }

    boolean this_present_genre = true && this.isSetGenre();
    boolean that_present_genre = true && that.isSetGenre();
    if (this_present_genre || that_present_genre) {
      if (!(this_present_genre && that_present_genre))
        return false;
      if (!this.genre.equals(that.genre))
        return false;
    }

    boolean this_present_headline = true && this.isSetHeadline();
    boolean that_present_headline = true && that.isSetHeadline();
    if (this_present_headline || that_present_headline) {
      if (!(this_present_headline && that_present_headline))
        return false;
      if (!this.headline.equals(that.headline))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Document other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Document typedOther = (Document)other;

    lastComparison = Boolean.valueOf(isSetDocId()).compareTo(typedOther.isSetDocId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docId, typedOther.docId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorpus()).compareTo(typedOther.isSetCorpus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorpus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpus, typedOther.corpus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocType()).compareTo(typedOther.isSetDocType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docType, typedOther.docType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUri()).compareTo(typedOther.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, typedOther.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioUri()).compareTo(typedOther.isSetAudioUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioUri, typedOther.audioUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenre()).compareTo(typedOther.isSetGenre());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenre()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genre, typedOther.genre);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadline()).compareTo(typedOther.isSetHeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headline, typedOther.headline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Document(");
    boolean first = true;

    sb.append("docId:");
    if (this.docId == null) {
      sb.append("null");
    } else {
      sb.append(this.docId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("corpus:");
    if (this.corpus == null) {
      sb.append("null");
    } else {
      sb.append(this.corpus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("docType:");
    if (this.docType == null) {
      sb.append("null");
    } else {
      sb.append(this.docType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (isSetAudioUri()) {
      if (!first) sb.append(", ");
      sb.append("audioUri:");
      if (this.audioUri == null) {
        sb.append("null");
      } else {
        sb.append(this.audioUri);
      }
      first = false;
    }
    if (isSetGenre()) {
      if (!first) sb.append(", ");
      sb.append("genre:");
      if (this.genre == null) {
        sb.append("null");
      } else {
        sb.append(this.genre);
      }
      first = false;
    }
    if (isSetHeadline()) {
      if (!first) sb.append(", ");
      sb.append("headline:");
      if (this.headline == null) {
        sb.append("null");
      } else {
        sb.append(this.headline);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (docId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'docId' was not present! Struct: " + toString());
    }
    if (corpus == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'corpus' was not present! Struct: " + toString());
    }
    if (docType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'docType' was not present! Struct: " + toString());
    }
    if (uri == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uri' was not present! Struct: " + toString());
    }
    if (language == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'language' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (corpus != null) {
      corpus.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DocumentStandardSchemeFactory implements SchemeFactory {
    public DocumentStandardScheme getScheme() {
      return new DocumentStandardScheme();
    }
  }

  private static class DocumentStandardScheme extends StandardScheme<Document> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Document struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docId = iprot.readString();
              struct.setDocIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CORPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.corpus = new Corpus();
              struct.corpus.read(iprot);
              struct.setCorpusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docType = iprot.readString();
              struct.setDocTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUDIO_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audioUri = iprot.readString();
              struct.setAudioUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GENRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.genre = iprot.readString();
              struct.setGenreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headline = iprot.readString();
              struct.setHeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Document struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.docId != null) {
        oprot.writeFieldBegin(DOC_ID_FIELD_DESC);
        oprot.writeString(struct.docId);
        oprot.writeFieldEnd();
      }
      if (struct.corpus != null) {
        oprot.writeFieldBegin(CORPUS_FIELD_DESC);
        struct.corpus.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.docType != null) {
        oprot.writeFieldBegin(DOC_TYPE_FIELD_DESC);
        oprot.writeString(struct.docType);
        oprot.writeFieldEnd();
      }
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.audioUri != null) {
        if (struct.isSetAudioUri()) {
          oprot.writeFieldBegin(AUDIO_URI_FIELD_DESC);
          oprot.writeString(struct.audioUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.genre != null) {
        if (struct.isSetGenre()) {
          oprot.writeFieldBegin(GENRE_FIELD_DESC);
          oprot.writeString(struct.genre);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headline != null) {
        if (struct.isSetHeadline()) {
          oprot.writeFieldBegin(HEADLINE_FIELD_DESC);
          oprot.writeString(struct.headline);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DocumentTupleSchemeFactory implements SchemeFactory {
    public DocumentTupleScheme getScheme() {
      return new DocumentTupleScheme();
    }
  }

  private static class DocumentTupleScheme extends TupleScheme<Document> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Document struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.docId);
      struct.corpus.write(oprot);
      oprot.writeString(struct.docType);
      oprot.writeString(struct.uri);
      oprot.writeString(struct.language);
      BitSet optionals = new BitSet();
      if (struct.isSetAudioUri()) {
        optionals.set(0);
      }
      if (struct.isSetGenre()) {
        optionals.set(1);
      }
      if (struct.isSetHeadline()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetValue()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAudioUri()) {
        oprot.writeString(struct.audioUri);
      }
      if (struct.isSetGenre()) {
        oprot.writeString(struct.genre);
      }
      if (struct.isSetHeadline()) {
        oprot.writeString(struct.headline);
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Document struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.docId = iprot.readString();
      struct.setDocIdIsSet(true);
      struct.corpus = new Corpus();
      struct.corpus.read(iprot);
      struct.setCorpusIsSet(true);
      struct.docType = iprot.readString();
      struct.setDocTypeIsSet(true);
      struct.uri = iprot.readString();
      struct.setUriIsSet(true);
      struct.language = iprot.readString();
      struct.setLanguageIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.audioUri = iprot.readString();
        struct.setAudioUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.genre = iprot.readString();
        struct.setGenreIsSet(true);
      }
      if (incoming.get(2)) {
        struct.headline = iprot.readString();
        struct.setHeadlineIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
    }
  }

}