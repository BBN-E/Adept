/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Sentence class extends Chunk and represents the output from sentence
 * boundary detection algorithm.
 */
public class Sentence implements org.apache.thrift.TBase<Sentence, Sentence._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sentence");

  private static final org.apache.thrift.protocol.TField SEQUENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenOffset", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenStream", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CHAR_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("charOffset", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField NOVELTY_CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("noveltyConfidence", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PUNCTUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("punctuation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField UNCERTAINTY_CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("uncertaintyConfidence", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ALGORITHM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithmName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SentenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SentenceTupleSchemeFactory());
  }

  /**
   * The sequence id
   */
  public long sequenceId; // required
  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset tokenOffset; // required
  /**
   * The token stream
   */
  public TokenStream tokenStream; // required
  /**
   * The char offset
   */
  public CharOffset charOffset; // optional
  /**
   * The novelty confidence
   */
  public double noveltyConfidence; // optional
  /**
   * The punctuation
   */
  public String punctuation; // optional
  /**
   * The sentence type
   * 
   * @see SentenceType
   */
  public SentenceType type; // optional
  /**
   * The uncertainty confidence
   */
  public double uncertaintyConfidence; // optional
  /**
   * The id
   */
  public ID id; // optional
  /**
   * The value
   */
  public String value; // optional
  /**
   * The algorithmName
   */
  public String algorithmName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The sequence id
     */
    SEQUENCE_ID((short)1, "sequenceId"),
    /**
     * The token offset which is the index into token stream.
     */
    TOKEN_OFFSET((short)2, "tokenOffset"),
    /**
     * The token stream
     */
    TOKEN_STREAM((short)3, "tokenStream"),
    /**
     * The char offset
     */
    CHAR_OFFSET((short)4, "charOffset"),
    /**
     * The novelty confidence
     */
    NOVELTY_CONFIDENCE((short)5, "noveltyConfidence"),
    /**
     * The punctuation
     */
    PUNCTUATION((short)6, "punctuation"),
    /**
     * The sentence type
     * 
     * @see SentenceType
     */
    TYPE((short)7, "type"),
    /**
     * The uncertainty confidence
     */
    UNCERTAINTY_CONFIDENCE((short)8, "uncertaintyConfidence"),
    /**
     * The id
     */
    ID((short)9, "id"),
    /**
     * The value
     */
    VALUE((short)10, "value"),
    /**
     * The algorithmName
     */
    ALGORITHM_NAME((short)11, "algorithmName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_ID
          return SEQUENCE_ID;
        case 2: // TOKEN_OFFSET
          return TOKEN_OFFSET;
        case 3: // TOKEN_STREAM
          return TOKEN_STREAM;
        case 4: // CHAR_OFFSET
          return CHAR_OFFSET;
        case 5: // NOVELTY_CONFIDENCE
          return NOVELTY_CONFIDENCE;
        case 6: // PUNCTUATION
          return PUNCTUATION;
        case 7: // TYPE
          return TYPE;
        case 8: // UNCERTAINTY_CONFIDENCE
          return UNCERTAINTY_CONFIDENCE;
        case 9: // ID
          return ID;
        case 10: // VALUE
          return VALUE;
        case 11: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCEID_ISSET_ID = 0;
  private static final int __NOVELTYCONFIDENCE_ISSET_ID = 1;
  private static final int __UNCERTAINTYCONFIDENCE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CHAR_OFFSET,_Fields.NOVELTY_CONFIDENCE,_Fields.PUNCTUATION,_Fields.TYPE,_Fields.UNCERTAINTY_CONFIDENCE,_Fields.ID,_Fields.VALUE,_Fields.ALGORITHM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sequenceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("tokenOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenOffset.class)));
    tmpMap.put(_Fields.TOKEN_STREAM, new org.apache.thrift.meta_data.FieldMetaData("tokenStream", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenStream.class)));
    tmpMap.put(_Fields.CHAR_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("charOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CharOffset.class)));
    tmpMap.put(_Fields.NOVELTY_CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("noveltyConfidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PUNCTUATION, new org.apache.thrift.meta_data.FieldMetaData("punctuation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SentenceType.class)));
    tmpMap.put(_Fields.UNCERTAINTY_CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("uncertaintyConfidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ID.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new org.apache.thrift.meta_data.FieldMetaData("algorithmName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sentence.class, metaDataMap);
  }

  public Sentence() {
  }

  public Sentence(
    long sequenceId,
    TokenOffset tokenOffset,
    TokenStream tokenStream)
  {
    this();
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    this.tokenOffset = tokenOffset;
    this.tokenStream = tokenStream;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sentence(Sentence other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceId = other.sequenceId;
    if (other.isSetTokenOffset()) {
      this.tokenOffset = new TokenOffset(other.tokenOffset);
    }
    if (other.isSetTokenStream()) {
      this.tokenStream = new TokenStream(other.tokenStream);
    }
    if (other.isSetCharOffset()) {
      this.charOffset = new CharOffset(other.charOffset);
    }
    this.noveltyConfidence = other.noveltyConfidence;
    if (other.isSetPunctuation()) {
      this.punctuation = other.punctuation;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.uncertaintyConfidence = other.uncertaintyConfidence;
    if (other.isSetId()) {
      this.id = new ID(other.id);
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
  }

  public Sentence deepCopy() {
    return new Sentence(this);
  }

  @Override
  public void clear() {
    setSequenceIdIsSet(false);
    this.sequenceId = 0;
    this.tokenOffset = null;
    this.tokenStream = null;
    this.charOffset = null;
    setNoveltyConfidenceIsSet(false);
    this.noveltyConfidence = 0.0;
    this.punctuation = null;
    this.type = null;
    setUncertaintyConfidenceIsSet(false);
    this.uncertaintyConfidence = 0.0;
    this.id = null;
    this.value = null;
    this.algorithmName = null;
  }

  /**
   * The sequence id
   */
  public long getSequenceId() {
    return this.sequenceId;
  }

  /**
   * The sequence id
   */
  public Sentence setSequenceId(long sequenceId) {
    this.sequenceId = sequenceId;
    setSequenceIdIsSet(true);
    return this;
  }

  public void unsetSequenceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  /** Returns true if field sequenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCEID_ISSET_ID);
  }

  public void setSequenceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCEID_ISSET_ID, value);
  }

  /**
   * The token offset which is the index into token stream.
   */
  public TokenOffset getTokenOffset() {
    return this.tokenOffset;
  }

  /**
   * The token offset which is the index into token stream.
   */
  public Sentence setTokenOffset(TokenOffset tokenOffset) {
    this.tokenOffset = tokenOffset;
    return this;
  }

  public void unsetTokenOffset() {
    this.tokenOffset = null;
  }

  /** Returns true if field tokenOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenOffset() {
    return this.tokenOffset != null;
  }

  public void setTokenOffsetIsSet(boolean value) {
    if (!value) {
      this.tokenOffset = null;
    }
  }

  /**
   * The token stream
   */
  public TokenStream getTokenStream() {
    return this.tokenStream;
  }

  /**
   * The token stream
   */
  public Sentence setTokenStream(TokenStream tokenStream) {
    this.tokenStream = tokenStream;
    return this;
  }

  public void unsetTokenStream() {
    this.tokenStream = null;
  }

  /** Returns true if field tokenStream is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenStream() {
    return this.tokenStream != null;
  }

  public void setTokenStreamIsSet(boolean value) {
    if (!value) {
      this.tokenStream = null;
    }
  }

  /**
   * The char offset
   */
  public CharOffset getCharOffset() {
    return this.charOffset;
  }

  /**
   * The char offset
   */
  public Sentence setCharOffset(CharOffset charOffset) {
    this.charOffset = charOffset;
    return this;
  }

  public void unsetCharOffset() {
    this.charOffset = null;
  }

  /** Returns true if field charOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetCharOffset() {
    return this.charOffset != null;
  }

  public void setCharOffsetIsSet(boolean value) {
    if (!value) {
      this.charOffset = null;
    }
  }

  /**
   * The novelty confidence
   */
  public double getNoveltyConfidence() {
    return this.noveltyConfidence;
  }

  /**
   * The novelty confidence
   */
  public Sentence setNoveltyConfidence(double noveltyConfidence) {
    this.noveltyConfidence = noveltyConfidence;
    setNoveltyConfidenceIsSet(true);
    return this;
  }

  public void unsetNoveltyConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOVELTYCONFIDENCE_ISSET_ID);
  }

  /** Returns true if field noveltyConfidence is set (has been assigned a value) and false otherwise */
  public boolean isSetNoveltyConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __NOVELTYCONFIDENCE_ISSET_ID);
  }

  public void setNoveltyConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOVELTYCONFIDENCE_ISSET_ID, value);
  }

  /**
   * The punctuation
   */
  public String getPunctuation() {
    return this.punctuation;
  }

  /**
   * The punctuation
   */
  public Sentence setPunctuation(String punctuation) {
    this.punctuation = punctuation;
    return this;
  }

  public void unsetPunctuation() {
    this.punctuation = null;
  }

  /** Returns true if field punctuation is set (has been assigned a value) and false otherwise */
  public boolean isSetPunctuation() {
    return this.punctuation != null;
  }

  public void setPunctuationIsSet(boolean value) {
    if (!value) {
      this.punctuation = null;
    }
  }

  /**
   * The sentence type
   * 
   * @see SentenceType
   */
  public SentenceType getType() {
    return this.type;
  }

  /**
   * The sentence type
   * 
   * @see SentenceType
   */
  public Sentence setType(SentenceType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * The uncertainty confidence
   */
  public double getUncertaintyConfidence() {
    return this.uncertaintyConfidence;
  }

  /**
   * The uncertainty confidence
   */
  public Sentence setUncertaintyConfidence(double uncertaintyConfidence) {
    this.uncertaintyConfidence = uncertaintyConfidence;
    setUncertaintyConfidenceIsSet(true);
    return this;
  }

  public void unsetUncertaintyConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNCERTAINTYCONFIDENCE_ISSET_ID);
  }

  /** Returns true if field uncertaintyConfidence is set (has been assigned a value) and false otherwise */
  public boolean isSetUncertaintyConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __UNCERTAINTYCONFIDENCE_ISSET_ID);
  }

  public void setUncertaintyConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNCERTAINTYCONFIDENCE_ISSET_ID, value);
  }

  /**
   * The id
   */
  public ID getId() {
    return this.id;
  }

  /**
   * The id
   */
  public Sentence setId(ID id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * The value
   */
  public String getValue() {
    return this.value;
  }

  /**
   * The value
   */
  public Sentence setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * The algorithmName
   */
  public String getAlgorithmName() {
    return this.algorithmName;
  }

  /**
   * The algorithmName
   */
  public Sentence setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE_ID:
      if (value == null) {
        unsetSequenceId();
      } else {
        setSequenceId((Long)value);
      }
      break;

    case TOKEN_OFFSET:
      if (value == null) {
        unsetTokenOffset();
      } else {
        setTokenOffset((TokenOffset)value);
      }
      break;

    case TOKEN_STREAM:
      if (value == null) {
        unsetTokenStream();
      } else {
        setTokenStream((TokenStream)value);
      }
      break;

    case CHAR_OFFSET:
      if (value == null) {
        unsetCharOffset();
      } else {
        setCharOffset((CharOffset)value);
      }
      break;

    case NOVELTY_CONFIDENCE:
      if (value == null) {
        unsetNoveltyConfidence();
      } else {
        setNoveltyConfidence((Double)value);
      }
      break;

    case PUNCTUATION:
      if (value == null) {
        unsetPunctuation();
      } else {
        setPunctuation((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((SentenceType)value);
      }
      break;

    case UNCERTAINTY_CONFIDENCE:
      if (value == null) {
        unsetUncertaintyConfidence();
      } else {
        setUncertaintyConfidence((Double)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((ID)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_ID:
      return Long.valueOf(getSequenceId());

    case TOKEN_OFFSET:
      return getTokenOffset();

    case TOKEN_STREAM:
      return getTokenStream();

    case CHAR_OFFSET:
      return getCharOffset();

    case NOVELTY_CONFIDENCE:
      return Double.valueOf(getNoveltyConfidence());

    case PUNCTUATION:
      return getPunctuation();

    case TYPE:
      return getType();

    case UNCERTAINTY_CONFIDENCE:
      return Double.valueOf(getUncertaintyConfidence());

    case ID:
      return getId();

    case VALUE:
      return getValue();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_ID:
      return isSetSequenceId();
    case TOKEN_OFFSET:
      return isSetTokenOffset();
    case TOKEN_STREAM:
      return isSetTokenStream();
    case CHAR_OFFSET:
      return isSetCharOffset();
    case NOVELTY_CONFIDENCE:
      return isSetNoveltyConfidence();
    case PUNCTUATION:
      return isSetPunctuation();
    case TYPE:
      return isSetType();
    case UNCERTAINTY_CONFIDENCE:
      return isSetUncertaintyConfidence();
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sentence)
      return this.equals((Sentence)that);
    return false;
  }

  public boolean equals(Sentence that) {
    if (that == null)
      return false;

    boolean this_present_sequenceId = true;
    boolean that_present_sequenceId = true;
    if (this_present_sequenceId || that_present_sequenceId) {
      if (!(this_present_sequenceId && that_present_sequenceId))
        return false;
      if (this.sequenceId != that.sequenceId)
        return false;
    }

    boolean this_present_tokenOffset = true && this.isSetTokenOffset();
    boolean that_present_tokenOffset = true && that.isSetTokenOffset();
    if (this_present_tokenOffset || that_present_tokenOffset) {
      if (!(this_present_tokenOffset && that_present_tokenOffset))
        return false;
      if (!this.tokenOffset.equals(that.tokenOffset))
        return false;
    }

    boolean this_present_tokenStream = true && this.isSetTokenStream();
    boolean that_present_tokenStream = true && that.isSetTokenStream();
    if (this_present_tokenStream || that_present_tokenStream) {
      if (!(this_present_tokenStream && that_present_tokenStream))
        return false;
      if (!this.tokenStream.equals(that.tokenStream))
        return false;
    }

    boolean this_present_charOffset = true && this.isSetCharOffset();
    boolean that_present_charOffset = true && that.isSetCharOffset();
    if (this_present_charOffset || that_present_charOffset) {
      if (!(this_present_charOffset && that_present_charOffset))
        return false;
      if (!this.charOffset.equals(that.charOffset))
        return false;
    }

    boolean this_present_noveltyConfidence = true && this.isSetNoveltyConfidence();
    boolean that_present_noveltyConfidence = true && that.isSetNoveltyConfidence();
    if (this_present_noveltyConfidence || that_present_noveltyConfidence) {
      if (!(this_present_noveltyConfidence && that_present_noveltyConfidence))
        return false;
      if (this.noveltyConfidence != that.noveltyConfidence)
        return false;
    }

    boolean this_present_punctuation = true && this.isSetPunctuation();
    boolean that_present_punctuation = true && that.isSetPunctuation();
    if (this_present_punctuation || that_present_punctuation) {
      if (!(this_present_punctuation && that_present_punctuation))
        return false;
      if (!this.punctuation.equals(that.punctuation))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_uncertaintyConfidence = true && this.isSetUncertaintyConfidence();
    boolean that_present_uncertaintyConfidence = true && that.isSetUncertaintyConfidence();
    if (this_present_uncertaintyConfidence || that_present_uncertaintyConfidence) {
      if (!(this_present_uncertaintyConfidence && that_present_uncertaintyConfidence))
        return false;
      if (this.uncertaintyConfidence != that.uncertaintyConfidence)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Sentence other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Sentence typedOther = (Sentence)other;

    lastComparison = Boolean.valueOf(isSetSequenceId()).compareTo(typedOther.isSetSequenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceId, typedOther.sequenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenOffset()).compareTo(typedOther.isSetTokenOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenOffset, typedOther.tokenOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenStream()).compareTo(typedOther.isSetTokenStream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenStream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenStream, typedOther.tokenStream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharOffset()).compareTo(typedOther.isSetCharOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charOffset, typedOther.charOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoveltyConfidence()).compareTo(typedOther.isSetNoveltyConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoveltyConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noveltyConfidence, typedOther.noveltyConfidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPunctuation()).compareTo(typedOther.isSetPunctuation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPunctuation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.punctuation, typedOther.punctuation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUncertaintyConfidence()).compareTo(typedOther.isSetUncertaintyConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUncertaintyConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uncertaintyConfidence, typedOther.uncertaintyConfidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sentence(");
    boolean first = true;

    sb.append("sequenceId:");
    sb.append(this.sequenceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenOffset:");
    if (this.tokenOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenStream:");
    if (this.tokenStream == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenStream);
    }
    first = false;
    if (isSetCharOffset()) {
      if (!first) sb.append(", ");
      sb.append("charOffset:");
      if (this.charOffset == null) {
        sb.append("null");
      } else {
        sb.append(this.charOffset);
      }
      first = false;
    }
    if (isSetNoveltyConfidence()) {
      if (!first) sb.append(", ");
      sb.append("noveltyConfidence:");
      sb.append(this.noveltyConfidence);
      first = false;
    }
    if (isSetPunctuation()) {
      if (!first) sb.append(", ");
      sb.append("punctuation:");
      if (this.punctuation == null) {
        sb.append("null");
      } else {
        sb.append(this.punctuation);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetUncertaintyConfidence()) {
      if (!first) sb.append(", ");
      sb.append("uncertaintyConfidence:");
      sb.append(this.uncertaintyConfidence);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetAlgorithmName()) {
      if (!first) sb.append(", ");
      sb.append("algorithmName:");
      if (this.algorithmName == null) {
        sb.append("null");
      } else {
        sb.append(this.algorithmName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sequenceId' because it's a primitive and you chose the non-beans generator.
    if (tokenOffset == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenOffset' was not present! Struct: " + toString());
    }
    if (tokenStream == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenStream' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tokenOffset != null) {
      tokenOffset.validate();
    }
    if (tokenStream != null) {
      tokenStream.validate();
    }
    if (charOffset != null) {
      charOffset.validate();
    }
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SentenceStandardSchemeFactory implements SchemeFactory {
    public SentenceStandardScheme getScheme() {
      return new SentenceStandardScheme();
    }
  }

  private static class SentenceStandardScheme extends StandardScheme<Sentence> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sentence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceId = iprot.readI64();
              struct.setSequenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenOffset = new TokenOffset();
              struct.tokenOffset.read(iprot);
              struct.setTokenOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN_STREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenStream = new TokenStream();
              struct.tokenStream.read(iprot);
              struct.setTokenStreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHAR_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.charOffset = new CharOffset();
              struct.charOffset.read(iprot);
              struct.setCharOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOVELTY_CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noveltyConfidence = iprot.readDouble();
              struct.setNoveltyConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUNCTUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.punctuation = iprot.readString();
              struct.setPunctuationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = SentenceType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UNCERTAINTY_CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uncertaintyConfidence = iprot.readDouble();
              struct.setUncertaintyConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new ID();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ALGORITHM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithmName = iprot.readString();
              struct.setAlgorithmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSequenceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sentence struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_ID_FIELD_DESC);
      oprot.writeI64(struct.sequenceId);
      oprot.writeFieldEnd();
      if (struct.tokenOffset != null) {
        oprot.writeFieldBegin(TOKEN_OFFSET_FIELD_DESC);
        struct.tokenOffset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokenStream != null) {
        oprot.writeFieldBegin(TOKEN_STREAM_FIELD_DESC);
        struct.tokenStream.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.charOffset != null) {
        if (struct.isSetCharOffset()) {
          oprot.writeFieldBegin(CHAR_OFFSET_FIELD_DESC);
          struct.charOffset.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNoveltyConfidence()) {
        oprot.writeFieldBegin(NOVELTY_CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.noveltyConfidence);
        oprot.writeFieldEnd();
      }
      if (struct.punctuation != null) {
        if (struct.isSetPunctuation()) {
          oprot.writeFieldBegin(PUNCTUATION_FIELD_DESC);
          oprot.writeString(struct.punctuation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUncertaintyConfidence()) {
        oprot.writeFieldBegin(UNCERTAINTY_CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.uncertaintyConfidence);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.algorithmName != null) {
        if (struct.isSetAlgorithmName()) {
          oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
          oprot.writeString(struct.algorithmName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SentenceTupleSchemeFactory implements SchemeFactory {
    public SentenceTupleScheme getScheme() {
      return new SentenceTupleScheme();
    }
  }

  private static class SentenceTupleScheme extends TupleScheme<Sentence> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sentence struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sequenceId);
      struct.tokenOffset.write(oprot);
      struct.tokenStream.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetCharOffset()) {
        optionals.set(0);
      }
      if (struct.isSetNoveltyConfidence()) {
        optionals.set(1);
      }
      if (struct.isSetPunctuation()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetUncertaintyConfidence()) {
        optionals.set(4);
      }
      if (struct.isSetId()) {
        optionals.set(5);
      }
      if (struct.isSetValue()) {
        optionals.set(6);
      }
      if (struct.isSetAlgorithmName()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCharOffset()) {
        struct.charOffset.write(oprot);
      }
      if (struct.isSetNoveltyConfidence()) {
        oprot.writeDouble(struct.noveltyConfidence);
      }
      if (struct.isSetPunctuation()) {
        oprot.writeString(struct.punctuation);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetUncertaintyConfidence()) {
        oprot.writeDouble(struct.uncertaintyConfidence);
      }
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetAlgorithmName()) {
        oprot.writeString(struct.algorithmName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sentence struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sequenceId = iprot.readI64();
      struct.setSequenceIdIsSet(true);
      struct.tokenOffset = new TokenOffset();
      struct.tokenOffset.read(iprot);
      struct.setTokenOffsetIsSet(true);
      struct.tokenStream = new TokenStream();
      struct.tokenStream.read(iprot);
      struct.setTokenStreamIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.charOffset = new CharOffset();
        struct.charOffset.read(iprot);
        struct.setCharOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.noveltyConfidence = iprot.readDouble();
        struct.setNoveltyConfidenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.punctuation = iprot.readString();
        struct.setPunctuationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = SentenceType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uncertaintyConfidence = iprot.readDouble();
        struct.setUncertaintyConfidenceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.id = new ID();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.algorithmName = iprot.readString();
        struct.setAlgorithmNameIsSet(true);
      }
    }
  }

}