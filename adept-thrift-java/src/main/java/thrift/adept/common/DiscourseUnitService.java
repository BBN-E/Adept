/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DiscourseUnitService {

  public interface Iface extends ChunkService.Iface {

    public String getDiscourceType() throws org.apache.thrift.TException;

    public double getNoveltyConfidence() throws org.apache.thrift.TException;

    public long getSequenceId() throws org.apache.thrift.TException;

    public double getUncertaintyConfidence() throws org.apache.thrift.TException;

    public void setDiscourceType(String discourceType) throws org.apache.thrift.TException;

    public void setNoveltyConfidence(double noveltyConfidence) throws org.apache.thrift.TException;

    public void setUncertaintyConfidence(double uncertaintyConfidence) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ChunkService .AsyncIface {

    public void getDiscourceType(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDiscourceType_call> resultHandler) throws org.apache.thrift.TException;

    public void getNoveltyConfidence(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getNoveltyConfidence_call> resultHandler) throws org.apache.thrift.TException;

    public void getSequenceId(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSequenceId_call> resultHandler) throws org.apache.thrift.TException;

    public void getUncertaintyConfidence(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUncertaintyConfidence_call> resultHandler) throws org.apache.thrift.TException;

    public void setDiscourceType(String discourceType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setDiscourceType_call> resultHandler) throws org.apache.thrift.TException;

    public void setNoveltyConfidence(double noveltyConfidence, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setNoveltyConfidence_call> resultHandler) throws org.apache.thrift.TException;

    public void setUncertaintyConfidence(double uncertaintyConfidence, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setUncertaintyConfidence_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ChunkService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getDiscourceType() throws org.apache.thrift.TException
    {
      send_getDiscourceType();
      return recv_getDiscourceType();
    }

    public void send_getDiscourceType() throws org.apache.thrift.TException
    {
      getDiscourceType_args args = new getDiscourceType_args();
      sendBase("getDiscourceType", args);
    }

    public String recv_getDiscourceType() throws org.apache.thrift.TException
    {
      getDiscourceType_result result = new getDiscourceType_result();
      receiveBase(result, "getDiscourceType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDiscourceType failed: unknown result");
    }

    public double getNoveltyConfidence() throws org.apache.thrift.TException
    {
      send_getNoveltyConfidence();
      return recv_getNoveltyConfidence();
    }

    public void send_getNoveltyConfidence() throws org.apache.thrift.TException
    {
      getNoveltyConfidence_args args = new getNoveltyConfidence_args();
      sendBase("getNoveltyConfidence", args);
    }

    public double recv_getNoveltyConfidence() throws org.apache.thrift.TException
    {
      getNoveltyConfidence_result result = new getNoveltyConfidence_result();
      receiveBase(result, "getNoveltyConfidence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNoveltyConfidence failed: unknown result");
    }

    public long getSequenceId() throws org.apache.thrift.TException
    {
      send_getSequenceId();
      return recv_getSequenceId();
    }

    public void send_getSequenceId() throws org.apache.thrift.TException
    {
      getSequenceId_args args = new getSequenceId_args();
      sendBase("getSequenceId", args);
    }

    public long recv_getSequenceId() throws org.apache.thrift.TException
    {
      getSequenceId_result result = new getSequenceId_result();
      receiveBase(result, "getSequenceId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSequenceId failed: unknown result");
    }

    public double getUncertaintyConfidence() throws org.apache.thrift.TException
    {
      send_getUncertaintyConfidence();
      return recv_getUncertaintyConfidence();
    }

    public void send_getUncertaintyConfidence() throws org.apache.thrift.TException
    {
      getUncertaintyConfidence_args args = new getUncertaintyConfidence_args();
      sendBase("getUncertaintyConfidence", args);
    }

    public double recv_getUncertaintyConfidence() throws org.apache.thrift.TException
    {
      getUncertaintyConfidence_result result = new getUncertaintyConfidence_result();
      receiveBase(result, "getUncertaintyConfidence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUncertaintyConfidence failed: unknown result");
    }

    public void setDiscourceType(String discourceType) throws org.apache.thrift.TException
    {
      send_setDiscourceType(discourceType);
      recv_setDiscourceType();
    }

    public void send_setDiscourceType(String discourceType) throws org.apache.thrift.TException
    {
      setDiscourceType_args args = new setDiscourceType_args();
      args.setDiscourceType(discourceType);
      sendBase("setDiscourceType", args);
    }

    public void recv_setDiscourceType() throws org.apache.thrift.TException
    {
      setDiscourceType_result result = new setDiscourceType_result();
      receiveBase(result, "setDiscourceType");
      return;
    }

    public void setNoveltyConfidence(double noveltyConfidence) throws org.apache.thrift.TException
    {
      send_setNoveltyConfidence(noveltyConfidence);
      recv_setNoveltyConfidence();
    }

    public void send_setNoveltyConfidence(double noveltyConfidence) throws org.apache.thrift.TException
    {
      setNoveltyConfidence_args args = new setNoveltyConfidence_args();
      args.setNoveltyConfidence(noveltyConfidence);
      sendBase("setNoveltyConfidence", args);
    }

    public void recv_setNoveltyConfidence() throws org.apache.thrift.TException
    {
      setNoveltyConfidence_result result = new setNoveltyConfidence_result();
      receiveBase(result, "setNoveltyConfidence");
      return;
    }

    public void setUncertaintyConfidence(double uncertaintyConfidence) throws org.apache.thrift.TException
    {
      send_setUncertaintyConfidence(uncertaintyConfidence);
      recv_setUncertaintyConfidence();
    }

    public void send_setUncertaintyConfidence(double uncertaintyConfidence) throws org.apache.thrift.TException
    {
      setUncertaintyConfidence_args args = new setUncertaintyConfidence_args();
      args.setUncertaintyConfidence(uncertaintyConfidence);
      sendBase("setUncertaintyConfidence", args);
    }

    public void recv_setUncertaintyConfidence() throws org.apache.thrift.TException
    {
      setUncertaintyConfidence_result result = new setUncertaintyConfidence_result();
      receiveBase(result, "setUncertaintyConfidence");
      return;
    }

  }
  public static class AsyncClient extends ChunkService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDiscourceType(org.apache.thrift.async.AsyncMethodCallback<getDiscourceType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDiscourceType_call method_call = new getDiscourceType_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDiscourceType_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getDiscourceType_call(org.apache.thrift.async.AsyncMethodCallback<getDiscourceType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDiscourceType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDiscourceType_args args = new getDiscourceType_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDiscourceType();
      }
    }

    public void getNoveltyConfidence(org.apache.thrift.async.AsyncMethodCallback<getNoveltyConfidence_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNoveltyConfidence_call method_call = new getNoveltyConfidence_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNoveltyConfidence_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getNoveltyConfidence_call(org.apache.thrift.async.AsyncMethodCallback<getNoveltyConfidence_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNoveltyConfidence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNoveltyConfidence_args args = new getNoveltyConfidence_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNoveltyConfidence();
      }
    }

    public void getSequenceId(org.apache.thrift.async.AsyncMethodCallback<getSequenceId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSequenceId_call method_call = new getSequenceId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSequenceId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSequenceId_call(org.apache.thrift.async.AsyncMethodCallback<getSequenceId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSequenceId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSequenceId_args args = new getSequenceId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSequenceId();
      }
    }

    public void getUncertaintyConfidence(org.apache.thrift.async.AsyncMethodCallback<getUncertaintyConfidence_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUncertaintyConfidence_call method_call = new getUncertaintyConfidence_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUncertaintyConfidence_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUncertaintyConfidence_call(org.apache.thrift.async.AsyncMethodCallback<getUncertaintyConfidence_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUncertaintyConfidence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUncertaintyConfidence_args args = new getUncertaintyConfidence_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUncertaintyConfidence();
      }
    }

    public void setDiscourceType(String discourceType, org.apache.thrift.async.AsyncMethodCallback<setDiscourceType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDiscourceType_call method_call = new setDiscourceType_call(discourceType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDiscourceType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String discourceType;
      public setDiscourceType_call(String discourceType, org.apache.thrift.async.AsyncMethodCallback<setDiscourceType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.discourceType = discourceType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDiscourceType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDiscourceType_args args = new setDiscourceType_args();
        args.setDiscourceType(discourceType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setDiscourceType();
      }
    }

    public void setNoveltyConfidence(double noveltyConfidence, org.apache.thrift.async.AsyncMethodCallback<setNoveltyConfidence_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setNoveltyConfidence_call method_call = new setNoveltyConfidence_call(noveltyConfidence, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setNoveltyConfidence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double noveltyConfidence;
      public setNoveltyConfidence_call(double noveltyConfidence, org.apache.thrift.async.AsyncMethodCallback<setNoveltyConfidence_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.noveltyConfidence = noveltyConfidence;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setNoveltyConfidence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setNoveltyConfidence_args args = new setNoveltyConfidence_args();
        args.setNoveltyConfidence(noveltyConfidence);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setNoveltyConfidence();
      }
    }

    public void setUncertaintyConfidence(double uncertaintyConfidence, org.apache.thrift.async.AsyncMethodCallback<setUncertaintyConfidence_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUncertaintyConfidence_call method_call = new setUncertaintyConfidence_call(uncertaintyConfidence, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUncertaintyConfidence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double uncertaintyConfidence;
      public setUncertaintyConfidence_call(double uncertaintyConfidence, org.apache.thrift.async.AsyncMethodCallback<setUncertaintyConfidence_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uncertaintyConfidence = uncertaintyConfidence;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUncertaintyConfidence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUncertaintyConfidence_args args = new setUncertaintyConfidence_args();
        args.setUncertaintyConfidence(uncertaintyConfidence);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setUncertaintyConfidence();
      }
    }

  }

  public static class Processor<I extends Iface> extends ChunkService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDiscourceType", new getDiscourceType());
      processMap.put("getNoveltyConfidence", new getNoveltyConfidence());
      processMap.put("getSequenceId", new getSequenceId());
      processMap.put("getUncertaintyConfidence", new getUncertaintyConfidence());
      processMap.put("setDiscourceType", new setDiscourceType());
      processMap.put("setNoveltyConfidence", new setNoveltyConfidence());
      processMap.put("setUncertaintyConfidence", new setUncertaintyConfidence());
      return processMap;
    }

    public static class getDiscourceType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDiscourceType_args> {
      public getDiscourceType() {
        super("getDiscourceType");
      }

      public getDiscourceType_args getEmptyArgsInstance() {
        return new getDiscourceType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDiscourceType_result getResult(I iface, getDiscourceType_args args) throws org.apache.thrift.TException {
        getDiscourceType_result result = new getDiscourceType_result();
        result.success = iface.getDiscourceType();
        return result;
      }
    }

    public static class getNoveltyConfidence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNoveltyConfidence_args> {
      public getNoveltyConfidence() {
        super("getNoveltyConfidence");
      }

      public getNoveltyConfidence_args getEmptyArgsInstance() {
        return new getNoveltyConfidence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNoveltyConfidence_result getResult(I iface, getNoveltyConfidence_args args) throws org.apache.thrift.TException {
        getNoveltyConfidence_result result = new getNoveltyConfidence_result();
        result.success = iface.getNoveltyConfidence();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getSequenceId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSequenceId_args> {
      public getSequenceId() {
        super("getSequenceId");
      }

      public getSequenceId_args getEmptyArgsInstance() {
        return new getSequenceId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSequenceId_result getResult(I iface, getSequenceId_args args) throws org.apache.thrift.TException {
        getSequenceId_result result = new getSequenceId_result();
        result.success = iface.getSequenceId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getUncertaintyConfidence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUncertaintyConfidence_args> {
      public getUncertaintyConfidence() {
        super("getUncertaintyConfidence");
      }

      public getUncertaintyConfidence_args getEmptyArgsInstance() {
        return new getUncertaintyConfidence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUncertaintyConfidence_result getResult(I iface, getUncertaintyConfidence_args args) throws org.apache.thrift.TException {
        getUncertaintyConfidence_result result = new getUncertaintyConfidence_result();
        result.success = iface.getUncertaintyConfidence();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setDiscourceType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDiscourceType_args> {
      public setDiscourceType() {
        super("setDiscourceType");
      }

      public setDiscourceType_args getEmptyArgsInstance() {
        return new setDiscourceType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setDiscourceType_result getResult(I iface, setDiscourceType_args args) throws org.apache.thrift.TException {
        setDiscourceType_result result = new setDiscourceType_result();
        iface.setDiscourceType(args.discourceType);
        return result;
      }
    }

    public static class setNoveltyConfidence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setNoveltyConfidence_args> {
      public setNoveltyConfidence() {
        super("setNoveltyConfidence");
      }

      public setNoveltyConfidence_args getEmptyArgsInstance() {
        return new setNoveltyConfidence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setNoveltyConfidence_result getResult(I iface, setNoveltyConfidence_args args) throws org.apache.thrift.TException {
        setNoveltyConfidence_result result = new setNoveltyConfidence_result();
        iface.setNoveltyConfidence(args.noveltyConfidence);
        return result;
      }
    }

    public static class setUncertaintyConfidence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUncertaintyConfidence_args> {
      public setUncertaintyConfidence() {
        super("setUncertaintyConfidence");
      }

      public setUncertaintyConfidence_args getEmptyArgsInstance() {
        return new setUncertaintyConfidence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setUncertaintyConfidence_result getResult(I iface, setUncertaintyConfidence_args args) throws org.apache.thrift.TException {
        setUncertaintyConfidence_result result = new setUncertaintyConfidence_result();
        iface.setUncertaintyConfidence(args.uncertaintyConfidence);
        return result;
      }
    }

  }

  public static class getDiscourceType_args implements org.apache.thrift.TBase<getDiscourceType_args, getDiscourceType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDiscourceType_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDiscourceType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDiscourceType_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDiscourceType_args.class, metaDataMap);
    }

    public getDiscourceType_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDiscourceType_args(getDiscourceType_args other) {
    }

    public getDiscourceType_args deepCopy() {
      return new getDiscourceType_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDiscourceType_args)
        return this.equals((getDiscourceType_args)that);
      return false;
    }

    public boolean equals(getDiscourceType_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDiscourceType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDiscourceType_args typedOther = (getDiscourceType_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDiscourceType_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDiscourceType_argsStandardSchemeFactory implements SchemeFactory {
      public getDiscourceType_argsStandardScheme getScheme() {
        return new getDiscourceType_argsStandardScheme();
      }
    }

    private static class getDiscourceType_argsStandardScheme extends StandardScheme<getDiscourceType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDiscourceType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDiscourceType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDiscourceType_argsTupleSchemeFactory implements SchemeFactory {
      public getDiscourceType_argsTupleScheme getScheme() {
        return new getDiscourceType_argsTupleScheme();
      }
    }

    private static class getDiscourceType_argsTupleScheme extends TupleScheme<getDiscourceType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDiscourceType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDiscourceType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getDiscourceType_result implements org.apache.thrift.TBase<getDiscourceType_result, getDiscourceType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDiscourceType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDiscourceType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDiscourceType_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDiscourceType_result.class, metaDataMap);
    }

    public getDiscourceType_result() {
    }

    public getDiscourceType_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDiscourceType_result(getDiscourceType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getDiscourceType_result deepCopy() {
      return new getDiscourceType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getDiscourceType_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDiscourceType_result)
        return this.equals((getDiscourceType_result)that);
      return false;
    }

    public boolean equals(getDiscourceType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDiscourceType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDiscourceType_result typedOther = (getDiscourceType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDiscourceType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDiscourceType_resultStandardSchemeFactory implements SchemeFactory {
      public getDiscourceType_resultStandardScheme getScheme() {
        return new getDiscourceType_resultStandardScheme();
      }
    }

    private static class getDiscourceType_resultStandardScheme extends StandardScheme<getDiscourceType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDiscourceType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDiscourceType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDiscourceType_resultTupleSchemeFactory implements SchemeFactory {
      public getDiscourceType_resultTupleScheme getScheme() {
        return new getDiscourceType_resultTupleScheme();
      }
    }

    private static class getDiscourceType_resultTupleScheme extends TupleScheme<getDiscourceType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDiscourceType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDiscourceType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNoveltyConfidence_args implements org.apache.thrift.TBase<getNoveltyConfidence_args, getNoveltyConfidence_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNoveltyConfidence_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNoveltyConfidence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNoveltyConfidence_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNoveltyConfidence_args.class, metaDataMap);
    }

    public getNoveltyConfidence_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoveltyConfidence_args(getNoveltyConfidence_args other) {
    }

    public getNoveltyConfidence_args deepCopy() {
      return new getNoveltyConfidence_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoveltyConfidence_args)
        return this.equals((getNoveltyConfidence_args)that);
      return false;
    }

    public boolean equals(getNoveltyConfidence_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoveltyConfidence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoveltyConfidence_args typedOther = (getNoveltyConfidence_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNoveltyConfidence_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNoveltyConfidence_argsStandardSchemeFactory implements SchemeFactory {
      public getNoveltyConfidence_argsStandardScheme getScheme() {
        return new getNoveltyConfidence_argsStandardScheme();
      }
    }

    private static class getNoveltyConfidence_argsStandardScheme extends StandardScheme<getNoveltyConfidence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNoveltyConfidence_argsTupleSchemeFactory implements SchemeFactory {
      public getNoveltyConfidence_argsTupleScheme getScheme() {
        return new getNoveltyConfidence_argsTupleScheme();
      }
    }

    private static class getNoveltyConfidence_argsTupleScheme extends TupleScheme<getNoveltyConfidence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getNoveltyConfidence_result implements org.apache.thrift.TBase<getNoveltyConfidence_result, getNoveltyConfidence_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNoveltyConfidence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNoveltyConfidence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNoveltyConfidence_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNoveltyConfidence_result.class, metaDataMap);
    }

    public getNoveltyConfidence_result() {
    }

    public getNoveltyConfidence_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoveltyConfidence_result(getNoveltyConfidence_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getNoveltyConfidence_result deepCopy() {
      return new getNoveltyConfidence_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getNoveltyConfidence_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoveltyConfidence_result)
        return this.equals((getNoveltyConfidence_result)that);
      return false;
    }

    public boolean equals(getNoveltyConfidence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoveltyConfidence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoveltyConfidence_result typedOther = (getNoveltyConfidence_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNoveltyConfidence_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNoveltyConfidence_resultStandardSchemeFactory implements SchemeFactory {
      public getNoveltyConfidence_resultStandardScheme getScheme() {
        return new getNoveltyConfidence_resultStandardScheme();
      }
    }

    private static class getNoveltyConfidence_resultStandardScheme extends StandardScheme<getNoveltyConfidence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNoveltyConfidence_resultTupleSchemeFactory implements SchemeFactory {
      public getNoveltyConfidence_resultTupleScheme getScheme() {
        return new getNoveltyConfidence_resultTupleScheme();
      }
    }

    private static class getNoveltyConfidence_resultTupleScheme extends TupleScheme<getNoveltyConfidence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSequenceId_args implements org.apache.thrift.TBase<getSequenceId_args, getSequenceId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSequenceId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSequenceId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSequenceId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSequenceId_args.class, metaDataMap);
    }

    public getSequenceId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSequenceId_args(getSequenceId_args other) {
    }

    public getSequenceId_args deepCopy() {
      return new getSequenceId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSequenceId_args)
        return this.equals((getSequenceId_args)that);
      return false;
    }

    public boolean equals(getSequenceId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSequenceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSequenceId_args typedOther = (getSequenceId_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSequenceId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSequenceId_argsStandardSchemeFactory implements SchemeFactory {
      public getSequenceId_argsStandardScheme getScheme() {
        return new getSequenceId_argsStandardScheme();
      }
    }

    private static class getSequenceId_argsStandardScheme extends StandardScheme<getSequenceId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSequenceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSequenceId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSequenceId_argsTupleSchemeFactory implements SchemeFactory {
      public getSequenceId_argsTupleScheme getScheme() {
        return new getSequenceId_argsTupleScheme();
      }
    }

    private static class getSequenceId_argsTupleScheme extends TupleScheme<getSequenceId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSequenceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSequenceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSequenceId_result implements org.apache.thrift.TBase<getSequenceId_result, getSequenceId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSequenceId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSequenceId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSequenceId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSequenceId_result.class, metaDataMap);
    }

    public getSequenceId_result() {
    }

    public getSequenceId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSequenceId_result(getSequenceId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSequenceId_result deepCopy() {
      return new getSequenceId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getSequenceId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSequenceId_result)
        return this.equals((getSequenceId_result)that);
      return false;
    }

    public boolean equals(getSequenceId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSequenceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSequenceId_result typedOther = (getSequenceId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSequenceId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSequenceId_resultStandardSchemeFactory implements SchemeFactory {
      public getSequenceId_resultStandardScheme getScheme() {
        return new getSequenceId_resultStandardScheme();
      }
    }

    private static class getSequenceId_resultStandardScheme extends StandardScheme<getSequenceId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSequenceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSequenceId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSequenceId_resultTupleSchemeFactory implements SchemeFactory {
      public getSequenceId_resultTupleScheme getScheme() {
        return new getSequenceId_resultTupleScheme();
      }
    }

    private static class getSequenceId_resultTupleScheme extends TupleScheme<getSequenceId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSequenceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSequenceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUncertaintyConfidence_args implements org.apache.thrift.TBase<getUncertaintyConfidence_args, getUncertaintyConfidence_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUncertaintyConfidence_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUncertaintyConfidence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUncertaintyConfidence_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUncertaintyConfidence_args.class, metaDataMap);
    }

    public getUncertaintyConfidence_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUncertaintyConfidence_args(getUncertaintyConfidence_args other) {
    }

    public getUncertaintyConfidence_args deepCopy() {
      return new getUncertaintyConfidence_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUncertaintyConfidence_args)
        return this.equals((getUncertaintyConfidence_args)that);
      return false;
    }

    public boolean equals(getUncertaintyConfidence_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUncertaintyConfidence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUncertaintyConfidence_args typedOther = (getUncertaintyConfidence_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUncertaintyConfidence_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUncertaintyConfidence_argsStandardSchemeFactory implements SchemeFactory {
      public getUncertaintyConfidence_argsStandardScheme getScheme() {
        return new getUncertaintyConfidence_argsStandardScheme();
      }
    }

    private static class getUncertaintyConfidence_argsStandardScheme extends StandardScheme<getUncertaintyConfidence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUncertaintyConfidence_argsTupleSchemeFactory implements SchemeFactory {
      public getUncertaintyConfidence_argsTupleScheme getScheme() {
        return new getUncertaintyConfidence_argsTupleScheme();
      }
    }

    private static class getUncertaintyConfidence_argsTupleScheme extends TupleScheme<getUncertaintyConfidence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUncertaintyConfidence_result implements org.apache.thrift.TBase<getUncertaintyConfidence_result, getUncertaintyConfidence_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUncertaintyConfidence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUncertaintyConfidence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUncertaintyConfidence_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUncertaintyConfidence_result.class, metaDataMap);
    }

    public getUncertaintyConfidence_result() {
    }

    public getUncertaintyConfidence_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUncertaintyConfidence_result(getUncertaintyConfidence_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getUncertaintyConfidence_result deepCopy() {
      return new getUncertaintyConfidence_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getUncertaintyConfidence_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUncertaintyConfidence_result)
        return this.equals((getUncertaintyConfidence_result)that);
      return false;
    }

    public boolean equals(getUncertaintyConfidence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUncertaintyConfidence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUncertaintyConfidence_result typedOther = (getUncertaintyConfidence_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUncertaintyConfidence_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUncertaintyConfidence_resultStandardSchemeFactory implements SchemeFactory {
      public getUncertaintyConfidence_resultStandardScheme getScheme() {
        return new getUncertaintyConfidence_resultStandardScheme();
      }
    }

    private static class getUncertaintyConfidence_resultStandardScheme extends StandardScheme<getUncertaintyConfidence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUncertaintyConfidence_resultTupleSchemeFactory implements SchemeFactory {
      public getUncertaintyConfidence_resultTupleScheme getScheme() {
        return new getUncertaintyConfidence_resultTupleScheme();
      }
    }

    private static class getUncertaintyConfidence_resultTupleScheme extends TupleScheme<getUncertaintyConfidence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setDiscourceType_args implements org.apache.thrift.TBase<setDiscourceType_args, setDiscourceType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDiscourceType_args");

    private static final org.apache.thrift.protocol.TField DISCOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("discourceType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDiscourceType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDiscourceType_argsTupleSchemeFactory());
    }

    public String discourceType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DISCOURCE_TYPE((short)1, "discourceType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DISCOURCE_TYPE
            return DISCOURCE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DISCOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("discourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDiscourceType_args.class, metaDataMap);
    }

    public setDiscourceType_args() {
    }

    public setDiscourceType_args(
      String discourceType)
    {
      this();
      this.discourceType = discourceType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDiscourceType_args(setDiscourceType_args other) {
      if (other.isSetDiscourceType()) {
        this.discourceType = other.discourceType;
      }
    }

    public setDiscourceType_args deepCopy() {
      return new setDiscourceType_args(this);
    }

    @Override
    public void clear() {
      this.discourceType = null;
    }

    public String getDiscourceType() {
      return this.discourceType;
    }

    public setDiscourceType_args setDiscourceType(String discourceType) {
      this.discourceType = discourceType;
      return this;
    }

    public void unsetDiscourceType() {
      this.discourceType = null;
    }

    /** Returns true if field discourceType is set (has been assigned a value) and false otherwise */
    public boolean isSetDiscourceType() {
      return this.discourceType != null;
    }

    public void setDiscourceTypeIsSet(boolean value) {
      if (!value) {
        this.discourceType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DISCOURCE_TYPE:
        if (value == null) {
          unsetDiscourceType();
        } else {
          setDiscourceType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DISCOURCE_TYPE:
        return getDiscourceType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DISCOURCE_TYPE:
        return isSetDiscourceType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDiscourceType_args)
        return this.equals((setDiscourceType_args)that);
      return false;
    }

    public boolean equals(setDiscourceType_args that) {
      if (that == null)
        return false;

      boolean this_present_discourceType = true && this.isSetDiscourceType();
      boolean that_present_discourceType = true && that.isSetDiscourceType();
      if (this_present_discourceType || that_present_discourceType) {
        if (!(this_present_discourceType && that_present_discourceType))
          return false;
        if (!this.discourceType.equals(that.discourceType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDiscourceType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDiscourceType_args typedOther = (setDiscourceType_args)other;

      lastComparison = Boolean.valueOf(isSetDiscourceType()).compareTo(typedOther.isSetDiscourceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDiscourceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discourceType, typedOther.discourceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDiscourceType_args(");
      boolean first = true;

      sb.append("discourceType:");
      if (this.discourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.discourceType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDiscourceType_argsStandardSchemeFactory implements SchemeFactory {
      public setDiscourceType_argsStandardScheme getScheme() {
        return new setDiscourceType_argsStandardScheme();
      }
    }

    private static class setDiscourceType_argsStandardScheme extends StandardScheme<setDiscourceType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDiscourceType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DISCOURCE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.discourceType = iprot.readString();
                struct.setDiscourceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDiscourceType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.discourceType != null) {
          oprot.writeFieldBegin(DISCOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.discourceType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDiscourceType_argsTupleSchemeFactory implements SchemeFactory {
      public setDiscourceType_argsTupleScheme getScheme() {
        return new setDiscourceType_argsTupleScheme();
      }
    }

    private static class setDiscourceType_argsTupleScheme extends TupleScheme<setDiscourceType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDiscourceType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDiscourceType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDiscourceType()) {
          oprot.writeString(struct.discourceType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDiscourceType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.discourceType = iprot.readString();
          struct.setDiscourceTypeIsSet(true);
        }
      }
    }

  }

  public static class setDiscourceType_result implements org.apache.thrift.TBase<setDiscourceType_result, setDiscourceType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDiscourceType_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDiscourceType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDiscourceType_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDiscourceType_result.class, metaDataMap);
    }

    public setDiscourceType_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDiscourceType_result(setDiscourceType_result other) {
    }

    public setDiscourceType_result deepCopy() {
      return new setDiscourceType_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDiscourceType_result)
        return this.equals((setDiscourceType_result)that);
      return false;
    }

    public boolean equals(setDiscourceType_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDiscourceType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDiscourceType_result typedOther = (setDiscourceType_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDiscourceType_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDiscourceType_resultStandardSchemeFactory implements SchemeFactory {
      public setDiscourceType_resultStandardScheme getScheme() {
        return new setDiscourceType_resultStandardScheme();
      }
    }

    private static class setDiscourceType_resultStandardScheme extends StandardScheme<setDiscourceType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDiscourceType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDiscourceType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDiscourceType_resultTupleSchemeFactory implements SchemeFactory {
      public setDiscourceType_resultTupleScheme getScheme() {
        return new setDiscourceType_resultTupleScheme();
      }
    }

    private static class setDiscourceType_resultTupleScheme extends TupleScheme<setDiscourceType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDiscourceType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDiscourceType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setNoveltyConfidence_args implements org.apache.thrift.TBase<setNoveltyConfidence_args, setNoveltyConfidence_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setNoveltyConfidence_args");

    private static final org.apache.thrift.protocol.TField NOVELTY_CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("noveltyConfidence", org.apache.thrift.protocol.TType.DOUBLE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setNoveltyConfidence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setNoveltyConfidence_argsTupleSchemeFactory());
    }

    public double noveltyConfidence; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOVELTY_CONFIDENCE((short)1, "noveltyConfidence");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOVELTY_CONFIDENCE
            return NOVELTY_CONFIDENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOVELTYCONFIDENCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOVELTY_CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("noveltyConfidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNoveltyConfidence_args.class, metaDataMap);
    }

    public setNoveltyConfidence_args() {
    }

    public setNoveltyConfidence_args(
      double noveltyConfidence)
    {
      this();
      this.noveltyConfidence = noveltyConfidence;
      setNoveltyConfidenceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNoveltyConfidence_args(setNoveltyConfidence_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.noveltyConfidence = other.noveltyConfidence;
    }

    public setNoveltyConfidence_args deepCopy() {
      return new setNoveltyConfidence_args(this);
    }

    @Override
    public void clear() {
      setNoveltyConfidenceIsSet(false);
      this.noveltyConfidence = 0.0;
    }

    public double getNoveltyConfidence() {
      return this.noveltyConfidence;
    }

    public setNoveltyConfidence_args setNoveltyConfidence(double noveltyConfidence) {
      this.noveltyConfidence = noveltyConfidence;
      setNoveltyConfidenceIsSet(true);
      return this;
    }

    public void unsetNoveltyConfidence() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOVELTYCONFIDENCE_ISSET_ID);
    }

    /** Returns true if field noveltyConfidence is set (has been assigned a value) and false otherwise */
    public boolean isSetNoveltyConfidence() {
      return EncodingUtils.testBit(__isset_bitfield, __NOVELTYCONFIDENCE_ISSET_ID);
    }

    public void setNoveltyConfidenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOVELTYCONFIDENCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOVELTY_CONFIDENCE:
        if (value == null) {
          unsetNoveltyConfidence();
        } else {
          setNoveltyConfidence((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOVELTY_CONFIDENCE:
        return Double.valueOf(getNoveltyConfidence());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOVELTY_CONFIDENCE:
        return isSetNoveltyConfidence();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNoveltyConfidence_args)
        return this.equals((setNoveltyConfidence_args)that);
      return false;
    }

    public boolean equals(setNoveltyConfidence_args that) {
      if (that == null)
        return false;

      boolean this_present_noveltyConfidence = true;
      boolean that_present_noveltyConfidence = true;
      if (this_present_noveltyConfidence || that_present_noveltyConfidence) {
        if (!(this_present_noveltyConfidence && that_present_noveltyConfidence))
          return false;
        if (this.noveltyConfidence != that.noveltyConfidence)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setNoveltyConfidence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setNoveltyConfidence_args typedOther = (setNoveltyConfidence_args)other;

      lastComparison = Boolean.valueOf(isSetNoveltyConfidence()).compareTo(typedOther.isSetNoveltyConfidence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoveltyConfidence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noveltyConfidence, typedOther.noveltyConfidence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setNoveltyConfidence_args(");
      boolean first = true;

      sb.append("noveltyConfidence:");
      sb.append(this.noveltyConfidence);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setNoveltyConfidence_argsStandardSchemeFactory implements SchemeFactory {
      public setNoveltyConfidence_argsStandardScheme getScheme() {
        return new setNoveltyConfidence_argsStandardScheme();
      }
    }

    private static class setNoveltyConfidence_argsStandardScheme extends StandardScheme<setNoveltyConfidence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOVELTY_CONFIDENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.noveltyConfidence = iprot.readDouble();
                struct.setNoveltyConfidenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOVELTY_CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.noveltyConfidence);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setNoveltyConfidence_argsTupleSchemeFactory implements SchemeFactory {
      public setNoveltyConfidence_argsTupleScheme getScheme() {
        return new setNoveltyConfidence_argsTupleScheme();
      }
    }

    private static class setNoveltyConfidence_argsTupleScheme extends TupleScheme<setNoveltyConfidence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNoveltyConfidence()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNoveltyConfidence()) {
          oprot.writeDouble(struct.noveltyConfidence);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setNoveltyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.noveltyConfidence = iprot.readDouble();
          struct.setNoveltyConfidenceIsSet(true);
        }
      }
    }

  }

  public static class setNoveltyConfidence_result implements org.apache.thrift.TBase<setNoveltyConfidence_result, setNoveltyConfidence_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setNoveltyConfidence_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setNoveltyConfidence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setNoveltyConfidence_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNoveltyConfidence_result.class, metaDataMap);
    }

    public setNoveltyConfidence_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNoveltyConfidence_result(setNoveltyConfidence_result other) {
    }

    public setNoveltyConfidence_result deepCopy() {
      return new setNoveltyConfidence_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNoveltyConfidence_result)
        return this.equals((setNoveltyConfidence_result)that);
      return false;
    }

    public boolean equals(setNoveltyConfidence_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setNoveltyConfidence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setNoveltyConfidence_result typedOther = (setNoveltyConfidence_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setNoveltyConfidence_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setNoveltyConfidence_resultStandardSchemeFactory implements SchemeFactory {
      public setNoveltyConfidence_resultStandardScheme getScheme() {
        return new setNoveltyConfidence_resultStandardScheme();
      }
    }

    private static class setNoveltyConfidence_resultStandardScheme extends StandardScheme<setNoveltyConfidence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setNoveltyConfidence_resultTupleSchemeFactory implements SchemeFactory {
      public setNoveltyConfidence_resultTupleScheme getScheme() {
        return new setNoveltyConfidence_resultTupleScheme();
      }
    }

    private static class setNoveltyConfidence_resultTupleScheme extends TupleScheme<setNoveltyConfidence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setNoveltyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setUncertaintyConfidence_args implements org.apache.thrift.TBase<setUncertaintyConfidence_args, setUncertaintyConfidence_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUncertaintyConfidence_args");

    private static final org.apache.thrift.protocol.TField UNCERTAINTY_CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("uncertaintyConfidence", org.apache.thrift.protocol.TType.DOUBLE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUncertaintyConfidence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUncertaintyConfidence_argsTupleSchemeFactory());
    }

    public double uncertaintyConfidence; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNCERTAINTY_CONFIDENCE((short)1, "uncertaintyConfidence");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNCERTAINTY_CONFIDENCE
            return UNCERTAINTY_CONFIDENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UNCERTAINTYCONFIDENCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNCERTAINTY_CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("uncertaintyConfidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUncertaintyConfidence_args.class, metaDataMap);
    }

    public setUncertaintyConfidence_args() {
    }

    public setUncertaintyConfidence_args(
      double uncertaintyConfidence)
    {
      this();
      this.uncertaintyConfidence = uncertaintyConfidence;
      setUncertaintyConfidenceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUncertaintyConfidence_args(setUncertaintyConfidence_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uncertaintyConfidence = other.uncertaintyConfidence;
    }

    public setUncertaintyConfidence_args deepCopy() {
      return new setUncertaintyConfidence_args(this);
    }

    @Override
    public void clear() {
      setUncertaintyConfidenceIsSet(false);
      this.uncertaintyConfidence = 0.0;
    }

    public double getUncertaintyConfidence() {
      return this.uncertaintyConfidence;
    }

    public setUncertaintyConfidence_args setUncertaintyConfidence(double uncertaintyConfidence) {
      this.uncertaintyConfidence = uncertaintyConfidence;
      setUncertaintyConfidenceIsSet(true);
      return this;
    }

    public void unsetUncertaintyConfidence() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNCERTAINTYCONFIDENCE_ISSET_ID);
    }

    /** Returns true if field uncertaintyConfidence is set (has been assigned a value) and false otherwise */
    public boolean isSetUncertaintyConfidence() {
      return EncodingUtils.testBit(__isset_bitfield, __UNCERTAINTYCONFIDENCE_ISSET_ID);
    }

    public void setUncertaintyConfidenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNCERTAINTYCONFIDENCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNCERTAINTY_CONFIDENCE:
        if (value == null) {
          unsetUncertaintyConfidence();
        } else {
          setUncertaintyConfidence((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNCERTAINTY_CONFIDENCE:
        return Double.valueOf(getUncertaintyConfidence());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNCERTAINTY_CONFIDENCE:
        return isSetUncertaintyConfidence();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUncertaintyConfidence_args)
        return this.equals((setUncertaintyConfidence_args)that);
      return false;
    }

    public boolean equals(setUncertaintyConfidence_args that) {
      if (that == null)
        return false;

      boolean this_present_uncertaintyConfidence = true;
      boolean that_present_uncertaintyConfidence = true;
      if (this_present_uncertaintyConfidence || that_present_uncertaintyConfidence) {
        if (!(this_present_uncertaintyConfidence && that_present_uncertaintyConfidence))
          return false;
        if (this.uncertaintyConfidence != that.uncertaintyConfidence)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setUncertaintyConfidence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setUncertaintyConfidence_args typedOther = (setUncertaintyConfidence_args)other;

      lastComparison = Boolean.valueOf(isSetUncertaintyConfidence()).compareTo(typedOther.isSetUncertaintyConfidence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUncertaintyConfidence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uncertaintyConfidence, typedOther.uncertaintyConfidence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUncertaintyConfidence_args(");
      boolean first = true;

      sb.append("uncertaintyConfidence:");
      sb.append(this.uncertaintyConfidence);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUncertaintyConfidence_argsStandardSchemeFactory implements SchemeFactory {
      public setUncertaintyConfidence_argsStandardScheme getScheme() {
        return new setUncertaintyConfidence_argsStandardScheme();
      }
    }

    private static class setUncertaintyConfidence_argsStandardScheme extends StandardScheme<setUncertaintyConfidence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNCERTAINTY_CONFIDENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.uncertaintyConfidence = iprot.readDouble();
                struct.setUncertaintyConfidenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UNCERTAINTY_CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.uncertaintyConfidence);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUncertaintyConfidence_argsTupleSchemeFactory implements SchemeFactory {
      public setUncertaintyConfidence_argsTupleScheme getScheme() {
        return new setUncertaintyConfidence_argsTupleScheme();
      }
    }

    private static class setUncertaintyConfidence_argsTupleScheme extends TupleScheme<setUncertaintyConfidence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUncertaintyConfidence()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUncertaintyConfidence()) {
          oprot.writeDouble(struct.uncertaintyConfidence);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUncertaintyConfidence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uncertaintyConfidence = iprot.readDouble();
          struct.setUncertaintyConfidenceIsSet(true);
        }
      }
    }

  }

  public static class setUncertaintyConfidence_result implements org.apache.thrift.TBase<setUncertaintyConfidence_result, setUncertaintyConfidence_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUncertaintyConfidence_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUncertaintyConfidence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUncertaintyConfidence_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUncertaintyConfidence_result.class, metaDataMap);
    }

    public setUncertaintyConfidence_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUncertaintyConfidence_result(setUncertaintyConfidence_result other) {
    }

    public setUncertaintyConfidence_result deepCopy() {
      return new setUncertaintyConfidence_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUncertaintyConfidence_result)
        return this.equals((setUncertaintyConfidence_result)that);
      return false;
    }

    public boolean equals(setUncertaintyConfidence_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setUncertaintyConfidence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setUncertaintyConfidence_result typedOther = (setUncertaintyConfidence_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUncertaintyConfidence_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUncertaintyConfidence_resultStandardSchemeFactory implements SchemeFactory {
      public setUncertaintyConfidence_resultStandardScheme getScheme() {
        return new setUncertaintyConfidence_resultStandardScheme();
      }
    }

    private static class setUncertaintyConfidence_resultStandardScheme extends StandardScheme<setUncertaintyConfidence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUncertaintyConfidence_resultTupleSchemeFactory implements SchemeFactory {
      public setUncertaintyConfidence_resultTupleScheme getScheme() {
        return new setUncertaintyConfidence_resultTupleScheme();
      }
    }

    private static class setUncertaintyConfidence_resultTupleScheme extends TupleScheme<setUncertaintyConfidence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUncertaintyConfidence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}