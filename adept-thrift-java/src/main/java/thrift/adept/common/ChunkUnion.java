/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The ChunkUnion includes all of the classes that extend
 * Chunk for the purposes of passing through interfaces.
 */
public class ChunkUnion extends org.apache.thrift.TUnion<ChunkUnion, ChunkUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChunkUnion");
  private static final org.apache.thrift.protocol.TField COMMITTED_BELIEF_FIELD_DESC = new org.apache.thrift.protocol.TField("committedBelief", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DISCOURSE_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("discourseUnit", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ENTITY_MENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMention", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("opinion", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PART_OF_SPEECH_FIELD_DESC = new org.apache.thrift.protocol.TField("partOfSpeech", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PASSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("passage", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PROSODIC_PHRASE_FIELD_DESC = new org.apache.thrift.protocol.TField("prosodicPhrase", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SARCASM_FIELD_DESC = new org.apache.thrift.protocol.TField("sarcasm", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentence", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField STORY_FIELD_DESC = new org.apache.thrift.protocol.TField("story", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SYNTACTIC_CHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("syntacticChunk", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField UTTERANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("utterance", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField CHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("chunk", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMITTED_BELIEF((short)1, "committedBelief"),
    DISCOURSE_UNIT((short)2, "discourseUnit"),
    ENTITY_MENTION((short)3, "entityMention"),
    OPINION((short)4, "opinion"),
    PART_OF_SPEECH((short)5, "partOfSpeech"),
    PASSAGE((short)6, "passage"),
    PROSODIC_PHRASE((short)7, "prosodicPhrase"),
    SARCASM((short)8, "sarcasm"),
    SENTENCE((short)9, "sentence"),
    STORY((short)10, "story"),
    SYNTACTIC_CHUNK((short)11, "syntacticChunk"),
    UTTERANCE((short)12, "utterance"),
    CHUNK((short)13, "chunk");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMITTED_BELIEF
          return COMMITTED_BELIEF;
        case 2: // DISCOURSE_UNIT
          return DISCOURSE_UNIT;
        case 3: // ENTITY_MENTION
          return ENTITY_MENTION;
        case 4: // OPINION
          return OPINION;
        case 5: // PART_OF_SPEECH
          return PART_OF_SPEECH;
        case 6: // PASSAGE
          return PASSAGE;
        case 7: // PROSODIC_PHRASE
          return PROSODIC_PHRASE;
        case 8: // SARCASM
          return SARCASM;
        case 9: // SENTENCE
          return SENTENCE;
        case 10: // STORY
          return STORY;
        case 11: // SYNTACTIC_CHUNK
          return SYNTACTIC_CHUNK;
        case 12: // UTTERANCE
          return UTTERANCE;
        case 13: // CHUNK
          return CHUNK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMITTED_BELIEF, new org.apache.thrift.meta_data.FieldMetaData("committedBelief", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommittedBelief.class)));
    tmpMap.put(_Fields.DISCOURSE_UNIT, new org.apache.thrift.meta_data.FieldMetaData("discourseUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscourseUnit.class)));
    tmpMap.put(_Fields.ENTITY_MENTION, new org.apache.thrift.meta_data.FieldMetaData("entityMention", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityMention.class)));
    tmpMap.put(_Fields.OPINION, new org.apache.thrift.meta_data.FieldMetaData("opinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Opinion.class)));
    tmpMap.put(_Fields.PART_OF_SPEECH, new org.apache.thrift.meta_data.FieldMetaData("partOfSpeech", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartOfSpeech.class)));
    tmpMap.put(_Fields.PASSAGE, new org.apache.thrift.meta_data.FieldMetaData("passage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passage.class)));
    tmpMap.put(_Fields.PROSODIC_PHRASE, new org.apache.thrift.meta_data.FieldMetaData("prosodicPhrase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProsodicPhrase.class)));
    tmpMap.put(_Fields.SARCASM, new org.apache.thrift.meta_data.FieldMetaData("sarcasm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sarcasm.class)));
    tmpMap.put(_Fields.SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("sentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sentence.class)));
    tmpMap.put(_Fields.STORY, new org.apache.thrift.meta_data.FieldMetaData("story", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Story.class)));
    tmpMap.put(_Fields.SYNTACTIC_CHUNK, new org.apache.thrift.meta_data.FieldMetaData("syntacticChunk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SyntacticChunk.class)));
    tmpMap.put(_Fields.UTTERANCE, new org.apache.thrift.meta_data.FieldMetaData("utterance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Utterance.class)));
    tmpMap.put(_Fields.CHUNK, new org.apache.thrift.meta_data.FieldMetaData("chunk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Chunk.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChunkUnion.class, metaDataMap);
  }

  public ChunkUnion() {
    super();
  }

  public ChunkUnion(_Fields setField, Object value) {
    super(setField, value);
  }

  public ChunkUnion(ChunkUnion other) {
    super(other);
  }
  public ChunkUnion deepCopy() {
    return new ChunkUnion(this);
  }

  public static ChunkUnion committedBelief(CommittedBelief value) {
    ChunkUnion x = new ChunkUnion();
    x.setCommittedBelief(value);
    return x;
  }

  public static ChunkUnion discourseUnit(DiscourseUnit value) {
    ChunkUnion x = new ChunkUnion();
    x.setDiscourseUnit(value);
    return x;
  }

  public static ChunkUnion entityMention(EntityMention value) {
    ChunkUnion x = new ChunkUnion();
    x.setEntityMention(value);
    return x;
  }

  public static ChunkUnion opinion(Opinion value) {
    ChunkUnion x = new ChunkUnion();
    x.setOpinion(value);
    return x;
  }

  public static ChunkUnion partOfSpeech(PartOfSpeech value) {
    ChunkUnion x = new ChunkUnion();
    x.setPartOfSpeech(value);
    return x;
  }

  public static ChunkUnion passage(Passage value) {
    ChunkUnion x = new ChunkUnion();
    x.setPassage(value);
    return x;
  }

  public static ChunkUnion prosodicPhrase(ProsodicPhrase value) {
    ChunkUnion x = new ChunkUnion();
    x.setProsodicPhrase(value);
    return x;
  }

  public static ChunkUnion sarcasm(Sarcasm value) {
    ChunkUnion x = new ChunkUnion();
    x.setSarcasm(value);
    return x;
  }

  public static ChunkUnion sentence(Sentence value) {
    ChunkUnion x = new ChunkUnion();
    x.setSentence(value);
    return x;
  }

  public static ChunkUnion story(Story value) {
    ChunkUnion x = new ChunkUnion();
    x.setStory(value);
    return x;
  }

  public static ChunkUnion syntacticChunk(SyntacticChunk value) {
    ChunkUnion x = new ChunkUnion();
    x.setSyntacticChunk(value);
    return x;
  }

  public static ChunkUnion utterance(Utterance value) {
    ChunkUnion x = new ChunkUnion();
    x.setUtterance(value);
    return x;
  }

  public static ChunkUnion chunk(Chunk value) {
    ChunkUnion x = new ChunkUnion();
    x.setChunk(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case COMMITTED_BELIEF:
        if (value instanceof CommittedBelief) {
          break;
        }
        throw new ClassCastException("Was expecting value of type CommittedBelief for field 'committedBelief', but got " + value.getClass().getSimpleName());
      case DISCOURSE_UNIT:
        if (value instanceof DiscourseUnit) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DiscourseUnit for field 'discourseUnit', but got " + value.getClass().getSimpleName());
      case ENTITY_MENTION:
        if (value instanceof EntityMention) {
          break;
        }
        throw new ClassCastException("Was expecting value of type EntityMention for field 'entityMention', but got " + value.getClass().getSimpleName());
      case OPINION:
        if (value instanceof Opinion) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Opinion for field 'opinion', but got " + value.getClass().getSimpleName());
      case PART_OF_SPEECH:
        if (value instanceof PartOfSpeech) {
          break;
        }
        throw new ClassCastException("Was expecting value of type PartOfSpeech for field 'partOfSpeech', but got " + value.getClass().getSimpleName());
      case PASSAGE:
        if (value instanceof Passage) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Passage for field 'passage', but got " + value.getClass().getSimpleName());
      case PROSODIC_PHRASE:
        if (value instanceof ProsodicPhrase) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ProsodicPhrase for field 'prosodicPhrase', but got " + value.getClass().getSimpleName());
      case SARCASM:
        if (value instanceof Sarcasm) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Sarcasm for field 'sarcasm', but got " + value.getClass().getSimpleName());
      case SENTENCE:
        if (value instanceof Sentence) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Sentence for field 'sentence', but got " + value.getClass().getSimpleName());
      case STORY:
        if (value instanceof Story) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Story for field 'story', but got " + value.getClass().getSimpleName());
      case SYNTACTIC_CHUNK:
        if (value instanceof SyntacticChunk) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SyntacticChunk for field 'syntacticChunk', but got " + value.getClass().getSimpleName());
      case UTTERANCE:
        if (value instanceof Utterance) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Utterance for field 'utterance', but got " + value.getClass().getSimpleName());
      case CHUNK:
        if (value instanceof Chunk) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Chunk for field 'chunk', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case COMMITTED_BELIEF:
          if (field.type == COMMITTED_BELIEF_FIELD_DESC.type) {
            CommittedBelief committedBelief;
            committedBelief = new CommittedBelief();
            committedBelief.read(iprot);
            return committedBelief;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DISCOURSE_UNIT:
          if (field.type == DISCOURSE_UNIT_FIELD_DESC.type) {
            DiscourseUnit discourseUnit;
            discourseUnit = new DiscourseUnit();
            discourseUnit.read(iprot);
            return discourseUnit;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ENTITY_MENTION:
          if (field.type == ENTITY_MENTION_FIELD_DESC.type) {
            EntityMention entityMention;
            entityMention = new EntityMention();
            entityMention.read(iprot);
            return entityMention;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OPINION:
          if (field.type == OPINION_FIELD_DESC.type) {
            Opinion opinion;
            opinion = new Opinion();
            opinion.read(iprot);
            return opinion;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PART_OF_SPEECH:
          if (field.type == PART_OF_SPEECH_FIELD_DESC.type) {
            PartOfSpeech partOfSpeech;
            partOfSpeech = new PartOfSpeech();
            partOfSpeech.read(iprot);
            return partOfSpeech;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PASSAGE:
          if (field.type == PASSAGE_FIELD_DESC.type) {
            Passage passage;
            passage = new Passage();
            passage.read(iprot);
            return passage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PROSODIC_PHRASE:
          if (field.type == PROSODIC_PHRASE_FIELD_DESC.type) {
            ProsodicPhrase prosodicPhrase;
            prosodicPhrase = new ProsodicPhrase();
            prosodicPhrase.read(iprot);
            return prosodicPhrase;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SARCASM:
          if (field.type == SARCASM_FIELD_DESC.type) {
            Sarcasm sarcasm;
            sarcasm = new Sarcasm();
            sarcasm.read(iprot);
            return sarcasm;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SENTENCE:
          if (field.type == SENTENCE_FIELD_DESC.type) {
            Sentence sentence;
            sentence = new Sentence();
            sentence.read(iprot);
            return sentence;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STORY:
          if (field.type == STORY_FIELD_DESC.type) {
            Story story;
            story = new Story();
            story.read(iprot);
            return story;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SYNTACTIC_CHUNK:
          if (field.type == SYNTACTIC_CHUNK_FIELD_DESC.type) {
            SyntacticChunk syntacticChunk;
            syntacticChunk = new SyntacticChunk();
            syntacticChunk.read(iprot);
            return syntacticChunk;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UTTERANCE:
          if (field.type == UTTERANCE_FIELD_DESC.type) {
            Utterance utterance;
            utterance = new Utterance();
            utterance.read(iprot);
            return utterance;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CHUNK:
          if (field.type == CHUNK_FIELD_DESC.type) {
            Chunk chunk;
            chunk = new Chunk();
            chunk.read(iprot);
            return chunk;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case COMMITTED_BELIEF:
        CommittedBelief committedBelief = (CommittedBelief)value_;
        committedBelief.write(oprot);
        return;
      case DISCOURSE_UNIT:
        DiscourseUnit discourseUnit = (DiscourseUnit)value_;
        discourseUnit.write(oprot);
        return;
      case ENTITY_MENTION:
        EntityMention entityMention = (EntityMention)value_;
        entityMention.write(oprot);
        return;
      case OPINION:
        Opinion opinion = (Opinion)value_;
        opinion.write(oprot);
        return;
      case PART_OF_SPEECH:
        PartOfSpeech partOfSpeech = (PartOfSpeech)value_;
        partOfSpeech.write(oprot);
        return;
      case PASSAGE:
        Passage passage = (Passage)value_;
        passage.write(oprot);
        return;
      case PROSODIC_PHRASE:
        ProsodicPhrase prosodicPhrase = (ProsodicPhrase)value_;
        prosodicPhrase.write(oprot);
        return;
      case SARCASM:
        Sarcasm sarcasm = (Sarcasm)value_;
        sarcasm.write(oprot);
        return;
      case SENTENCE:
        Sentence sentence = (Sentence)value_;
        sentence.write(oprot);
        return;
      case STORY:
        Story story = (Story)value_;
        story.write(oprot);
        return;
      case SYNTACTIC_CHUNK:
        SyntacticChunk syntacticChunk = (SyntacticChunk)value_;
        syntacticChunk.write(oprot);
        return;
      case UTTERANCE:
        Utterance utterance = (Utterance)value_;
        utterance.write(oprot);
        return;
      case CHUNK:
        Chunk chunk = (Chunk)value_;
        chunk.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case COMMITTED_BELIEF:
          CommittedBelief committedBelief;
          committedBelief = new CommittedBelief();
          committedBelief.read(iprot);
          return committedBelief;
        case DISCOURSE_UNIT:
          DiscourseUnit discourseUnit;
          discourseUnit = new DiscourseUnit();
          discourseUnit.read(iprot);
          return discourseUnit;
        case ENTITY_MENTION:
          EntityMention entityMention;
          entityMention = new EntityMention();
          entityMention.read(iprot);
          return entityMention;
        case OPINION:
          Opinion opinion;
          opinion = new Opinion();
          opinion.read(iprot);
          return opinion;
        case PART_OF_SPEECH:
          PartOfSpeech partOfSpeech;
          partOfSpeech = new PartOfSpeech();
          partOfSpeech.read(iprot);
          return partOfSpeech;
        case PASSAGE:
          Passage passage;
          passage = new Passage();
          passage.read(iprot);
          return passage;
        case PROSODIC_PHRASE:
          ProsodicPhrase prosodicPhrase;
          prosodicPhrase = new ProsodicPhrase();
          prosodicPhrase.read(iprot);
          return prosodicPhrase;
        case SARCASM:
          Sarcasm sarcasm;
          sarcasm = new Sarcasm();
          sarcasm.read(iprot);
          return sarcasm;
        case SENTENCE:
          Sentence sentence;
          sentence = new Sentence();
          sentence.read(iprot);
          return sentence;
        case STORY:
          Story story;
          story = new Story();
          story.read(iprot);
          return story;
        case SYNTACTIC_CHUNK:
          SyntacticChunk syntacticChunk;
          syntacticChunk = new SyntacticChunk();
          syntacticChunk.read(iprot);
          return syntacticChunk;
        case UTTERANCE:
          Utterance utterance;
          utterance = new Utterance();
          utterance.read(iprot);
          return utterance;
        case CHUNK:
          Chunk chunk;
          chunk = new Chunk();
          chunk.read(iprot);
          return chunk;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case COMMITTED_BELIEF:
        CommittedBelief committedBelief = (CommittedBelief)value_;
        committedBelief.write(oprot);
        return;
      case DISCOURSE_UNIT:
        DiscourseUnit discourseUnit = (DiscourseUnit)value_;
        discourseUnit.write(oprot);
        return;
      case ENTITY_MENTION:
        EntityMention entityMention = (EntityMention)value_;
        entityMention.write(oprot);
        return;
      case OPINION:
        Opinion opinion = (Opinion)value_;
        opinion.write(oprot);
        return;
      case PART_OF_SPEECH:
        PartOfSpeech partOfSpeech = (PartOfSpeech)value_;
        partOfSpeech.write(oprot);
        return;
      case PASSAGE:
        Passage passage = (Passage)value_;
        passage.write(oprot);
        return;
      case PROSODIC_PHRASE:
        ProsodicPhrase prosodicPhrase = (ProsodicPhrase)value_;
        prosodicPhrase.write(oprot);
        return;
      case SARCASM:
        Sarcasm sarcasm = (Sarcasm)value_;
        sarcasm.write(oprot);
        return;
      case SENTENCE:
        Sentence sentence = (Sentence)value_;
        sentence.write(oprot);
        return;
      case STORY:
        Story story = (Story)value_;
        story.write(oprot);
        return;
      case SYNTACTIC_CHUNK:
        SyntacticChunk syntacticChunk = (SyntacticChunk)value_;
        syntacticChunk.write(oprot);
        return;
      case UTTERANCE:
        Utterance utterance = (Utterance)value_;
        utterance.write(oprot);
        return;
      case CHUNK:
        Chunk chunk = (Chunk)value_;
        chunk.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case COMMITTED_BELIEF:
        return COMMITTED_BELIEF_FIELD_DESC;
      case DISCOURSE_UNIT:
        return DISCOURSE_UNIT_FIELD_DESC;
      case ENTITY_MENTION:
        return ENTITY_MENTION_FIELD_DESC;
      case OPINION:
        return OPINION_FIELD_DESC;
      case PART_OF_SPEECH:
        return PART_OF_SPEECH_FIELD_DESC;
      case PASSAGE:
        return PASSAGE_FIELD_DESC;
      case PROSODIC_PHRASE:
        return PROSODIC_PHRASE_FIELD_DESC;
      case SARCASM:
        return SARCASM_FIELD_DESC;
      case SENTENCE:
        return SENTENCE_FIELD_DESC;
      case STORY:
        return STORY_FIELD_DESC;
      case SYNTACTIC_CHUNK:
        return SYNTACTIC_CHUNK_FIELD_DESC;
      case UTTERANCE:
        return UTTERANCE_FIELD_DESC;
      case CHUNK:
        return CHUNK_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public CommittedBelief getCommittedBelief() {
    if (getSetField() == _Fields.COMMITTED_BELIEF) {
      return (CommittedBelief)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'committedBelief' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCommittedBelief(CommittedBelief value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.COMMITTED_BELIEF;
    value_ = value;
  }

  public DiscourseUnit getDiscourseUnit() {
    if (getSetField() == _Fields.DISCOURSE_UNIT) {
      return (DiscourseUnit)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'discourseUnit' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDiscourseUnit(DiscourseUnit value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DISCOURSE_UNIT;
    value_ = value;
  }

  public EntityMention getEntityMention() {
    if (getSetField() == _Fields.ENTITY_MENTION) {
      return (EntityMention)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'entityMention' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEntityMention(EntityMention value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ENTITY_MENTION;
    value_ = value;
  }

  public Opinion getOpinion() {
    if (getSetField() == _Fields.OPINION) {
      return (Opinion)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'opinion' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOpinion(Opinion value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OPINION;
    value_ = value;
  }

  public PartOfSpeech getPartOfSpeech() {
    if (getSetField() == _Fields.PART_OF_SPEECH) {
      return (PartOfSpeech)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'partOfSpeech' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPartOfSpeech(PartOfSpeech value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PART_OF_SPEECH;
    value_ = value;
  }

  public Passage getPassage() {
    if (getSetField() == _Fields.PASSAGE) {
      return (Passage)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'passage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPassage(Passage value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PASSAGE;
    value_ = value;
  }

  public ProsodicPhrase getProsodicPhrase() {
    if (getSetField() == _Fields.PROSODIC_PHRASE) {
      return (ProsodicPhrase)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'prosodicPhrase' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setProsodicPhrase(ProsodicPhrase value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PROSODIC_PHRASE;
    value_ = value;
  }

  public Sarcasm getSarcasm() {
    if (getSetField() == _Fields.SARCASM) {
      return (Sarcasm)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'sarcasm' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSarcasm(Sarcasm value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SARCASM;
    value_ = value;
  }

  public Sentence getSentence() {
    if (getSetField() == _Fields.SENTENCE) {
      return (Sentence)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'sentence' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSentence(Sentence value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SENTENCE;
    value_ = value;
  }

  public Story getStory() {
    if (getSetField() == _Fields.STORY) {
      return (Story)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'story' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStory(Story value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STORY;
    value_ = value;
  }

  public SyntacticChunk getSyntacticChunk() {
    if (getSetField() == _Fields.SYNTACTIC_CHUNK) {
      return (SyntacticChunk)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'syntacticChunk' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSyntacticChunk(SyntacticChunk value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SYNTACTIC_CHUNK;
    value_ = value;
  }

  public Utterance getUtterance() {
    if (getSetField() == _Fields.UTTERANCE) {
      return (Utterance)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'utterance' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUtterance(Utterance value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UTTERANCE;
    value_ = value;
  }

  public Chunk getChunk() {
    if (getSetField() == _Fields.CHUNK) {
      return (Chunk)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'chunk' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setChunk(Chunk value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CHUNK;
    value_ = value;
  }

  public boolean isSetCommittedBelief() {
    return setField_ == _Fields.COMMITTED_BELIEF;
  }


  public boolean isSetDiscourseUnit() {
    return setField_ == _Fields.DISCOURSE_UNIT;
  }


  public boolean isSetEntityMention() {
    return setField_ == _Fields.ENTITY_MENTION;
  }


  public boolean isSetOpinion() {
    return setField_ == _Fields.OPINION;
  }


  public boolean isSetPartOfSpeech() {
    return setField_ == _Fields.PART_OF_SPEECH;
  }


  public boolean isSetPassage() {
    return setField_ == _Fields.PASSAGE;
  }


  public boolean isSetProsodicPhrase() {
    return setField_ == _Fields.PROSODIC_PHRASE;
  }


  public boolean isSetSarcasm() {
    return setField_ == _Fields.SARCASM;
  }


  public boolean isSetSentence() {
    return setField_ == _Fields.SENTENCE;
  }


  public boolean isSetStory() {
    return setField_ == _Fields.STORY;
  }


  public boolean isSetSyntacticChunk() {
    return setField_ == _Fields.SYNTACTIC_CHUNK;
  }


  public boolean isSetUtterance() {
    return setField_ == _Fields.UTTERANCE;
  }


  public boolean isSetChunk() {
    return setField_ == _Fields.CHUNK;
  }


  public boolean equals(Object other) {
    if (other instanceof ChunkUnion) {
      return equals((ChunkUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(ChunkUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ChunkUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
