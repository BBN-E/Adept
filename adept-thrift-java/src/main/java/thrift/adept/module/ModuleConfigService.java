/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.module;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ModuleConfigService {

  public interface Iface {

    public void loadModuleConfig(String configFilePath) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadModuleConfig(String configFilePath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadModuleConfig_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void loadModuleConfig(String configFilePath) throws org.apache.thrift.TException
    {
      send_loadModuleConfig(configFilePath);
      recv_loadModuleConfig();
    }

    public void send_loadModuleConfig(String configFilePath) throws org.apache.thrift.TException
    {
      loadModuleConfig_args args = new loadModuleConfig_args();
      args.setConfigFilePath(configFilePath);
      sendBase("loadModuleConfig", args);
    }

    public void recv_loadModuleConfig() throws org.apache.thrift.TException
    {
      loadModuleConfig_result result = new loadModuleConfig_result();
      receiveBase(result, "loadModuleConfig");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadModuleConfig(String configFilePath, org.apache.thrift.async.AsyncMethodCallback<loadModuleConfig_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadModuleConfig_call method_call = new loadModuleConfig_call(configFilePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadModuleConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configFilePath;
      public loadModuleConfig_call(String configFilePath, org.apache.thrift.async.AsyncMethodCallback<loadModuleConfig_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configFilePath = configFilePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadModuleConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadModuleConfig_args args = new loadModuleConfig_args();
        args.setConfigFilePath(configFilePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_loadModuleConfig();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadModuleConfig", new loadModuleConfig());
      return processMap;
    }

    public static class loadModuleConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadModuleConfig_args> {
      public loadModuleConfig() {
        super("loadModuleConfig");
      }

      public loadModuleConfig_args getEmptyArgsInstance() {
        return new loadModuleConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadModuleConfig_result getResult(I iface, loadModuleConfig_args args) throws org.apache.thrift.TException {
        loadModuleConfig_result result = new loadModuleConfig_result();
        iface.loadModuleConfig(args.configFilePath);
        return result;
      }
    }

  }

  public static class loadModuleConfig_args implements org.apache.thrift.TBase<loadModuleConfig_args, loadModuleConfig_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadModuleConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("configFilePath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadModuleConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadModuleConfig_argsTupleSchemeFactory());
    }

    public String configFilePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_FILE_PATH((short)1, "configFilePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_FILE_PATH
            return CONFIG_FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("configFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadModuleConfig_args.class, metaDataMap);
    }

    public loadModuleConfig_args() {
    }

    public loadModuleConfig_args(
      String configFilePath)
    {
      this();
      this.configFilePath = configFilePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadModuleConfig_args(loadModuleConfig_args other) {
      if (other.isSetConfigFilePath()) {
        this.configFilePath = other.configFilePath;
      }
    }

    public loadModuleConfig_args deepCopy() {
      return new loadModuleConfig_args(this);
    }

    @Override
    public void clear() {
      this.configFilePath = null;
    }

    public String getConfigFilePath() {
      return this.configFilePath;
    }

    public loadModuleConfig_args setConfigFilePath(String configFilePath) {
      this.configFilePath = configFilePath;
      return this;
    }

    public void unsetConfigFilePath() {
      this.configFilePath = null;
    }

    /** Returns true if field configFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigFilePath() {
      return this.configFilePath != null;
    }

    public void setConfigFilePathIsSet(boolean value) {
      if (!value) {
        this.configFilePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_FILE_PATH:
        if (value == null) {
          unsetConfigFilePath();
        } else {
          setConfigFilePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_FILE_PATH:
        return getConfigFilePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_FILE_PATH:
        return isSetConfigFilePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadModuleConfig_args)
        return this.equals((loadModuleConfig_args)that);
      return false;
    }

    public boolean equals(loadModuleConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configFilePath = true && this.isSetConfigFilePath();
      boolean that_present_configFilePath = true && that.isSetConfigFilePath();
      if (this_present_configFilePath || that_present_configFilePath) {
        if (!(this_present_configFilePath && that_present_configFilePath))
          return false;
        if (!this.configFilePath.equals(that.configFilePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadModuleConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadModuleConfig_args typedOther = (loadModuleConfig_args)other;

      lastComparison = Boolean.valueOf(isSetConfigFilePath()).compareTo(typedOther.isSetConfigFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configFilePath, typedOther.configFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadModuleConfig_args(");
      boolean first = true;

      sb.append("configFilePath:");
      if (this.configFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.configFilePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadModuleConfig_argsStandardSchemeFactory implements SchemeFactory {
      public loadModuleConfig_argsStandardScheme getScheme() {
        return new loadModuleConfig_argsStandardScheme();
      }
    }

    private static class loadModuleConfig_argsStandardScheme extends StandardScheme<loadModuleConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadModuleConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configFilePath = iprot.readString();
                struct.setConfigFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadModuleConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configFilePath != null) {
          oprot.writeFieldBegin(CONFIG_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.configFilePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadModuleConfig_argsTupleSchemeFactory implements SchemeFactory {
      public loadModuleConfig_argsTupleScheme getScheme() {
        return new loadModuleConfig_argsTupleScheme();
      }
    }

    private static class loadModuleConfig_argsTupleScheme extends TupleScheme<loadModuleConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadModuleConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigFilePath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigFilePath()) {
          oprot.writeString(struct.configFilePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadModuleConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configFilePath = iprot.readString();
          struct.setConfigFilePathIsSet(true);
        }
      }
    }

  }

  public static class loadModuleConfig_result implements org.apache.thrift.TBase<loadModuleConfig_result, loadModuleConfig_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadModuleConfig_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadModuleConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadModuleConfig_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadModuleConfig_result.class, metaDataMap);
    }

    public loadModuleConfig_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadModuleConfig_result(loadModuleConfig_result other) {
    }

    public loadModuleConfig_result deepCopy() {
      return new loadModuleConfig_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadModuleConfig_result)
        return this.equals((loadModuleConfig_result)that);
      return false;
    }

    public boolean equals(loadModuleConfig_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadModuleConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadModuleConfig_result typedOther = (loadModuleConfig_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadModuleConfig_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadModuleConfig_resultStandardSchemeFactory implements SchemeFactory {
      public loadModuleConfig_resultStandardScheme getScheme() {
        return new loadModuleConfig_resultStandardScheme();
      }
    }

    private static class loadModuleConfig_resultStandardScheme extends StandardScheme<loadModuleConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadModuleConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadModuleConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadModuleConfig_resultTupleSchemeFactory implements SchemeFactory {
      public loadModuleConfig_resultTupleScheme getScheme() {
        return new loadModuleConfig_resultTupleScheme();
      }
    }

    private static class loadModuleConfig_resultTupleScheme extends TupleScheme<loadModuleConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadModuleConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadModuleConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}