/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.module;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PassagePairProcessor {

  public interface Iface {

    public List<thrift.adept.common.HltContentUnion> process(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2) throws org.apache.thrift.TException;

    public long processAsync(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2) throws org.apache.thrift.TException;

    public boolean tryGetResult(long requestId, List<thrift.adept.common.HltContentUnion> metaContents) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void process(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.process_call> resultHandler) throws org.apache.thrift.TException;

    public void processAsync(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.processAsync_call> resultHandler) throws org.apache.thrift.TException;

    public void tryGetResult(long requestId, List<thrift.adept.common.HltContentUnion> metaContents, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tryGetResult_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<thrift.adept.common.HltContentUnion> process(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2) throws org.apache.thrift.TException
    {
      send_process(passage1, passage2);
      return recv_process();
    }

    public void send_process(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2) throws org.apache.thrift.TException
    {
      process_args args = new process_args();
      args.setPassage1(passage1);
      args.setPassage2(passage2);
      sendBase("process", args);
    }

    public List<thrift.adept.common.HltContentUnion> recv_process() throws org.apache.thrift.TException
    {
      process_result result = new process_result();
      receiveBase(result, "process");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "process failed: unknown result");
    }

    public long processAsync(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2) throws org.apache.thrift.TException
    {
      send_processAsync(passage1, passage2);
      return recv_processAsync();
    }

    public void send_processAsync(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2) throws org.apache.thrift.TException
    {
      processAsync_args args = new processAsync_args();
      args.setPassage1(passage1);
      args.setPassage2(passage2);
      sendBase("processAsync", args);
    }

    public long recv_processAsync() throws org.apache.thrift.TException
    {
      processAsync_result result = new processAsync_result();
      receiveBase(result, "processAsync");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "processAsync failed: unknown result");
    }

    public boolean tryGetResult(long requestId, List<thrift.adept.common.HltContentUnion> metaContents) throws org.apache.thrift.TException
    {
      send_tryGetResult(requestId, metaContents);
      return recv_tryGetResult();
    }

    public void send_tryGetResult(long requestId, List<thrift.adept.common.HltContentUnion> metaContents) throws org.apache.thrift.TException
    {
      tryGetResult_args args = new tryGetResult_args();
      args.setRequestId(requestId);
      args.setMetaContents(metaContents);
      sendBase("tryGetResult", args);
    }

    public boolean recv_tryGetResult() throws org.apache.thrift.TException
    {
      tryGetResult_result result = new tryGetResult_result();
      receiveBase(result, "tryGetResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tryGetResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void process(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2, org.apache.thrift.async.AsyncMethodCallback<process_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      process_call method_call = new process_call(passage1, passage2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class process_call extends org.apache.thrift.async.TAsyncMethodCall {
      private thrift.adept.common.Passage passage1;
      private thrift.adept.common.Passage passage2;
      public process_call(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2, org.apache.thrift.async.AsyncMethodCallback<process_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passage1 = passage1;
        this.passage2 = passage2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("process", org.apache.thrift.protocol.TMessageType.CALL, 0));
        process_args args = new process_args();
        args.setPassage1(passage1);
        args.setPassage2(passage2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<thrift.adept.common.HltContentUnion> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_process();
      }
    }

    public void processAsync(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2, org.apache.thrift.async.AsyncMethodCallback<processAsync_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      processAsync_call method_call = new processAsync_call(passage1, passage2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class processAsync_call extends org.apache.thrift.async.TAsyncMethodCall {
      private thrift.adept.common.Passage passage1;
      private thrift.adept.common.Passage passage2;
      public processAsync_call(thrift.adept.common.Passage passage1, thrift.adept.common.Passage passage2, org.apache.thrift.async.AsyncMethodCallback<processAsync_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.passage1 = passage1;
        this.passage2 = passage2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("processAsync", org.apache.thrift.protocol.TMessageType.CALL, 0));
        processAsync_args args = new processAsync_args();
        args.setPassage1(passage1);
        args.setPassage2(passage2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_processAsync();
      }
    }

    public void tryGetResult(long requestId, List<thrift.adept.common.HltContentUnion> metaContents, org.apache.thrift.async.AsyncMethodCallback<tryGetResult_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tryGetResult_call method_call = new tryGetResult_call(requestId, metaContents, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tryGetResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long requestId;
      private List<thrift.adept.common.HltContentUnion> metaContents;
      public tryGetResult_call(long requestId, List<thrift.adept.common.HltContentUnion> metaContents, org.apache.thrift.async.AsyncMethodCallback<tryGetResult_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.metaContents = metaContents;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tryGetResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tryGetResult_args args = new tryGetResult_args();
        args.setRequestId(requestId);
        args.setMetaContents(metaContents);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tryGetResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("process", new process());
      processMap.put("processAsync", new processAsync());
      processMap.put("tryGetResult", new tryGetResult());
      return processMap;
    }

    public static class process<I extends Iface> extends org.apache.thrift.ProcessFunction<I, process_args> {
      public process() {
        super("process");
      }

      public process_args getEmptyArgsInstance() {
        return new process_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public process_result getResult(I iface, process_args args) throws org.apache.thrift.TException {
        process_result result = new process_result();
        result.success = iface.process(args.passage1, args.passage2);
        return result;
      }
    }

    public static class processAsync<I extends Iface> extends org.apache.thrift.ProcessFunction<I, processAsync_args> {
      public processAsync() {
        super("processAsync");
      }

      public processAsync_args getEmptyArgsInstance() {
        return new processAsync_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public processAsync_result getResult(I iface, processAsync_args args) throws org.apache.thrift.TException {
        processAsync_result result = new processAsync_result();
        result.success = iface.processAsync(args.passage1, args.passage2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class tryGetResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tryGetResult_args> {
      public tryGetResult() {
        super("tryGetResult");
      }

      public tryGetResult_args getEmptyArgsInstance() {
        return new tryGetResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tryGetResult_result getResult(I iface, tryGetResult_args args) throws org.apache.thrift.TException {
        tryGetResult_result result = new tryGetResult_result();
        result.success = iface.tryGetResult(args.requestId, args.metaContents);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class process_args implements org.apache.thrift.TBase<process_args, process_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("process_args");

    private static final org.apache.thrift.protocol.TField PASSAGE1_FIELD_DESC = new org.apache.thrift.protocol.TField("passage1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PASSAGE2_FIELD_DESC = new org.apache.thrift.protocol.TField("passage2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new process_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new process_argsTupleSchemeFactory());
    }

    public thrift.adept.common.Passage passage1; // required
    public thrift.adept.common.Passage passage2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PASSAGE1((short)1, "passage1"),
      PASSAGE2((short)2, "passage2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSAGE1
            return PASSAGE1;
          case 2: // PASSAGE2
            return PASSAGE2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSAGE1, new org.apache.thrift.meta_data.FieldMetaData("passage1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Passage.class)));
      tmpMap.put(_Fields.PASSAGE2, new org.apache.thrift.meta_data.FieldMetaData("passage2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Passage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(process_args.class, metaDataMap);
    }

    public process_args() {
    }

    public process_args(
      thrift.adept.common.Passage passage1,
      thrift.adept.common.Passage passage2)
    {
      this();
      this.passage1 = passage1;
      this.passage2 = passage2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public process_args(process_args other) {
      if (other.isSetPassage1()) {
        this.passage1 = new thrift.adept.common.Passage(other.passage1);
      }
      if (other.isSetPassage2()) {
        this.passage2 = new thrift.adept.common.Passage(other.passage2);
      }
    }

    public process_args deepCopy() {
      return new process_args(this);
    }

    @Override
    public void clear() {
      this.passage1 = null;
      this.passage2 = null;
    }

    public thrift.adept.common.Passage getPassage1() {
      return this.passage1;
    }

    public process_args setPassage1(thrift.adept.common.Passage passage1) {
      this.passage1 = passage1;
      return this;
    }

    public void unsetPassage1() {
      this.passage1 = null;
    }

    /** Returns true if field passage1 is set (has been assigned a value) and false otherwise */
    public boolean isSetPassage1() {
      return this.passage1 != null;
    }

    public void setPassage1IsSet(boolean value) {
      if (!value) {
        this.passage1 = null;
      }
    }

    public thrift.adept.common.Passage getPassage2() {
      return this.passage2;
    }

    public process_args setPassage2(thrift.adept.common.Passage passage2) {
      this.passage2 = passage2;
      return this;
    }

    public void unsetPassage2() {
      this.passage2 = null;
    }

    /** Returns true if field passage2 is set (has been assigned a value) and false otherwise */
    public boolean isSetPassage2() {
      return this.passage2 != null;
    }

    public void setPassage2IsSet(boolean value) {
      if (!value) {
        this.passage2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSAGE1:
        if (value == null) {
          unsetPassage1();
        } else {
          setPassage1((thrift.adept.common.Passage)value);
        }
        break;

      case PASSAGE2:
        if (value == null) {
          unsetPassage2();
        } else {
          setPassage2((thrift.adept.common.Passage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSAGE1:
        return getPassage1();

      case PASSAGE2:
        return getPassage2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSAGE1:
        return isSetPassage1();
      case PASSAGE2:
        return isSetPassage2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof process_args)
        return this.equals((process_args)that);
      return false;
    }

    public boolean equals(process_args that) {
      if (that == null)
        return false;

      boolean this_present_passage1 = true && this.isSetPassage1();
      boolean that_present_passage1 = true && that.isSetPassage1();
      if (this_present_passage1 || that_present_passage1) {
        if (!(this_present_passage1 && that_present_passage1))
          return false;
        if (!this.passage1.equals(that.passage1))
          return false;
      }

      boolean this_present_passage2 = true && this.isSetPassage2();
      boolean that_present_passage2 = true && that.isSetPassage2();
      if (this_present_passage2 || that_present_passage2) {
        if (!(this_present_passage2 && that_present_passage2))
          return false;
        if (!this.passage2.equals(that.passage2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(process_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      process_args typedOther = (process_args)other;

      lastComparison = Boolean.valueOf(isSetPassage1()).compareTo(typedOther.isSetPassage1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassage1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passage1, typedOther.passage1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassage2()).compareTo(typedOther.isSetPassage2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassage2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passage2, typedOther.passage2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("process_args(");
      boolean first = true;

      sb.append("passage1:");
      if (this.passage1 == null) {
        sb.append("null");
      } else {
        sb.append(this.passage1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passage2:");
      if (this.passage2 == null) {
        sb.append("null");
      } else {
        sb.append(this.passage2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (passage1 != null) {
        passage1.validate();
      }
      if (passage2 != null) {
        passage2.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class process_argsStandardSchemeFactory implements SchemeFactory {
      public process_argsStandardScheme getScheme() {
        return new process_argsStandardScheme();
      }
    }

    private static class process_argsStandardScheme extends StandardScheme<process_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, process_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PASSAGE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.passage1 = new thrift.adept.common.Passage();
                struct.passage1.read(iprot);
                struct.setPassage1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSAGE2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.passage2 = new thrift.adept.common.Passage();
                struct.passage2.read(iprot);
                struct.setPassage2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, process_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.passage1 != null) {
          oprot.writeFieldBegin(PASSAGE1_FIELD_DESC);
          struct.passage1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.passage2 != null) {
          oprot.writeFieldBegin(PASSAGE2_FIELD_DESC);
          struct.passage2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class process_argsTupleSchemeFactory implements SchemeFactory {
      public process_argsTupleScheme getScheme() {
        return new process_argsTupleScheme();
      }
    }

    private static class process_argsTupleScheme extends TupleScheme<process_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, process_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPassage1()) {
          optionals.set(0);
        }
        if (struct.isSetPassage2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPassage1()) {
          struct.passage1.write(oprot);
        }
        if (struct.isSetPassage2()) {
          struct.passage2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, process_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.passage1 = new thrift.adept.common.Passage();
          struct.passage1.read(iprot);
          struct.setPassage1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.passage2 = new thrift.adept.common.Passage();
          struct.passage2.read(iprot);
          struct.setPassage2IsSet(true);
        }
      }
    }

  }

  public static class process_result implements org.apache.thrift.TBase<process_result, process_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("process_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new process_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new process_resultTupleSchemeFactory());
    }

    public List<thrift.adept.common.HltContentUnion> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.HltContentUnion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(process_result.class, metaDataMap);
    }

    public process_result() {
    }

    public process_result(
      List<thrift.adept.common.HltContentUnion> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public process_result(process_result other) {
      if (other.isSetSuccess()) {
        List<thrift.adept.common.HltContentUnion> __this__success = new ArrayList<thrift.adept.common.HltContentUnion>();
        for (thrift.adept.common.HltContentUnion other_element : other.success) {
          __this__success.add(new thrift.adept.common.HltContentUnion(other_element));
        }
        this.success = __this__success;
      }
    }

    public process_result deepCopy() {
      return new process_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<thrift.adept.common.HltContentUnion> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(thrift.adept.common.HltContentUnion elem) {
      if (this.success == null) {
        this.success = new ArrayList<thrift.adept.common.HltContentUnion>();
      }
      this.success.add(elem);
    }

    public List<thrift.adept.common.HltContentUnion> getSuccess() {
      return this.success;
    }

    public process_result setSuccess(List<thrift.adept.common.HltContentUnion> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<thrift.adept.common.HltContentUnion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof process_result)
        return this.equals((process_result)that);
      return false;
    }

    public boolean equals(process_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(process_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      process_result typedOther = (process_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("process_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class process_resultStandardSchemeFactory implements SchemeFactory {
      public process_resultStandardScheme getScheme() {
        return new process_resultStandardScheme();
      }
    }

    private static class process_resultStandardScheme extends StandardScheme<process_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, process_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<thrift.adept.common.HltContentUnion>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    thrift.adept.common.HltContentUnion _elem44; // required
                    _elem44 = new thrift.adept.common.HltContentUnion();
                    _elem44.read(iprot);
                    struct.success.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, process_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (thrift.adept.common.HltContentUnion _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class process_resultTupleSchemeFactory implements SchemeFactory {
      public process_resultTupleScheme getScheme() {
        return new process_resultTupleScheme();
      }
    }

    private static class process_resultTupleScheme extends TupleScheme<process_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, process_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (thrift.adept.common.HltContentUnion _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, process_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<thrift.adept.common.HltContentUnion>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              thrift.adept.common.HltContentUnion _elem49; // required
              _elem49 = new thrift.adept.common.HltContentUnion();
              _elem49.read(iprot);
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class processAsync_args implements org.apache.thrift.TBase<processAsync_args, processAsync_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAsync_args");

    private static final org.apache.thrift.protocol.TField PASSAGE1_FIELD_DESC = new org.apache.thrift.protocol.TField("passage1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PASSAGE2_FIELD_DESC = new org.apache.thrift.protocol.TField("passage2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAsync_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAsync_argsTupleSchemeFactory());
    }

    public thrift.adept.common.Passage passage1; // required
    public thrift.adept.common.Passage passage2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PASSAGE1((short)1, "passage1"),
      PASSAGE2((short)2, "passage2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PASSAGE1
            return PASSAGE1;
          case 2: // PASSAGE2
            return PASSAGE2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PASSAGE1, new org.apache.thrift.meta_data.FieldMetaData("passage1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Passage.class)));
      tmpMap.put(_Fields.PASSAGE2, new org.apache.thrift.meta_data.FieldMetaData("passage2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Passage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAsync_args.class, metaDataMap);
    }

    public processAsync_args() {
    }

    public processAsync_args(
      thrift.adept.common.Passage passage1,
      thrift.adept.common.Passage passage2)
    {
      this();
      this.passage1 = passage1;
      this.passage2 = passage2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAsync_args(processAsync_args other) {
      if (other.isSetPassage1()) {
        this.passage1 = new thrift.adept.common.Passage(other.passage1);
      }
      if (other.isSetPassage2()) {
        this.passage2 = new thrift.adept.common.Passage(other.passage2);
      }
    }

    public processAsync_args deepCopy() {
      return new processAsync_args(this);
    }

    @Override
    public void clear() {
      this.passage1 = null;
      this.passage2 = null;
    }

    public thrift.adept.common.Passage getPassage1() {
      return this.passage1;
    }

    public processAsync_args setPassage1(thrift.adept.common.Passage passage1) {
      this.passage1 = passage1;
      return this;
    }

    public void unsetPassage1() {
      this.passage1 = null;
    }

    /** Returns true if field passage1 is set (has been assigned a value) and false otherwise */
    public boolean isSetPassage1() {
      return this.passage1 != null;
    }

    public void setPassage1IsSet(boolean value) {
      if (!value) {
        this.passage1 = null;
      }
    }

    public thrift.adept.common.Passage getPassage2() {
      return this.passage2;
    }

    public processAsync_args setPassage2(thrift.adept.common.Passage passage2) {
      this.passage2 = passage2;
      return this;
    }

    public void unsetPassage2() {
      this.passage2 = null;
    }

    /** Returns true if field passage2 is set (has been assigned a value) and false otherwise */
    public boolean isSetPassage2() {
      return this.passage2 != null;
    }

    public void setPassage2IsSet(boolean value) {
      if (!value) {
        this.passage2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PASSAGE1:
        if (value == null) {
          unsetPassage1();
        } else {
          setPassage1((thrift.adept.common.Passage)value);
        }
        break;

      case PASSAGE2:
        if (value == null) {
          unsetPassage2();
        } else {
          setPassage2((thrift.adept.common.Passage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PASSAGE1:
        return getPassage1();

      case PASSAGE2:
        return getPassage2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PASSAGE1:
        return isSetPassage1();
      case PASSAGE2:
        return isSetPassage2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAsync_args)
        return this.equals((processAsync_args)that);
      return false;
    }

    public boolean equals(processAsync_args that) {
      if (that == null)
        return false;

      boolean this_present_passage1 = true && this.isSetPassage1();
      boolean that_present_passage1 = true && that.isSetPassage1();
      if (this_present_passage1 || that_present_passage1) {
        if (!(this_present_passage1 && that_present_passage1))
          return false;
        if (!this.passage1.equals(that.passage1))
          return false;
      }

      boolean this_present_passage2 = true && this.isSetPassage2();
      boolean that_present_passage2 = true && that.isSetPassage2();
      if (this_present_passage2 || that_present_passage2) {
        if (!(this_present_passage2 && that_present_passage2))
          return false;
        if (!this.passage2.equals(that.passage2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processAsync_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processAsync_args typedOther = (processAsync_args)other;

      lastComparison = Boolean.valueOf(isSetPassage1()).compareTo(typedOther.isSetPassage1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassage1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passage1, typedOther.passage1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassage2()).compareTo(typedOther.isSetPassage2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassage2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passage2, typedOther.passage2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAsync_args(");
      boolean first = true;

      sb.append("passage1:");
      if (this.passage1 == null) {
        sb.append("null");
      } else {
        sb.append(this.passage1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passage2:");
      if (this.passage2 == null) {
        sb.append("null");
      } else {
        sb.append(this.passage2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (passage1 != null) {
        passage1.validate();
      }
      if (passage2 != null) {
        passage2.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAsync_argsStandardSchemeFactory implements SchemeFactory {
      public processAsync_argsStandardScheme getScheme() {
        return new processAsync_argsStandardScheme();
      }
    }

    private static class processAsync_argsStandardScheme extends StandardScheme<processAsync_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAsync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PASSAGE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.passage1 = new thrift.adept.common.Passage();
                struct.passage1.read(iprot);
                struct.setPassage1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSAGE2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.passage2 = new thrift.adept.common.Passage();
                struct.passage2.read(iprot);
                struct.setPassage2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAsync_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.passage1 != null) {
          oprot.writeFieldBegin(PASSAGE1_FIELD_DESC);
          struct.passage1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.passage2 != null) {
          oprot.writeFieldBegin(PASSAGE2_FIELD_DESC);
          struct.passage2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAsync_argsTupleSchemeFactory implements SchemeFactory {
      public processAsync_argsTupleScheme getScheme() {
        return new processAsync_argsTupleScheme();
      }
    }

    private static class processAsync_argsTupleScheme extends TupleScheme<processAsync_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAsync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPassage1()) {
          optionals.set(0);
        }
        if (struct.isSetPassage2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPassage1()) {
          struct.passage1.write(oprot);
        }
        if (struct.isSetPassage2()) {
          struct.passage2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAsync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.passage1 = new thrift.adept.common.Passage();
          struct.passage1.read(iprot);
          struct.setPassage1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.passage2 = new thrift.adept.common.Passage();
          struct.passage2.read(iprot);
          struct.setPassage2IsSet(true);
        }
      }
    }

  }

  public static class processAsync_result implements org.apache.thrift.TBase<processAsync_result, processAsync_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAsync_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAsync_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAsync_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAsync_result.class, metaDataMap);
    }

    public processAsync_result() {
    }

    public processAsync_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAsync_result(processAsync_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public processAsync_result deepCopy() {
      return new processAsync_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public processAsync_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAsync_result)
        return this.equals((processAsync_result)that);
      return false;
    }

    public boolean equals(processAsync_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processAsync_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processAsync_result typedOther = (processAsync_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAsync_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAsync_resultStandardSchemeFactory implements SchemeFactory {
      public processAsync_resultStandardScheme getScheme() {
        return new processAsync_resultStandardScheme();
      }
    }

    private static class processAsync_resultStandardScheme extends StandardScheme<processAsync_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAsync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAsync_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAsync_resultTupleSchemeFactory implements SchemeFactory {
      public processAsync_resultTupleScheme getScheme() {
        return new processAsync_resultTupleScheme();
      }
    }

    private static class processAsync_resultTupleScheme extends TupleScheme<processAsync_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAsync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAsync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tryGetResult_args implements org.apache.thrift.TBase<tryGetResult_args, tryGetResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tryGetResult_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField META_CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("metaContents", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tryGetResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tryGetResult_argsTupleSchemeFactory());
    }

    public long requestId; // required
    public List<thrift.adept.common.HltContentUnion> metaContents; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      META_CONTENTS((short)2, "metaContents");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // META_CONTENTS
            return META_CONTENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.META_CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("metaContents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.HltContentUnion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tryGetResult_args.class, metaDataMap);
    }

    public tryGetResult_args() {
    }

    public tryGetResult_args(
      long requestId,
      List<thrift.adept.common.HltContentUnion> metaContents)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.metaContents = metaContents;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tryGetResult_args(tryGetResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetMetaContents()) {
        List<thrift.adept.common.HltContentUnion> __this__metaContents = new ArrayList<thrift.adept.common.HltContentUnion>();
        for (thrift.adept.common.HltContentUnion other_element : other.metaContents) {
          __this__metaContents.add(new thrift.adept.common.HltContentUnion(other_element));
        }
        this.metaContents = __this__metaContents;
      }
    }

    public tryGetResult_args deepCopy() {
      return new tryGetResult_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.metaContents = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public tryGetResult_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getMetaContentsSize() {
      return (this.metaContents == null) ? 0 : this.metaContents.size();
    }

    public java.util.Iterator<thrift.adept.common.HltContentUnion> getMetaContentsIterator() {
      return (this.metaContents == null) ? null : this.metaContents.iterator();
    }

    public void addToMetaContents(thrift.adept.common.HltContentUnion elem) {
      if (this.metaContents == null) {
        this.metaContents = new ArrayList<thrift.adept.common.HltContentUnion>();
      }
      this.metaContents.add(elem);
    }

    public List<thrift.adept.common.HltContentUnion> getMetaContents() {
      return this.metaContents;
    }

    public tryGetResult_args setMetaContents(List<thrift.adept.common.HltContentUnion> metaContents) {
      this.metaContents = metaContents;
      return this;
    }

    public void unsetMetaContents() {
      this.metaContents = null;
    }

    /** Returns true if field metaContents is set (has been assigned a value) and false otherwise */
    public boolean isSetMetaContents() {
      return this.metaContents != null;
    }

    public void setMetaContentsIsSet(boolean value) {
      if (!value) {
        this.metaContents = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Long)value);
        }
        break;

      case META_CONTENTS:
        if (value == null) {
          unsetMetaContents();
        } else {
          setMetaContents((List<thrift.adept.common.HltContentUnion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Long.valueOf(getRequestId());

      case META_CONTENTS:
        return getMetaContents();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case META_CONTENTS:
        return isSetMetaContents();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tryGetResult_args)
        return this.equals((tryGetResult_args)that);
      return false;
    }

    public boolean equals(tryGetResult_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_metaContents = true && this.isSetMetaContents();
      boolean that_present_metaContents = true && that.isSetMetaContents();
      if (this_present_metaContents || that_present_metaContents) {
        if (!(this_present_metaContents && that_present_metaContents))
          return false;
        if (!this.metaContents.equals(that.metaContents))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tryGetResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tryGetResult_args typedOther = (tryGetResult_args)other;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(typedOther.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, typedOther.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMetaContents()).compareTo(typedOther.isSetMetaContents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetaContents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaContents, typedOther.metaContents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tryGetResult_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("metaContents:");
      if (this.metaContents == null) {
        sb.append("null");
      } else {
        sb.append(this.metaContents);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tryGetResult_argsStandardSchemeFactory implements SchemeFactory {
      public tryGetResult_argsStandardScheme getScheme() {
        return new tryGetResult_argsStandardScheme();
      }
    }

    private static class tryGetResult_argsStandardScheme extends StandardScheme<tryGetResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tryGetResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // META_CONTENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.metaContents = new ArrayList<thrift.adept.common.HltContentUnion>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    thrift.adept.common.HltContentUnion _elem52; // required
                    _elem52 = new thrift.adept.common.HltContentUnion();
                    _elem52.read(iprot);
                    struct.metaContents.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setMetaContentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tryGetResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.metaContents != null) {
          oprot.writeFieldBegin(META_CONTENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metaContents.size()));
            for (thrift.adept.common.HltContentUnion _iter53 : struct.metaContents)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tryGetResult_argsTupleSchemeFactory implements SchemeFactory {
      public tryGetResult_argsTupleScheme getScheme() {
        return new tryGetResult_argsTupleScheme();
      }
    }

    private static class tryGetResult_argsTupleScheme extends TupleScheme<tryGetResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tryGetResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetMetaContents()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetMetaContents()) {
          {
            oprot.writeI32(struct.metaContents.size());
            for (thrift.adept.common.HltContentUnion _iter54 : struct.metaContents)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tryGetResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.metaContents = new ArrayList<thrift.adept.common.HltContentUnion>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              thrift.adept.common.HltContentUnion _elem57; // required
              _elem57 = new thrift.adept.common.HltContentUnion();
              _elem57.read(iprot);
              struct.metaContents.add(_elem57);
            }
          }
          struct.setMetaContentsIsSet(true);
        }
      }
    }

  }

  public static class tryGetResult_result implements org.apache.thrift.TBase<tryGetResult_result, tryGetResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tryGetResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tryGetResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tryGetResult_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tryGetResult_result.class, metaDataMap);
    }

    public tryGetResult_result() {
    }

    public tryGetResult_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tryGetResult_result(tryGetResult_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public tryGetResult_result deepCopy() {
      return new tryGetResult_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public tryGetResult_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tryGetResult_result)
        return this.equals((tryGetResult_result)that);
      return false;
    }

    public boolean equals(tryGetResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tryGetResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tryGetResult_result typedOther = (tryGetResult_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tryGetResult_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tryGetResult_resultStandardSchemeFactory implements SchemeFactory {
      public tryGetResult_resultStandardScheme getScheme() {
        return new tryGetResult_resultStandardScheme();
      }
    }

    private static class tryGetResult_resultStandardScheme extends StandardScheme<tryGetResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tryGetResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tryGetResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tryGetResult_resultTupleSchemeFactory implements SchemeFactory {
      public tryGetResult_resultTupleScheme getScheme() {
        return new tryGetResult_resultTupleScheme();
      }
    }

    private static class tryGetResult_resultTupleScheme extends TupleScheme<tryGetResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tryGetResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tryGetResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
