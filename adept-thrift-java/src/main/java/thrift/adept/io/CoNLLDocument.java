/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.io;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CoNLLDocument implements org.apache.thrift.TBase<CoNLLDocument, CoNLLDocument._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoNLLDocument");

  private static final org.apache.thrift.protocol.TField FULL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("fullText", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("document", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField WORD_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("wordNums", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField POSS_FIELD_DESC = new org.apache.thrift.protocol.TField("POSs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NAMED_ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("namedEntities", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField COREFS_FIELD_DESC = new org.apache.thrift.protocol.TField("corefs", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TOKENS_TO_POSS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokensToPOSs", org.apache.thrift.protocol.TType.MAP, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CoNLLDocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CoNLLDocumentTupleSchemeFactory());
  }

  public String fullText; // required
  public thrift.adept.common.Document document; // required
  public List<List<Integer>> wordNums; // required
  public List<List<String>> tokens; // required
  public List<List<String>> POSs; // required
  public List<Map<String,Long>> namedEntities; // required
  public List<List<List<Long>>> corefs; // required
  public Map<thrift.adept.common.Token,String> tokensToPOSs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FULL_TEXT((short)1, "fullText"),
    DOCUMENT((short)2, "document"),
    WORD_NUMS((short)3, "wordNums"),
    TOKENS((short)4, "tokens"),
    POSS((short)5, "POSs"),
    NAMED_ENTITIES((short)6, "namedEntities"),
    COREFS((short)7, "corefs"),
    TOKENS_TO_POSS((short)8, "tokensToPOSs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULL_TEXT
          return FULL_TEXT;
        case 2: // DOCUMENT
          return DOCUMENT;
        case 3: // WORD_NUMS
          return WORD_NUMS;
        case 4: // TOKENS
          return TOKENS;
        case 5: // POSS
          return POSS;
        case 6: // NAMED_ENTITIES
          return NAMED_ENTITIES;
        case 7: // COREFS
          return COREFS;
        case 8: // TOKENS_TO_POSS
          return TOKENS_TO_POSS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("fullText", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("document", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Document.class)));
    tmpMap.put(_Fields.WORD_NUMS, new org.apache.thrift.meta_data.FieldMetaData("wordNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.POSS, new org.apache.thrift.meta_data.FieldMetaData("POSs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.NAMED_ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("namedEntities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.COREFS, new org.apache.thrift.meta_data.FieldMetaData("corefs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))))));
    tmpMap.put(_Fields.TOKENS_TO_POSS, new org.apache.thrift.meta_data.FieldMetaData("tokensToPOSs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Token.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoNLLDocument.class, metaDataMap);
  }

  public CoNLLDocument() {
  }

  public CoNLLDocument(
    String fullText,
    thrift.adept.common.Document document,
    List<List<Integer>> wordNums,
    List<List<String>> tokens,
    List<List<String>> POSs,
    List<Map<String,Long>> namedEntities,
    List<List<List<Long>>> corefs,
    Map<thrift.adept.common.Token,String> tokensToPOSs)
  {
    this();
    this.fullText = fullText;
    this.document = document;
    this.wordNums = wordNums;
    this.tokens = tokens;
    this.POSs = POSs;
    this.namedEntities = namedEntities;
    this.corefs = corefs;
    this.tokensToPOSs = tokensToPOSs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoNLLDocument(CoNLLDocument other) {
    if (other.isSetFullText()) {
      this.fullText = other.fullText;
    }
    if (other.isSetDocument()) {
      this.document = new thrift.adept.common.Document(other.document);
    }
    if (other.isSetWordNums()) {
      List<List<Integer>> __this__wordNums = new ArrayList<List<Integer>>();
      for (List<Integer> other_element : other.wordNums) {
        List<Integer> __this__wordNums_copy = new ArrayList<Integer>();
        for (Integer other_element_element : other_element) {
          __this__wordNums_copy.add(other_element_element);
        }
        __this__wordNums.add(__this__wordNums_copy);
      }
      this.wordNums = __this__wordNums;
    }
    if (other.isSetTokens()) {
      List<List<String>> __this__tokens = new ArrayList<List<String>>();
      for (List<String> other_element : other.tokens) {
        List<String> __this__tokens_copy = new ArrayList<String>();
        for (String other_element_element : other_element) {
          __this__tokens_copy.add(other_element_element);
        }
        __this__tokens.add(__this__tokens_copy);
      }
      this.tokens = __this__tokens;
    }
    if (other.isSetPOSs()) {
      List<List<String>> __this__POSs = new ArrayList<List<String>>();
      for (List<String> other_element : other.POSs) {
        List<String> __this__POSs_copy = new ArrayList<String>();
        for (String other_element_element : other_element) {
          __this__POSs_copy.add(other_element_element);
        }
        __this__POSs.add(__this__POSs_copy);
      }
      this.POSs = __this__POSs;
    }
    if (other.isSetNamedEntities()) {
      List<Map<String,Long>> __this__namedEntities = new ArrayList<Map<String,Long>>();
      for (Map<String,Long> other_element : other.namedEntities) {
        Map<String,Long> __this__namedEntities_copy = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element_element : other_element.entrySet()) {

          String other_element_element_key = other_element_element.getKey();
          Long other_element_element_value = other_element_element.getValue();

          String __this__namedEntities_copy_copy_key = other_element_element_key;

          Long __this__namedEntities_copy_copy_value = other_element_element_value;

          __this__namedEntities_copy.put(__this__namedEntities_copy_copy_key, __this__namedEntities_copy_copy_value);
        }
        __this__namedEntities.add(__this__namedEntities_copy);
      }
      this.namedEntities = __this__namedEntities;
    }
    if (other.isSetCorefs()) {
      List<List<List<Long>>> __this__corefs = new ArrayList<List<List<Long>>>();
      for (List<List<Long>> other_element : other.corefs) {
        List<List<Long>> __this__corefs_copy = new ArrayList<List<Long>>();
        for (List<Long> other_element_element : other_element) {
          List<Long> __this__corefs_copy_copy = new ArrayList<Long>();
          for (Long other_element_element_element : other_element_element) {
            __this__corefs_copy_copy.add(other_element_element_element);
          }
          __this__corefs_copy.add(__this__corefs_copy_copy);
        }
        __this__corefs.add(__this__corefs_copy);
      }
      this.corefs = __this__corefs;
    }
    if (other.isSetTokensToPOSs()) {
      Map<thrift.adept.common.Token,String> __this__tokensToPOSs = new HashMap<thrift.adept.common.Token,String>();
      for (Map.Entry<thrift.adept.common.Token, String> other_element : other.tokensToPOSs.entrySet()) {

        thrift.adept.common.Token other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        thrift.adept.common.Token __this__tokensToPOSs_copy_key = new thrift.adept.common.Token(other_element_key);

        String __this__tokensToPOSs_copy_value = other_element_value;

        __this__tokensToPOSs.put(__this__tokensToPOSs_copy_key, __this__tokensToPOSs_copy_value);
      }
      this.tokensToPOSs = __this__tokensToPOSs;
    }
  }

  public CoNLLDocument deepCopy() {
    return new CoNLLDocument(this);
  }

  @Override
  public void clear() {
    this.fullText = null;
    this.document = null;
    this.wordNums = null;
    this.tokens = null;
    this.POSs = null;
    this.namedEntities = null;
    this.corefs = null;
    this.tokensToPOSs = null;
  }

  public String getFullText() {
    return this.fullText;
  }

  public CoNLLDocument setFullText(String fullText) {
    this.fullText = fullText;
    return this;
  }

  public void unsetFullText() {
    this.fullText = null;
  }

  /** Returns true if field fullText is set (has been assigned a value) and false otherwise */
  public boolean isSetFullText() {
    return this.fullText != null;
  }

  public void setFullTextIsSet(boolean value) {
    if (!value) {
      this.fullText = null;
    }
  }

  public thrift.adept.common.Document getDocument() {
    return this.document;
  }

  public CoNLLDocument setDocument(thrift.adept.common.Document document) {
    this.document = document;
    return this;
  }

  public void unsetDocument() {
    this.document = null;
  }

  /** Returns true if field document is set (has been assigned a value) and false otherwise */
  public boolean isSetDocument() {
    return this.document != null;
  }

  public void setDocumentIsSet(boolean value) {
    if (!value) {
      this.document = null;
    }
  }

  public int getWordNumsSize() {
    return (this.wordNums == null) ? 0 : this.wordNums.size();
  }

  public java.util.Iterator<List<Integer>> getWordNumsIterator() {
    return (this.wordNums == null) ? null : this.wordNums.iterator();
  }

  public void addToWordNums(List<Integer> elem) {
    if (this.wordNums == null) {
      this.wordNums = new ArrayList<List<Integer>>();
    }
    this.wordNums.add(elem);
  }

  public List<List<Integer>> getWordNums() {
    return this.wordNums;
  }

  public CoNLLDocument setWordNums(List<List<Integer>> wordNums) {
    this.wordNums = wordNums;
    return this;
  }

  public void unsetWordNums() {
    this.wordNums = null;
  }

  /** Returns true if field wordNums is set (has been assigned a value) and false otherwise */
  public boolean isSetWordNums() {
    return this.wordNums != null;
  }

  public void setWordNumsIsSet(boolean value) {
    if (!value) {
      this.wordNums = null;
    }
  }

  public int getTokensSize() {
    return (this.tokens == null) ? 0 : this.tokens.size();
  }

  public java.util.Iterator<List<String>> getTokensIterator() {
    return (this.tokens == null) ? null : this.tokens.iterator();
  }

  public void addToTokens(List<String> elem) {
    if (this.tokens == null) {
      this.tokens = new ArrayList<List<String>>();
    }
    this.tokens.add(elem);
  }

  public List<List<String>> getTokens() {
    return this.tokens;
  }

  public CoNLLDocument setTokens(List<List<String>> tokens) {
    this.tokens = tokens;
    return this;
  }

  public void unsetTokens() {
    this.tokens = null;
  }

  /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetTokens() {
    return this.tokens != null;
  }

  public void setTokensIsSet(boolean value) {
    if (!value) {
      this.tokens = null;
    }
  }

  public int getPOSsSize() {
    return (this.POSs == null) ? 0 : this.POSs.size();
  }

  public java.util.Iterator<List<String>> getPOSsIterator() {
    return (this.POSs == null) ? null : this.POSs.iterator();
  }

  public void addToPOSs(List<String> elem) {
    if (this.POSs == null) {
      this.POSs = new ArrayList<List<String>>();
    }
    this.POSs.add(elem);
  }

  public List<List<String>> getPOSs() {
    return this.POSs;
  }

  public CoNLLDocument setPOSs(List<List<String>> POSs) {
    this.POSs = POSs;
    return this;
  }

  public void unsetPOSs() {
    this.POSs = null;
  }

  /** Returns true if field POSs is set (has been assigned a value) and false otherwise */
  public boolean isSetPOSs() {
    return this.POSs != null;
  }

  public void setPOSsIsSet(boolean value) {
    if (!value) {
      this.POSs = null;
    }
  }

  public int getNamedEntitiesSize() {
    return (this.namedEntities == null) ? 0 : this.namedEntities.size();
  }

  public java.util.Iterator<Map<String,Long>> getNamedEntitiesIterator() {
    return (this.namedEntities == null) ? null : this.namedEntities.iterator();
  }

  public void addToNamedEntities(Map<String,Long> elem) {
    if (this.namedEntities == null) {
      this.namedEntities = new ArrayList<Map<String,Long>>();
    }
    this.namedEntities.add(elem);
  }

  public List<Map<String,Long>> getNamedEntities() {
    return this.namedEntities;
  }

  public CoNLLDocument setNamedEntities(List<Map<String,Long>> namedEntities) {
    this.namedEntities = namedEntities;
    return this;
  }

  public void unsetNamedEntities() {
    this.namedEntities = null;
  }

  /** Returns true if field namedEntities is set (has been assigned a value) and false otherwise */
  public boolean isSetNamedEntities() {
    return this.namedEntities != null;
  }

  public void setNamedEntitiesIsSet(boolean value) {
    if (!value) {
      this.namedEntities = null;
    }
  }

  public int getCorefsSize() {
    return (this.corefs == null) ? 0 : this.corefs.size();
  }

  public java.util.Iterator<List<List<Long>>> getCorefsIterator() {
    return (this.corefs == null) ? null : this.corefs.iterator();
  }

  public void addToCorefs(List<List<Long>> elem) {
    if (this.corefs == null) {
      this.corefs = new ArrayList<List<List<Long>>>();
    }
    this.corefs.add(elem);
  }

  public List<List<List<Long>>> getCorefs() {
    return this.corefs;
  }

  public CoNLLDocument setCorefs(List<List<List<Long>>> corefs) {
    this.corefs = corefs;
    return this;
  }

  public void unsetCorefs() {
    this.corefs = null;
  }

  /** Returns true if field corefs is set (has been assigned a value) and false otherwise */
  public boolean isSetCorefs() {
    return this.corefs != null;
  }

  public void setCorefsIsSet(boolean value) {
    if (!value) {
      this.corefs = null;
    }
  }

  public int getTokensToPOSsSize() {
    return (this.tokensToPOSs == null) ? 0 : this.tokensToPOSs.size();
  }

  public void putToTokensToPOSs(thrift.adept.common.Token key, String val) {
    if (this.tokensToPOSs == null) {
      this.tokensToPOSs = new HashMap<thrift.adept.common.Token,String>();
    }
    this.tokensToPOSs.put(key, val);
  }

  public Map<thrift.adept.common.Token,String> getTokensToPOSs() {
    return this.tokensToPOSs;
  }

  public CoNLLDocument setTokensToPOSs(Map<thrift.adept.common.Token,String> tokensToPOSs) {
    this.tokensToPOSs = tokensToPOSs;
    return this;
  }

  public void unsetTokensToPOSs() {
    this.tokensToPOSs = null;
  }

  /** Returns true if field tokensToPOSs is set (has been assigned a value) and false otherwise */
  public boolean isSetTokensToPOSs() {
    return this.tokensToPOSs != null;
  }

  public void setTokensToPOSsIsSet(boolean value) {
    if (!value) {
      this.tokensToPOSs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FULL_TEXT:
      if (value == null) {
        unsetFullText();
      } else {
        setFullText((String)value);
      }
      break;

    case DOCUMENT:
      if (value == null) {
        unsetDocument();
      } else {
        setDocument((thrift.adept.common.Document)value);
      }
      break;

    case WORD_NUMS:
      if (value == null) {
        unsetWordNums();
      } else {
        setWordNums((List<List<Integer>>)value);
      }
      break;

    case TOKENS:
      if (value == null) {
        unsetTokens();
      } else {
        setTokens((List<List<String>>)value);
      }
      break;

    case POSS:
      if (value == null) {
        unsetPOSs();
      } else {
        setPOSs((List<List<String>>)value);
      }
      break;

    case NAMED_ENTITIES:
      if (value == null) {
        unsetNamedEntities();
      } else {
        setNamedEntities((List<Map<String,Long>>)value);
      }
      break;

    case COREFS:
      if (value == null) {
        unsetCorefs();
      } else {
        setCorefs((List<List<List<Long>>>)value);
      }
      break;

    case TOKENS_TO_POSS:
      if (value == null) {
        unsetTokensToPOSs();
      } else {
        setTokensToPOSs((Map<thrift.adept.common.Token,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FULL_TEXT:
      return getFullText();

    case DOCUMENT:
      return getDocument();

    case WORD_NUMS:
      return getWordNums();

    case TOKENS:
      return getTokens();

    case POSS:
      return getPOSs();

    case NAMED_ENTITIES:
      return getNamedEntities();

    case COREFS:
      return getCorefs();

    case TOKENS_TO_POSS:
      return getTokensToPOSs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FULL_TEXT:
      return isSetFullText();
    case DOCUMENT:
      return isSetDocument();
    case WORD_NUMS:
      return isSetWordNums();
    case TOKENS:
      return isSetTokens();
    case POSS:
      return isSetPOSs();
    case NAMED_ENTITIES:
      return isSetNamedEntities();
    case COREFS:
      return isSetCorefs();
    case TOKENS_TO_POSS:
      return isSetTokensToPOSs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoNLLDocument)
      return this.equals((CoNLLDocument)that);
    return false;
  }

  public boolean equals(CoNLLDocument that) {
    if (that == null)
      return false;

    boolean this_present_fullText = true && this.isSetFullText();
    boolean that_present_fullText = true && that.isSetFullText();
    if (this_present_fullText || that_present_fullText) {
      if (!(this_present_fullText && that_present_fullText))
        return false;
      if (!this.fullText.equals(that.fullText))
        return false;
    }

    boolean this_present_document = true && this.isSetDocument();
    boolean that_present_document = true && that.isSetDocument();
    if (this_present_document || that_present_document) {
      if (!(this_present_document && that_present_document))
        return false;
      if (!this.document.equals(that.document))
        return false;
    }

    boolean this_present_wordNums = true && this.isSetWordNums();
    boolean that_present_wordNums = true && that.isSetWordNums();
    if (this_present_wordNums || that_present_wordNums) {
      if (!(this_present_wordNums && that_present_wordNums))
        return false;
      if (!this.wordNums.equals(that.wordNums))
        return false;
    }

    boolean this_present_tokens = true && this.isSetTokens();
    boolean that_present_tokens = true && that.isSetTokens();
    if (this_present_tokens || that_present_tokens) {
      if (!(this_present_tokens && that_present_tokens))
        return false;
      if (!this.tokens.equals(that.tokens))
        return false;
    }

    boolean this_present_POSs = true && this.isSetPOSs();
    boolean that_present_POSs = true && that.isSetPOSs();
    if (this_present_POSs || that_present_POSs) {
      if (!(this_present_POSs && that_present_POSs))
        return false;
      if (!this.POSs.equals(that.POSs))
        return false;
    }

    boolean this_present_namedEntities = true && this.isSetNamedEntities();
    boolean that_present_namedEntities = true && that.isSetNamedEntities();
    if (this_present_namedEntities || that_present_namedEntities) {
      if (!(this_present_namedEntities && that_present_namedEntities))
        return false;
      if (!this.namedEntities.equals(that.namedEntities))
        return false;
    }

    boolean this_present_corefs = true && this.isSetCorefs();
    boolean that_present_corefs = true && that.isSetCorefs();
    if (this_present_corefs || that_present_corefs) {
      if (!(this_present_corefs && that_present_corefs))
        return false;
      if (!this.corefs.equals(that.corefs))
        return false;
    }

    boolean this_present_tokensToPOSs = true && this.isSetTokensToPOSs();
    boolean that_present_tokensToPOSs = true && that.isSetTokensToPOSs();
    if (this_present_tokensToPOSs || that_present_tokensToPOSs) {
      if (!(this_present_tokensToPOSs && that_present_tokensToPOSs))
        return false;
      if (!this.tokensToPOSs.equals(that.tokensToPOSs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CoNLLDocument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CoNLLDocument typedOther = (CoNLLDocument)other;

    lastComparison = Boolean.valueOf(isSetFullText()).compareTo(typedOther.isSetFullText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullText, typedOther.fullText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocument()).compareTo(typedOther.isSetDocument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.document, typedOther.document);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWordNums()).compareTo(typedOther.isSetWordNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWordNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wordNums, typedOther.wordNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokens()).compareTo(typedOther.isSetTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, typedOther.tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPOSs()).compareTo(typedOther.isSetPOSs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPOSs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.POSs, typedOther.POSs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamedEntities()).compareTo(typedOther.isSetNamedEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamedEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namedEntities, typedOther.namedEntities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorefs()).compareTo(typedOther.isSetCorefs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorefs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corefs, typedOther.corefs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokensToPOSs()).compareTo(typedOther.isSetTokensToPOSs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokensToPOSs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokensToPOSs, typedOther.tokensToPOSs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CoNLLDocument(");
    boolean first = true;

    sb.append("fullText:");
    if (this.fullText == null) {
      sb.append("null");
    } else {
      sb.append(this.fullText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("document:");
    if (this.document == null) {
      sb.append("null");
    } else {
      sb.append(this.document);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wordNums:");
    if (this.wordNums == null) {
      sb.append("null");
    } else {
      sb.append(this.wordNums);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokens:");
    if (this.tokens == null) {
      sb.append("null");
    } else {
      sb.append(this.tokens);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("POSs:");
    if (this.POSs == null) {
      sb.append("null");
    } else {
      sb.append(this.POSs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namedEntities:");
    if (this.namedEntities == null) {
      sb.append("null");
    } else {
      sb.append(this.namedEntities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("corefs:");
    if (this.corefs == null) {
      sb.append("null");
    } else {
      sb.append(this.corefs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokensToPOSs:");
    if (this.tokensToPOSs == null) {
      sb.append("null");
    } else {
      sb.append(this.tokensToPOSs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fullText == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fullText' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (document != null) {
      document.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoNLLDocumentStandardSchemeFactory implements SchemeFactory {
    public CoNLLDocumentStandardScheme getScheme() {
      return new CoNLLDocumentStandardScheme();
    }
  }

  private static class CoNLLDocumentStandardScheme extends StandardScheme<CoNLLDocument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CoNLLDocument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullText = iprot.readString();
              struct.setFullTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.document = new thrift.adept.common.Document();
              struct.document.read(iprot);
              struct.setDocumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORD_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                struct.wordNums = new ArrayList<List<Integer>>(_list74.size);
                for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                {
                  List<Integer> _elem76; // required
                  {
                    org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                    _elem76 = new ArrayList<Integer>(_list77.size);
                    for (int _i78 = 0; _i78 < _list77.size; ++_i78)
                    {
                      int _elem79; // required
                      _elem79 = iprot.readI32();
                      _elem76.add(_elem79);
                    }
                    iprot.readListEnd();
                  }
                  struct.wordNums.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setWordNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.tokens = new ArrayList<List<String>>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  List<String> _elem82; // required
                  {
                    org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                    _elem82 = new ArrayList<String>(_list83.size);
                    for (int _i84 = 0; _i84 < _list83.size; ++_i84)
                    {
                      String _elem85; // required
                      _elem85 = iprot.readString();
                      _elem82.add(_elem85);
                    }
                    iprot.readListEnd();
                  }
                  struct.tokens.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                struct.POSs = new ArrayList<List<String>>(_list86.size);
                for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                {
                  List<String> _elem88; // required
                  {
                    org.apache.thrift.protocol.TList _list89 = iprot.readListBegin();
                    _elem88 = new ArrayList<String>(_list89.size);
                    for (int _i90 = 0; _i90 < _list89.size; ++_i90)
                    {
                      String _elem91; // required
                      _elem91 = iprot.readString();
                      _elem88.add(_elem91);
                    }
                    iprot.readListEnd();
                  }
                  struct.POSs.add(_elem88);
                }
                iprot.readListEnd();
              }
              struct.setPOSsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAMED_ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                struct.namedEntities = new ArrayList<Map<String,Long>>(_list92.size);
                for (int _i93 = 0; _i93 < _list92.size; ++_i93)
                {
                  Map<String,Long> _elem94; // required
                  {
                    org.apache.thrift.protocol.TMap _map95 = iprot.readMapBegin();
                    _elem94 = new HashMap<String,Long>(2*_map95.size);
                    for (int _i96 = 0; _i96 < _map95.size; ++_i96)
                    {
                      String _key97; // required
                      long _val98; // required
                      _key97 = iprot.readString();
                      _val98 = iprot.readI64();
                      _elem94.put(_key97, _val98);
                    }
                    iprot.readMapEnd();
                  }
                  struct.namedEntities.add(_elem94);
                }
                iprot.readListEnd();
              }
              struct.setNamedEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COREFS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.corefs = new ArrayList<List<List<Long>>>(_list99.size);
                for (int _i100 = 0; _i100 < _list99.size; ++_i100)
                {
                  List<List<Long>> _elem101; // required
                  {
                    org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                    _elem101 = new ArrayList<List<Long>>(_list102.size);
                    for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                    {
                      List<Long> _elem104; // required
                      {
                        org.apache.thrift.protocol.TList _list105 = iprot.readListBegin();
                        _elem104 = new ArrayList<Long>(_list105.size);
                        for (int _i106 = 0; _i106 < _list105.size; ++_i106)
                        {
                          long _elem107; // required
                          _elem107 = iprot.readI64();
                          _elem104.add(_elem107);
                        }
                        iprot.readListEnd();
                      }
                      _elem101.add(_elem104);
                    }
                    iprot.readListEnd();
                  }
                  struct.corefs.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setCorefsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOKENS_TO_POSS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                struct.tokensToPOSs = new HashMap<thrift.adept.common.Token,String>(2*_map108.size);
                for (int _i109 = 0; _i109 < _map108.size; ++_i109)
                {
                  thrift.adept.common.Token _key110; // required
                  String _val111; // required
                  _key110 = new thrift.adept.common.Token();
                  _key110.read(iprot);
                  _val111 = iprot.readString();
                  struct.tokensToPOSs.put(_key110, _val111);
                }
                iprot.readMapEnd();
              }
              struct.setTokensToPOSsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CoNLLDocument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fullText != null) {
        oprot.writeFieldBegin(FULL_TEXT_FIELD_DESC);
        oprot.writeString(struct.fullText);
        oprot.writeFieldEnd();
      }
      if (struct.document != null) {
        oprot.writeFieldBegin(DOCUMENT_FIELD_DESC);
        struct.document.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.wordNums != null) {
        oprot.writeFieldBegin(WORD_NUMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.wordNums.size()));
          for (List<Integer> _iter112 : struct.wordNums)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter112.size()));
              for (int _iter113 : _iter112)
              {
                oprot.writeI32(_iter113);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tokens != null) {
        oprot.writeFieldBegin(TOKENS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.tokens.size()));
          for (List<String> _iter114 : struct.tokens)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter114.size()));
              for (String _iter115 : _iter114)
              {
                oprot.writeString(_iter115);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.POSs != null) {
        oprot.writeFieldBegin(POSS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.POSs.size()));
          for (List<String> _iter116 : struct.POSs)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter116.size()));
              for (String _iter117 : _iter116)
              {
                oprot.writeString(_iter117);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.namedEntities != null) {
        oprot.writeFieldBegin(NAMED_ENTITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.namedEntities.size()));
          for (Map<String,Long> _iter118 : struct.namedEntities)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, _iter118.size()));
              for (Map.Entry<String, Long> _iter119 : _iter118.entrySet())
              {
                oprot.writeString(_iter119.getKey());
                oprot.writeI64(_iter119.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.corefs != null) {
        oprot.writeFieldBegin(COREFS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.corefs.size()));
          for (List<List<Long>> _iter120 : struct.corefs)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter120.size()));
              for (List<Long> _iter121 : _iter120)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter121.size()));
                  for (long _iter122 : _iter121)
                  {
                    oprot.writeI64(_iter122);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tokensToPOSs != null) {
        oprot.writeFieldBegin(TOKENS_TO_POSS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRING, struct.tokensToPOSs.size()));
          for (Map.Entry<thrift.adept.common.Token, String> _iter123 : struct.tokensToPOSs.entrySet())
          {
            _iter123.getKey().write(oprot);
            oprot.writeString(_iter123.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoNLLDocumentTupleSchemeFactory implements SchemeFactory {
    public CoNLLDocumentTupleScheme getScheme() {
      return new CoNLLDocumentTupleScheme();
    }
  }

  private static class CoNLLDocumentTupleScheme extends TupleScheme<CoNLLDocument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CoNLLDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.fullText);
      BitSet optionals = new BitSet();
      if (struct.isSetDocument()) {
        optionals.set(0);
      }
      if (struct.isSetWordNums()) {
        optionals.set(1);
      }
      if (struct.isSetTokens()) {
        optionals.set(2);
      }
      if (struct.isSetPOSs()) {
        optionals.set(3);
      }
      if (struct.isSetNamedEntities()) {
        optionals.set(4);
      }
      if (struct.isSetCorefs()) {
        optionals.set(5);
      }
      if (struct.isSetTokensToPOSs()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDocument()) {
        struct.document.write(oprot);
      }
      if (struct.isSetWordNums()) {
        {
          oprot.writeI32(struct.wordNums.size());
          for (List<Integer> _iter124 : struct.wordNums)
          {
            {
              oprot.writeI32(_iter124.size());
              for (int _iter125 : _iter124)
              {
                oprot.writeI32(_iter125);
              }
            }
          }
        }
      }
      if (struct.isSetTokens()) {
        {
          oprot.writeI32(struct.tokens.size());
          for (List<String> _iter126 : struct.tokens)
          {
            {
              oprot.writeI32(_iter126.size());
              for (String _iter127 : _iter126)
              {
                oprot.writeString(_iter127);
              }
            }
          }
        }
      }
      if (struct.isSetPOSs()) {
        {
          oprot.writeI32(struct.POSs.size());
          for (List<String> _iter128 : struct.POSs)
          {
            {
              oprot.writeI32(_iter128.size());
              for (String _iter129 : _iter128)
              {
                oprot.writeString(_iter129);
              }
            }
          }
        }
      }
      if (struct.isSetNamedEntities()) {
        {
          oprot.writeI32(struct.namedEntities.size());
          for (Map<String,Long> _iter130 : struct.namedEntities)
          {
            {
              oprot.writeI32(_iter130.size());
              for (Map.Entry<String, Long> _iter131 : _iter130.entrySet())
              {
                oprot.writeString(_iter131.getKey());
                oprot.writeI64(_iter131.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetCorefs()) {
        {
          oprot.writeI32(struct.corefs.size());
          for (List<List<Long>> _iter132 : struct.corefs)
          {
            {
              oprot.writeI32(_iter132.size());
              for (List<Long> _iter133 : _iter132)
              {
                {
                  oprot.writeI32(_iter133.size());
                  for (long _iter134 : _iter133)
                  {
                    oprot.writeI64(_iter134);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetTokensToPOSs()) {
        {
          oprot.writeI32(struct.tokensToPOSs.size());
          for (Map.Entry<thrift.adept.common.Token, String> _iter135 : struct.tokensToPOSs.entrySet())
          {
            _iter135.getKey().write(oprot);
            oprot.writeString(_iter135.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CoNLLDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fullText = iprot.readString();
      struct.setFullTextIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.document = new thrift.adept.common.Document();
        struct.document.read(iprot);
        struct.setDocumentIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list136 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.wordNums = new ArrayList<List<Integer>>(_list136.size);
          for (int _i137 = 0; _i137 < _list136.size; ++_i137)
          {
            List<Integer> _elem138; // required
            {
              org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem138 = new ArrayList<Integer>(_list139.size);
              for (int _i140 = 0; _i140 < _list139.size; ++_i140)
              {
                int _elem141; // required
                _elem141 = iprot.readI32();
                _elem138.add(_elem141);
              }
            }
            struct.wordNums.add(_elem138);
          }
        }
        struct.setWordNumsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list142 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.tokens = new ArrayList<List<String>>(_list142.size);
          for (int _i143 = 0; _i143 < _list142.size; ++_i143)
          {
            List<String> _elem144; // required
            {
              org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem144 = new ArrayList<String>(_list145.size);
              for (int _i146 = 0; _i146 < _list145.size; ++_i146)
              {
                String _elem147; // required
                _elem147 = iprot.readString();
                _elem144.add(_elem147);
              }
            }
            struct.tokens.add(_elem144);
          }
        }
        struct.setTokensIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list148 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.POSs = new ArrayList<List<String>>(_list148.size);
          for (int _i149 = 0; _i149 < _list148.size; ++_i149)
          {
            List<String> _elem150; // required
            {
              org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem150 = new ArrayList<String>(_list151.size);
              for (int _i152 = 0; _i152 < _list151.size; ++_i152)
              {
                String _elem153; // required
                _elem153 = iprot.readString();
                _elem150.add(_elem153);
              }
            }
            struct.POSs.add(_elem150);
          }
        }
        struct.setPOSsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list154 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.namedEntities = new ArrayList<Map<String,Long>>(_list154.size);
          for (int _i155 = 0; _i155 < _list154.size; ++_i155)
          {
            Map<String,Long> _elem156; // required
            {
              org.apache.thrift.protocol.TMap _map157 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _elem156 = new HashMap<String,Long>(2*_map157.size);
              for (int _i158 = 0; _i158 < _map157.size; ++_i158)
              {
                String _key159; // required
                long _val160; // required
                _key159 = iprot.readString();
                _val160 = iprot.readI64();
                _elem156.put(_key159, _val160);
              }
            }
            struct.namedEntities.add(_elem156);
          }
        }
        struct.setNamedEntitiesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.corefs = new ArrayList<List<List<Long>>>(_list161.size);
          for (int _i162 = 0; _i162 < _list161.size; ++_i162)
          {
            List<List<Long>> _elem163; // required
            {
              org.apache.thrift.protocol.TList _list164 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem163 = new ArrayList<List<Long>>(_list164.size);
              for (int _i165 = 0; _i165 < _list164.size; ++_i165)
              {
                List<Long> _elem166; // required
                {
                  org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                  _elem166 = new ArrayList<Long>(_list167.size);
                  for (int _i168 = 0; _i168 < _list167.size; ++_i168)
                  {
                    long _elem169; // required
                    _elem169 = iprot.readI64();
                    _elem166.add(_elem169);
                  }
                }
                _elem163.add(_elem166);
              }
            }
            struct.corefs.add(_elem163);
          }
        }
        struct.setCorefsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map170 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tokensToPOSs = new HashMap<thrift.adept.common.Token,String>(2*_map170.size);
          for (int _i171 = 0; _i171 < _map170.size; ++_i171)
          {
            thrift.adept.common.Token _key172; // required
            String _val173; // required
            _key172 = new thrift.adept.common.Token();
            _key172.read(iprot);
            _val173 = iprot.readString();
            struct.tokensToPOSs.put(_key172, _val173);
          }
        }
        struct.setTokensToPOSsIsSet(true);
      }
    }
  }

}