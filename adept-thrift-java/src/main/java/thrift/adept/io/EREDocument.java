/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.io;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EREDocument implements org.apache.thrift.TBase<EREDocument, EREDocument._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EREDocument");

  private static final org.apache.thrift.protocol.TField FULL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("fullText", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DOCUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("document", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CHAR_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("charMapping", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CHAR_TO_TOKEN_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("charToTokenOffset", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField START_INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndices", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField END_INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("endIndices", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ENTITY_MENTIONS_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMentionsById", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField CANONICAL_ENTITY_MENTIONS_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("canonicalEntityMentionsById", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField IS_PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("isProxy", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField EVENTS_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventsById", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EREDocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EREDocumentTupleSchemeFactory());
  }

  public String fullText; // required
  public thrift.adept.common.Document document; // required
  public Map<Long,Long> charMapping; // required
  public Map<Long,Long> charToTokenOffset; // required
  public List<Integer> startIndices; // required
  public List<Integer> endIndices; // required
  public Map<Long,thrift.adept.common.EntityMention> entityMentionsById; // required
  public Map<Long,thrift.adept.common.EntityMention> canonicalEntityMentionsById; // required
  public boolean isProxy; // required
  public Map<Long,List<thrift.adept.common.Event>> eventsById; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FULL_TEXT((short)1, "fullText"),
    DOCUMENT((short)2, "document"),
    CHAR_MAPPING((short)3, "charMapping"),
    CHAR_TO_TOKEN_OFFSET((short)4, "charToTokenOffset"),
    START_INDICES((short)5, "startIndices"),
    END_INDICES((short)6, "endIndices"),
    ENTITY_MENTIONS_BY_ID((short)7, "entityMentionsById"),
    CANONICAL_ENTITY_MENTIONS_BY_ID((short)8, "canonicalEntityMentionsById"),
    IS_PROXY((short)9, "isProxy"),
    EVENTS_BY_ID((short)10, "eventsById");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULL_TEXT
          return FULL_TEXT;
        case 2: // DOCUMENT
          return DOCUMENT;
        case 3: // CHAR_MAPPING
          return CHAR_MAPPING;
        case 4: // CHAR_TO_TOKEN_OFFSET
          return CHAR_TO_TOKEN_OFFSET;
        case 5: // START_INDICES
          return START_INDICES;
        case 6: // END_INDICES
          return END_INDICES;
        case 7: // ENTITY_MENTIONS_BY_ID
          return ENTITY_MENTIONS_BY_ID;
        case 8: // CANONICAL_ENTITY_MENTIONS_BY_ID
          return CANONICAL_ENTITY_MENTIONS_BY_ID;
        case 9: // IS_PROXY
          return IS_PROXY;
        case 10: // EVENTS_BY_ID
          return EVENTS_BY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISPROXY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("fullText", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT, new org.apache.thrift.meta_data.FieldMetaData("document", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Document.class)));
    tmpMap.put(_Fields.CHAR_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("charMapping", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CHAR_TO_TOKEN_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("charToTokenOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.START_INDICES, new org.apache.thrift.meta_data.FieldMetaData("startIndices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.END_INDICES, new org.apache.thrift.meta_data.FieldMetaData("endIndices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ENTITY_MENTIONS_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityMentionsById", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.EntityMention.class))));
    tmpMap.put(_Fields.CANONICAL_ENTITY_MENTIONS_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("canonicalEntityMentionsById", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.EntityMention.class))));
    tmpMap.put(_Fields.IS_PROXY, new org.apache.thrift.meta_data.FieldMetaData("isProxy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EVENTS_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("eventsById", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Event.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EREDocument.class, metaDataMap);
  }

  public EREDocument() {
  }

  public EREDocument(
    String fullText,
    thrift.adept.common.Document document,
    Map<Long,Long> charMapping,
    Map<Long,Long> charToTokenOffset,
    List<Integer> startIndices,
    List<Integer> endIndices,
    Map<Long,thrift.adept.common.EntityMention> entityMentionsById,
    Map<Long,thrift.adept.common.EntityMention> canonicalEntityMentionsById,
    boolean isProxy,
    Map<Long,List<thrift.adept.common.Event>> eventsById)
  {
    this();
    this.fullText = fullText;
    this.document = document;
    this.charMapping = charMapping;
    this.charToTokenOffset = charToTokenOffset;
    this.startIndices = startIndices;
    this.endIndices = endIndices;
    this.entityMentionsById = entityMentionsById;
    this.canonicalEntityMentionsById = canonicalEntityMentionsById;
    this.isProxy = isProxy;
    setIsProxyIsSet(true);
    this.eventsById = eventsById;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EREDocument(EREDocument other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFullText()) {
      this.fullText = other.fullText;
    }
    if (other.isSetDocument()) {
      this.document = new thrift.adept.common.Document(other.document);
    }
    if (other.isSetCharMapping()) {
      Map<Long,Long> __this__charMapping = new HashMap<Long,Long>();
      for (Map.Entry<Long, Long> other_element : other.charMapping.entrySet()) {

        Long other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Long __this__charMapping_copy_key = other_element_key;

        Long __this__charMapping_copy_value = other_element_value;

        __this__charMapping.put(__this__charMapping_copy_key, __this__charMapping_copy_value);
      }
      this.charMapping = __this__charMapping;
    }
    if (other.isSetCharToTokenOffset()) {
      Map<Long,Long> __this__charToTokenOffset = new HashMap<Long,Long>();
      for (Map.Entry<Long, Long> other_element : other.charToTokenOffset.entrySet()) {

        Long other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Long __this__charToTokenOffset_copy_key = other_element_key;

        Long __this__charToTokenOffset_copy_value = other_element_value;

        __this__charToTokenOffset.put(__this__charToTokenOffset_copy_key, __this__charToTokenOffset_copy_value);
      }
      this.charToTokenOffset = __this__charToTokenOffset;
    }
    if (other.isSetStartIndices()) {
      List<Integer> __this__startIndices = new ArrayList<Integer>();
      for (Integer other_element : other.startIndices) {
        __this__startIndices.add(other_element);
      }
      this.startIndices = __this__startIndices;
    }
    if (other.isSetEndIndices()) {
      List<Integer> __this__endIndices = new ArrayList<Integer>();
      for (Integer other_element : other.endIndices) {
        __this__endIndices.add(other_element);
      }
      this.endIndices = __this__endIndices;
    }
    if (other.isSetEntityMentionsById()) {
      Map<Long,thrift.adept.common.EntityMention> __this__entityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>();
      for (Map.Entry<Long, thrift.adept.common.EntityMention> other_element : other.entityMentionsById.entrySet()) {

        Long other_element_key = other_element.getKey();
        thrift.adept.common.EntityMention other_element_value = other_element.getValue();

        Long __this__entityMentionsById_copy_key = other_element_key;

        thrift.adept.common.EntityMention __this__entityMentionsById_copy_value = new thrift.adept.common.EntityMention(other_element_value);

        __this__entityMentionsById.put(__this__entityMentionsById_copy_key, __this__entityMentionsById_copy_value);
      }
      this.entityMentionsById = __this__entityMentionsById;
    }
    if (other.isSetCanonicalEntityMentionsById()) {
      Map<Long,thrift.adept.common.EntityMention> __this__canonicalEntityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>();
      for (Map.Entry<Long, thrift.adept.common.EntityMention> other_element : other.canonicalEntityMentionsById.entrySet()) {

        Long other_element_key = other_element.getKey();
        thrift.adept.common.EntityMention other_element_value = other_element.getValue();

        Long __this__canonicalEntityMentionsById_copy_key = other_element_key;

        thrift.adept.common.EntityMention __this__canonicalEntityMentionsById_copy_value = new thrift.adept.common.EntityMention(other_element_value);

        __this__canonicalEntityMentionsById.put(__this__canonicalEntityMentionsById_copy_key, __this__canonicalEntityMentionsById_copy_value);
      }
      this.canonicalEntityMentionsById = __this__canonicalEntityMentionsById;
    }
    this.isProxy = other.isProxy;
    if (other.isSetEventsById()) {
      Map<Long,List<thrift.adept.common.Event>> __this__eventsById = new HashMap<Long,List<thrift.adept.common.Event>>();
      for (Map.Entry<Long, List<thrift.adept.common.Event>> other_element : other.eventsById.entrySet()) {

        Long other_element_key = other_element.getKey();
        List<thrift.adept.common.Event> other_element_value = other_element.getValue();

        Long __this__eventsById_copy_key = other_element_key;

        List<thrift.adept.common.Event> __this__eventsById_copy_value = new ArrayList<thrift.adept.common.Event>();
        for (thrift.adept.common.Event other_element_value_element : other_element_value) {
          __this__eventsById_copy_value.add(new thrift.adept.common.Event(other_element_value_element));
        }

        __this__eventsById.put(__this__eventsById_copy_key, __this__eventsById_copy_value);
      }
      this.eventsById = __this__eventsById;
    }
  }

  public EREDocument deepCopy() {
    return new EREDocument(this);
  }

  @Override
  public void clear() {
    this.fullText = null;
    this.document = null;
    this.charMapping = null;
    this.charToTokenOffset = null;
    this.startIndices = null;
    this.endIndices = null;
    this.entityMentionsById = null;
    this.canonicalEntityMentionsById = null;
    setIsProxyIsSet(false);
    this.isProxy = false;
    this.eventsById = null;
  }

  public String getFullText() {
    return this.fullText;
  }

  public EREDocument setFullText(String fullText) {
    this.fullText = fullText;
    return this;
  }

  public void unsetFullText() {
    this.fullText = null;
  }

  /** Returns true if field fullText is set (has been assigned a value) and false otherwise */
  public boolean isSetFullText() {
    return this.fullText != null;
  }

  public void setFullTextIsSet(boolean value) {
    if (!value) {
      this.fullText = null;
    }
  }

  public thrift.adept.common.Document getDocument() {
    return this.document;
  }

  public EREDocument setDocument(thrift.adept.common.Document document) {
    this.document = document;
    return this;
  }

  public void unsetDocument() {
    this.document = null;
  }

  /** Returns true if field document is set (has been assigned a value) and false otherwise */
  public boolean isSetDocument() {
    return this.document != null;
  }

  public void setDocumentIsSet(boolean value) {
    if (!value) {
      this.document = null;
    }
  }

  public int getCharMappingSize() {
    return (this.charMapping == null) ? 0 : this.charMapping.size();
  }

  public void putToCharMapping(long key, long val) {
    if (this.charMapping == null) {
      this.charMapping = new HashMap<Long,Long>();
    }
    this.charMapping.put(key, val);
  }

  public Map<Long,Long> getCharMapping() {
    return this.charMapping;
  }

  public EREDocument setCharMapping(Map<Long,Long> charMapping) {
    this.charMapping = charMapping;
    return this;
  }

  public void unsetCharMapping() {
    this.charMapping = null;
  }

  /** Returns true if field charMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetCharMapping() {
    return this.charMapping != null;
  }

  public void setCharMappingIsSet(boolean value) {
    if (!value) {
      this.charMapping = null;
    }
  }

  public int getCharToTokenOffsetSize() {
    return (this.charToTokenOffset == null) ? 0 : this.charToTokenOffset.size();
  }

  public void putToCharToTokenOffset(long key, long val) {
    if (this.charToTokenOffset == null) {
      this.charToTokenOffset = new HashMap<Long,Long>();
    }
    this.charToTokenOffset.put(key, val);
  }

  public Map<Long,Long> getCharToTokenOffset() {
    return this.charToTokenOffset;
  }

  public EREDocument setCharToTokenOffset(Map<Long,Long> charToTokenOffset) {
    this.charToTokenOffset = charToTokenOffset;
    return this;
  }

  public void unsetCharToTokenOffset() {
    this.charToTokenOffset = null;
  }

  /** Returns true if field charToTokenOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetCharToTokenOffset() {
    return this.charToTokenOffset != null;
  }

  public void setCharToTokenOffsetIsSet(boolean value) {
    if (!value) {
      this.charToTokenOffset = null;
    }
  }

  public int getStartIndicesSize() {
    return (this.startIndices == null) ? 0 : this.startIndices.size();
  }

  public java.util.Iterator<Integer> getStartIndicesIterator() {
    return (this.startIndices == null) ? null : this.startIndices.iterator();
  }

  public void addToStartIndices(int elem) {
    if (this.startIndices == null) {
      this.startIndices = new ArrayList<Integer>();
    }
    this.startIndices.add(elem);
  }

  public List<Integer> getStartIndices() {
    return this.startIndices;
  }

  public EREDocument setStartIndices(List<Integer> startIndices) {
    this.startIndices = startIndices;
    return this;
  }

  public void unsetStartIndices() {
    this.startIndices = null;
  }

  /** Returns true if field startIndices is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIndices() {
    return this.startIndices != null;
  }

  public void setStartIndicesIsSet(boolean value) {
    if (!value) {
      this.startIndices = null;
    }
  }

  public int getEndIndicesSize() {
    return (this.endIndices == null) ? 0 : this.endIndices.size();
  }

  public java.util.Iterator<Integer> getEndIndicesIterator() {
    return (this.endIndices == null) ? null : this.endIndices.iterator();
  }

  public void addToEndIndices(int elem) {
    if (this.endIndices == null) {
      this.endIndices = new ArrayList<Integer>();
    }
    this.endIndices.add(elem);
  }

  public List<Integer> getEndIndices() {
    return this.endIndices;
  }

  public EREDocument setEndIndices(List<Integer> endIndices) {
    this.endIndices = endIndices;
    return this;
  }

  public void unsetEndIndices() {
    this.endIndices = null;
  }

  /** Returns true if field endIndices is set (has been assigned a value) and false otherwise */
  public boolean isSetEndIndices() {
    return this.endIndices != null;
  }

  public void setEndIndicesIsSet(boolean value) {
    if (!value) {
      this.endIndices = null;
    }
  }

  public int getEntityMentionsByIdSize() {
    return (this.entityMentionsById == null) ? 0 : this.entityMentionsById.size();
  }

  public void putToEntityMentionsById(long key, thrift.adept.common.EntityMention val) {
    if (this.entityMentionsById == null) {
      this.entityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>();
    }
    this.entityMentionsById.put(key, val);
  }

  public Map<Long,thrift.adept.common.EntityMention> getEntityMentionsById() {
    return this.entityMentionsById;
  }

  public EREDocument setEntityMentionsById(Map<Long,thrift.adept.common.EntityMention> entityMentionsById) {
    this.entityMentionsById = entityMentionsById;
    return this;
  }

  public void unsetEntityMentionsById() {
    this.entityMentionsById = null;
  }

  /** Returns true if field entityMentionsById is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityMentionsById() {
    return this.entityMentionsById != null;
  }

  public void setEntityMentionsByIdIsSet(boolean value) {
    if (!value) {
      this.entityMentionsById = null;
    }
  }

  public int getCanonicalEntityMentionsByIdSize() {
    return (this.canonicalEntityMentionsById == null) ? 0 : this.canonicalEntityMentionsById.size();
  }

  public void putToCanonicalEntityMentionsById(long key, thrift.adept.common.EntityMention val) {
    if (this.canonicalEntityMentionsById == null) {
      this.canonicalEntityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>();
    }
    this.canonicalEntityMentionsById.put(key, val);
  }

  public Map<Long,thrift.adept.common.EntityMention> getCanonicalEntityMentionsById() {
    return this.canonicalEntityMentionsById;
  }

  public EREDocument setCanonicalEntityMentionsById(Map<Long,thrift.adept.common.EntityMention> canonicalEntityMentionsById) {
    this.canonicalEntityMentionsById = canonicalEntityMentionsById;
    return this;
  }

  public void unsetCanonicalEntityMentionsById() {
    this.canonicalEntityMentionsById = null;
  }

  /** Returns true if field canonicalEntityMentionsById is set (has been assigned a value) and false otherwise */
  public boolean isSetCanonicalEntityMentionsById() {
    return this.canonicalEntityMentionsById != null;
  }

  public void setCanonicalEntityMentionsByIdIsSet(boolean value) {
    if (!value) {
      this.canonicalEntityMentionsById = null;
    }
  }

  public boolean isIsProxy() {
    return this.isProxy;
  }

  public EREDocument setIsProxy(boolean isProxy) {
    this.isProxy = isProxy;
    setIsProxyIsSet(true);
    return this;
  }

  public void unsetIsProxy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPROXY_ISSET_ID);
  }

  /** Returns true if field isProxy is set (has been assigned a value) and false otherwise */
  public boolean isSetIsProxy() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPROXY_ISSET_ID);
  }

  public void setIsProxyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPROXY_ISSET_ID, value);
  }

  public int getEventsByIdSize() {
    return (this.eventsById == null) ? 0 : this.eventsById.size();
  }

  public void putToEventsById(long key, List<thrift.adept.common.Event> val) {
    if (this.eventsById == null) {
      this.eventsById = new HashMap<Long,List<thrift.adept.common.Event>>();
    }
    this.eventsById.put(key, val);
  }

  public Map<Long,List<thrift.adept.common.Event>> getEventsById() {
    return this.eventsById;
  }

  public EREDocument setEventsById(Map<Long,List<thrift.adept.common.Event>> eventsById) {
    this.eventsById = eventsById;
    return this;
  }

  public void unsetEventsById() {
    this.eventsById = null;
  }

  /** Returns true if field eventsById is set (has been assigned a value) and false otherwise */
  public boolean isSetEventsById() {
    return this.eventsById != null;
  }

  public void setEventsByIdIsSet(boolean value) {
    if (!value) {
      this.eventsById = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FULL_TEXT:
      if (value == null) {
        unsetFullText();
      } else {
        setFullText((String)value);
      }
      break;

    case DOCUMENT:
      if (value == null) {
        unsetDocument();
      } else {
        setDocument((thrift.adept.common.Document)value);
      }
      break;

    case CHAR_MAPPING:
      if (value == null) {
        unsetCharMapping();
      } else {
        setCharMapping((Map<Long,Long>)value);
      }
      break;

    case CHAR_TO_TOKEN_OFFSET:
      if (value == null) {
        unsetCharToTokenOffset();
      } else {
        setCharToTokenOffset((Map<Long,Long>)value);
      }
      break;

    case START_INDICES:
      if (value == null) {
        unsetStartIndices();
      } else {
        setStartIndices((List<Integer>)value);
      }
      break;

    case END_INDICES:
      if (value == null) {
        unsetEndIndices();
      } else {
        setEndIndices((List<Integer>)value);
      }
      break;

    case ENTITY_MENTIONS_BY_ID:
      if (value == null) {
        unsetEntityMentionsById();
      } else {
        setEntityMentionsById((Map<Long,thrift.adept.common.EntityMention>)value);
      }
      break;

    case CANONICAL_ENTITY_MENTIONS_BY_ID:
      if (value == null) {
        unsetCanonicalEntityMentionsById();
      } else {
        setCanonicalEntityMentionsById((Map<Long,thrift.adept.common.EntityMention>)value);
      }
      break;

    case IS_PROXY:
      if (value == null) {
        unsetIsProxy();
      } else {
        setIsProxy((Boolean)value);
      }
      break;

    case EVENTS_BY_ID:
      if (value == null) {
        unsetEventsById();
      } else {
        setEventsById((Map<Long,List<thrift.adept.common.Event>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FULL_TEXT:
      return getFullText();

    case DOCUMENT:
      return getDocument();

    case CHAR_MAPPING:
      return getCharMapping();

    case CHAR_TO_TOKEN_OFFSET:
      return getCharToTokenOffset();

    case START_INDICES:
      return getStartIndices();

    case END_INDICES:
      return getEndIndices();

    case ENTITY_MENTIONS_BY_ID:
      return getEntityMentionsById();

    case CANONICAL_ENTITY_MENTIONS_BY_ID:
      return getCanonicalEntityMentionsById();

    case IS_PROXY:
      return Boolean.valueOf(isIsProxy());

    case EVENTS_BY_ID:
      return getEventsById();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FULL_TEXT:
      return isSetFullText();
    case DOCUMENT:
      return isSetDocument();
    case CHAR_MAPPING:
      return isSetCharMapping();
    case CHAR_TO_TOKEN_OFFSET:
      return isSetCharToTokenOffset();
    case START_INDICES:
      return isSetStartIndices();
    case END_INDICES:
      return isSetEndIndices();
    case ENTITY_MENTIONS_BY_ID:
      return isSetEntityMentionsById();
    case CANONICAL_ENTITY_MENTIONS_BY_ID:
      return isSetCanonicalEntityMentionsById();
    case IS_PROXY:
      return isSetIsProxy();
    case EVENTS_BY_ID:
      return isSetEventsById();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EREDocument)
      return this.equals((EREDocument)that);
    return false;
  }

  public boolean equals(EREDocument that) {
    if (that == null)
      return false;

    boolean this_present_fullText = true && this.isSetFullText();
    boolean that_present_fullText = true && that.isSetFullText();
    if (this_present_fullText || that_present_fullText) {
      if (!(this_present_fullText && that_present_fullText))
        return false;
      if (!this.fullText.equals(that.fullText))
        return false;
    }

    boolean this_present_document = true && this.isSetDocument();
    boolean that_present_document = true && that.isSetDocument();
    if (this_present_document || that_present_document) {
      if (!(this_present_document && that_present_document))
        return false;
      if (!this.document.equals(that.document))
        return false;
    }

    boolean this_present_charMapping = true && this.isSetCharMapping();
    boolean that_present_charMapping = true && that.isSetCharMapping();
    if (this_present_charMapping || that_present_charMapping) {
      if (!(this_present_charMapping && that_present_charMapping))
        return false;
      if (!this.charMapping.equals(that.charMapping))
        return false;
    }

    boolean this_present_charToTokenOffset = true && this.isSetCharToTokenOffset();
    boolean that_present_charToTokenOffset = true && that.isSetCharToTokenOffset();
    if (this_present_charToTokenOffset || that_present_charToTokenOffset) {
      if (!(this_present_charToTokenOffset && that_present_charToTokenOffset))
        return false;
      if (!this.charToTokenOffset.equals(that.charToTokenOffset))
        return false;
    }

    boolean this_present_startIndices = true && this.isSetStartIndices();
    boolean that_present_startIndices = true && that.isSetStartIndices();
    if (this_present_startIndices || that_present_startIndices) {
      if (!(this_present_startIndices && that_present_startIndices))
        return false;
      if (!this.startIndices.equals(that.startIndices))
        return false;
    }

    boolean this_present_endIndices = true && this.isSetEndIndices();
    boolean that_present_endIndices = true && that.isSetEndIndices();
    if (this_present_endIndices || that_present_endIndices) {
      if (!(this_present_endIndices && that_present_endIndices))
        return false;
      if (!this.endIndices.equals(that.endIndices))
        return false;
    }

    boolean this_present_entityMentionsById = true && this.isSetEntityMentionsById();
    boolean that_present_entityMentionsById = true && that.isSetEntityMentionsById();
    if (this_present_entityMentionsById || that_present_entityMentionsById) {
      if (!(this_present_entityMentionsById && that_present_entityMentionsById))
        return false;
      if (!this.entityMentionsById.equals(that.entityMentionsById))
        return false;
    }

    boolean this_present_canonicalEntityMentionsById = true && this.isSetCanonicalEntityMentionsById();
    boolean that_present_canonicalEntityMentionsById = true && that.isSetCanonicalEntityMentionsById();
    if (this_present_canonicalEntityMentionsById || that_present_canonicalEntityMentionsById) {
      if (!(this_present_canonicalEntityMentionsById && that_present_canonicalEntityMentionsById))
        return false;
      if (!this.canonicalEntityMentionsById.equals(that.canonicalEntityMentionsById))
        return false;
    }

    boolean this_present_isProxy = true;
    boolean that_present_isProxy = true;
    if (this_present_isProxy || that_present_isProxy) {
      if (!(this_present_isProxy && that_present_isProxy))
        return false;
      if (this.isProxy != that.isProxy)
        return false;
    }

    boolean this_present_eventsById = true && this.isSetEventsById();
    boolean that_present_eventsById = true && that.isSetEventsById();
    if (this_present_eventsById || that_present_eventsById) {
      if (!(this_present_eventsById && that_present_eventsById))
        return false;
      if (!this.eventsById.equals(that.eventsById))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EREDocument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EREDocument typedOther = (EREDocument)other;

    lastComparison = Boolean.valueOf(isSetFullText()).compareTo(typedOther.isSetFullText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullText, typedOther.fullText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocument()).compareTo(typedOther.isSetDocument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.document, typedOther.document);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharMapping()).compareTo(typedOther.isSetCharMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charMapping, typedOther.charMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharToTokenOffset()).compareTo(typedOther.isSetCharToTokenOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharToTokenOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charToTokenOffset, typedOther.charToTokenOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartIndices()).compareTo(typedOther.isSetStartIndices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIndices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndices, typedOther.startIndices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndIndices()).compareTo(typedOther.isSetEndIndices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndIndices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endIndices, typedOther.endIndices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityMentionsById()).compareTo(typedOther.isSetEntityMentionsById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityMentionsById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityMentionsById, typedOther.entityMentionsById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanonicalEntityMentionsById()).compareTo(typedOther.isSetCanonicalEntityMentionsById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanonicalEntityMentionsById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canonicalEntityMentionsById, typedOther.canonicalEntityMentionsById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsProxy()).compareTo(typedOther.isSetIsProxy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsProxy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isProxy, typedOther.isProxy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventsById()).compareTo(typedOther.isSetEventsById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventsById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventsById, typedOther.eventsById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EREDocument(");
    boolean first = true;

    sb.append("fullText:");
    if (this.fullText == null) {
      sb.append("null");
    } else {
      sb.append(this.fullText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("document:");
    if (this.document == null) {
      sb.append("null");
    } else {
      sb.append(this.document);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("charMapping:");
    if (this.charMapping == null) {
      sb.append("null");
    } else {
      sb.append(this.charMapping);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("charToTokenOffset:");
    if (this.charToTokenOffset == null) {
      sb.append("null");
    } else {
      sb.append(this.charToTokenOffset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startIndices:");
    if (this.startIndices == null) {
      sb.append("null");
    } else {
      sb.append(this.startIndices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endIndices:");
    if (this.endIndices == null) {
      sb.append("null");
    } else {
      sb.append(this.endIndices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entityMentionsById:");
    if (this.entityMentionsById == null) {
      sb.append("null");
    } else {
      sb.append(this.entityMentionsById);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("canonicalEntityMentionsById:");
    if (this.canonicalEntityMentionsById == null) {
      sb.append("null");
    } else {
      sb.append(this.canonicalEntityMentionsById);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isProxy:");
    sb.append(this.isProxy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventsById:");
    if (this.eventsById == null) {
      sb.append("null");
    } else {
      sb.append(this.eventsById);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fullText == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fullText' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (document != null) {
      document.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EREDocumentStandardSchemeFactory implements SchemeFactory {
    public EREDocumentStandardScheme getScheme() {
      return new EREDocumentStandardScheme();
    }
  }

  private static class EREDocumentStandardScheme extends StandardScheme<EREDocument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EREDocument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullText = iprot.readString();
              struct.setFullTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.document = new thrift.adept.common.Document();
              struct.document.read(iprot);
              struct.setDocumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAR_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.charMapping = new HashMap<Long,Long>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  long _key2; // required
                  long _val3; // required
                  _key2 = iprot.readI64();
                  _val3 = iprot.readI64();
                  struct.charMapping.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setCharMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHAR_TO_TOKEN_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.charToTokenOffset = new HashMap<Long,Long>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  long _key6; // required
                  long _val7; // required
                  _key6 = iprot.readI64();
                  _val7 = iprot.readI64();
                  struct.charToTokenOffset.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setCharToTokenOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_INDICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.startIndices = new ArrayList<Integer>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  int _elem10; // required
                  _elem10 = iprot.readI32();
                  struct.startIndices.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setStartIndicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_INDICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.endIndices = new ArrayList<Integer>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  int _elem13; // required
                  _elem13 = iprot.readI32();
                  struct.endIndices.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setEndIndicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENTITY_MENTIONS_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin();
                struct.entityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>(2*_map14.size);
                for (int _i15 = 0; _i15 < _map14.size; ++_i15)
                {
                  long _key16; // required
                  thrift.adept.common.EntityMention _val17; // required
                  _key16 = iprot.readI64();
                  _val17 = new thrift.adept.common.EntityMention();
                  _val17.read(iprot);
                  struct.entityMentionsById.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              struct.setEntityMentionsByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CANONICAL_ENTITY_MENTIONS_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.canonicalEntityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>(2*_map18.size);
                for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                {
                  long _key20; // required
                  thrift.adept.common.EntityMention _val21; // required
                  _key20 = iprot.readI64();
                  _val21 = new thrift.adept.common.EntityMention();
                  _val21.read(iprot);
                  struct.canonicalEntityMentionsById.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setCanonicalEntityMentionsByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_PROXY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isProxy = iprot.readBool();
              struct.setIsProxyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EVENTS_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map22 = iprot.readMapBegin();
                struct.eventsById = new HashMap<Long,List<thrift.adept.common.Event>>(2*_map22.size);
                for (int _i23 = 0; _i23 < _map22.size; ++_i23)
                {
                  long _key24; // required
                  List<thrift.adept.common.Event> _val25; // required
                  _key24 = iprot.readI64();
                  {
                    org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                    _val25 = new ArrayList<thrift.adept.common.Event>(_list26.size);
                    for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                    {
                      thrift.adept.common.Event _elem28; // required
                      _elem28 = new thrift.adept.common.Event();
                      _elem28.read(iprot);
                      _val25.add(_elem28);
                    }
                    iprot.readListEnd();
                  }
                  struct.eventsById.put(_key24, _val25);
                }
                iprot.readMapEnd();
              }
              struct.setEventsByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EREDocument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fullText != null) {
        oprot.writeFieldBegin(FULL_TEXT_FIELD_DESC);
        oprot.writeString(struct.fullText);
        oprot.writeFieldEnd();
      }
      if (struct.document != null) {
        oprot.writeFieldBegin(DOCUMENT_FIELD_DESC);
        struct.document.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.charMapping != null) {
        oprot.writeFieldBegin(CHAR_MAPPING_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, struct.charMapping.size()));
          for (Map.Entry<Long, Long> _iter29 : struct.charMapping.entrySet())
          {
            oprot.writeI64(_iter29.getKey());
            oprot.writeI64(_iter29.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.charToTokenOffset != null) {
        oprot.writeFieldBegin(CHAR_TO_TOKEN_OFFSET_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, struct.charToTokenOffset.size()));
          for (Map.Entry<Long, Long> _iter30 : struct.charToTokenOffset.entrySet())
          {
            oprot.writeI64(_iter30.getKey());
            oprot.writeI64(_iter30.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.startIndices != null) {
        oprot.writeFieldBegin(START_INDICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.startIndices.size()));
          for (int _iter31 : struct.startIndices)
          {
            oprot.writeI32(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.endIndices != null) {
        oprot.writeFieldBegin(END_INDICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.endIndices.size()));
          for (int _iter32 : struct.endIndices)
          {
            oprot.writeI32(_iter32);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.entityMentionsById != null) {
        oprot.writeFieldBegin(ENTITY_MENTIONS_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.entityMentionsById.size()));
          for (Map.Entry<Long, thrift.adept.common.EntityMention> _iter33 : struct.entityMentionsById.entrySet())
          {
            oprot.writeI64(_iter33.getKey());
            _iter33.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.canonicalEntityMentionsById != null) {
        oprot.writeFieldBegin(CANONICAL_ENTITY_MENTIONS_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.canonicalEntityMentionsById.size()));
          for (Map.Entry<Long, thrift.adept.common.EntityMention> _iter34 : struct.canonicalEntityMentionsById.entrySet())
          {
            oprot.writeI64(_iter34.getKey());
            _iter34.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PROXY_FIELD_DESC);
      oprot.writeBool(struct.isProxy);
      oprot.writeFieldEnd();
      if (struct.eventsById != null) {
        oprot.writeFieldBegin(EVENTS_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, struct.eventsById.size()));
          for (Map.Entry<Long, List<thrift.adept.common.Event>> _iter35 : struct.eventsById.entrySet())
          {
            oprot.writeI64(_iter35.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter35.getValue().size()));
              for (thrift.adept.common.Event _iter36 : _iter35.getValue())
              {
                _iter36.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EREDocumentTupleSchemeFactory implements SchemeFactory {
    public EREDocumentTupleScheme getScheme() {
      return new EREDocumentTupleScheme();
    }
  }

  private static class EREDocumentTupleScheme extends TupleScheme<EREDocument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EREDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.fullText);
      BitSet optionals = new BitSet();
      if (struct.isSetDocument()) {
        optionals.set(0);
      }
      if (struct.isSetCharMapping()) {
        optionals.set(1);
      }
      if (struct.isSetCharToTokenOffset()) {
        optionals.set(2);
      }
      if (struct.isSetStartIndices()) {
        optionals.set(3);
      }
      if (struct.isSetEndIndices()) {
        optionals.set(4);
      }
      if (struct.isSetEntityMentionsById()) {
        optionals.set(5);
      }
      if (struct.isSetCanonicalEntityMentionsById()) {
        optionals.set(6);
      }
      if (struct.isSetIsProxy()) {
        optionals.set(7);
      }
      if (struct.isSetEventsById()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDocument()) {
        struct.document.write(oprot);
      }
      if (struct.isSetCharMapping()) {
        {
          oprot.writeI32(struct.charMapping.size());
          for (Map.Entry<Long, Long> _iter37 : struct.charMapping.entrySet())
          {
            oprot.writeI64(_iter37.getKey());
            oprot.writeI64(_iter37.getValue());
          }
        }
      }
      if (struct.isSetCharToTokenOffset()) {
        {
          oprot.writeI32(struct.charToTokenOffset.size());
          for (Map.Entry<Long, Long> _iter38 : struct.charToTokenOffset.entrySet())
          {
            oprot.writeI64(_iter38.getKey());
            oprot.writeI64(_iter38.getValue());
          }
        }
      }
      if (struct.isSetStartIndices()) {
        {
          oprot.writeI32(struct.startIndices.size());
          for (int _iter39 : struct.startIndices)
          {
            oprot.writeI32(_iter39);
          }
        }
      }
      if (struct.isSetEndIndices()) {
        {
          oprot.writeI32(struct.endIndices.size());
          for (int _iter40 : struct.endIndices)
          {
            oprot.writeI32(_iter40);
          }
        }
      }
      if (struct.isSetEntityMentionsById()) {
        {
          oprot.writeI32(struct.entityMentionsById.size());
          for (Map.Entry<Long, thrift.adept.common.EntityMention> _iter41 : struct.entityMentionsById.entrySet())
          {
            oprot.writeI64(_iter41.getKey());
            _iter41.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetCanonicalEntityMentionsById()) {
        {
          oprot.writeI32(struct.canonicalEntityMentionsById.size());
          for (Map.Entry<Long, thrift.adept.common.EntityMention> _iter42 : struct.canonicalEntityMentionsById.entrySet())
          {
            oprot.writeI64(_iter42.getKey());
            _iter42.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetIsProxy()) {
        oprot.writeBool(struct.isProxy);
      }
      if (struct.isSetEventsById()) {
        {
          oprot.writeI32(struct.eventsById.size());
          for (Map.Entry<Long, List<thrift.adept.common.Event>> _iter43 : struct.eventsById.entrySet())
          {
            oprot.writeI64(_iter43.getKey());
            {
              oprot.writeI32(_iter43.getValue().size());
              for (thrift.adept.common.Event _iter44 : _iter43.getValue())
              {
                _iter44.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EREDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fullText = iprot.readString();
      struct.setFullTextIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.document = new thrift.adept.common.Document();
        struct.document.read(iprot);
        struct.setDocumentIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map45 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.charMapping = new HashMap<Long,Long>(2*_map45.size);
          for (int _i46 = 0; _i46 < _map45.size; ++_i46)
          {
            long _key47; // required
            long _val48; // required
            _key47 = iprot.readI64();
            _val48 = iprot.readI64();
            struct.charMapping.put(_key47, _val48);
          }
        }
        struct.setCharMappingIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map49 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.charToTokenOffset = new HashMap<Long,Long>(2*_map49.size);
          for (int _i50 = 0; _i50 < _map49.size; ++_i50)
          {
            long _key51; // required
            long _val52; // required
            _key51 = iprot.readI64();
            _val52 = iprot.readI64();
            struct.charToTokenOffset.put(_key51, _val52);
          }
        }
        struct.setCharToTokenOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.startIndices = new ArrayList<Integer>(_list53.size);
          for (int _i54 = 0; _i54 < _list53.size; ++_i54)
          {
            int _elem55; // required
            _elem55 = iprot.readI32();
            struct.startIndices.add(_elem55);
          }
        }
        struct.setStartIndicesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list56 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.endIndices = new ArrayList<Integer>(_list56.size);
          for (int _i57 = 0; _i57 < _list56.size; ++_i57)
          {
            int _elem58; // required
            _elem58 = iprot.readI32();
            struct.endIndices.add(_elem58);
          }
        }
        struct.setEndIndicesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map59 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>(2*_map59.size);
          for (int _i60 = 0; _i60 < _map59.size; ++_i60)
          {
            long _key61; // required
            thrift.adept.common.EntityMention _val62; // required
            _key61 = iprot.readI64();
            _val62 = new thrift.adept.common.EntityMention();
            _val62.read(iprot);
            struct.entityMentionsById.put(_key61, _val62);
          }
        }
        struct.setEntityMentionsByIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map63 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.canonicalEntityMentionsById = new HashMap<Long,thrift.adept.common.EntityMention>(2*_map63.size);
          for (int _i64 = 0; _i64 < _map63.size; ++_i64)
          {
            long _key65; // required
            thrift.adept.common.EntityMention _val66; // required
            _key65 = iprot.readI64();
            _val66 = new thrift.adept.common.EntityMention();
            _val66.read(iprot);
            struct.canonicalEntityMentionsById.put(_key65, _val66);
          }
        }
        struct.setCanonicalEntityMentionsByIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isProxy = iprot.readBool();
        struct.setIsProxyIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map67 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.eventsById = new HashMap<Long,List<thrift.adept.common.Event>>(2*_map67.size);
          for (int _i68 = 0; _i68 < _map67.size; ++_i68)
          {
            long _key69; // required
            List<thrift.adept.common.Event> _val70; // required
            _key69 = iprot.readI64();
            {
              org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val70 = new ArrayList<thrift.adept.common.Event>(_list71.size);
              for (int _i72 = 0; _i72 < _list71.size; ++_i72)
              {
                thrift.adept.common.Event _elem73; // required
                _elem73 = new thrift.adept.common.Event();
                _elem73.read(iprot);
                _val70.add(_elem73);
              }
            }
            struct.eventsById.put(_key69, _val70);
          }
        }
        struct.setEventsByIdIsSet(true);
      }
    }
  }

}

