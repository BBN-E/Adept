/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.adept.io;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Reader {

  public interface Iface {

    public String readConversationFile(String path, List<thrift.adept.common.Utterance> utterances, List<String> speakers, String title) throws org.apache.thrift.TException;

    public EREDocument readEREFile(String path, String docId) throws org.apache.thrift.TException;

    public thrift.adept.common.HltContentContainer EREtoHltContentContainer(String EREPath, String XMLPath) throws org.apache.thrift.TException;

    public List<thrift.adept.common.Sentence> getSentences(CoNLLDocument conllDoc) throws org.apache.thrift.TException;

    public CoNLLDocument readCoNLLFile(String path) throws org.apache.thrift.TException;

    public thrift.adept.common.HltContentContainer CoNLLtoHltContentContainer(String filepath) throws org.apache.thrift.TException;

    public String getAbsolutePathFromClasspathOrFileSystem(String name) throws org.apache.thrift.TException;

    public String readFileIntoString(String path) throws org.apache.thrift.TException;

    public String readFileIntoLines(String filename, List<String> lines) throws org.apache.thrift.TException;

    public List<String> fileToLines(String filename) throws org.apache.thrift.TException;

    public String checkSurrogates(String text) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void readConversationFile(String path, List<thrift.adept.common.Utterance> utterances, List<String> speakers, String title, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readConversationFile_call> resultHandler) throws org.apache.thrift.TException;

    public void readEREFile(String path, String docId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readEREFile_call> resultHandler) throws org.apache.thrift.TException;

    public void EREtoHltContentContainer(String EREPath, String XMLPath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.EREtoHltContentContainer_call> resultHandler) throws org.apache.thrift.TException;

    public void getSentences(CoNLLDocument conllDoc, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSentences_call> resultHandler) throws org.apache.thrift.TException;

    public void readCoNLLFile(String path, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readCoNLLFile_call> resultHandler) throws org.apache.thrift.TException;

    public void CoNLLtoHltContentContainer(String filepath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CoNLLtoHltContentContainer_call> resultHandler) throws org.apache.thrift.TException;

    public void getAbsolutePathFromClasspathOrFileSystem(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAbsolutePathFromClasspathOrFileSystem_call> resultHandler) throws org.apache.thrift.TException;

    public void readFileIntoString(String path, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readFileIntoString_call> resultHandler) throws org.apache.thrift.TException;

    public void readFileIntoLines(String filename, List<String> lines, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readFileIntoLines_call> resultHandler) throws org.apache.thrift.TException;

    public void fileToLines(String filename, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fileToLines_call> resultHandler) throws org.apache.thrift.TException;

    public void checkSurrogates(String text, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkSurrogates_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String readConversationFile(String path, List<thrift.adept.common.Utterance> utterances, List<String> speakers, String title) throws org.apache.thrift.TException
    {
      send_readConversationFile(path, utterances, speakers, title);
      return recv_readConversationFile();
    }

    public void send_readConversationFile(String path, List<thrift.adept.common.Utterance> utterances, List<String> speakers, String title) throws org.apache.thrift.TException
    {
      readConversationFile_args args = new readConversationFile_args();
      args.setPath(path);
      args.setUtterances(utterances);
      args.setSpeakers(speakers);
      args.setTitle(title);
      sendBase("readConversationFile", args);
    }

    public String recv_readConversationFile() throws org.apache.thrift.TException
    {
      readConversationFile_result result = new readConversationFile_result();
      receiveBase(result, "readConversationFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readConversationFile failed: unknown result");
    }

    public EREDocument readEREFile(String path, String docId) throws org.apache.thrift.TException
    {
      send_readEREFile(path, docId);
      return recv_readEREFile();
    }

    public void send_readEREFile(String path, String docId) throws org.apache.thrift.TException
    {
      readEREFile_args args = new readEREFile_args();
      args.setPath(path);
      args.setDocId(docId);
      sendBase("readEREFile", args);
    }

    public EREDocument recv_readEREFile() throws org.apache.thrift.TException
    {
      readEREFile_result result = new readEREFile_result();
      receiveBase(result, "readEREFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readEREFile failed: unknown result");
    }

    public thrift.adept.common.HltContentContainer EREtoHltContentContainer(String EREPath, String XMLPath) throws org.apache.thrift.TException
    {
      send_EREtoHltContentContainer(EREPath, XMLPath);
      return recv_EREtoHltContentContainer();
    }

    public void send_EREtoHltContentContainer(String EREPath, String XMLPath) throws org.apache.thrift.TException
    {
      EREtoHltContentContainer_args args = new EREtoHltContentContainer_args();
      args.setEREPath(EREPath);
      args.setXMLPath(XMLPath);
      sendBase("EREtoHltContentContainer", args);
    }

    public thrift.adept.common.HltContentContainer recv_EREtoHltContentContainer() throws org.apache.thrift.TException
    {
      EREtoHltContentContainer_result result = new EREtoHltContentContainer_result();
      receiveBase(result, "EREtoHltContentContainer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "EREtoHltContentContainer failed: unknown result");
    }

    public List<thrift.adept.common.Sentence> getSentences(CoNLLDocument conllDoc) throws org.apache.thrift.TException
    {
      send_getSentences(conllDoc);
      return recv_getSentences();
    }

    public void send_getSentences(CoNLLDocument conllDoc) throws org.apache.thrift.TException
    {
      getSentences_args args = new getSentences_args();
      args.setConllDoc(conllDoc);
      sendBase("getSentences", args);
    }

    public List<thrift.adept.common.Sentence> recv_getSentences() throws org.apache.thrift.TException
    {
      getSentences_result result = new getSentences_result();
      receiveBase(result, "getSentences");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSentences failed: unknown result");
    }

    public CoNLLDocument readCoNLLFile(String path) throws org.apache.thrift.TException
    {
      send_readCoNLLFile(path);
      return recv_readCoNLLFile();
    }

    public void send_readCoNLLFile(String path) throws org.apache.thrift.TException
    {
      readCoNLLFile_args args = new readCoNLLFile_args();
      args.setPath(path);
      sendBase("readCoNLLFile", args);
    }

    public CoNLLDocument recv_readCoNLLFile() throws org.apache.thrift.TException
    {
      readCoNLLFile_result result = new readCoNLLFile_result();
      receiveBase(result, "readCoNLLFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readCoNLLFile failed: unknown result");
    }

    public thrift.adept.common.HltContentContainer CoNLLtoHltContentContainer(String filepath) throws org.apache.thrift.TException
    {
      send_CoNLLtoHltContentContainer(filepath);
      return recv_CoNLLtoHltContentContainer();
    }

    public void send_CoNLLtoHltContentContainer(String filepath) throws org.apache.thrift.TException
    {
      CoNLLtoHltContentContainer_args args = new CoNLLtoHltContentContainer_args();
      args.setFilepath(filepath);
      sendBase("CoNLLtoHltContentContainer", args);
    }

    public thrift.adept.common.HltContentContainer recv_CoNLLtoHltContentContainer() throws org.apache.thrift.TException
    {
      CoNLLtoHltContentContainer_result result = new CoNLLtoHltContentContainer_result();
      receiveBase(result, "CoNLLtoHltContentContainer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CoNLLtoHltContentContainer failed: unknown result");
    }

    public String getAbsolutePathFromClasspathOrFileSystem(String name) throws org.apache.thrift.TException
    {
      send_getAbsolutePathFromClasspathOrFileSystem(name);
      return recv_getAbsolutePathFromClasspathOrFileSystem();
    }

    public void send_getAbsolutePathFromClasspathOrFileSystem(String name) throws org.apache.thrift.TException
    {
      getAbsolutePathFromClasspathOrFileSystem_args args = new getAbsolutePathFromClasspathOrFileSystem_args();
      args.setName(name);
      sendBase("getAbsolutePathFromClasspathOrFileSystem", args);
    }

    public String recv_getAbsolutePathFromClasspathOrFileSystem() throws org.apache.thrift.TException
    {
      getAbsolutePathFromClasspathOrFileSystem_result result = new getAbsolutePathFromClasspathOrFileSystem_result();
      receiveBase(result, "getAbsolutePathFromClasspathOrFileSystem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAbsolutePathFromClasspathOrFileSystem failed: unknown result");
    }

    public String readFileIntoString(String path) throws org.apache.thrift.TException
    {
      send_readFileIntoString(path);
      return recv_readFileIntoString();
    }

    public void send_readFileIntoString(String path) throws org.apache.thrift.TException
    {
      readFileIntoString_args args = new readFileIntoString_args();
      args.setPath(path);
      sendBase("readFileIntoString", args);
    }

    public String recv_readFileIntoString() throws org.apache.thrift.TException
    {
      readFileIntoString_result result = new readFileIntoString_result();
      receiveBase(result, "readFileIntoString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readFileIntoString failed: unknown result");
    }

    public String readFileIntoLines(String filename, List<String> lines) throws org.apache.thrift.TException
    {
      send_readFileIntoLines(filename, lines);
      return recv_readFileIntoLines();
    }

    public void send_readFileIntoLines(String filename, List<String> lines) throws org.apache.thrift.TException
    {
      readFileIntoLines_args args = new readFileIntoLines_args();
      args.setFilename(filename);
      args.setLines(lines);
      sendBase("readFileIntoLines", args);
    }

    public String recv_readFileIntoLines() throws org.apache.thrift.TException
    {
      readFileIntoLines_result result = new readFileIntoLines_result();
      receiveBase(result, "readFileIntoLines");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readFileIntoLines failed: unknown result");
    }

    public List<String> fileToLines(String filename) throws org.apache.thrift.TException
    {
      send_fileToLines(filename);
      return recv_fileToLines();
    }

    public void send_fileToLines(String filename) throws org.apache.thrift.TException
    {
      fileToLines_args args = new fileToLines_args();
      args.setFilename(filename);
      sendBase("fileToLines", args);
    }

    public List<String> recv_fileToLines() throws org.apache.thrift.TException
    {
      fileToLines_result result = new fileToLines_result();
      receiveBase(result, "fileToLines");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fileToLines failed: unknown result");
    }

    public String checkSurrogates(String text) throws org.apache.thrift.TException
    {
      send_checkSurrogates(text);
      return recv_checkSurrogates();
    }

    public void send_checkSurrogates(String text) throws org.apache.thrift.TException
    {
      checkSurrogates_args args = new checkSurrogates_args();
      args.setText(text);
      sendBase("checkSurrogates", args);
    }

    public String recv_checkSurrogates() throws org.apache.thrift.TException
    {
      checkSurrogates_result result = new checkSurrogates_result();
      receiveBase(result, "checkSurrogates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkSurrogates failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void readConversationFile(String path, List<thrift.adept.common.Utterance> utterances, List<String> speakers, String title, org.apache.thrift.async.AsyncMethodCallback<readConversationFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readConversationFile_call method_call = new readConversationFile_call(path, utterances, speakers, title, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readConversationFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      private List<thrift.adept.common.Utterance> utterances;
      private List<String> speakers;
      private String title;
      public readConversationFile_call(String path, List<thrift.adept.common.Utterance> utterances, List<String> speakers, String title, org.apache.thrift.async.AsyncMethodCallback<readConversationFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.utterances = utterances;
        this.speakers = speakers;
        this.title = title;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readConversationFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readConversationFile_args args = new readConversationFile_args();
        args.setPath(path);
        args.setUtterances(utterances);
        args.setSpeakers(speakers);
        args.setTitle(title);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readConversationFile();
      }
    }

    public void readEREFile(String path, String docId, org.apache.thrift.async.AsyncMethodCallback<readEREFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readEREFile_call method_call = new readEREFile_call(path, docId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readEREFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      private String docId;
      public readEREFile_call(String path, String docId, org.apache.thrift.async.AsyncMethodCallback<readEREFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.docId = docId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readEREFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readEREFile_args args = new readEREFile_args();
        args.setPath(path);
        args.setDocId(docId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EREDocument getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readEREFile();
      }
    }

    public void EREtoHltContentContainer(String EREPath, String XMLPath, org.apache.thrift.async.AsyncMethodCallback<EREtoHltContentContainer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      EREtoHltContentContainer_call method_call = new EREtoHltContentContainer_call(EREPath, XMLPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class EREtoHltContentContainer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String EREPath;
      private String XMLPath;
      public EREtoHltContentContainer_call(String EREPath, String XMLPath, org.apache.thrift.async.AsyncMethodCallback<EREtoHltContentContainer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EREPath = EREPath;
        this.XMLPath = XMLPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("EREtoHltContentContainer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        EREtoHltContentContainer_args args = new EREtoHltContentContainer_args();
        args.setEREPath(EREPath);
        args.setXMLPath(XMLPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public thrift.adept.common.HltContentContainer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_EREtoHltContentContainer();
      }
    }

    public void getSentences(CoNLLDocument conllDoc, org.apache.thrift.async.AsyncMethodCallback<getSentences_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSentences_call method_call = new getSentences_call(conllDoc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSentences_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CoNLLDocument conllDoc;
      public getSentences_call(CoNLLDocument conllDoc, org.apache.thrift.async.AsyncMethodCallback<getSentences_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.conllDoc = conllDoc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSentences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSentences_args args = new getSentences_args();
        args.setConllDoc(conllDoc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<thrift.adept.common.Sentence> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSentences();
      }
    }

    public void readCoNLLFile(String path, org.apache.thrift.async.AsyncMethodCallback<readCoNLLFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readCoNLLFile_call method_call = new readCoNLLFile_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readCoNLLFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      public readCoNLLFile_call(String path, org.apache.thrift.async.AsyncMethodCallback<readCoNLLFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readCoNLLFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readCoNLLFile_args args = new readCoNLLFile_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CoNLLDocument getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readCoNLLFile();
      }
    }

    public void CoNLLtoHltContentContainer(String filepath, org.apache.thrift.async.AsyncMethodCallback<CoNLLtoHltContentContainer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CoNLLtoHltContentContainer_call method_call = new CoNLLtoHltContentContainer_call(filepath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CoNLLtoHltContentContainer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filepath;
      public CoNLLtoHltContentContainer_call(String filepath, org.apache.thrift.async.AsyncMethodCallback<CoNLLtoHltContentContainer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filepath = filepath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CoNLLtoHltContentContainer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CoNLLtoHltContentContainer_args args = new CoNLLtoHltContentContainer_args();
        args.setFilepath(filepath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public thrift.adept.common.HltContentContainer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CoNLLtoHltContentContainer();
      }
    }

    public void getAbsolutePathFromClasspathOrFileSystem(String name, org.apache.thrift.async.AsyncMethodCallback<getAbsolutePathFromClasspathOrFileSystem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAbsolutePathFromClasspathOrFileSystem_call method_call = new getAbsolutePathFromClasspathOrFileSystem_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAbsolutePathFromClasspathOrFileSystem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public getAbsolutePathFromClasspathOrFileSystem_call(String name, org.apache.thrift.async.AsyncMethodCallback<getAbsolutePathFromClasspathOrFileSystem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAbsolutePathFromClasspathOrFileSystem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAbsolutePathFromClasspathOrFileSystem_args args = new getAbsolutePathFromClasspathOrFileSystem_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAbsolutePathFromClasspathOrFileSystem();
      }
    }

    public void readFileIntoString(String path, org.apache.thrift.async.AsyncMethodCallback<readFileIntoString_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readFileIntoString_call method_call = new readFileIntoString_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readFileIntoString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      public readFileIntoString_call(String path, org.apache.thrift.async.AsyncMethodCallback<readFileIntoString_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readFileIntoString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readFileIntoString_args args = new readFileIntoString_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readFileIntoString();
      }
    }

    public void readFileIntoLines(String filename, List<String> lines, org.apache.thrift.async.AsyncMethodCallback<readFileIntoLines_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readFileIntoLines_call method_call = new readFileIntoLines_call(filename, lines, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readFileIntoLines_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filename;
      private List<String> lines;
      public readFileIntoLines_call(String filename, List<String> lines, org.apache.thrift.async.AsyncMethodCallback<readFileIntoLines_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename = filename;
        this.lines = lines;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readFileIntoLines", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readFileIntoLines_args args = new readFileIntoLines_args();
        args.setFilename(filename);
        args.setLines(lines);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readFileIntoLines();
      }
    }

    public void fileToLines(String filename, org.apache.thrift.async.AsyncMethodCallback<fileToLines_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileToLines_call method_call = new fileToLines_call(filename, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileToLines_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filename;
      public fileToLines_call(String filename, org.apache.thrift.async.AsyncMethodCallback<fileToLines_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename = filename;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileToLines", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fileToLines_args args = new fileToLines_args();
        args.setFilename(filename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fileToLines();
      }
    }

    public void checkSurrogates(String text, org.apache.thrift.async.AsyncMethodCallback<checkSurrogates_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkSurrogates_call method_call = new checkSurrogates_call(text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkSurrogates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String text;
      public checkSurrogates_call(String text, org.apache.thrift.async.AsyncMethodCallback<checkSurrogates_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.text = text;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkSurrogates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkSurrogates_args args = new checkSurrogates_args();
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkSurrogates();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("readConversationFile", new readConversationFile());
      processMap.put("readEREFile", new readEREFile());
      processMap.put("EREtoHltContentContainer", new EREtoHltContentContainer());
      processMap.put("getSentences", new getSentences());
      processMap.put("readCoNLLFile", new readCoNLLFile());
      processMap.put("CoNLLtoHltContentContainer", new CoNLLtoHltContentContainer());
      processMap.put("getAbsolutePathFromClasspathOrFileSystem", new getAbsolutePathFromClasspathOrFileSystem());
      processMap.put("readFileIntoString", new readFileIntoString());
      processMap.put("readFileIntoLines", new readFileIntoLines());
      processMap.put("fileToLines", new fileToLines());
      processMap.put("checkSurrogates", new checkSurrogates());
      return processMap;
    }

    public static class readConversationFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readConversationFile_args> {
      public readConversationFile() {
        super("readConversationFile");
      }

      public readConversationFile_args getEmptyArgsInstance() {
        return new readConversationFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readConversationFile_result getResult(I iface, readConversationFile_args args) throws org.apache.thrift.TException {
        readConversationFile_result result = new readConversationFile_result();
        result.success = iface.readConversationFile(args.path, args.utterances, args.speakers, args.title);
        return result;
      }
    }

    public static class readEREFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readEREFile_args> {
      public readEREFile() {
        super("readEREFile");
      }

      public readEREFile_args getEmptyArgsInstance() {
        return new readEREFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readEREFile_result getResult(I iface, readEREFile_args args) throws org.apache.thrift.TException {
        readEREFile_result result = new readEREFile_result();
        result.success = iface.readEREFile(args.path, args.docId);
        return result;
      }
    }

    public static class EREtoHltContentContainer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, EREtoHltContentContainer_args> {
      public EREtoHltContentContainer() {
        super("EREtoHltContentContainer");
      }

      public EREtoHltContentContainer_args getEmptyArgsInstance() {
        return new EREtoHltContentContainer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public EREtoHltContentContainer_result getResult(I iface, EREtoHltContentContainer_args args) throws org.apache.thrift.TException {
        EREtoHltContentContainer_result result = new EREtoHltContentContainer_result();
        result.success = iface.EREtoHltContentContainer(args.EREPath, args.XMLPath);
        return result;
      }
    }

    public static class getSentences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSentences_args> {
      public getSentences() {
        super("getSentences");
      }

      public getSentences_args getEmptyArgsInstance() {
        return new getSentences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSentences_result getResult(I iface, getSentences_args args) throws org.apache.thrift.TException {
        getSentences_result result = new getSentences_result();
        result.success = iface.getSentences(args.conllDoc);
        return result;
      }
    }

    public static class readCoNLLFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readCoNLLFile_args> {
      public readCoNLLFile() {
        super("readCoNLLFile");
      }

      public readCoNLLFile_args getEmptyArgsInstance() {
        return new readCoNLLFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readCoNLLFile_result getResult(I iface, readCoNLLFile_args args) throws org.apache.thrift.TException {
        readCoNLLFile_result result = new readCoNLLFile_result();
        result.success = iface.readCoNLLFile(args.path);
        return result;
      }
    }

    public static class CoNLLtoHltContentContainer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CoNLLtoHltContentContainer_args> {
      public CoNLLtoHltContentContainer() {
        super("CoNLLtoHltContentContainer");
      }

      public CoNLLtoHltContentContainer_args getEmptyArgsInstance() {
        return new CoNLLtoHltContentContainer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CoNLLtoHltContentContainer_result getResult(I iface, CoNLLtoHltContentContainer_args args) throws org.apache.thrift.TException {
        CoNLLtoHltContentContainer_result result = new CoNLLtoHltContentContainer_result();
        result.success = iface.CoNLLtoHltContentContainer(args.filepath);
        return result;
      }
    }

    public static class getAbsolutePathFromClasspathOrFileSystem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAbsolutePathFromClasspathOrFileSystem_args> {
      public getAbsolutePathFromClasspathOrFileSystem() {
        super("getAbsolutePathFromClasspathOrFileSystem");
      }

      public getAbsolutePathFromClasspathOrFileSystem_args getEmptyArgsInstance() {
        return new getAbsolutePathFromClasspathOrFileSystem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAbsolutePathFromClasspathOrFileSystem_result getResult(I iface, getAbsolutePathFromClasspathOrFileSystem_args args) throws org.apache.thrift.TException {
        getAbsolutePathFromClasspathOrFileSystem_result result = new getAbsolutePathFromClasspathOrFileSystem_result();
        result.success = iface.getAbsolutePathFromClasspathOrFileSystem(args.name);
        return result;
      }
    }

    public static class readFileIntoString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readFileIntoString_args> {
      public readFileIntoString() {
        super("readFileIntoString");
      }

      public readFileIntoString_args getEmptyArgsInstance() {
        return new readFileIntoString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readFileIntoString_result getResult(I iface, readFileIntoString_args args) throws org.apache.thrift.TException {
        readFileIntoString_result result = new readFileIntoString_result();
        result.success = iface.readFileIntoString(args.path);
        return result;
      }
    }

    public static class readFileIntoLines<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readFileIntoLines_args> {
      public readFileIntoLines() {
        super("readFileIntoLines");
      }

      public readFileIntoLines_args getEmptyArgsInstance() {
        return new readFileIntoLines_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readFileIntoLines_result getResult(I iface, readFileIntoLines_args args) throws org.apache.thrift.TException {
        readFileIntoLines_result result = new readFileIntoLines_result();
        result.success = iface.readFileIntoLines(args.filename, args.lines);
        return result;
      }
    }

    public static class fileToLines<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileToLines_args> {
      public fileToLines() {
        super("fileToLines");
      }

      public fileToLines_args getEmptyArgsInstance() {
        return new fileToLines_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fileToLines_result getResult(I iface, fileToLines_args args) throws org.apache.thrift.TException {
        fileToLines_result result = new fileToLines_result();
        result.success = iface.fileToLines(args.filename);
        return result;
      }
    }

    public static class checkSurrogates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkSurrogates_args> {
      public checkSurrogates() {
        super("checkSurrogates");
      }

      public checkSurrogates_args getEmptyArgsInstance() {
        return new checkSurrogates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkSurrogates_result getResult(I iface, checkSurrogates_args args) throws org.apache.thrift.TException {
        checkSurrogates_result result = new checkSurrogates_result();
        result.success = iface.checkSurrogates(args.text);
        return result;
      }
    }

  }

  public static class readConversationFile_args implements org.apache.thrift.TBase<readConversationFile_args, readConversationFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readConversationFile_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UTTERANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("utterances", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField SPEAKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("speakers", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readConversationFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readConversationFile_argsTupleSchemeFactory());
    }

    public String path; // required
    public List<thrift.adept.common.Utterance> utterances; // required
    public List<String> speakers; // required
    public String title; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      UTTERANCES((short)2, "utterances"),
      SPEAKERS((short)3, "speakers"),
      TITLE((short)4, "title");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // UTTERANCES
            return UTTERANCES;
          case 3: // SPEAKERS
            return SPEAKERS;
          case 4: // TITLE
            return TITLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UTTERANCES, new org.apache.thrift.meta_data.FieldMetaData("utterances", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Utterance.class))));
      tmpMap.put(_Fields.SPEAKERS, new org.apache.thrift.meta_data.FieldMetaData("speakers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readConversationFile_args.class, metaDataMap);
    }

    public readConversationFile_args() {
    }

    public readConversationFile_args(
      String path,
      List<thrift.adept.common.Utterance> utterances,
      List<String> speakers,
      String title)
    {
      this();
      this.path = path;
      this.utterances = utterances;
      this.speakers = speakers;
      this.title = title;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readConversationFile_args(readConversationFile_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
      if (other.isSetUtterances()) {
        List<thrift.adept.common.Utterance> __this__utterances = new ArrayList<thrift.adept.common.Utterance>();
        for (thrift.adept.common.Utterance other_element : other.utterances) {
          __this__utterances.add(new thrift.adept.common.Utterance(other_element));
        }
        this.utterances = __this__utterances;
      }
      if (other.isSetSpeakers()) {
        List<String> __this__speakers = new ArrayList<String>();
        for (String other_element : other.speakers) {
          __this__speakers.add(other_element);
        }
        this.speakers = __this__speakers;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
    }

    public readConversationFile_args deepCopy() {
      return new readConversationFile_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      this.utterances = null;
      this.speakers = null;
      this.title = null;
    }

    public String getPath() {
      return this.path;
    }

    public readConversationFile_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public int getUtterancesSize() {
      return (this.utterances == null) ? 0 : this.utterances.size();
    }

    public java.util.Iterator<thrift.adept.common.Utterance> getUtterancesIterator() {
      return (this.utterances == null) ? null : this.utterances.iterator();
    }

    public void addToUtterances(thrift.adept.common.Utterance elem) {
      if (this.utterances == null) {
        this.utterances = new ArrayList<thrift.adept.common.Utterance>();
      }
      this.utterances.add(elem);
    }

    public List<thrift.adept.common.Utterance> getUtterances() {
      return this.utterances;
    }

    public readConversationFile_args setUtterances(List<thrift.adept.common.Utterance> utterances) {
      this.utterances = utterances;
      return this;
    }

    public void unsetUtterances() {
      this.utterances = null;
    }

    /** Returns true if field utterances is set (has been assigned a value) and false otherwise */
    public boolean isSetUtterances() {
      return this.utterances != null;
    }

    public void setUtterancesIsSet(boolean value) {
      if (!value) {
        this.utterances = null;
      }
    }

    public int getSpeakersSize() {
      return (this.speakers == null) ? 0 : this.speakers.size();
    }

    public java.util.Iterator<String> getSpeakersIterator() {
      return (this.speakers == null) ? null : this.speakers.iterator();
    }

    public void addToSpeakers(String elem) {
      if (this.speakers == null) {
        this.speakers = new ArrayList<String>();
      }
      this.speakers.add(elem);
    }

    public List<String> getSpeakers() {
      return this.speakers;
    }

    public readConversationFile_args setSpeakers(List<String> speakers) {
      this.speakers = speakers;
      return this;
    }

    public void unsetSpeakers() {
      this.speakers = null;
    }

    /** Returns true if field speakers is set (has been assigned a value) and false otherwise */
    public boolean isSetSpeakers() {
      return this.speakers != null;
    }

    public void setSpeakersIsSet(boolean value) {
      if (!value) {
        this.speakers = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public readConversationFile_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case UTTERANCES:
        if (value == null) {
          unsetUtterances();
        } else {
          setUtterances((List<thrift.adept.common.Utterance>)value);
        }
        break;

      case SPEAKERS:
        if (value == null) {
          unsetSpeakers();
        } else {
          setSpeakers((List<String>)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case UTTERANCES:
        return getUtterances();

      case SPEAKERS:
        return getSpeakers();

      case TITLE:
        return getTitle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case UTTERANCES:
        return isSetUtterances();
      case SPEAKERS:
        return isSetSpeakers();
      case TITLE:
        return isSetTitle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readConversationFile_args)
        return this.equals((readConversationFile_args)that);
      return false;
    }

    public boolean equals(readConversationFile_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_utterances = true && this.isSetUtterances();
      boolean that_present_utterances = true && that.isSetUtterances();
      if (this_present_utterances || that_present_utterances) {
        if (!(this_present_utterances && that_present_utterances))
          return false;
        if (!this.utterances.equals(that.utterances))
          return false;
      }

      boolean this_present_speakers = true && this.isSetSpeakers();
      boolean that_present_speakers = true && that.isSetSpeakers();
      if (this_present_speakers || that_present_speakers) {
        if (!(this_present_speakers && that_present_speakers))
          return false;
        if (!this.speakers.equals(that.speakers))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readConversationFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readConversationFile_args typedOther = (readConversationFile_args)other;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUtterances()).compareTo(typedOther.isSetUtterances());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUtterances()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utterances, typedOther.utterances);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpeakers()).compareTo(typedOther.isSetSpeakers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpeakers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speakers, typedOther.speakers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readConversationFile_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("utterances:");
      if (this.utterances == null) {
        sb.append("null");
      } else {
        sb.append(this.utterances);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("speakers:");
      if (this.speakers == null) {
        sb.append("null");
      } else {
        sb.append(this.speakers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readConversationFile_argsStandardSchemeFactory implements SchemeFactory {
      public readConversationFile_argsStandardScheme getScheme() {
        return new readConversationFile_argsStandardScheme();
      }
    }

    private static class readConversationFile_argsStandardScheme extends StandardScheme<readConversationFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readConversationFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UTTERANCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                  struct.utterances = new ArrayList<thrift.adept.common.Utterance>(_list174.size);
                  for (int _i175 = 0; _i175 < _list174.size; ++_i175)
                  {
                    thrift.adept.common.Utterance _elem176; // required
                    _elem176 = new thrift.adept.common.Utterance();
                    _elem176.read(iprot);
                    struct.utterances.add(_elem176);
                  }
                  iprot.readListEnd();
                }
                struct.setUtterancesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SPEAKERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list177 = iprot.readListBegin();
                  struct.speakers = new ArrayList<String>(_list177.size);
                  for (int _i178 = 0; _i178 < _list177.size; ++_i178)
                  {
                    String _elem179; // required
                    _elem179 = iprot.readString();
                    struct.speakers.add(_elem179);
                  }
                  iprot.readListEnd();
                }
                struct.setSpeakersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readConversationFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        if (struct.utterances != null) {
          oprot.writeFieldBegin(UTTERANCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.utterances.size()));
            for (thrift.adept.common.Utterance _iter180 : struct.utterances)
            {
              _iter180.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.speakers != null) {
          oprot.writeFieldBegin(SPEAKERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.speakers.size()));
            for (String _iter181 : struct.speakers)
            {
              oprot.writeString(_iter181);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readConversationFile_argsTupleSchemeFactory implements SchemeFactory {
      public readConversationFile_argsTupleScheme getScheme() {
        return new readConversationFile_argsTupleScheme();
      }
    }

    private static class readConversationFile_argsTupleScheme extends TupleScheme<readConversationFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readConversationFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetUtterances()) {
          optionals.set(1);
        }
        if (struct.isSetSpeakers()) {
          optionals.set(2);
        }
        if (struct.isSetTitle()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetUtterances()) {
          {
            oprot.writeI32(struct.utterances.size());
            for (thrift.adept.common.Utterance _iter182 : struct.utterances)
            {
              _iter182.write(oprot);
            }
          }
        }
        if (struct.isSetSpeakers()) {
          {
            oprot.writeI32(struct.speakers.size());
            for (String _iter183 : struct.speakers)
            {
              oprot.writeString(_iter183);
            }
          }
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readConversationFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list184 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.utterances = new ArrayList<thrift.adept.common.Utterance>(_list184.size);
            for (int _i185 = 0; _i185 < _list184.size; ++_i185)
            {
              thrift.adept.common.Utterance _elem186; // required
              _elem186 = new thrift.adept.common.Utterance();
              _elem186.read(iprot);
              struct.utterances.add(_elem186);
            }
          }
          struct.setUtterancesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.speakers = new ArrayList<String>(_list187.size);
            for (int _i188 = 0; _i188 < _list187.size; ++_i188)
            {
              String _elem189; // required
              _elem189 = iprot.readString();
              struct.speakers.add(_elem189);
            }
          }
          struct.setSpeakersIsSet(true);
        }
        if (incoming.get(3)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
      }
    }

  }

  public static class readConversationFile_result implements org.apache.thrift.TBase<readConversationFile_result, readConversationFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readConversationFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readConversationFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readConversationFile_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readConversationFile_result.class, metaDataMap);
    }

    public readConversationFile_result() {
    }

    public readConversationFile_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readConversationFile_result(readConversationFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public readConversationFile_result deepCopy() {
      return new readConversationFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public readConversationFile_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readConversationFile_result)
        return this.equals((readConversationFile_result)that);
      return false;
    }

    public boolean equals(readConversationFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readConversationFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readConversationFile_result typedOther = (readConversationFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readConversationFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readConversationFile_resultStandardSchemeFactory implements SchemeFactory {
      public readConversationFile_resultStandardScheme getScheme() {
        return new readConversationFile_resultStandardScheme();
      }
    }

    private static class readConversationFile_resultStandardScheme extends StandardScheme<readConversationFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readConversationFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readConversationFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readConversationFile_resultTupleSchemeFactory implements SchemeFactory {
      public readConversationFile_resultTupleScheme getScheme() {
        return new readConversationFile_resultTupleScheme();
      }
    }

    private static class readConversationFile_resultTupleScheme extends TupleScheme<readConversationFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readConversationFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readConversationFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readEREFile_args implements org.apache.thrift.TBase<readEREFile_args, readEREFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readEREFile_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("docId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readEREFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readEREFile_argsTupleSchemeFactory());
    }

    public String path; // required
    public String docId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      DOC_ID((short)2, "docId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // DOC_ID
            return DOC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOC_ID, new org.apache.thrift.meta_data.FieldMetaData("docId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readEREFile_args.class, metaDataMap);
    }

    public readEREFile_args() {
    }

    public readEREFile_args(
      String path,
      String docId)
    {
      this();
      this.path = path;
      this.docId = docId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readEREFile_args(readEREFile_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
      if (other.isSetDocId()) {
        this.docId = other.docId;
      }
    }

    public readEREFile_args deepCopy() {
      return new readEREFile_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      this.docId = null;
    }

    public String getPath() {
      return this.path;
    }

    public readEREFile_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public String getDocId() {
      return this.docId;
    }

    public readEREFile_args setDocId(String docId) {
      this.docId = docId;
      return this;
    }

    public void unsetDocId() {
      this.docId = null;
    }

    /** Returns true if field docId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocId() {
      return this.docId != null;
    }

    public void setDocIdIsSet(boolean value) {
      if (!value) {
        this.docId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case DOC_ID:
        if (value == null) {
          unsetDocId();
        } else {
          setDocId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case DOC_ID:
        return getDocId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case DOC_ID:
        return isSetDocId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readEREFile_args)
        return this.equals((readEREFile_args)that);
      return false;
    }

    public boolean equals(readEREFile_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_docId = true && this.isSetDocId();
      boolean that_present_docId = true && that.isSetDocId();
      if (this_present_docId || that_present_docId) {
        if (!(this_present_docId && that_present_docId))
          return false;
        if (!this.docId.equals(that.docId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readEREFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readEREFile_args typedOther = (readEREFile_args)other;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocId()).compareTo(typedOther.isSetDocId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docId, typedOther.docId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readEREFile_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("docId:");
      if (this.docId == null) {
        sb.append("null");
      } else {
        sb.append(this.docId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readEREFile_argsStandardSchemeFactory implements SchemeFactory {
      public readEREFile_argsStandardScheme getScheme() {
        return new readEREFile_argsStandardScheme();
      }
    }

    private static class readEREFile_argsStandardScheme extends StandardScheme<readEREFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readEREFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.docId = iprot.readString();
                struct.setDocIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readEREFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        if (struct.docId != null) {
          oprot.writeFieldBegin(DOC_ID_FIELD_DESC);
          oprot.writeString(struct.docId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readEREFile_argsTupleSchemeFactory implements SchemeFactory {
      public readEREFile_argsTupleScheme getScheme() {
        return new readEREFile_argsTupleScheme();
      }
    }

    private static class readEREFile_argsTupleScheme extends TupleScheme<readEREFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readEREFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetDocId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetDocId()) {
          oprot.writeString(struct.docId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readEREFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.docId = iprot.readString();
          struct.setDocIdIsSet(true);
        }
      }
    }

  }

  public static class readEREFile_result implements org.apache.thrift.TBase<readEREFile_result, readEREFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readEREFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readEREFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readEREFile_resultTupleSchemeFactory());
    }

    public EREDocument success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EREDocument.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readEREFile_result.class, metaDataMap);
    }

    public readEREFile_result() {
    }

    public readEREFile_result(
      EREDocument success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readEREFile_result(readEREFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new EREDocument(other.success);
      }
    }

    public readEREFile_result deepCopy() {
      return new readEREFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public EREDocument getSuccess() {
      return this.success;
    }

    public readEREFile_result setSuccess(EREDocument success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EREDocument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readEREFile_result)
        return this.equals((readEREFile_result)that);
      return false;
    }

    public boolean equals(readEREFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readEREFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readEREFile_result typedOther = (readEREFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readEREFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readEREFile_resultStandardSchemeFactory implements SchemeFactory {
      public readEREFile_resultStandardScheme getScheme() {
        return new readEREFile_resultStandardScheme();
      }
    }

    private static class readEREFile_resultStandardScheme extends StandardScheme<readEREFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readEREFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EREDocument();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readEREFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readEREFile_resultTupleSchemeFactory implements SchemeFactory {
      public readEREFile_resultTupleScheme getScheme() {
        return new readEREFile_resultTupleScheme();
      }
    }

    private static class readEREFile_resultTupleScheme extends TupleScheme<readEREFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readEREFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readEREFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new EREDocument();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class EREtoHltContentContainer_args implements org.apache.thrift.TBase<EREtoHltContentContainer_args, EREtoHltContentContainer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EREtoHltContentContainer_args");

    private static final org.apache.thrift.protocol.TField EREPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("EREPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField XMLPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("XMLPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EREtoHltContentContainer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EREtoHltContentContainer_argsTupleSchemeFactory());
    }

    public String EREPath; // required
    public String XMLPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EREPATH((short)1, "EREPath"),
      XMLPATH((short)2, "XMLPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EREPATH
            return EREPATH;
          case 2: // XMLPATH
            return XMLPATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EREPATH, new org.apache.thrift.meta_data.FieldMetaData("EREPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.XMLPATH, new org.apache.thrift.meta_data.FieldMetaData("XMLPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EREtoHltContentContainer_args.class, metaDataMap);
    }

    public EREtoHltContentContainer_args() {
    }

    public EREtoHltContentContainer_args(
      String EREPath,
      String XMLPath)
    {
      this();
      this.EREPath = EREPath;
      this.XMLPath = XMLPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EREtoHltContentContainer_args(EREtoHltContentContainer_args other) {
      if (other.isSetEREPath()) {
        this.EREPath = other.EREPath;
      }
      if (other.isSetXMLPath()) {
        this.XMLPath = other.XMLPath;
      }
    }

    public EREtoHltContentContainer_args deepCopy() {
      return new EREtoHltContentContainer_args(this);
    }

    @Override
    public void clear() {
      this.EREPath = null;
      this.XMLPath = null;
    }

    public String getEREPath() {
      return this.EREPath;
    }

    public EREtoHltContentContainer_args setEREPath(String EREPath) {
      this.EREPath = EREPath;
      return this;
    }

    public void unsetEREPath() {
      this.EREPath = null;
    }

    /** Returns true if field EREPath is set (has been assigned a value) and false otherwise */
    public boolean isSetEREPath() {
      return this.EREPath != null;
    }

    public void setEREPathIsSet(boolean value) {
      if (!value) {
        this.EREPath = null;
      }
    }

    public String getXMLPath() {
      return this.XMLPath;
    }

    public EREtoHltContentContainer_args setXMLPath(String XMLPath) {
      this.XMLPath = XMLPath;
      return this;
    }

    public void unsetXMLPath() {
      this.XMLPath = null;
    }

    /** Returns true if field XMLPath is set (has been assigned a value) and false otherwise */
    public boolean isSetXMLPath() {
      return this.XMLPath != null;
    }

    public void setXMLPathIsSet(boolean value) {
      if (!value) {
        this.XMLPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EREPATH:
        if (value == null) {
          unsetEREPath();
        } else {
          setEREPath((String)value);
        }
        break;

      case XMLPATH:
        if (value == null) {
          unsetXMLPath();
        } else {
          setXMLPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EREPATH:
        return getEREPath();

      case XMLPATH:
        return getXMLPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EREPATH:
        return isSetEREPath();
      case XMLPATH:
        return isSetXMLPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EREtoHltContentContainer_args)
        return this.equals((EREtoHltContentContainer_args)that);
      return false;
    }

    public boolean equals(EREtoHltContentContainer_args that) {
      if (that == null)
        return false;

      boolean this_present_EREPath = true && this.isSetEREPath();
      boolean that_present_EREPath = true && that.isSetEREPath();
      if (this_present_EREPath || that_present_EREPath) {
        if (!(this_present_EREPath && that_present_EREPath))
          return false;
        if (!this.EREPath.equals(that.EREPath))
          return false;
      }

      boolean this_present_XMLPath = true && this.isSetXMLPath();
      boolean that_present_XMLPath = true && that.isSetXMLPath();
      if (this_present_XMLPath || that_present_XMLPath) {
        if (!(this_present_XMLPath && that_present_XMLPath))
          return false;
        if (!this.XMLPath.equals(that.XMLPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(EREtoHltContentContainer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      EREtoHltContentContainer_args typedOther = (EREtoHltContentContainer_args)other;

      lastComparison = Boolean.valueOf(isSetEREPath()).compareTo(typedOther.isSetEREPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEREPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EREPath, typedOther.EREPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetXMLPath()).compareTo(typedOther.isSetXMLPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXMLPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.XMLPath, typedOther.XMLPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EREtoHltContentContainer_args(");
      boolean first = true;

      sb.append("EREPath:");
      if (this.EREPath == null) {
        sb.append("null");
      } else {
        sb.append(this.EREPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("XMLPath:");
      if (this.XMLPath == null) {
        sb.append("null");
      } else {
        sb.append(this.XMLPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EREtoHltContentContainer_argsStandardSchemeFactory implements SchemeFactory {
      public EREtoHltContentContainer_argsStandardScheme getScheme() {
        return new EREtoHltContentContainer_argsStandardScheme();
      }
    }

    private static class EREtoHltContentContainer_argsStandardScheme extends StandardScheme<EREtoHltContentContainer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EREtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EREPATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.EREPath = iprot.readString();
                struct.setEREPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // XMLPATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.XMLPath = iprot.readString();
                struct.setXMLPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EREtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.EREPath != null) {
          oprot.writeFieldBegin(EREPATH_FIELD_DESC);
          oprot.writeString(struct.EREPath);
          oprot.writeFieldEnd();
        }
        if (struct.XMLPath != null) {
          oprot.writeFieldBegin(XMLPATH_FIELD_DESC);
          oprot.writeString(struct.XMLPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EREtoHltContentContainer_argsTupleSchemeFactory implements SchemeFactory {
      public EREtoHltContentContainer_argsTupleScheme getScheme() {
        return new EREtoHltContentContainer_argsTupleScheme();
      }
    }

    private static class EREtoHltContentContainer_argsTupleScheme extends TupleScheme<EREtoHltContentContainer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EREtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEREPath()) {
          optionals.set(0);
        }
        if (struct.isSetXMLPath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEREPath()) {
          oprot.writeString(struct.EREPath);
        }
        if (struct.isSetXMLPath()) {
          oprot.writeString(struct.XMLPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EREtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.EREPath = iprot.readString();
          struct.setEREPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.XMLPath = iprot.readString();
          struct.setXMLPathIsSet(true);
        }
      }
    }

  }

  public static class EREtoHltContentContainer_result implements org.apache.thrift.TBase<EREtoHltContentContainer_result, EREtoHltContentContainer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EREtoHltContentContainer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new EREtoHltContentContainer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new EREtoHltContentContainer_resultTupleSchemeFactory());
    }

    public thrift.adept.common.HltContentContainer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.HltContentContainer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EREtoHltContentContainer_result.class, metaDataMap);
    }

    public EREtoHltContentContainer_result() {
    }

    public EREtoHltContentContainer_result(
      thrift.adept.common.HltContentContainer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public EREtoHltContentContainer_result(EREtoHltContentContainer_result other) {
      if (other.isSetSuccess()) {
        this.success = new thrift.adept.common.HltContentContainer(other.success);
      }
    }

    public EREtoHltContentContainer_result deepCopy() {
      return new EREtoHltContentContainer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public thrift.adept.common.HltContentContainer getSuccess() {
      return this.success;
    }

    public EREtoHltContentContainer_result setSuccess(thrift.adept.common.HltContentContainer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((thrift.adept.common.HltContentContainer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof EREtoHltContentContainer_result)
        return this.equals((EREtoHltContentContainer_result)that);
      return false;
    }

    public boolean equals(EREtoHltContentContainer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(EREtoHltContentContainer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      EREtoHltContentContainer_result typedOther = (EREtoHltContentContainer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("EREtoHltContentContainer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class EREtoHltContentContainer_resultStandardSchemeFactory implements SchemeFactory {
      public EREtoHltContentContainer_resultStandardScheme getScheme() {
        return new EREtoHltContentContainer_resultStandardScheme();
      }
    }

    private static class EREtoHltContentContainer_resultStandardScheme extends StandardScheme<EREtoHltContentContainer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, EREtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new thrift.adept.common.HltContentContainer();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, EREtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class EREtoHltContentContainer_resultTupleSchemeFactory implements SchemeFactory {
      public EREtoHltContentContainer_resultTupleScheme getScheme() {
        return new EREtoHltContentContainer_resultTupleScheme();
      }
    }

    private static class EREtoHltContentContainer_resultTupleScheme extends TupleScheme<EREtoHltContentContainer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, EREtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, EREtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new thrift.adept.common.HltContentContainer();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSentences_args implements org.apache.thrift.TBase<getSentences_args, getSentences_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSentences_args");

    private static final org.apache.thrift.protocol.TField CONLL_DOC_FIELD_DESC = new org.apache.thrift.protocol.TField("conllDoc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSentences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSentences_argsTupleSchemeFactory());
    }

    public CoNLLDocument conllDoc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONLL_DOC((short)1, "conllDoc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONLL_DOC
            return CONLL_DOC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONLL_DOC, new org.apache.thrift.meta_data.FieldMetaData("conllDoc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoNLLDocument.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSentences_args.class, metaDataMap);
    }

    public getSentences_args() {
    }

    public getSentences_args(
      CoNLLDocument conllDoc)
    {
      this();
      this.conllDoc = conllDoc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSentences_args(getSentences_args other) {
      if (other.isSetConllDoc()) {
        this.conllDoc = new CoNLLDocument(other.conllDoc);
      }
    }

    public getSentences_args deepCopy() {
      return new getSentences_args(this);
    }

    @Override
    public void clear() {
      this.conllDoc = null;
    }

    public CoNLLDocument getConllDoc() {
      return this.conllDoc;
    }

    public getSentences_args setConllDoc(CoNLLDocument conllDoc) {
      this.conllDoc = conllDoc;
      return this;
    }

    public void unsetConllDoc() {
      this.conllDoc = null;
    }

    /** Returns true if field conllDoc is set (has been assigned a value) and false otherwise */
    public boolean isSetConllDoc() {
      return this.conllDoc != null;
    }

    public void setConllDocIsSet(boolean value) {
      if (!value) {
        this.conllDoc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONLL_DOC:
        if (value == null) {
          unsetConllDoc();
        } else {
          setConllDoc((CoNLLDocument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONLL_DOC:
        return getConllDoc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONLL_DOC:
        return isSetConllDoc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSentences_args)
        return this.equals((getSentences_args)that);
      return false;
    }

    public boolean equals(getSentences_args that) {
      if (that == null)
        return false;

      boolean this_present_conllDoc = true && this.isSetConllDoc();
      boolean that_present_conllDoc = true && that.isSetConllDoc();
      if (this_present_conllDoc || that_present_conllDoc) {
        if (!(this_present_conllDoc && that_present_conllDoc))
          return false;
        if (!this.conllDoc.equals(that.conllDoc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSentences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSentences_args typedOther = (getSentences_args)other;

      lastComparison = Boolean.valueOf(isSetConllDoc()).compareTo(typedOther.isSetConllDoc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConllDoc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conllDoc, typedOther.conllDoc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSentences_args(");
      boolean first = true;

      sb.append("conllDoc:");
      if (this.conllDoc == null) {
        sb.append("null");
      } else {
        sb.append(this.conllDoc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (conllDoc != null) {
        conllDoc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSentences_argsStandardSchemeFactory implements SchemeFactory {
      public getSentences_argsStandardScheme getScheme() {
        return new getSentences_argsStandardScheme();
      }
    }

    private static class getSentences_argsStandardScheme extends StandardScheme<getSentences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSentences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONLL_DOC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.conllDoc = new CoNLLDocument();
                struct.conllDoc.read(iprot);
                struct.setConllDocIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSentences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.conllDoc != null) {
          oprot.writeFieldBegin(CONLL_DOC_FIELD_DESC);
          struct.conllDoc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSentences_argsTupleSchemeFactory implements SchemeFactory {
      public getSentences_argsTupleScheme getScheme() {
        return new getSentences_argsTupleScheme();
      }
    }

    private static class getSentences_argsTupleScheme extends TupleScheme<getSentences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConllDoc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConllDoc()) {
          struct.conllDoc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.conllDoc = new CoNLLDocument();
          struct.conllDoc.read(iprot);
          struct.setConllDocIsSet(true);
        }
      }
    }

  }

  public static class getSentences_result implements org.apache.thrift.TBase<getSentences_result, getSentences_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSentences_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSentences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSentences_resultTupleSchemeFactory());
    }

    public List<thrift.adept.common.Sentence> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.Sentence.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSentences_result.class, metaDataMap);
    }

    public getSentences_result() {
    }

    public getSentences_result(
      List<thrift.adept.common.Sentence> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSentences_result(getSentences_result other) {
      if (other.isSetSuccess()) {
        List<thrift.adept.common.Sentence> __this__success = new ArrayList<thrift.adept.common.Sentence>();
        for (thrift.adept.common.Sentence other_element : other.success) {
          __this__success.add(new thrift.adept.common.Sentence(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSentences_result deepCopy() {
      return new getSentences_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<thrift.adept.common.Sentence> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(thrift.adept.common.Sentence elem) {
      if (this.success == null) {
        this.success = new ArrayList<thrift.adept.common.Sentence>();
      }
      this.success.add(elem);
    }

    public List<thrift.adept.common.Sentence> getSuccess() {
      return this.success;
    }

    public getSentences_result setSuccess(List<thrift.adept.common.Sentence> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<thrift.adept.common.Sentence>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSentences_result)
        return this.equals((getSentences_result)that);
      return false;
    }

    public boolean equals(getSentences_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSentences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSentences_result typedOther = (getSentences_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSentences_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSentences_resultStandardSchemeFactory implements SchemeFactory {
      public getSentences_resultStandardScheme getScheme() {
        return new getSentences_resultStandardScheme();
      }
    }

    private static class getSentences_resultStandardScheme extends StandardScheme<getSentences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSentences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                  struct.success = new ArrayList<thrift.adept.common.Sentence>(_list190.size);
                  for (int _i191 = 0; _i191 < _list190.size; ++_i191)
                  {
                    thrift.adept.common.Sentence _elem192; // required
                    _elem192 = new thrift.adept.common.Sentence();
                    _elem192.read(iprot);
                    struct.success.add(_elem192);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSentences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (thrift.adept.common.Sentence _iter193 : struct.success)
            {
              _iter193.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSentences_resultTupleSchemeFactory implements SchemeFactory {
      public getSentences_resultTupleScheme getScheme() {
        return new getSentences_resultTupleScheme();
      }
    }

    private static class getSentences_resultTupleScheme extends TupleScheme<getSentences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (thrift.adept.common.Sentence _iter194 : struct.success)
            {
              _iter194.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<thrift.adept.common.Sentence>(_list195.size);
            for (int _i196 = 0; _i196 < _list195.size; ++_i196)
            {
              thrift.adept.common.Sentence _elem197; // required
              _elem197 = new thrift.adept.common.Sentence();
              _elem197.read(iprot);
              struct.success.add(_elem197);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readCoNLLFile_args implements org.apache.thrift.TBase<readCoNLLFile_args, readCoNLLFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readCoNLLFile_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readCoNLLFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readCoNLLFile_argsTupleSchemeFactory());
    }

    public String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readCoNLLFile_args.class, metaDataMap);
    }

    public readCoNLLFile_args() {
    }

    public readCoNLLFile_args(
      String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readCoNLLFile_args(readCoNLLFile_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public readCoNLLFile_args deepCopy() {
      return new readCoNLLFile_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public readCoNLLFile_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readCoNLLFile_args)
        return this.equals((readCoNLLFile_args)that);
      return false;
    }

    public boolean equals(readCoNLLFile_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readCoNLLFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readCoNLLFile_args typedOther = (readCoNLLFile_args)other;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readCoNLLFile_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readCoNLLFile_argsStandardSchemeFactory implements SchemeFactory {
      public readCoNLLFile_argsStandardScheme getScheme() {
        return new readCoNLLFile_argsStandardScheme();
      }
    }

    private static class readCoNLLFile_argsStandardScheme extends StandardScheme<readCoNLLFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readCoNLLFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readCoNLLFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readCoNLLFile_argsTupleSchemeFactory implements SchemeFactory {
      public readCoNLLFile_argsTupleScheme getScheme() {
        return new readCoNLLFile_argsTupleScheme();
      }
    }

    private static class readCoNLLFile_argsTupleScheme extends TupleScheme<readCoNLLFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readCoNLLFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readCoNLLFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class readCoNLLFile_result implements org.apache.thrift.TBase<readCoNLLFile_result, readCoNLLFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readCoNLLFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readCoNLLFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readCoNLLFile_resultTupleSchemeFactory());
    }

    public CoNLLDocument success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoNLLDocument.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readCoNLLFile_result.class, metaDataMap);
    }

    public readCoNLLFile_result() {
    }

    public readCoNLLFile_result(
      CoNLLDocument success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readCoNLLFile_result(readCoNLLFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new CoNLLDocument(other.success);
      }
    }

    public readCoNLLFile_result deepCopy() {
      return new readCoNLLFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CoNLLDocument getSuccess() {
      return this.success;
    }

    public readCoNLLFile_result setSuccess(CoNLLDocument success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CoNLLDocument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readCoNLLFile_result)
        return this.equals((readCoNLLFile_result)that);
      return false;
    }

    public boolean equals(readCoNLLFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readCoNLLFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readCoNLLFile_result typedOther = (readCoNLLFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readCoNLLFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readCoNLLFile_resultStandardSchemeFactory implements SchemeFactory {
      public readCoNLLFile_resultStandardScheme getScheme() {
        return new readCoNLLFile_resultStandardScheme();
      }
    }

    private static class readCoNLLFile_resultStandardScheme extends StandardScheme<readCoNLLFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readCoNLLFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CoNLLDocument();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readCoNLLFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readCoNLLFile_resultTupleSchemeFactory implements SchemeFactory {
      public readCoNLLFile_resultTupleScheme getScheme() {
        return new readCoNLLFile_resultTupleScheme();
      }
    }

    private static class readCoNLLFile_resultTupleScheme extends TupleScheme<readCoNLLFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readCoNLLFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readCoNLLFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CoNLLDocument();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CoNLLtoHltContentContainer_args implements org.apache.thrift.TBase<CoNLLtoHltContentContainer_args, CoNLLtoHltContentContainer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoNLLtoHltContentContainer_args");

    private static final org.apache.thrift.protocol.TField FILEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filepath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CoNLLtoHltContentContainer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CoNLLtoHltContentContainer_argsTupleSchemeFactory());
    }

    public String filepath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILEPATH((short)1, "filepath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILEPATH
            return FILEPATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILEPATH, new org.apache.thrift.meta_data.FieldMetaData("filepath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoNLLtoHltContentContainer_args.class, metaDataMap);
    }

    public CoNLLtoHltContentContainer_args() {
    }

    public CoNLLtoHltContentContainer_args(
      String filepath)
    {
      this();
      this.filepath = filepath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CoNLLtoHltContentContainer_args(CoNLLtoHltContentContainer_args other) {
      if (other.isSetFilepath()) {
        this.filepath = other.filepath;
      }
    }

    public CoNLLtoHltContentContainer_args deepCopy() {
      return new CoNLLtoHltContentContainer_args(this);
    }

    @Override
    public void clear() {
      this.filepath = null;
    }

    public String getFilepath() {
      return this.filepath;
    }

    public CoNLLtoHltContentContainer_args setFilepath(String filepath) {
      this.filepath = filepath;
      return this;
    }

    public void unsetFilepath() {
      this.filepath = null;
    }

    /** Returns true if field filepath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilepath() {
      return this.filepath != null;
    }

    public void setFilepathIsSet(boolean value) {
      if (!value) {
        this.filepath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILEPATH:
        if (value == null) {
          unsetFilepath();
        } else {
          setFilepath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILEPATH:
        return getFilepath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILEPATH:
        return isSetFilepath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CoNLLtoHltContentContainer_args)
        return this.equals((CoNLLtoHltContentContainer_args)that);
      return false;
    }

    public boolean equals(CoNLLtoHltContentContainer_args that) {
      if (that == null)
        return false;

      boolean this_present_filepath = true && this.isSetFilepath();
      boolean that_present_filepath = true && that.isSetFilepath();
      if (this_present_filepath || that_present_filepath) {
        if (!(this_present_filepath && that_present_filepath))
          return false;
        if (!this.filepath.equals(that.filepath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CoNLLtoHltContentContainer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CoNLLtoHltContentContainer_args typedOther = (CoNLLtoHltContentContainer_args)other;

      lastComparison = Boolean.valueOf(isSetFilepath()).compareTo(typedOther.isSetFilepath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilepath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filepath, typedOther.filepath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CoNLLtoHltContentContainer_args(");
      boolean first = true;

      sb.append("filepath:");
      if (this.filepath == null) {
        sb.append("null");
      } else {
        sb.append(this.filepath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CoNLLtoHltContentContainer_argsStandardSchemeFactory implements SchemeFactory {
      public CoNLLtoHltContentContainer_argsStandardScheme getScheme() {
        return new CoNLLtoHltContentContainer_argsStandardScheme();
      }
    }

    private static class CoNLLtoHltContentContainer_argsStandardScheme extends StandardScheme<CoNLLtoHltContentContainer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CoNLLtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILEPATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filepath = iprot.readString();
                struct.setFilepathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CoNLLtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filepath != null) {
          oprot.writeFieldBegin(FILEPATH_FIELD_DESC);
          oprot.writeString(struct.filepath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CoNLLtoHltContentContainer_argsTupleSchemeFactory implements SchemeFactory {
      public CoNLLtoHltContentContainer_argsTupleScheme getScheme() {
        return new CoNLLtoHltContentContainer_argsTupleScheme();
      }
    }

    private static class CoNLLtoHltContentContainer_argsTupleScheme extends TupleScheme<CoNLLtoHltContentContainer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CoNLLtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilepath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilepath()) {
          oprot.writeString(struct.filepath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CoNLLtoHltContentContainer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filepath = iprot.readString();
          struct.setFilepathIsSet(true);
        }
      }
    }

  }

  public static class CoNLLtoHltContentContainer_result implements org.apache.thrift.TBase<CoNLLtoHltContentContainer_result, CoNLLtoHltContentContainer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoNLLtoHltContentContainer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CoNLLtoHltContentContainer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CoNLLtoHltContentContainer_resultTupleSchemeFactory());
    }

    public thrift.adept.common.HltContentContainer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift.adept.common.HltContentContainer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoNLLtoHltContentContainer_result.class, metaDataMap);
    }

    public CoNLLtoHltContentContainer_result() {
    }

    public CoNLLtoHltContentContainer_result(
      thrift.adept.common.HltContentContainer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CoNLLtoHltContentContainer_result(CoNLLtoHltContentContainer_result other) {
      if (other.isSetSuccess()) {
        this.success = new thrift.adept.common.HltContentContainer(other.success);
      }
    }

    public CoNLLtoHltContentContainer_result deepCopy() {
      return new CoNLLtoHltContentContainer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public thrift.adept.common.HltContentContainer getSuccess() {
      return this.success;
    }

    public CoNLLtoHltContentContainer_result setSuccess(thrift.adept.common.HltContentContainer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((thrift.adept.common.HltContentContainer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CoNLLtoHltContentContainer_result)
        return this.equals((CoNLLtoHltContentContainer_result)that);
      return false;
    }

    public boolean equals(CoNLLtoHltContentContainer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CoNLLtoHltContentContainer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CoNLLtoHltContentContainer_result typedOther = (CoNLLtoHltContentContainer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CoNLLtoHltContentContainer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CoNLLtoHltContentContainer_resultStandardSchemeFactory implements SchemeFactory {
      public CoNLLtoHltContentContainer_resultStandardScheme getScheme() {
        return new CoNLLtoHltContentContainer_resultStandardScheme();
      }
    }

    private static class CoNLLtoHltContentContainer_resultStandardScheme extends StandardScheme<CoNLLtoHltContentContainer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CoNLLtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new thrift.adept.common.HltContentContainer();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CoNLLtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CoNLLtoHltContentContainer_resultTupleSchemeFactory implements SchemeFactory {
      public CoNLLtoHltContentContainer_resultTupleScheme getScheme() {
        return new CoNLLtoHltContentContainer_resultTupleScheme();
      }
    }

    private static class CoNLLtoHltContentContainer_resultTupleScheme extends TupleScheme<CoNLLtoHltContentContainer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CoNLLtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CoNLLtoHltContentContainer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new thrift.adept.common.HltContentContainer();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAbsolutePathFromClasspathOrFileSystem_args implements org.apache.thrift.TBase<getAbsolutePathFromClasspathOrFileSystem_args, getAbsolutePathFromClasspathOrFileSystem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAbsolutePathFromClasspathOrFileSystem_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAbsolutePathFromClasspathOrFileSystem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAbsolutePathFromClasspathOrFileSystem_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAbsolutePathFromClasspathOrFileSystem_args.class, metaDataMap);
    }

    public getAbsolutePathFromClasspathOrFileSystem_args() {
    }

    public getAbsolutePathFromClasspathOrFileSystem_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAbsolutePathFromClasspathOrFileSystem_args(getAbsolutePathFromClasspathOrFileSystem_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getAbsolutePathFromClasspathOrFileSystem_args deepCopy() {
      return new getAbsolutePathFromClasspathOrFileSystem_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public getAbsolutePathFromClasspathOrFileSystem_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAbsolutePathFromClasspathOrFileSystem_args)
        return this.equals((getAbsolutePathFromClasspathOrFileSystem_args)that);
      return false;
    }

    public boolean equals(getAbsolutePathFromClasspathOrFileSystem_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAbsolutePathFromClasspathOrFileSystem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAbsolutePathFromClasspathOrFileSystem_args typedOther = (getAbsolutePathFromClasspathOrFileSystem_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAbsolutePathFromClasspathOrFileSystem_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAbsolutePathFromClasspathOrFileSystem_argsStandardSchemeFactory implements SchemeFactory {
      public getAbsolutePathFromClasspathOrFileSystem_argsStandardScheme getScheme() {
        return new getAbsolutePathFromClasspathOrFileSystem_argsStandardScheme();
      }
    }

    private static class getAbsolutePathFromClasspathOrFileSystem_argsStandardScheme extends StandardScheme<getAbsolutePathFromClasspathOrFileSystem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAbsolutePathFromClasspathOrFileSystem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAbsolutePathFromClasspathOrFileSystem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAbsolutePathFromClasspathOrFileSystem_argsTupleSchemeFactory implements SchemeFactory {
      public getAbsolutePathFromClasspathOrFileSystem_argsTupleScheme getScheme() {
        return new getAbsolutePathFromClasspathOrFileSystem_argsTupleScheme();
      }
    }

    private static class getAbsolutePathFromClasspathOrFileSystem_argsTupleScheme extends TupleScheme<getAbsolutePathFromClasspathOrFileSystem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAbsolutePathFromClasspathOrFileSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAbsolutePathFromClasspathOrFileSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getAbsolutePathFromClasspathOrFileSystem_result implements org.apache.thrift.TBase<getAbsolutePathFromClasspathOrFileSystem_result, getAbsolutePathFromClasspathOrFileSystem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAbsolutePathFromClasspathOrFileSystem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAbsolutePathFromClasspathOrFileSystem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAbsolutePathFromClasspathOrFileSystem_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAbsolutePathFromClasspathOrFileSystem_result.class, metaDataMap);
    }

    public getAbsolutePathFromClasspathOrFileSystem_result() {
    }

    public getAbsolutePathFromClasspathOrFileSystem_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAbsolutePathFromClasspathOrFileSystem_result(getAbsolutePathFromClasspathOrFileSystem_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAbsolutePathFromClasspathOrFileSystem_result deepCopy() {
      return new getAbsolutePathFromClasspathOrFileSystem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getAbsolutePathFromClasspathOrFileSystem_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAbsolutePathFromClasspathOrFileSystem_result)
        return this.equals((getAbsolutePathFromClasspathOrFileSystem_result)that);
      return false;
    }

    public boolean equals(getAbsolutePathFromClasspathOrFileSystem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAbsolutePathFromClasspathOrFileSystem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAbsolutePathFromClasspathOrFileSystem_result typedOther = (getAbsolutePathFromClasspathOrFileSystem_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAbsolutePathFromClasspathOrFileSystem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAbsolutePathFromClasspathOrFileSystem_resultStandardSchemeFactory implements SchemeFactory {
      public getAbsolutePathFromClasspathOrFileSystem_resultStandardScheme getScheme() {
        return new getAbsolutePathFromClasspathOrFileSystem_resultStandardScheme();
      }
    }

    private static class getAbsolutePathFromClasspathOrFileSystem_resultStandardScheme extends StandardScheme<getAbsolutePathFromClasspathOrFileSystem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAbsolutePathFromClasspathOrFileSystem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAbsolutePathFromClasspathOrFileSystem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAbsolutePathFromClasspathOrFileSystem_resultTupleSchemeFactory implements SchemeFactory {
      public getAbsolutePathFromClasspathOrFileSystem_resultTupleScheme getScheme() {
        return new getAbsolutePathFromClasspathOrFileSystem_resultTupleScheme();
      }
    }

    private static class getAbsolutePathFromClasspathOrFileSystem_resultTupleScheme extends TupleScheme<getAbsolutePathFromClasspathOrFileSystem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAbsolutePathFromClasspathOrFileSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAbsolutePathFromClasspathOrFileSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readFileIntoString_args implements org.apache.thrift.TBase<readFileIntoString_args, readFileIntoString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFileIntoString_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFileIntoString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFileIntoString_argsTupleSchemeFactory());
    }

    public String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFileIntoString_args.class, metaDataMap);
    }

    public readFileIntoString_args() {
    }

    public readFileIntoString_args(
      String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFileIntoString_args(readFileIntoString_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public readFileIntoString_args deepCopy() {
      return new readFileIntoString_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public readFileIntoString_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFileIntoString_args)
        return this.equals((readFileIntoString_args)that);
      return false;
    }

    public boolean equals(readFileIntoString_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readFileIntoString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readFileIntoString_args typedOther = (readFileIntoString_args)other;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFileIntoString_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFileIntoString_argsStandardSchemeFactory implements SchemeFactory {
      public readFileIntoString_argsStandardScheme getScheme() {
        return new readFileIntoString_argsStandardScheme();
      }
    }

    private static class readFileIntoString_argsStandardScheme extends StandardScheme<readFileIntoString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFileIntoString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFileIntoString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFileIntoString_argsTupleSchemeFactory implements SchemeFactory {
      public readFileIntoString_argsTupleScheme getScheme() {
        return new readFileIntoString_argsTupleScheme();
      }
    }

    private static class readFileIntoString_argsTupleScheme extends TupleScheme<readFileIntoString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFileIntoString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFileIntoString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class readFileIntoString_result implements org.apache.thrift.TBase<readFileIntoString_result, readFileIntoString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFileIntoString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFileIntoString_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFileIntoString_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFileIntoString_result.class, metaDataMap);
    }

    public readFileIntoString_result() {
    }

    public readFileIntoString_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFileIntoString_result(readFileIntoString_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public readFileIntoString_result deepCopy() {
      return new readFileIntoString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public readFileIntoString_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFileIntoString_result)
        return this.equals((readFileIntoString_result)that);
      return false;
    }

    public boolean equals(readFileIntoString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readFileIntoString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readFileIntoString_result typedOther = (readFileIntoString_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFileIntoString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFileIntoString_resultStandardSchemeFactory implements SchemeFactory {
      public readFileIntoString_resultStandardScheme getScheme() {
        return new readFileIntoString_resultStandardScheme();
      }
    }

    private static class readFileIntoString_resultStandardScheme extends StandardScheme<readFileIntoString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFileIntoString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFileIntoString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFileIntoString_resultTupleSchemeFactory implements SchemeFactory {
      public readFileIntoString_resultTupleScheme getScheme() {
        return new readFileIntoString_resultTupleScheme();
      }
    }

    private static class readFileIntoString_resultTupleScheme extends TupleScheme<readFileIntoString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFileIntoString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFileIntoString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readFileIntoLines_args implements org.apache.thrift.TBase<readFileIntoLines_args, readFileIntoLines_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFileIntoLines_args");

    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("lines", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFileIntoLines_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFileIntoLines_argsTupleSchemeFactory());
    }

    public String filename; // required
    public List<String> lines; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME((short)1, "filename"),
      LINES((short)2, "lines");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME
            return FILENAME;
          case 2: // LINES
            return LINES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINES, new org.apache.thrift.meta_data.FieldMetaData("lines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFileIntoLines_args.class, metaDataMap);
    }

    public readFileIntoLines_args() {
    }

    public readFileIntoLines_args(
      String filename,
      List<String> lines)
    {
      this();
      this.filename = filename;
      this.lines = lines;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFileIntoLines_args(readFileIntoLines_args other) {
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
      if (other.isSetLines()) {
        List<String> __this__lines = new ArrayList<String>();
        for (String other_element : other.lines) {
          __this__lines.add(other_element);
        }
        this.lines = __this__lines;
      }
    }

    public readFileIntoLines_args deepCopy() {
      return new readFileIntoLines_args(this);
    }

    @Override
    public void clear() {
      this.filename = null;
      this.lines = null;
    }

    public String getFilename() {
      return this.filename;
    }

    public readFileIntoLines_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public int getLinesSize() {
      return (this.lines == null) ? 0 : this.lines.size();
    }

    public java.util.Iterator<String> getLinesIterator() {
      return (this.lines == null) ? null : this.lines.iterator();
    }

    public void addToLines(String elem) {
      if (this.lines == null) {
        this.lines = new ArrayList<String>();
      }
      this.lines.add(elem);
    }

    public List<String> getLines() {
      return this.lines;
    }

    public readFileIntoLines_args setLines(List<String> lines) {
      this.lines = lines;
      return this;
    }

    public void unsetLines() {
      this.lines = null;
    }

    /** Returns true if field lines is set (has been assigned a value) and false otherwise */
    public boolean isSetLines() {
      return this.lines != null;
    }

    public void setLinesIsSet(boolean value) {
      if (!value) {
        this.lines = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      case LINES:
        if (value == null) {
          unsetLines();
        } else {
          setLines((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME:
        return getFilename();

      case LINES:
        return getLines();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME:
        return isSetFilename();
      case LINES:
        return isSetLines();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFileIntoLines_args)
        return this.equals((readFileIntoLines_args)that);
      return false;
    }

    public boolean equals(readFileIntoLines_args that) {
      if (that == null)
        return false;

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      boolean this_present_lines = true && this.isSetLines();
      boolean that_present_lines = true && that.isSetLines();
      if (this_present_lines || that_present_lines) {
        if (!(this_present_lines && that_present_lines))
          return false;
        if (!this.lines.equals(that.lines))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readFileIntoLines_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readFileIntoLines_args typedOther = (readFileIntoLines_args)other;

      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLines()).compareTo(typedOther.isSetLines());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLines()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lines, typedOther.lines);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFileIntoLines_args(");
      boolean first = true;

      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lines:");
      if (this.lines == null) {
        sb.append("null");
      } else {
        sb.append(this.lines);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFileIntoLines_argsStandardSchemeFactory implements SchemeFactory {
      public readFileIntoLines_argsStandardScheme getScheme() {
        return new readFileIntoLines_argsStandardScheme();
      }
    }

    private static class readFileIntoLines_argsStandardScheme extends StandardScheme<readFileIntoLines_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFileIntoLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list198 = iprot.readListBegin();
                  struct.lines = new ArrayList<String>(_list198.size);
                  for (int _i199 = 0; _i199 < _list198.size; ++_i199)
                  {
                    String _elem200; // required
                    _elem200 = iprot.readString();
                    struct.lines.add(_elem200);
                  }
                  iprot.readListEnd();
                }
                struct.setLinesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFileIntoLines_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        if (struct.lines != null) {
          oprot.writeFieldBegin(LINES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lines.size()));
            for (String _iter201 : struct.lines)
            {
              oprot.writeString(_iter201);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFileIntoLines_argsTupleSchemeFactory implements SchemeFactory {
      public readFileIntoLines_argsTupleScheme getScheme() {
        return new readFileIntoLines_argsTupleScheme();
      }
    }

    private static class readFileIntoLines_argsTupleScheme extends TupleScheme<readFileIntoLines_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFileIntoLines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilename()) {
          optionals.set(0);
        }
        if (struct.isSetLines()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
        if (struct.isSetLines()) {
          {
            oprot.writeI32(struct.lines.size());
            for (String _iter202 : struct.lines)
            {
              oprot.writeString(_iter202);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFileIntoLines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list203 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.lines = new ArrayList<String>(_list203.size);
            for (int _i204 = 0; _i204 < _list203.size; ++_i204)
            {
              String _elem205; // required
              _elem205 = iprot.readString();
              struct.lines.add(_elem205);
            }
          }
          struct.setLinesIsSet(true);
        }
      }
    }

  }

  public static class readFileIntoLines_result implements org.apache.thrift.TBase<readFileIntoLines_result, readFileIntoLines_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFileIntoLines_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFileIntoLines_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFileIntoLines_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFileIntoLines_result.class, metaDataMap);
    }

    public readFileIntoLines_result() {
    }

    public readFileIntoLines_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFileIntoLines_result(readFileIntoLines_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public readFileIntoLines_result deepCopy() {
      return new readFileIntoLines_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public readFileIntoLines_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFileIntoLines_result)
        return this.equals((readFileIntoLines_result)that);
      return false;
    }

    public boolean equals(readFileIntoLines_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readFileIntoLines_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readFileIntoLines_result typedOther = (readFileIntoLines_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFileIntoLines_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFileIntoLines_resultStandardSchemeFactory implements SchemeFactory {
      public readFileIntoLines_resultStandardScheme getScheme() {
        return new readFileIntoLines_resultStandardScheme();
      }
    }

    private static class readFileIntoLines_resultStandardScheme extends StandardScheme<readFileIntoLines_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFileIntoLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFileIntoLines_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFileIntoLines_resultTupleSchemeFactory implements SchemeFactory {
      public readFileIntoLines_resultTupleScheme getScheme() {
        return new readFileIntoLines_resultTupleScheme();
      }
    }

    private static class readFileIntoLines_resultTupleScheme extends TupleScheme<readFileIntoLines_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFileIntoLines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFileIntoLines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fileToLines_args implements org.apache.thrift.TBase<fileToLines_args, fileToLines_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileToLines_args");

    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fileToLines_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fileToLines_argsTupleSchemeFactory());
    }

    public String filename; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME((short)1, "filename");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME
            return FILENAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileToLines_args.class, metaDataMap);
    }

    public fileToLines_args() {
    }

    public fileToLines_args(
      String filename)
    {
      this();
      this.filename = filename;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileToLines_args(fileToLines_args other) {
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
    }

    public fileToLines_args deepCopy() {
      return new fileToLines_args(this);
    }

    @Override
    public void clear() {
      this.filename = null;
    }

    public String getFilename() {
      return this.filename;
    }

    public fileToLines_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME:
        return getFilename();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME:
        return isSetFilename();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fileToLines_args)
        return this.equals((fileToLines_args)that);
      return false;
    }

    public boolean equals(fileToLines_args that) {
      if (that == null)
        return false;

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fileToLines_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fileToLines_args typedOther = (fileToLines_args)other;

      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fileToLines_args(");
      boolean first = true;

      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileToLines_argsStandardSchemeFactory implements SchemeFactory {
      public fileToLines_argsStandardScheme getScheme() {
        return new fileToLines_argsStandardScheme();
      }
    }

    private static class fileToLines_argsStandardScheme extends StandardScheme<fileToLines_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileToLines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileToLines_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileToLines_argsTupleSchemeFactory implements SchemeFactory {
      public fileToLines_argsTupleScheme getScheme() {
        return new fileToLines_argsTupleScheme();
      }
    }

    private static class fileToLines_argsTupleScheme extends TupleScheme<fileToLines_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileToLines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilename()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileToLines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
      }
    }

  }

  public static class fileToLines_result implements org.apache.thrift.TBase<fileToLines_result, fileToLines_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileToLines_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fileToLines_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fileToLines_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileToLines_result.class, metaDataMap);
    }

    public fileToLines_result() {
    }

    public fileToLines_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileToLines_result(fileToLines_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public fileToLines_result deepCopy() {
      return new fileToLines_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public fileToLines_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fileToLines_result)
        return this.equals((fileToLines_result)that);
      return false;
    }

    public boolean equals(fileToLines_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fileToLines_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fileToLines_result typedOther = (fileToLines_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fileToLines_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileToLines_resultStandardSchemeFactory implements SchemeFactory {
      public fileToLines_resultStandardScheme getScheme() {
        return new fileToLines_resultStandardScheme();
      }
    }

    private static class fileToLines_resultStandardScheme extends StandardScheme<fileToLines_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileToLines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list206 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list206.size);
                  for (int _i207 = 0; _i207 < _list206.size; ++_i207)
                  {
                    String _elem208; // required
                    _elem208 = iprot.readString();
                    struct.success.add(_elem208);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileToLines_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter209 : struct.success)
            {
              oprot.writeString(_iter209);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileToLines_resultTupleSchemeFactory implements SchemeFactory {
      public fileToLines_resultTupleScheme getScheme() {
        return new fileToLines_resultTupleScheme();
      }
    }

    private static class fileToLines_resultTupleScheme extends TupleScheme<fileToLines_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileToLines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter210 : struct.success)
            {
              oprot.writeString(_iter210);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileToLines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list211 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list211.size);
            for (int _i212 = 0; _i212 < _list211.size; ++_i212)
            {
              String _elem213; // required
              _elem213 = iprot.readString();
              struct.success.add(_elem213);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkSurrogates_args implements org.apache.thrift.TBase<checkSurrogates_args, checkSurrogates_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSurrogates_args");

    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkSurrogates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkSurrogates_argsTupleSchemeFactory());
    }

    public String text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT((short)1, "text");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSurrogates_args.class, metaDataMap);
    }

    public checkSurrogates_args() {
    }

    public checkSurrogates_args(
      String text)
    {
      this();
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkSurrogates_args(checkSurrogates_args other) {
      if (other.isSetText()) {
        this.text = other.text;
      }
    }

    public checkSurrogates_args deepCopy() {
      return new checkSurrogates_args(this);
    }

    @Override
    public void clear() {
      this.text = null;
    }

    public String getText() {
      return this.text;
    }

    public checkSurrogates_args setText(String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT:
        return getText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT:
        return isSetText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkSurrogates_args)
        return this.equals((checkSurrogates_args)that);
      return false;
    }

    public boolean equals(checkSurrogates_args that) {
      if (that == null)
        return false;

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkSurrogates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkSurrogates_args typedOther = (checkSurrogates_args)other;

      lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkSurrogates_args(");
      boolean first = true;

      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkSurrogates_argsStandardSchemeFactory implements SchemeFactory {
      public checkSurrogates_argsStandardScheme getScheme() {
        return new checkSurrogates_argsStandardScheme();
      }
    }

    private static class checkSurrogates_argsStandardScheme extends StandardScheme<checkSurrogates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkSurrogates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkSurrogates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkSurrogates_argsTupleSchemeFactory implements SchemeFactory {
      public checkSurrogates_argsTupleScheme getScheme() {
        return new checkSurrogates_argsTupleScheme();
      }
    }

    private static class checkSurrogates_argsTupleScheme extends TupleScheme<checkSurrogates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkSurrogates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkSurrogates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
      }
    }

  }

  public static class checkSurrogates_result implements org.apache.thrift.TBase<checkSurrogates_result, checkSurrogates_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSurrogates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkSurrogates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkSurrogates_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSurrogates_result.class, metaDataMap);
    }

    public checkSurrogates_result() {
    }

    public checkSurrogates_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkSurrogates_result(checkSurrogates_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checkSurrogates_result deepCopy() {
      return new checkSurrogates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public checkSurrogates_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkSurrogates_result)
        return this.equals((checkSurrogates_result)that);
      return false;
    }

    public boolean equals(checkSurrogates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkSurrogates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkSurrogates_result typedOther = (checkSurrogates_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkSurrogates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkSurrogates_resultStandardSchemeFactory implements SchemeFactory {
      public checkSurrogates_resultStandardScheme getScheme() {
        return new checkSurrogates_resultStandardScheme();
      }
    }

    private static class checkSurrogates_resultStandardScheme extends StandardScheme<checkSurrogates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkSurrogates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkSurrogates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkSurrogates_resultTupleSchemeFactory implements SchemeFactory {
      public checkSurrogates_resultTupleScheme getScheme() {
        return new checkSurrogates_resultTupleScheme();
      }
    }

    private static class checkSurrogates_resultTupleScheme extends TupleScheme<checkSurrogates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkSurrogates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkSurrogates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
